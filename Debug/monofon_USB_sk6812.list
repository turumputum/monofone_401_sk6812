
monofon_USB_sk6812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011244  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  080113e8  080113e8  000213e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011dc0  08011dc0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08011dc0  08011dc0  00021dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011dc8  08011dc8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011dc8  08011dc8  00021dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011dcc  08011dcc  00021dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08011dd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ae4  200001fc  08011fcc  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00009000  20005ce0  08011fcc  00035ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bc1e  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b51  00000000  00000000  0005be4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d10  00000000  00000000  000619a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a68  00000000  00000000  000636b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fd6b  00000000  00000000  00065118  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001eb09  00000000  00000000  00084e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009dc82  00000000  00000000  000a398c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014160e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008298  00000000  00000000  0014168c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080113cc 	.word	0x080113cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	080113cc 	.word	0x080113cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b972 	b.w	8000f18 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	4688      	mov	r8, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14b      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4615      	mov	r5, r2
 8000c5e:	d967      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b14a      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c66:	f1c2 0720 	rsb	r7, r2, #32
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c72:	4095      	lsls	r5, r2
 8000c74:	ea47 0803 	orr.w	r8, r7, r3
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c84:	fa1f fc85 	uxth.w	ip, r5
 8000c88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c90:	fb07 f10c 	mul.w	r1, r7, ip
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18eb      	adds	r3, r5, r3
 8000c9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c9e:	f080 811b 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8118 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca8:	3f02      	subs	r7, #2
 8000caa:	442b      	add	r3, r5
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc0:	45a4      	cmp	ip, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x290>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x290>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	442c      	add	r4, r5
 8000cd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cdc:	eba4 040c 	sub.w	r4, r4, ip
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	b11e      	cbz	r6, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cec:	4639      	mov	r1, r7
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xbe>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	f000 80eb 	beq.w	8000ed2 <__udivmoddi4+0x286>
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000d02:	4638      	mov	r0, r7
 8000d04:	4639      	mov	r1, r7
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f783 	clz	r7, r3
 8000d0e:	2f00      	cmp	r7, #0
 8000d10:	d147      	bne.n	8000da2 <__udivmoddi4+0x156>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd0>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80fa 	bhi.w	8000f10 <__udivmoddi4+0x2c4>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	4698      	mov	r8, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa0>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xe8>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 808f 	bne.w	8000e5c <__udivmoddi4+0x210>
 8000d3e:	1b49      	subs	r1, r1, r5
 8000d40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d44:	fa1f f885 	uxth.w	r8, r5
 8000d48:	2701      	movs	r7, #1
 8000d4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb08 f10c 	mul.w	r1, r8, ip
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d60:	18eb      	adds	r3, r5, r3
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x122>
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	f200 80cd 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1a59      	subs	r1, r3, r1
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x14c>
 8000d88:	192c      	adds	r4, r5, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x14a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80b6 	bhi.w	8000f02 <__udivmoddi4+0x2b6>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e79f      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000da2:	f1c7 0c20 	rsb	ip, r7, #32
 8000da6:	40bb      	lsls	r3, r7
 8000da8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000db0:	fa01 f407 	lsl.w	r4, r1, r7
 8000db4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000db8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dc0:	4325      	orrs	r5, r4
 8000dc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dc6:	0c2c      	lsrs	r4, r5, #16
 8000dc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dcc:	fa1f fa8e 	uxth.w	sl, lr
 8000dd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	fa02 f207 	lsl.w	r2, r2, r7
 8000dde:	fa00 f107 	lsl.w	r1, r0, r7
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000de4:	eb1e 0303 	adds.w	r3, lr, r3
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	f080 8087 	bcs.w	8000efe <__udivmoddi4+0x2b2>
 8000df0:	429c      	cmp	r4, r3
 8000df2:	f240 8084 	bls.w	8000efe <__udivmoddi4+0x2b2>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4473      	add	r3, lr
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e10:	45a2      	cmp	sl, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1da>
 8000e14:	eb1e 0404 	adds.w	r4, lr, r4
 8000e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1c:	d26b      	bcs.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e1e:	45a2      	cmp	sl, r4
 8000e20:	d969      	bls.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4474      	add	r4, lr
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	eba4 040a 	sub.w	r4, r4, sl
 8000e32:	454c      	cmp	r4, r9
 8000e34:	46c2      	mov	sl, r8
 8000e36:	464b      	mov	r3, r9
 8000e38:	d354      	bcc.n	8000ee4 <__udivmoddi4+0x298>
 8000e3a:	d051      	beq.n	8000ee0 <__udivmoddi4+0x294>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d069      	beq.n	8000f14 <__udivmoddi4+0x2c8>
 8000e40:	ebb1 050a 	subs.w	r5, r1, sl
 8000e44:	eb64 0403 	sbc.w	r4, r4, r3
 8000e48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e4c:	40fd      	lsrs	r5, r7
 8000e4e:	40fc      	lsrs	r4, r7
 8000e50:	ea4c 0505 	orr.w	r5, ip, r5
 8000e54:	e9c6 5400 	strd	r5, r4, [r6]
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e747      	b.n	8000cec <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f703 	lsr.w	r7, r0, r3
 8000e64:	4095      	lsls	r5, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e72:	4338      	orrs	r0, r7
 8000e74:	0c01      	lsrs	r1, r0, #16
 8000e76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e7a:	fa1f f885 	uxth.w	r8, r5
 8000e7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e86:	fb07 f308 	mul.w	r3, r7, r8
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x256>
 8000e92:	1869      	adds	r1, r5, r1
 8000e94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e98:	d22f      	bcs.n	8000efa <__udivmoddi4+0x2ae>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d92d      	bls.n	8000efa <__udivmoddi4+0x2ae>
 8000e9e:	3f02      	subs	r7, #2
 8000ea0:	4429      	add	r1, r5
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	b281      	uxth	r1, r0
 8000ea6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eaa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb00 f308 	mul.w	r3, r0, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x27e>
 8000eba:	1869      	adds	r1, r5, r1
 8000ebc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec0:	d217      	bcs.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d915      	bls.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4429      	add	r1, r5
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ed0:	e73b      	b.n	8000d4a <__udivmoddi4+0xfe>
 8000ed2:	4637      	mov	r7, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e709      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed8:	4607      	mov	r7, r0
 8000eda:	e6e7      	b.n	8000cac <__udivmoddi4+0x60>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000ee0:	4541      	cmp	r1, r8
 8000ee2:	d2ab      	bcs.n	8000e3c <__udivmoddi4+0x1f0>
 8000ee4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ee8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eec:	3801      	subs	r0, #1
 8000eee:	4613      	mov	r3, r2
 8000ef0:	e7a4      	b.n	8000e3c <__udivmoddi4+0x1f0>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	e7e9      	b.n	8000eca <__udivmoddi4+0x27e>
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	e795      	b.n	8000e26 <__udivmoddi4+0x1da>
 8000efa:	4667      	mov	r7, ip
 8000efc:	e7d1      	b.n	8000ea2 <__udivmoddi4+0x256>
 8000efe:	4681      	mov	r9, r0
 8000f00:	e77c      	b.n	8000dfc <__udivmoddi4+0x1b0>
 8000f02:	3802      	subs	r0, #2
 8000f04:	442c      	add	r4, r5
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0x14c>
 8000f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f0c:	442b      	add	r3, r5
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f10:	4638      	mov	r0, r7
 8000f12:	e708      	b.n	8000d26 <__udivmoddi4+0xda>
 8000f14:	4637      	mov	r7, r6
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0xa0>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 fd19 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f00d f93c 	bl	800e1cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fd31 	bl	80019e6 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 fcf9 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000128 	.word	0x20000128
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000004 	.word	0x20000004
 8000fe4:	20000a34 	.word	0x20000a34

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000a34 	.word	0x20000a34

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_Delay+0x40>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e033      	b.n	80010c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	2b00      	cmp	r3, #0
 8001060:	d109      	bne.n	8001076 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f00d f8da 	bl	800e21c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800108a:	f023 0302 	bic.w	r3, r3, #2
 800108e:	f043 0202 	orr.w	r2, r3, #2
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 faa4 	bl	80015e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f023 0303 	bic.w	r3, r3, #3
 80010aa:	f043 0201 	orr.w	r2, r3, #1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
 80010b2:	e001      	b.n	80010b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Start+0x1a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e08a      	b.n	80011fc <HAL_ADC_Start+0x130>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d018      	beq.n	800112e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_ADC_Start+0x13c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a3e      	ldr	r2, [pc, #248]	; (800120c <HAL_ADC_Start+0x140>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	0c9a      	lsrs	r2, r3, #18
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001120:	e002      	b.n	8001128 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3b01      	subs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d15e      	bne.n	80011fa <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001166:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800117a:	d106      	bne.n	800118a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f023 0206 	bic.w	r2, r3, #6
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	645a      	str	r2, [r3, #68]	; 0x44
 8001188:	e002      	b.n	8001190 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_ADC_Start+0x144>)
 800119a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10f      	bne.n	80011d2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d11c      	bne.n	80011fa <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	e013      	b.n	80011fa <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_ADC_Start+0x148>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d10e      	bne.n	80011fa <HAL_ADC_Start+0x12e>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d107      	bne.n	80011fa <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000128 	.word	0x20000128
 800120c:	431bde83 	.word	0x431bde83
 8001210:	40012300 	.word	0x40012300
 8001214:	40012000 	.word	0x40012000

08001218 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_ADC_Stop+0x16>
 800122a:	2302      	movs	r3, #2
 800122c:	e021      	b.n	8001272 <HAL_ADC_Stop+0x5a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d109      	bne.n	8001268 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129a:	d113      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012aa:	d10b      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f043 0220 	orr.w	r2, r3, #32
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e05c      	b.n	800137e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012c4:	f7ff fe90 	bl	8000fe8 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012ca:	e01a      	b.n	8001302 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d2:	d016      	beq.n	8001302 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <HAL_ADC_PollForConversion+0x6c>
 80012da:	f7ff fe85 	bl	8000fe8 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d20b      	bcs.n	8001302 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f043 0204 	orr.w	r2, r3, #4
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e03d      	b.n	800137e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b02      	cmp	r3, #2
 800130e:	d1dd      	bne.n	80012cc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f06f 0212 	mvn.w	r2, #18
 8001318:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d123      	bne.n	800137c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001338:	2b00      	cmp	r3, #0
 800133a:	d11f      	bne.n	800137c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001354:	2b00      	cmp	r3, #0
 8001356:	d111      	bne.n	800137c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1c>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e105      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x228>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	d925      	bls.n	8001418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68d9      	ldr	r1, [r3, #12]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	3b1e      	subs	r3, #30
 80013e2:	2207      	movs	r2, #7
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43da      	mvns	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	400a      	ands	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68d9      	ldr	r1, [r3, #12]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	4603      	mov	r3, r0
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4403      	add	r3, r0
 800140a:	3b1e      	subs	r3, #30
 800140c:	409a      	lsls	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	e022      	b.n	800145e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6919      	ldr	r1, [r3, #16]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	2207      	movs	r2, #7
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	400a      	ands	r2, r1
 800143a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6919      	ldr	r1, [r3, #16]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	4603      	mov	r3, r0
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4403      	add	r3, r0
 8001454:	409a      	lsls	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b06      	cmp	r3, #6
 8001464:	d824      	bhi.n	80014b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3b05      	subs	r3, #5
 8001478:	221f      	movs	r2, #31
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	400a      	ands	r2, r1
 8001486:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	3b05      	subs	r3, #5
 80014a2:	fa00 f203 	lsl.w	r2, r0, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
 80014ae:	e04c      	b.n	800154a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b0c      	cmp	r3, #12
 80014b6:	d824      	bhi.n	8001502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3b23      	subs	r3, #35	; 0x23
 80014ca:	221f      	movs	r2, #31
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43da      	mvns	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	400a      	ands	r2, r1
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3b23      	subs	r3, #35	; 0x23
 80014f4:	fa00 f203 	lsl.w	r2, r0, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001500:	e023      	b.n	800154a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	3b41      	subs	r3, #65	; 0x41
 8001514:	221f      	movs	r2, #31
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	400a      	ands	r2, r1
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	3b41      	subs	r3, #65	; 0x41
 800153e:	fa00 f203 	lsl.w	r2, r0, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_ADC_ConfigChannel+0x234>)
 800154c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_ADC_ConfigChannel+0x238>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d109      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1cc>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b12      	cmp	r3, #18
 800155e:	d105      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_ADC_ConfigChannel+0x238>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d123      	bne.n	80015be <HAL_ADC_ConfigChannel+0x21e>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b10      	cmp	r3, #16
 800157c:	d003      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x1e6>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b11      	cmp	r3, #17
 8001584:	d11b      	bne.n	80015be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b10      	cmp	r3, #16
 8001598:	d111      	bne.n	80015be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_ADC_ConfigChannel+0x23c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_ADC_ConfigChannel+0x240>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9a      	lsrs	r2, r3, #18
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	e002      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40012300 	.word	0x40012300
 80015d8:	40012000 	.word	0x40012000
 80015dc:	20000128 	.word	0x20000128
 80015e0:	431bde83 	.word	0x431bde83

080015e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ec:	4b79      	ldr	r3, [pc, #484]	; (80017d4 <ADC_Init+0x1f0>)
 80015ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	021a      	lsls	r2, r3, #8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800163c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <ADC_Init+0x1f4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d022      	beq.n	80016c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800168a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6899      	ldr	r1, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e00f      	b.n	80016e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0202 	bic.w	r2, r2, #2
 80016f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6899      	ldr	r1, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
 80016fc:	005a      	lsls	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01b      	beq.n	8001748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800171e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800172e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6859      	ldr	r1, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	3b01      	subs	r3, #1
 800173c:	035a      	lsls	r2, r3, #13
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	e007      	b.n	8001758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	3b01      	subs	r3, #1
 8001774:	051a      	lsls	r2, r3, #20
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800178c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6899      	ldr	r1, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800179a:	025a      	lsls	r2, r3, #9
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6899      	ldr	r1, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	029a      	lsls	r2, r3, #10
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	0f000001 	.word	0x0f000001

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff29 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff3e 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff31 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa2 	bl	8001938 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff faec 	bl	8000fe8 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e099      	b.n	8001b50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3c:	e00f      	b.n	8001a5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a3e:	f7ff fad3 	bl	8000fe8 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d908      	bls.n	8001a5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e078      	b.n	8001b50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e8      	bne.n	8001a3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <HAL_DMA_Init+0x158>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d107      	bne.n	8001ac8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f023 0307 	bic.w	r3, r3, #7
 8001ade:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d117      	bne.n	8001b22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00e      	beq.n	8001b22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fadf 	bl	80020c8 <DMA_CheckFifoParam>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2240      	movs	r2, #64	; 0x40
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e016      	b.n	8001b50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fa96 	bl	800205c <DMA_CalcBaseAndBitshift>
 8001b30:	4603      	mov	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	223f      	movs	r2, #63	; 0x3f
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	f010803f 	.word	0xf010803f

08001b5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_DMA_Start_IT+0x26>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e040      	b.n	8001c04 <HAL_DMA_Start_IT+0xa8>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d12f      	bne.n	8001bf6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fa28 	bl	8002000 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	223f      	movs	r2, #63	; 0x3f
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0216 	orr.w	r2, r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0208 	orr.w	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e005      	b.n	8001c02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c1a:	f7ff f9e5 	bl	8000fe8 <HAL_GetTick>
 8001c1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d008      	beq.n	8001c3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e052      	b.n	8001ce4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0216 	bic.w	r2, r2, #22
 8001c4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <HAL_DMA_Abort+0x62>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0208 	bic.w	r2, r2, #8
 8001c7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8e:	e013      	b.n	8001cb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c90:	f7ff f9aa 	bl	8000fe8 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d90c      	bls.n	8001cb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2203      	movs	r2, #3
 8001cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e015      	b.n	8001ce4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1e4      	bne.n	8001c90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cca:	223f      	movs	r2, #63	; 0x3f
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf8:	4b92      	ldr	r3, [pc, #584]	; (8001f44 <HAL_DMA_IRQHandler+0x258>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a92      	ldr	r2, [pc, #584]	; (8001f48 <HAL_DMA_IRQHandler+0x25c>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0a9b      	lsrs	r3, r3, #10
 8001d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2208      	movs	r2, #8
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01a      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0204 	bic.w	r2, r2, #4
 8001d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	2208      	movs	r2, #8
 8001d46:	409a      	lsls	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d012      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d86:	f043 0202 	orr.w	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	2204      	movs	r2, #4
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	2204      	movs	r2, #4
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	2210      	movs	r2, #16
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d043      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03c      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2210      	movs	r2, #16
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d018      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d024      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
 8001e1a:	e01f      	b.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e016      	b.n	8001e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d107      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0208 	bic.w	r2, r2, #8
 8001e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2220      	movs	r2, #32
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 808e 	beq.w	8001f8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8086 	beq.w	8001f8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	2220      	movs	r2, #32
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d136      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0216 	bic.w	r2, r2, #22
 8001ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <HAL_DMA_IRQHandler+0x1da>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0208 	bic.w	r2, r2, #8
 8001ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	223f      	movs	r2, #63	; 0x3f
 8001edc:	409a      	lsls	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d07d      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
        }
        return;
 8001f02:	e078      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01c      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d108      	bne.n	8001f32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d030      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
 8001f30:	e02b      	b.n	8001f8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d027      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
 8001f42:	e022      	b.n	8001f8a <HAL_DMA_IRQHandler+0x29e>
 8001f44:	20000128 	.word	0x20000128
 8001f48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0210 	bic.w	r2, r2, #16
 8001f68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d032      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d022      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d307      	bcc.n	8001fd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f2      	bne.n	8001fb6 <HAL_DMA_IRQHandler+0x2ca>
 8001fd0:	e000      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e000      	b.n	8001ff8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ff6:	bf00      	nop
    }
  }
}
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop

08002000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800201c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d108      	bne.n	8002040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800203e:	e007      	b.n	8002050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3b10      	subs	r3, #16
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <DMA_CalcBaseAndBitshift+0x64>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002076:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d909      	bls.n	800209e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	1d1a      	adds	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	659a      	str	r2, [r3, #88]	; 0x58
 800209c:	e007      	b.n	80020ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	aaaaaaab 	.word	0xaaaaaaab
 80020c4:	080115e4 	.word	0x080115e4

080020c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11f      	bne.n	8002122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d855      	bhi.n	8002194 <DMA_CheckFifoParam+0xcc>
 80020e8:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <DMA_CheckFifoParam+0x28>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002113 	.word	0x08002113
 80020f8:	08002101 	.word	0x08002101
 80020fc:	08002195 	.word	0x08002195
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d045      	beq.n	8002198 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002110:	e042      	b.n	8002198 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800211a:	d13f      	bne.n	800219c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002120:	e03c      	b.n	800219c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212a:	d121      	bne.n	8002170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d836      	bhi.n	80021a0 <DMA_CheckFifoParam+0xd8>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <DMA_CheckFifoParam+0x70>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002149 	.word	0x08002149
 800213c:	0800214f 	.word	0x0800214f
 8002140:	08002149 	.word	0x08002149
 8002144:	08002161 	.word	0x08002161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e02f      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d024      	beq.n	80021a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215e:	e021      	b.n	80021a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002168:	d11e      	bne.n	80021a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800216e:	e01b      	b.n	80021a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d902      	bls.n	800217c <DMA_CheckFifoParam+0xb4>
 8002176:	2b03      	cmp	r3, #3
 8002178:	d003      	beq.n	8002182 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800217a:	e018      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      break;
 8002180:	e015      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00e      	beq.n	80021ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
      break;
 8002192:	e00b      	b.n	80021ac <DMA_CheckFifoParam+0xe4>
      break;
 8002194:	bf00      	nop
 8002196:	e00a      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      break;
 8002198:	bf00      	nop
 800219a:	e008      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      break;
 800219c:	bf00      	nop
 800219e:	e006      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      break;
 80021a0:	bf00      	nop
 80021a2:	e004      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      break;
 80021a4:	bf00      	nop
 80021a6:	e002      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      break;   
 80021a8:	bf00      	nop
 80021aa:	e000      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      break;
 80021ac:	bf00      	nop
    }
  } 
  
  return status; 
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e159      	b.n	800248c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	f040 8148 	bne.w	8002486 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d00b      	beq.n	8002216 <HAL_GPIO_Init+0x5a>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800220a:	2b11      	cmp	r3, #17
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b12      	cmp	r3, #18
 8002214:	d130      	bne.n	8002278 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0201 	and.w	r2, r3, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0xfc>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b12      	cmp	r3, #18
 80022b6:	d123      	bne.n	8002300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0203 	and.w	r2, r3, #3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a2 	beq.w	8002486 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <HAL_GPIO_Init+0x2e4>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a55      	ldr	r2, [pc, #340]	; (80024a0 <HAL_GPIO_Init+0x2e4>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_GPIO_Init+0x2e4>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235e:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <HAL_GPIO_Init+0x2e8>)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_GPIO_Init+0x2ec>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d019      	beq.n	80023be <HAL_GPIO_Init+0x202>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a47      	ldr	r2, [pc, #284]	; (80024ac <HAL_GPIO_Init+0x2f0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0x1fe>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_GPIO_Init+0x2f4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00d      	beq.n	80023b6 <HAL_GPIO_Init+0x1fa>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a45      	ldr	r2, [pc, #276]	; (80024b4 <HAL_GPIO_Init+0x2f8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x1f6>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a44      	ldr	r2, [pc, #272]	; (80024b8 <HAL_GPIO_Init+0x2fc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x1f2>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e008      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023b2:	2303      	movs	r3, #3
 80023b4:	e004      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023be:	2300      	movs	r3, #0
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f002 0203 	and.w	r2, r2, #3
 80023c6:	0092      	lsls	r2, r2, #2
 80023c8:	4093      	lsls	r3, r2
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d0:	4934      	ldr	r1, [pc, #208]	; (80024a4 <HAL_GPIO_Init+0x2e8>)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_GPIO_Init+0x300>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002402:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <HAL_GPIO_Init+0x300>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002408:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <HAL_GPIO_Init+0x300>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800242c:	4a23      	ldr	r2, [pc, #140]	; (80024bc <HAL_GPIO_Init+0x300>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_GPIO_Init+0x300>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_GPIO_Init+0x300>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_GPIO_Init+0x300>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_GPIO_Init+0x300>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3301      	adds	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	f67f aea2 	bls.w	80021d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002494:	bf00      	nop
 8002496:	3724      	adds	r7, #36	; 0x24
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40013c00 	.word	0x40013c00

080024c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	887b      	ldrh	r3, [r7, #2]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e001      	b.n	80024e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e128      	b.n	8002754 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a90      	ldr	r2, [pc, #576]	; (800275c <HAL_I2S_Init+0x26c>)
 800251a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f00b fec1 	bl	800e2a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002538:	f023 030f 	bic.w	r3, r3, #15
 800253c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2202      	movs	r2, #2
 8002544:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d060      	beq.n	8002610 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002556:	2310      	movs	r3, #16
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e001      	b.n	8002560 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b20      	cmp	r3, #32
 8002566:	d802      	bhi.n	800256e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800256e:	2001      	movs	r0, #1
 8002570:	f002 fe30 	bl	80051d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002574:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257e:	d125      	bne.n	80025cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	461a      	mov	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	3305      	adds	r3, #5
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	e01f      	b.n	80025ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	461a      	mov	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	3305      	adds	r3, #5
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	e00e      	b.n	80025ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	461a      	mov	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	3305      	adds	r3, #5
 80025e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4a5c      	ldr	r2, [pc, #368]	; (8002760 <HAL_I2S_Init+0x270>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	08db      	lsrs	r3, r3, #3
 80025f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	e003      	b.n	8002618 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002610:	2302      	movs	r3, #2
 8002612:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d902      	bls.n	8002624 <HAL_I2S_Init+0x134>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	2bff      	cmp	r3, #255	; 0xff
 8002622:	d907      	bls.n	8002634 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	f043 0210 	orr.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e08f      	b.n	8002754 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	ea42 0103 	orr.w	r1, r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	430a      	orrs	r2, r1
 8002646:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002652:	f023 030f 	bic.w	r3, r3, #15
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6851      	ldr	r1, [r2, #4]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6892      	ldr	r2, [r2, #8]
 800265e:	4311      	orrs	r1, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68d2      	ldr	r2, [r2, #12]
 8002664:	4311      	orrs	r1, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6992      	ldr	r2, [r2, #24]
 800266a:	430a      	orrs	r2, r1
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002676:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d161      	bne.n	8002744 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a38      	ldr	r2, [pc, #224]	; (8002764 <HAL_I2S_Init+0x274>)
 8002684:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a37      	ldr	r2, [pc, #220]	; (8002768 <HAL_I2S_Init+0x278>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_I2S_Init+0x1a4>
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_I2S_Init+0x27c>)
 8002692:	e001      	b.n	8002698 <HAL_I2S_Init+0x1a8>
 8002694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	4932      	ldr	r1, [pc, #200]	; (8002768 <HAL_I2S_Init+0x278>)
 80026a0:	428a      	cmp	r2, r1
 80026a2:	d101      	bne.n	80026a8 <HAL_I2S_Init+0x1b8>
 80026a4:	4a31      	ldr	r2, [pc, #196]	; (800276c <HAL_I2S_Init+0x27c>)
 80026a6:	e001      	b.n	80026ac <HAL_I2S_Init+0x1bc>
 80026a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80026ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026b0:	f023 030f 	bic.w	r3, r3, #15
 80026b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2b      	ldr	r2, [pc, #172]	; (8002768 <HAL_I2S_Init+0x278>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_I2S_Init+0x1d4>
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <HAL_I2S_Init+0x27c>)
 80026c2:	e001      	b.n	80026c8 <HAL_I2S_Init+0x1d8>
 80026c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026c8:	2202      	movs	r2, #2
 80026ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a25      	ldr	r2, [pc, #148]	; (8002768 <HAL_I2S_Init+0x278>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_I2S_Init+0x1ea>
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <HAL_I2S_Init+0x27c>)
 80026d8:	e001      	b.n	80026de <HAL_I2S_Init+0x1ee>
 80026da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ea:	d003      	beq.n	80026f4 <HAL_I2S_Init+0x204>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	e001      	b.n	8002700 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	b299      	uxth	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002716:	4303      	orrs	r3, r0
 8002718:	b29b      	uxth	r3, r3
 800271a:	430b      	orrs	r3, r1
 800271c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800271e:	4313      	orrs	r3, r2
 8002720:	b29a      	uxth	r2, r3
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	4313      	orrs	r3, r2
 8002726:	b29b      	uxth	r3, r3
 8002728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800272c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <HAL_I2S_Init+0x278>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_I2S_Init+0x24c>
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_I2S_Init+0x27c>)
 800273a:	e001      	b.n	8002740 <HAL_I2S_Init+0x250>
 800273c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002740:	897a      	ldrh	r2, [r7, #10]
 8002742:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	08002e2d 	.word	0x08002e2d
 8002760:	cccccccd 	.word	0xcccccccd
 8002764:	08002fb5 	.word	0x08002fb5
 8002768:	40003800 	.word	0x40003800
 800276c:	40003400 	.word	0x40003400

08002770 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_I2S_Transmit_DMA+0x1a>
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e08e      	b.n	80028ac <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_I2S_Transmit_DMA+0x2e>
 800279a:	2302      	movs	r3, #2
 800279c:	e086      	b.n	80028ac <HAL_I2S_Transmit_DMA+0x13c>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d005      	beq.n	80027be <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	e076      	b.n	80028ac <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d002      	beq.n	80027ea <HAL_I2S_Transmit_DMA+0x7a>
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d10a      	bne.n	8002800 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027fe:	e005      	b.n	800280c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_I2S_Transmit_DMA+0x144>)
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_I2S_Transmit_DMA+0x148>)
 800281a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	4a26      	ldr	r2, [pc, #152]	; (80028bc <HAL_I2S_Transmit_DMA+0x14c>)
 8002822:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800282c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002834:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800283c:	f7ff f98e 	bl	8001b5c <HAL_DMA_Start_IT>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00f      	beq.n	8002866 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f043 0208 	orr.w	r2, r3, #8
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e022      	b.n	80028ac <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002870:	2b00      	cmp	r3, #0
 8002872:	d107      	bne.n	8002884 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002882:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d107      	bne.n	80028a2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0202 	orr.w	r2, r2, #2
 80028a0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	08002d0b 	.word	0x08002d0b
 80028b8:	08002cc9 	.word	0x08002cc9
 80028bc:	08002d27 	.word	0x08002d27

080028c0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d4:	d004      	beq.n	80028e0 <HAL_I2S_DMAStop+0x20>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80d1 	bne.w	8002a82 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00f      	beq.n	8002908 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff f98d 	bl	8001c0c <HAL_DMA_Abort>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f043 0208 	orr.w	r2, r3, #8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002908:	2364      	movs	r3, #100	; 0x64
 800290a:	2201      	movs	r2, #1
 800290c:	2102      	movs	r1, #2
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fb16 	bl	8002f40 <I2S_WaitFlagStateUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002932:	2364      	movs	r3, #100	; 0x64
 8002934:	2200      	movs	r2, #0
 8002936:	2180      	movs	r1, #128	; 0x80
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fb01 	bl	8002f40 <I2S_WaitFlagStateUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00b      	beq.n	800295c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0202 	bic.w	r2, r2, #2
 8002988:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b05      	cmp	r3, #5
 8002994:	f040 8165 	bne.w	8002c62 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00f      	beq.n	80029c0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f931 	bl	8001c0c <HAL_DMA_Abort>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f043 0208 	orr.w	r2, r3, #8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a8a      	ldr	r2, [pc, #552]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_I2S_DMAStop+0x10e>
 80029ca:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 80029cc:	e001      	b.n	80029d2 <HAL_I2S_DMAStop+0x112>
 80029ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4985      	ldr	r1, [pc, #532]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 80029da:	428b      	cmp	r3, r1
 80029dc:	d101      	bne.n	80029e2 <HAL_I2S_DMAStop+0x122>
 80029de:	4b85      	ldr	r3, [pc, #532]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 80029e0:	e001      	b.n	80029e6 <HAL_I2S_DMAStop+0x126>
 80029e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ea:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a7e      	ldr	r2, [pc, #504]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_I2S_DMAStop+0x13e>
 80029fa:	4b7e      	ldr	r3, [pc, #504]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 80029fc:	e001      	b.n	8002a02 <HAL_I2S_DMAStop+0x142>
 80029fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a79      	ldr	r2, [pc, #484]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_I2S_DMAStop+0x154>
 8002a10:	4b78      	ldr	r3, [pc, #480]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002a12:	e001      	b.n	8002a18 <HAL_I2S_DMAStop+0x158>
 8002a14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a73      	ldr	r2, [pc, #460]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_I2S_DMAStop+0x16c>
 8002a28:	4b72      	ldr	r3, [pc, #456]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002a2a:	e001      	b.n	8002a30 <HAL_I2S_DMAStop+0x170>
 8002a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	496e      	ldr	r1, [pc, #440]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002a38:	428b      	cmp	r3, r1
 8002a3a:	d101      	bne.n	8002a40 <HAL_I2S_DMAStop+0x180>
 8002a3c:	4b6d      	ldr	r3, [pc, #436]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002a3e:	e001      	b.n	8002a44 <HAL_I2S_DMAStop+0x184>
 8002a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a6a:	e0fa      	b.n	8002c62 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a5f      	ldr	r2, [pc, #380]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_I2S_DMAStop+0x1ba>
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002a78:	e001      	b.n	8002a7e <HAL_I2S_DMAStop+0x1be>
 8002a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a7e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a80:	e0ef      	b.n	8002c62 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a8a:	d005      	beq.n	8002a98 <HAL_I2S_DMAStop+0x1d8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a94:	f040 80e5 	bne.w	8002c62 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00f      	beq.n	8002ac0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff f8b1 	bl	8001c0c <HAL_DMA_Abort>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f043 0208 	orr.w	r2, r3, #8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	f040 809a 	bne.w	8002c02 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00f      	beq.n	8002af6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f896 	bl	8001c0c <HAL_DMA_Abort>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f043 0208 	orr.w	r2, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002af6:	f7fe fa77 	bl	8000fe8 <HAL_GetTick>
 8002afa:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002afc:	e012      	b.n	8002b24 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002afe:	f7fe fa73 	bl	8000fe8 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b64      	cmp	r3, #100	; 0x64
 8002b0a:	d90b      	bls.n	8002b24 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2S_DMAStop+0x272>
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002b30:	e001      	b.n	8002b36 <HAL_I2S_DMAStop+0x276>
 8002b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d1de      	bne.n	8002afe <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002b40:	e012      	b.n	8002b68 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002b42:	f7fe fa51 	bl	8000fe8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b64      	cmp	r3, #100	; 0x64
 8002b4e:	d90b      	bls.n	8002b68 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a20      	ldr	r2, [pc, #128]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_I2S_DMAStop+0x2b6>
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002b74:	e001      	b.n	8002b7a <HAL_I2S_DMAStop+0x2ba>
 8002b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d0de      	beq.n	8002b42 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_I2S_DMAStop+0x2d2>
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002b90:	e001      	b.n	8002b96 <HAL_I2S_DMAStop+0x2d6>
 8002b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4914      	ldr	r1, [pc, #80]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002b9e:	428b      	cmp	r3, r1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2S_DMAStop+0x2e6>
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002ba4:	e001      	b.n	8002baa <HAL_I2S_DMAStop+0x2ea>
 8002ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bae:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2S_DMAStop+0x302>
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002bc0:	e001      	b.n	8002bc6 <HAL_I2S_DMAStop+0x306>
 8002bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_I2S_DMAStop+0x31a>
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002bd8:	e001      	b.n	8002bde <HAL_I2S_DMAStop+0x31e>
 8002bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4902      	ldr	r1, [pc, #8]	; (8002bf0 <HAL_I2S_DMAStop+0x330>)
 8002be6:	428b      	cmp	r3, r1
 8002be8:	d106      	bne.n	8002bf8 <HAL_I2S_DMAStop+0x338>
 8002bea:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <HAL_I2S_DMAStop+0x334>)
 8002bec:	e006      	b.n	8002bfc <HAL_I2S_DMAStop+0x33c>
 8002bee:	bf00      	nop
 8002bf0:	40003800 	.word	0x40003800
 8002bf4:	40003400 	.word	0x40003400
 8002bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bfc:	f022 0202 	bic.w	r2, r2, #2
 8002c00:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c10:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c40:	d10c      	bne.n	8002c5c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	77fb      	strb	r3, [r7, #31]
 8002c5a:	e002      	b.n	8002c62 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10e      	bne.n	8002cfc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0202 	bic.w	r2, r2, #2
 8002cec:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff ffc5 	bl	8002c8c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f00b f853 	bl	800ddc4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0203 	bic.w	r2, r2, #3
 8002d42:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	f043 0208 	orr.w	r2, r3, #8
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff ffa5 	bl	8002cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	881a      	ldrh	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	1c9a      	adds	r2, r3, #2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10e      	bne.n	8002dc6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002db6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff63 	bl	8002c8c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	b292      	uxth	r2, r2
 8002de2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	1c9a      	adds	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10e      	bne.n	8002e24 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff3e 	bl	8002ca0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d13a      	bne.n	8002ebe <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d109      	bne.n	8002e66 <I2S_IRQHandler+0x3a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d102      	bne.n	8002e66 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffb4 	bl	8002dce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d126      	bne.n	8002ebe <I2S_IRQHandler+0x92>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d11f      	bne.n	8002ebe <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e8c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	f043 0202 	orr.w	r2, r3, #2
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fefb 	bl	8002cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d136      	bne.n	8002f38 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d109      	bne.n	8002ee8 <I2S_IRQHandler+0xbc>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b80      	cmp	r3, #128	; 0x80
 8002ee0:	d102      	bne.n	8002ee8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff45 	bl	8002d72 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d122      	bne.n	8002f38 <I2S_IRQHandler+0x10c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d11b      	bne.n	8002f38 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f0e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff febe 	bl	8002cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f50:	f7fe f84a 	bl	8000fe8 <HAL_GetTick>
 8002f54:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002f56:	e018      	b.n	8002f8a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d014      	beq.n	8002f8a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002f60:	f7fe f842 	bl	8000fe8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d902      	bls.n	8002f76 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e00f      	b.n	8002faa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1d7      	bne.n	8002f58 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4aa2      	ldr	r2, [pc, #648]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002fce:	4ba2      	ldr	r3, [pc, #648]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fd0:	e001      	b.n	8002fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a9b      	ldr	r2, [pc, #620]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002fec:	4b9a      	ldr	r3, [pc, #616]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fee:	e001      	b.n	8002ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d004      	beq.n	800300c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 8099 	bne.w	800313e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b02      	cmp	r3, #2
 8003014:	d107      	bne.n	8003026 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f925 	bl	8003270 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d107      	bne.n	8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9c8 	bl	80033d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d13a      	bne.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d035      	beq.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a7e      	ldr	r2, [pc, #504]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800305e:	4b7e      	ldr	r3, [pc, #504]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003060:	e001      	b.n	8003066 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4979      	ldr	r1, [pc, #484]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800306e:	428b      	cmp	r3, r1
 8003070:	d101      	bne.n	8003076 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003072:	4b79      	ldr	r3, [pc, #484]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003074:	e001      	b.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800307e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800308e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f043 0202 	orr.w	r2, r3, #2
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff fdfa 	bl	8002cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	f040 80be 	bne.w	8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80b8 	beq.w	8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a59      	ldr	r2, [pc, #356]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80030f2:	4b59      	ldr	r3, [pc, #356]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030f4:	e001      	b.n	80030fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80030f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4954      	ldr	r1, [pc, #336]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003102:	428b      	cmp	r3, r1
 8003104:	d101      	bne.n	800310a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003106:	4b54      	ldr	r3, [pc, #336]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003108:	e001      	b.n	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800310a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800310e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003112:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f043 0204 	orr.w	r2, r3, #4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fdbc 	bl	8002cb4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800313c:	e084      	b.n	8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d107      	bne.n	8003158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8be 	bl	80032d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f8fd 	bl	800336c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d12f      	bne.n	80031dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d02a      	beq.n	80031dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003194:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2e      	ldr	r2, [pc, #184]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d101      	bne.n	80031a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80031a0:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031a2:	e001      	b.n	80031a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80031a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4929      	ldr	r1, [pc, #164]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031b0:	428b      	cmp	r3, r1
 80031b2:	d101      	bne.n	80031b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031b6:	e001      	b.n	80031bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80031b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f043 0202 	orr.w	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fd6c 	bl	8002cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d131      	bne.n	800324a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d02c      	beq.n	800324a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a17      	ldr	r2, [pc, #92]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031fc:	e001      	b.n	8003202 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80031fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4912      	ldr	r1, [pc, #72]	; (8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800320a:	428b      	cmp	r3, r1
 800320c:	d101      	bne.n	8003212 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003210:	e001      	b.n	8003216 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003216:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800321a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800322a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f043 0204 	orr.w	r2, r3, #4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fd37 	bl	8002cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003246:	e000      	b.n	800324a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003248:	bf00      	nop
}
 800324a:	bf00      	nop
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40003800 	.word	0x40003800
 8003258:	40003400 	.word	0x40003400

0800325c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c99      	adds	r1, r3, #2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6251      	str	r1, [r2, #36]	; 0x24
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d113      	bne.n	80032ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ffc9 	bl	800325c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	1c99      	adds	r1, r3, #2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6251      	str	r1, [r2, #36]	; 0x24
 80032e6:	8819      	ldrh	r1, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <I2SEx_TxISR_I2SExt+0x90>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <I2SEx_TxISR_I2SExt+0x22>
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <I2SEx_TxISR_I2SExt+0x94>)
 80032f4:	e001      	b.n	80032fa <I2SEx_TxISR_I2SExt+0x26>
 80032f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032fa:	460a      	mov	r2, r1
 80032fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d121      	bne.n	800335a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <I2SEx_TxISR_I2SExt+0x90>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <I2SEx_TxISR_I2SExt+0x50>
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <I2SEx_TxISR_I2SExt+0x94>)
 8003322:	e001      	b.n	8003328 <I2SEx_TxISR_I2SExt+0x54>
 8003324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	490d      	ldr	r1, [pc, #52]	; (8003364 <I2SEx_TxISR_I2SExt+0x90>)
 8003330:	428b      	cmp	r3, r1
 8003332:	d101      	bne.n	8003338 <I2SEx_TxISR_I2SExt+0x64>
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <I2SEx_TxISR_I2SExt+0x94>)
 8003336:	e001      	b.n	800333c <I2SEx_TxISR_I2SExt+0x68>
 8003338:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800333c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003340:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff81 	bl	800325c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40003800 	.word	0x40003800
 8003368:	40003400 	.word	0x40003400

0800336c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68d8      	ldr	r0, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	1c99      	adds	r1, r3, #2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003384:	b282      	uxth	r2, r0
 8003386:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d113      	bne.n	80033c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff4a 	bl	800325c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a20      	ldr	r2, [pc, #128]	; (8003460 <I2SEx_RxISR_I2SExt+0x90>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <I2SEx_RxISR_I2SExt+0x16>
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <I2SEx_RxISR_I2SExt+0x94>)
 80033e4:	e001      	b.n	80033ea <I2SEx_RxISR_I2SExt+0x1a>
 80033e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ea:	68d8      	ldr	r0, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	1c99      	adds	r1, r3, #2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80033f6:	b282      	uxth	r2, r0
 80033f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d121      	bne.n	8003456 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a12      	ldr	r2, [pc, #72]	; (8003460 <I2SEx_RxISR_I2SExt+0x90>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d101      	bne.n	8003420 <I2SEx_RxISR_I2SExt+0x50>
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <I2SEx_RxISR_I2SExt+0x94>)
 800341e:	e001      	b.n	8003424 <I2SEx_RxISR_I2SExt+0x54>
 8003420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	490d      	ldr	r1, [pc, #52]	; (8003460 <I2SEx_RxISR_I2SExt+0x90>)
 800342c:	428b      	cmp	r3, r1
 800342e:	d101      	bne.n	8003434 <I2SEx_RxISR_I2SExt+0x64>
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <I2SEx_RxISR_I2SExt+0x94>)
 8003432:	e001      	b.n	8003438 <I2SEx_RxISR_I2SExt+0x68>
 8003434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003438:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800343c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff03 	bl	800325c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40003800 	.word	0x40003800
 8003464:	40003400 	.word	0x40003400

08003468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346a:	b08f      	sub	sp, #60	; 0x3c
 800346c:	af0a      	add	r7, sp, #40	; 0x28
 800346e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e10f      	b.n	800369a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f00b fae3 	bl	800ea60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f004 fcd8 	bl	8007e6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	687e      	ldr	r6, [r7, #4]
 80034c6:	466d      	mov	r5, sp
 80034c8:	f106 0410 	add.w	r4, r6, #16
 80034cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80034dc:	1d33      	adds	r3, r6, #4
 80034de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034e0:	6838      	ldr	r0, [r7, #0]
 80034e2:	f004 fbaf 	bl	8007c44 <USB_CoreInit>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0d0      	b.n	800369a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f004 fcc6 	bl	8007e90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e04a      	b.n	80035a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	333d      	adds	r3, #61	; 0x3d
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	333c      	adds	r3, #60	; 0x3c
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	b298      	uxth	r0, r3
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	3342      	adds	r3, #66	; 0x42
 8003546:	4602      	mov	r2, r0
 8003548:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	333f      	adds	r3, #63	; 0x3f
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3344      	adds	r3, #68	; 0x44
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3348      	adds	r3, #72	; 0x48
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	3350      	adds	r3, #80	; 0x50
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	3301      	adds	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d3af      	bcc.n	800350a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	e044      	b.n	800363a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	3301      	adds	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	d3b5      	bcc.n	80035b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	687e      	ldr	r6, [r7, #4]
 800364c:	466d      	mov	r5, sp
 800364e:	f106 0410 	add.w	r4, r6, #16
 8003652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800365e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003662:	1d33      	adds	r3, r6, #4
 8003664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f004 fc3c 	bl	8007ee4 <USB_DevInit>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e00d      	b.n	800369a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f005 fc7b 	bl	8008f8e <USB_DevDisconnect>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_PCD_Start+0x1c>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e020      	b.n	8003700 <HAL_PCD_Start+0x5e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d109      	bne.n	80036e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d005      	beq.n	80036e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f005 fc39 	bl	8008f5e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 fbab 	bl	8007e4c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b08d      	sub	sp, #52	; 0x34
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f005 fce0 	bl	80090e4 <USB_GetMode>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f040 839d 	bne.w	8003e66 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f005 fc44 	bl	8008fbe <USB_ReadInterrupts>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8393 	beq.w	8003e64 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f005 fc3b 	bl	8008fbe <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d107      	bne.n	8003762 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f002 0202 	and.w	r2, r2, #2
 8003760:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f005 fc29 	bl	8008fbe <USB_ReadInterrupts>
 800376c:	4603      	mov	r3, r0
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b10      	cmp	r3, #16
 8003774:	d161      	bne.n	800383a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0210 	bic.w	r2, r2, #16
 8003784:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 020f 	and.w	r2, r3, #15
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	3304      	adds	r3, #4
 80037a4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	0c5b      	lsrs	r3, r3, #17
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d124      	bne.n	80037fc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d035      	beq.n	800382a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	6a38      	ldr	r0, [r7, #32]
 80037d2:	f005 faa1 	bl	8008d18 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e2:	441a      	add	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f4:	441a      	add	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	619a      	str	r2, [r3, #24]
 80037fa:	e016      	b.n	800382a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	0c5b      	lsrs	r3, r3, #17
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	2b06      	cmp	r3, #6
 8003806:	d110      	bne.n	800382a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800380e:	2208      	movs	r2, #8
 8003810:	4619      	mov	r1, r3
 8003812:	6a38      	ldr	r0, [r7, #32]
 8003814:	f005 fa80 	bl	8008d18 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003824:	441a      	add	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0210 	orr.w	r2, r2, #16
 8003838:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f005 fbbd 	bl	8008fbe <USB_ReadInterrupts>
 8003844:	4603      	mov	r3, r0
 8003846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800384e:	d16e      	bne.n	800392e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f005 fbc3 	bl	8008fe4 <USB_ReadDevAllOutEpInterrupt>
 800385e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003860:	e062      	b.n	8003928 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d057      	beq.n	800391c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f005 fbe8 	bl	800904c <USB_ReadDevOutEPInterrupt>
 800387c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	2301      	movs	r3, #1
 8003898:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800389a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fdb1 	bl	8004404 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00c      	beq.n	80038c6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	2308      	movs	r3, #8
 80038bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 feab 	bl	800461c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038dc:	461a      	mov	r2, r3
 80038de:	2310      	movs	r3, #16
 80038e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	461a      	mov	r2, r3
 80038fa:	2320      	movs	r3, #32
 80038fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003914:	461a      	mov	r2, r3
 8003916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800391a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	3301      	adds	r3, #1
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d199      	bne.n	8003862 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f005 fb43 	bl	8008fbe <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003942:	f040 80c0 	bne.w	8003ac6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f005 fb64 	bl	8009018 <USB_ReadDevAllInEpInterrupt>
 8003950:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003956:	e0b2      	b.n	8003abe <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a7 	beq.w	8003ab2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f005 fb8a 	bl	8009088 <USB_ReadDevInEPInterrupt>
 8003974:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d057      	beq.n	8003a30 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	2201      	movs	r2, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	69f9      	ldr	r1, [r7, #28]
 800399c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a0:	4013      	ands	r3, r2
 80039a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b0:	461a      	mov	r2, r3
 80039b2:	2301      	movs	r3, #1
 80039b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d132      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3348      	adds	r3, #72	; 0x48
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4403      	add	r3, r0
 80039de:	3344      	adds	r3, #68	; 0x44
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4419      	add	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4403      	add	r3, r0
 80039f2:	3348      	adds	r3, #72	; 0x48
 80039f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d113      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x31c>
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	3350      	adds	r3, #80	; 0x50
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d108      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2101      	movs	r1, #1
 8003a20:	f005 fb92 	bl	8009148 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f00b f899 	bl	800eb62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a46:	461a      	mov	r2, r3
 8003a48:	2308      	movs	r3, #8
 8003a4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a62:	461a      	mov	r2, r3
 8003a64:	2310      	movs	r3, #16
 8003a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2340      	movs	r3, #64	; 0x40
 8003a82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fc1b 	bl	80042e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f47f af49 	bne.w	8003958 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f005 fa77 	bl	8008fbe <USB_ReadInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ada:	d122      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d108      	bne.n	8003b0c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b02:	2100      	movs	r1, #0
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fe27 	bl	8004758 <HAL_PCDEx_LPM_Callback>
 8003b0a:	e002      	b.n	8003b12 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f00b f89f 	bl	800ec50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f005 fa49 	bl	8008fbe <USB_ReadInterrupts>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b36:	d112      	bne.n	8003b5e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d102      	bne.n	8003b4e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f00b f85b 	bl	800ec04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b5c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f005 fa2b 	bl	8008fbe <USB_ReadInterrupts>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b72:	f040 80c7 	bne.w	8003d04 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2110      	movs	r1, #16
 8003b90:	4618      	mov	r0, r3
 8003b92:	f004 fb0b 	bl	80081ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9a:	e056      	b.n	8003c4a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc0:	0151      	lsls	r1, r2, #5
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	440a      	add	r2, r1
 8003bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bce:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c02:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c42:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	3301      	adds	r3, #1
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d3a3      	bcc.n	8003b9c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c62:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c66:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d016      	beq.n	8003c9e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c80:	f043 030b 	orr.w	r3, r3, #11
 8003c84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c96:	f043 030b 	orr.w	r3, r3, #11
 8003c9a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9c:	e015      	b.n	8003cca <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cb0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003cb4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc4:	f043 030b 	orr.w	r3, r3, #11
 8003cc8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cdc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f005 fa2a 	bl	8009148 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f005 f958 	bl	8008fbe <USB_ReadInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d18:	d124      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f005 f9ee 	bl	8009100 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f004 faa0 	bl	800826e <USB_GetDevSpeed>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	461a      	mov	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681c      	ldr	r4, [r3, #0]
 8003d3a:	f001 f951 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8003d3e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f003 ffdd 	bl	8007d08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f00a ff2f 	bl	800ebb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f005 f928 	bl	8008fbe <USB_ReadInterrupts>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d10a      	bne.n	8003d8e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f00a ff0c 	bl	800eb96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f002 0208 	and.w	r2, r2, #8
 8003d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f005 f913 	bl	8008fbe <USB_ReadInterrupts>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da2:	d10f      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f00a ff6e 	bl	800ec90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f005 f8f8 	bl	8008fbe <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd8:	d10f      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f00a ff41 	bl	800ec6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003df8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f005 f8dd 	bl	8008fbe <USB_ReadInterrupts>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0e:	d10a      	bne.n	8003e26 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f00a ff4f 	bl	800ecb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f005 f8c7 	bl	8008fbe <USB_ReadInterrupts>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d115      	bne.n	8003e66 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f00a ff3f 	bl	800ecd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	e000      	b.n	8003e66 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003e64:	bf00      	nop
    }
  }
}
 8003e66:	3734      	adds	r7, #52	; 0x34
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}

08003e6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_PCD_SetAddress+0x1a>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e013      	b.n	8003eae <HAL_PCD_SetAddress+0x42>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f005 f837 	bl	8008f12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	4608      	mov	r0, r1
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	70fb      	strb	r3, [r7, #3]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	803b      	strh	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	da0f      	bge.n	8003efc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	3338      	adds	r3, #56	; 0x38
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	705a      	strb	r2, [r3, #1]
 8003efa:	e00f      	b.n	8003f1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 020f 	and.w	r2, r3, #15
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4413      	add	r3, r2
 8003f12:	3304      	adds	r3, #4
 8003f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f28:	883a      	ldrh	r2, [r7, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	78ba      	ldrb	r2, [r7, #2]
 8003f32:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d004      	beq.n	8003f46 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f46:	78bb      	ldrb	r3, [r7, #2]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d102      	bne.n	8003f52 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_PCD_EP_Open+0xaa>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e00e      	b.n	8003f7e <HAL_PCD_EP_Open+0xc8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68f9      	ldr	r1, [r7, #12]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f004 f9a2 	bl	80082b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	da0f      	bge.n	8003fba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	f003 020f 	and.w	r2, r3, #15
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	3338      	adds	r3, #56	; 0x38
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	3304      	adds	r3, #4
 8003fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	705a      	strb	r2, [r3, #1]
 8003fb8:	e00f      	b.n	8003fda <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_PCD_EP_Close+0x6e>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e00e      	b.n	8004012 <HAL_PCD_EP_Close+0x8c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68f9      	ldr	r1, [r7, #12]
 8004002:	4618      	mov	r0, r3
 8004004:	f004 f9e0 	bl	80083c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	460b      	mov	r3, r1
 8004028:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800402a:	7afb      	ldrb	r3, [r7, #11]
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	3304      	adds	r3, #4
 8004042:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2200      	movs	r2, #0
 800405a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800405c:	7afb      	ldrb	r3, [r7, #11]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	b2da      	uxtb	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	6979      	ldr	r1, [r7, #20]
 800408e:	f004 fcbb 	bl	8008a08 <USB_EP0StartXfer>
 8004092:	e008      	b.n	80040a6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	6979      	ldr	r1, [r7, #20]
 80040a2:	f004 fa6d 	bl	8008580 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	f003 020f 	and.w	r2, r3, #15
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	460b      	mov	r3, r1
 80040ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f0:	7afb      	ldrb	r3, [r7, #11]
 80040f2:	f003 020f 	and.w	r2, r3, #15
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	3338      	adds	r3, #56	; 0x38
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2200      	movs	r2, #0
 8004118:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2201      	movs	r2, #1
 800411e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004120:	7afb      	ldrb	r3, [r7, #11]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	b2da      	uxtb	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d102      	bne.n	800413a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800413a:	7afb      	ldrb	r3, [r7, #11]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	f004 fc59 	bl	8008a08 <USB_EP0StartXfer>
 8004156:	e008      	b.n	800416a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	6979      	ldr	r1, [r7, #20]
 8004166:	f004 fa0b 	bl	8008580 <USB_EPStartXfer>
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d901      	bls.n	8004192 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e050      	b.n	8004234 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004196:	2b00      	cmp	r3, #0
 8004198:	da0f      	bge.n	80041ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	3338      	adds	r3, #56	; 0x38
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	705a      	strb	r2, [r3, #1]
 80041b8:	e00d      	b.n	80041d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_PCD_EP_SetStall+0x82>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e01e      	b.n	8004234 <HAL_PCD_EP_SetStall+0xc0>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	4618      	mov	r0, r3
 8004206:	f004 fdb0 	bl	8008d6a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	b2d9      	uxtb	r1, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004224:	461a      	mov	r2, r3
 8004226:	f004 ff8f 	bl	8009148 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	f003 020f 	and.w	r2, r3, #15
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d901      	bls.n	800425a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e042      	b.n	80042e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800425a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800425e:	2b00      	cmp	r3, #0
 8004260:	da0f      	bge.n	8004282 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	f003 020f 	and.w	r2, r3, #15
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	3338      	adds	r3, #56	; 0x38
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	705a      	strb	r2, [r3, #1]
 8004280:	e00f      	b.n	80042a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 020f 	and.w	r2, r3, #15
 8004288:	4613      	mov	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	3304      	adds	r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_PCD_EP_ClrStall+0x86>
 80042be:	2302      	movs	r3, #2
 80042c0:	e00e      	b.n	80042e0 <HAL_PCD_EP_ClrStall+0xa4>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68f9      	ldr	r1, [r7, #12]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fdb8 	bl	8008e46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	3338      	adds	r3, #56	; 0x38
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	3304      	adds	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	429a      	cmp	r2, r3
 800431a:	d901      	bls.n	8004320 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e06c      	b.n	80043fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	429a      	cmp	r2, r3
 8004334:	d902      	bls.n	800433c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	3303      	adds	r3, #3
 8004340:	089b      	lsrs	r3, r3, #2
 8004342:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004344:	e02b      	b.n	800439e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	429a      	cmp	r2, r3
 800435a:	d902      	bls.n	8004362 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3303      	adds	r3, #3
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68d9      	ldr	r1, [r3, #12]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800437a:	b2db      	uxtb	r3, r3
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	4603      	mov	r3, r0
 8004380:	6978      	ldr	r0, [r7, #20]
 8004382:	f004 fc94 	bl	8008cae <USB_WritePacket>

    ep->xfer_buff  += len;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	441a      	add	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	441a      	add	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d809      	bhi.n	80043c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043bc:	429a      	cmp	r2, r3
 80043be:	d203      	bcs.n	80043c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1be      	bne.n	8004346 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d811      	bhi.n	80043f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	2201      	movs	r2, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	6939      	ldr	r1, [r7, #16]
 80043f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f4:	4013      	ands	r3, r2
 80043f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	333c      	adds	r3, #60	; 0x3c
 800441c:	3304      	adds	r3, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b01      	cmp	r3, #1
 8004438:	f040 80a0 	bne.w	800457c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d015      	beq.n	8004472 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a72      	ldr	r2, [pc, #456]	; (8004614 <PCD_EP_OutXfrComplete_int+0x210>)
 800444a:	4293      	cmp	r3, r2
 800444c:	f240 80dd 	bls.w	800460a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80d7 	beq.w	800460a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	461a      	mov	r2, r3
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	6093      	str	r3, [r2, #8]
 8004470:	e0cb      	b.n	800460a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	461a      	mov	r2, r3
 800448a:	2320      	movs	r3, #32
 800448c:	6093      	str	r3, [r2, #8]
 800448e:	e0bc      	b.n	800460a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 80b7 	bne.w	800460a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a5d      	ldr	r2, [pc, #372]	; (8004614 <PCD_EP_OutXfrComplete_int+0x210>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d90f      	bls.n	80044c4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	461a      	mov	r2, r3
 80044bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c0:	6093      	str	r3, [r2, #8]
 80044c2:	e0a2      	b.n	800460a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044d6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	0159      	lsls	r1, r3, #5
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	440b      	add	r3, r1
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80044ea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4403      	add	r3, r0
 80044fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80044fe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004512:	6819      	ldr	r1, [r3, #0]
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4403      	add	r3, r0
 8004522:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4419      	add	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4403      	add	r3, r0
 8004538:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800453c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d114      	bne.n	800456e <PCD_EP_OutXfrComplete_int+0x16a>
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d108      	bne.n	800456e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004566:	461a      	mov	r2, r3
 8004568:	2101      	movs	r1, #1
 800456a:	f004 fded 	bl	8009148 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f00a fad9 	bl	800eb2c <HAL_PCD_DataOutStageCallback>
 800457a:	e046      	b.n	800460a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a26      	ldr	r2, [pc, #152]	; (8004618 <PCD_EP_OutXfrComplete_int+0x214>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d124      	bne.n	80045ce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a0:	6093      	str	r3, [r2, #8]
 80045a2:	e032      	b.n	800460a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	461a      	mov	r2, r3
 80045bc:	2320      	movs	r3, #32
 80045be:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f00a fab0 	bl	800eb2c <HAL_PCD_DataOutStageCallback>
 80045cc:	e01d      	b.n	800460a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d114      	bne.n	80045fe <PCD_EP_OutXfrComplete_int+0x1fa>
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d108      	bne.n	80045fe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045f6:	461a      	mov	r2, r3
 80045f8:	2100      	movs	r1, #0
 80045fa:	f004 fda5 	bl	8009148 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f00a fa91 	bl	800eb2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	4f54300a 	.word	0x4f54300a
 8004618:	4f54310a 	.word	0x4f54310a

0800461c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	333c      	adds	r3, #60	; 0x3c
 8004634:	3304      	adds	r3, #4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d90e      	bls.n	8004670 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	461a      	mov	r2, r3
 800466a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f00a fa49 	bl	800eb08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d90c      	bls.n	8004698 <PCD_EP_OutSetupPacket_int+0x7c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d108      	bne.n	8004698 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004690:	461a      	mov	r2, r3
 8004692:	2101      	movs	r1, #1
 8004694:	f004 fd58 	bl	8009148 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	4f54300a 	.word	0x4f54300a

080046a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
 80046b4:	4613      	mov	r3, r2
 80046b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d107      	bne.n	80046d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046c6:	883b      	ldrh	r3, [r7, #0]
 80046c8:	0419      	lsls	r1, r3, #16
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28
 80046d4:	e028      	b.n	8004728 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4413      	add	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046e4:	2300      	movs	r3, #0
 80046e6:	73fb      	strb	r3, [r7, #15]
 80046e8:	e00d      	b.n	8004706 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	3340      	adds	r3, #64	; 0x40
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	4413      	add	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	3301      	adds	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	3b01      	subs	r3, #1
 800470c:	429a      	cmp	r2, r3
 800470e:	d3ec      	bcc.n	80046ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004710:	883b      	ldrh	r3, [r7, #0]
 8004712:	0418      	lsls	r0, r3, #16
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6819      	ldr	r1, [r3, #0]
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	3b01      	subs	r3, #1
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	4302      	orrs	r2, r0
 8004720:	3340      	adds	r3, #64	; 0x40
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	460b      	mov	r3, r1
 8004740:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	887a      	ldrh	r2, [r7, #2]
 8004748:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e25b      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d075      	beq.n	800487a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800478e:	4ba3      	ldr	r3, [pc, #652]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b04      	cmp	r3, #4
 8004798:	d00c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800479a:	4ba0      	ldr	r3, [pc, #640]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d112      	bne.n	80047cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047a6:	4b9d      	ldr	r3, [pc, #628]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b2:	d10b      	bne.n	80047cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b4:	4b99      	ldr	r3, [pc, #612]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05b      	beq.n	8004878 <HAL_RCC_OscConfig+0x108>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d157      	bne.n	8004878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e236      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d106      	bne.n	80047e4 <HAL_RCC_OscConfig+0x74>
 80047d6:	4b91      	ldr	r3, [pc, #580]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a90      	ldr	r2, [pc, #576]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e01d      	b.n	8004820 <HAL_RCC_OscConfig+0xb0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0x98>
 80047ee:	4b8b      	ldr	r3, [pc, #556]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a8a      	ldr	r2, [pc, #552]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	4b88      	ldr	r3, [pc, #544]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a87      	ldr	r2, [pc, #540]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e00b      	b.n	8004820 <HAL_RCC_OscConfig+0xb0>
 8004808:	4b84      	ldr	r3, [pc, #528]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a83      	ldr	r2, [pc, #524]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 800480e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4b81      	ldr	r3, [pc, #516]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a80      	ldr	r2, [pc, #512]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 800481a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d013      	beq.n	8004850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fc fbde 	bl	8000fe8 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004830:	f7fc fbda 	bl	8000fe8 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e1fb      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0xc0>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004850:	f7fc fbca 	bl	8000fe8 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004858:	f7fc fbc6 	bl	8000fe8 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	; 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e1e7      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486a:	4b6c      	ldr	r3, [pc, #432]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0xe8>
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d063      	beq.n	800494e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004886:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004892:	4b62      	ldr	r3, [pc, #392]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800489a:	2b08      	cmp	r3, #8
 800489c:	d11c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489e:	4b5f      	ldr	r3, [pc, #380]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d116      	bne.n	80048d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048aa:	4b5c      	ldr	r3, [pc, #368]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_RCC_OscConfig+0x152>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d001      	beq.n	80048c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e1bb      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c2:	4b56      	ldr	r3, [pc, #344]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4952      	ldr	r1, [pc, #328]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d6:	e03a      	b.n	800494e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e0:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <HAL_RCC_OscConfig+0x2b0>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fc fb7f 	bl	8000fe8 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ee:	f7fc fb7b 	bl	8000fe8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e19c      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004900:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490c:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	4940      	ldr	r1, [pc, #256]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 800491c:	4313      	orrs	r3, r2
 800491e:	600b      	str	r3, [r1, #0]
 8004920:	e015      	b.n	800494e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004922:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_RCC_OscConfig+0x2b0>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fc fb5e 	bl	8000fe8 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004930:	f7fc fb5a 	bl	8000fe8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e17b      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004942:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d030      	beq.n	80049bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d016      	beq.n	8004990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004962:	4b30      	ldr	r3, [pc, #192]	; (8004a24 <HAL_RCC_OscConfig+0x2b4>)
 8004964:	2201      	movs	r2, #1
 8004966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004968:	f7fc fb3e 	bl	8000fe8 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004970:	f7fc fb3a 	bl	8000fe8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e15b      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004982:	4b26      	ldr	r3, [pc, #152]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 8004984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x200>
 800498e:	e015      	b.n	80049bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004990:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCC_OscConfig+0x2b4>)
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004996:	f7fc fb27 	bl	8000fe8 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499e:	f7fc fb23 	bl	8000fe8 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e144      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b0:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f0      	bne.n	800499e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80a0 	beq.w	8004b0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ca:	2300      	movs	r3, #0
 80049cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10f      	bne.n	80049fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	4a0e      	ldr	r2, [pc, #56]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f6:	2301      	movs	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_OscConfig+0x2b8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d121      	bne.n	8004a4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_RCC_OscConfig+0x2b8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <HAL_RCC_OscConfig+0x2b8>)
 8004a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a12:	f7fc fae9 	bl	8000fe8 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a18:	e011      	b.n	8004a3e <HAL_RCC_OscConfig+0x2ce>
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	42470000 	.word	0x42470000
 8004a24:	42470e80 	.word	0x42470e80
 8004a28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2c:	f7fc fadc 	bl	8000fe8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e0fd      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3e:	4b81      	ldr	r3, [pc, #516]	; (8004c44 <HAL_RCC_OscConfig+0x4d4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d106      	bne.n	8004a60 <HAL_RCC_OscConfig+0x2f0>
 8004a52:	4b7d      	ldr	r3, [pc, #500]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a7c      	ldr	r2, [pc, #496]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5e:	e01c      	b.n	8004a9a <HAL_RCC_OscConfig+0x32a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x312>
 8004a68:	4b77      	ldr	r3, [pc, #476]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	4a76      	ldr	r2, [pc, #472]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	6713      	str	r3, [r2, #112]	; 0x70
 8004a74:	4b74      	ldr	r3, [pc, #464]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a78:	4a73      	ldr	r2, [pc, #460]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a80:	e00b      	b.n	8004a9a <HAL_RCC_OscConfig+0x32a>
 8004a82:	4b71      	ldr	r3, [pc, #452]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a70      	ldr	r2, [pc, #448]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	4b6e      	ldr	r3, [pc, #440]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a6d      	ldr	r2, [pc, #436]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d015      	beq.n	8004ace <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fc faa1 	bl	8000fe8 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f7fc fa9d 	bl	8000fe8 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0bc      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ee      	beq.n	8004aaa <HAL_RCC_OscConfig+0x33a>
 8004acc:	e014      	b.n	8004af8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fc fa8b 	bl	8000fe8 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fc fa87 	bl	8000fe8 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0a6      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	4b56      	ldr	r3, [pc, #344]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ee      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4b52      	ldr	r3, [pc, #328]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	4a51      	ldr	r2, [pc, #324]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8092 	beq.w	8004c38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b14:	4b4c      	ldr	r3, [pc, #304]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d05c      	beq.n	8004bda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d141      	bne.n	8004bac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b28:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <HAL_RCC_OscConfig+0x4dc>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fc fa5b 	bl	8000fe8 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fc fa57 	bl	8000fe8 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e078      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b48:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f0      	bne.n	8004b36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	019b      	lsls	r3, r3, #6
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	041b      	lsls	r3, r3, #16
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	4933      	ldr	r1, [pc, #204]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b7e:	4b33      	ldr	r3, [pc, #204]	; (8004c4c <HAL_RCC_OscConfig+0x4dc>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fc fa30 	bl	8000fe8 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7fc fa2c 	bl	8000fe8 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e04d      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x41c>
 8004baa:	e045      	b.n	8004c38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <HAL_RCC_OscConfig+0x4dc>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fc fa19 	bl	8000fe8 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bba:	f7fc fa15 	bl	8000fe8 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e036      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bcc:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCC_OscConfig+0x44a>
 8004bd8:	e02e      	b.n	8004c38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e029      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004be6:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <HAL_RCC_OscConfig+0x4d8>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d11c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d115      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c0e:	4013      	ands	r3, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10d      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d106      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40007000 	.word	0x40007000
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	42470060 	.word	0x42470060

08004c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0cc      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c64:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d90c      	bls.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0b8      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ca4:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a58      	ldr	r2, [pc, #352]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cbc:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a52      	ldr	r2, [pc, #328]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc8:	4b50      	ldr	r3, [pc, #320]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	494d      	ldr	r1, [pc, #308]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d044      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	4b47      	ldr	r3, [pc, #284]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d119      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e07f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e06f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e067      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 0203 	bic.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4934      	ldr	r1, [pc, #208]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d40:	f7fc f952 	bl	8000fe8 <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d48:	f7fc f94e 	bl	8000fe8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e04f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 020c 	and.w	r2, r3, #12
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1eb      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20c      	bcs.n	8004d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e032      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4916      	ldr	r1, [pc, #88]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	490e      	ldr	r1, [pc, #56]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dd6:	f000 f821 	bl	8004e1c <HAL_RCC_GetSysClockFreq>
 8004dda:	4601      	mov	r1, r0
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
 8004dea:	fa21 f303 	lsr.w	r3, r1, r3
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <HAL_RCC_ClockConfig+0x1c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fc f8b2 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40023c00 	.word	0x40023c00
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	08011a40 	.word	0x08011a40
 8004e14:	20000128 	.word	0x20000128
 8004e18:	20000000 	.word	0x20000000

08004e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e1c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e34:	4b67      	ldr	r3, [pc, #412]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d007      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x34>
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d008      	beq.n	8004e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f040 80bb 	bne.w	8004fc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e4a:	4b63      	ldr	r3, [pc, #396]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e4c:	60bb      	str	r3, [r7, #8]
       break;
 8004e4e:	e0ba      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e50:	4b62      	ldr	r3, [pc, #392]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e52:	60bb      	str	r3, [r7, #8]
      break;
 8004e54:	e0b7      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e56:	4b5f      	ldr	r3, [pc, #380]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e5e:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e60:	4b5c      	ldr	r3, [pc, #368]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d051      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6c:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	099b      	lsrs	r3, r3, #6
 8004e72:	f04f 0400 	mov.w	r4, #0
 8004e76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	ea03 0501 	and.w	r5, r3, r1
 8004e82:	ea04 0602 	and.w	r6, r4, r2
 8004e86:	46ab      	mov	fp, r5
 8004e88:	46b4      	mov	ip, r6
 8004e8a:	eb1b 030b 	adds.w	r3, fp, fp
 8004e8e:	eb4c 040c 	adc.w	r4, ip, ip
 8004e92:	469b      	mov	fp, r3
 8004e94:	46a4      	mov	ip, r4
 8004e96:	eb1b 0b05 	adds.w	fp, fp, r5
 8004e9a:	eb4c 0c06 	adc.w	ip, ip, r6
 8004e9e:	f04f 0100 	mov.w	r1, #0
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8004eaa:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 8004eae:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8004eb2:	468b      	mov	fp, r1
 8004eb4:	4694      	mov	ip, r2
 8004eb6:	ebbb 0b05 	subs.w	fp, fp, r5
 8004eba:	eb6c 0c06 	sbc.w	ip, ip, r6
 8004ebe:	f04f 0100 	mov.w	r1, #0
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8004eca:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8004ece:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8004ed2:	468b      	mov	fp, r1
 8004ed4:	4694      	mov	ip, r2
 8004ed6:	ebbb 0b05 	subs.w	fp, fp, r5
 8004eda:	eb6c 0c06 	sbc.w	ip, ip, r6
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	ea4f 32cc 	mov.w	r2, ip, lsl #15
 8004eea:	ea42 425b 	orr.w	r2, r2, fp, lsr #17
 8004eee:	ea4f 31cb 	mov.w	r1, fp, lsl #15
 8004ef2:	468b      	mov	fp, r1
 8004ef4:	4694      	mov	ip, r2
 8004ef6:	4658      	mov	r0, fp
 8004ef8:	4661      	mov	r1, ip
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f04f 0400 	mov.w	r4, #0
 8004f00:	461a      	mov	r2, r3
 8004f02:	4623      	mov	r3, r4
 8004f04:	f7fb fe8a 	bl	8000c1c <__aeabi_uldivmod>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e049      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f10:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	099b      	lsrs	r3, r3, #6
 8004f16:	f04f 0400 	mov.w	r4, #0
 8004f1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	ea03 0501 	and.w	r5, r3, r1
 8004f26:	ea04 0602 	and.w	r6, r4, r2
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	f04f 0400 	mov.w	r4, #0
 8004f36:	0154      	lsls	r4, r2, #5
 8004f38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f3c:	014b      	lsls	r3, r1, #5
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4622      	mov	r2, r4
 8004f42:	1b49      	subs	r1, r1, r5
 8004f44:	eb62 0206 	sbc.w	r2, r2, r6
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	0194      	lsls	r4, r2, #6
 8004f52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f56:	018b      	lsls	r3, r1, #6
 8004f58:	1a5b      	subs	r3, r3, r1
 8004f5a:	eb64 0402 	sbc.w	r4, r4, r2
 8004f5e:	f04f 0100 	mov.w	r1, #0
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	00e2      	lsls	r2, r4, #3
 8004f68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f6c:	00d9      	lsls	r1, r3, #3
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4614      	mov	r4, r2
 8004f72:	195b      	adds	r3, r3, r5
 8004f74:	eb44 0406 	adc.w	r4, r4, r6
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	02a2      	lsls	r2, r4, #10
 8004f82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f86:	0299      	lsls	r1, r3, #10
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	4621      	mov	r1, r4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	461a      	mov	r2, r3
 8004f98:	4623      	mov	r3, r4
 8004f9a:	f7fb fe3f 	bl	8000c1c <__aeabi_uldivmod>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	60bb      	str	r3, [r7, #8]
      break;
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fc2:	60bb      	str	r3, [r7, #8]
      break;
 8004fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	00bb8000 	.word	0x00bb8000

08004fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe4:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000128 	.word	0x20000128

08004ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d105      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800501c:	2b00      	cmp	r3, #0
 800501e:	d035      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005020:	4b67      	ldr	r3, [pc, #412]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005026:	f7fb ffdf 	bl	8000fe8 <HAL_GetTick>
 800502a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800502e:	f7fb ffdb 	bl	8000fe8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e0ba      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005040:	4b60      	ldr	r3, [pc, #384]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	019a      	lsls	r2, r3, #6
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	071b      	lsls	r3, r3, #28
 8005058:	495a      	ldr	r1, [pc, #360]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005060:	4b57      	ldr	r3, [pc, #348]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005066:	f7fb ffbf 	bl	8000fe8 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800506e:	f7fb ffbb 	bl	8000fe8 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e09a      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005080:	4b50      	ldr	r3, [pc, #320]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8083 	beq.w	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	4b49      	ldr	r3, [pc, #292]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	4a48      	ldr	r2, [pc, #288]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a8:	6413      	str	r3, [r2, #64]	; 0x40
 80050aa:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050b6:	4b44      	ldr	r3, [pc, #272]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a43      	ldr	r2, [pc, #268]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050c2:	f7fb ff91 	bl	8000fe8 <HAL_GetTick>
 80050c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050c8:	e008      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fb ff8d 	bl	8000fe8 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e06c      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050dc:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050e8:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d02f      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d028      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005106:	4b2f      	ldr	r3, [pc, #188]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005110:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005112:	2201      	movs	r2, #1
 8005114:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005116:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800511c:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005122:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d114      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800512e:	f7fb ff5b 	bl	8000fe8 <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	e00a      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fb ff57 	bl	8000fe8 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d901      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e034      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ee      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005164:	d10d      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005166:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517a:	4912      	ldr	r1, [pc, #72]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	608b      	str	r3, [r1, #8]
 8005180:	e005      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	4a0f      	ldr	r2, [pc, #60]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005188:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800518c:	6093      	str	r3, [r2, #8]
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800519a:	490a      	ldr	r1, [pc, #40]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	7c1a      	ldrb	r2, [r3, #16]
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051b2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	42470068 	.word	0x42470068
 80051c4:	40023800 	.word	0x40023800
 80051c8:	40007000 	.word	0x40007000
 80051cc:	42470e40 	.word	0x42470e40
 80051d0:	424711e0 	.word	0x424711e0

080051d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d13d      	bne.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051f2:	4b22      	ldr	r3, [pc, #136]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051fa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005202:	2b01      	cmp	r3, #1
 8005204:	d12f      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005206:	4b1e      	ldr	r3, [pc, #120]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005208:	617b      	str	r3, [r7, #20]
          break;
 800520a:	e02f      	b.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005218:	d108      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800521a:	4b18      	ldr	r3, [pc, #96]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005222:	4a17      	ldr	r2, [pc, #92]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	e007      	b.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800522c:	4b13      	ldr	r3, [pc, #76]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005234:	4a13      	ldr	r2, [pc, #76]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005236:	fbb2 f3f3 	udiv	r3, r2, r3
 800523a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800523e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005256:	0f1b      	lsrs	r3, r3, #28
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	617b      	str	r3, [r7, #20]
          break;
 8005264:	e002      	b.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
          break;
 800526a:	bf00      	nop
        }
      }
      break;
 800526c:	bf00      	nop
    }
  }
  return frequency;
 800526e:	697b      	ldr	r3, [r7, #20]
}
 8005270:	4618      	mov	r0, r3
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	40023800 	.word	0x40023800
 8005280:	00bb8000 	.word	0x00bb8000
 8005284:	00f42400 	.word	0x00f42400

08005288 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e022      	b.n	80052e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d105      	bne.n	80052b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f009 f8b9 	bl	800e424 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2203      	movs	r2, #3
 80052b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f814 	bl	80052e8 <HAL_SD_InitCard>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e00a      	b.n	80052e0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80052e8:	b5b0      	push	{r4, r5, r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af04      	add	r7, sp, #16
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005304:	2376      	movs	r3, #118	; 0x76
 8005306:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681d      	ldr	r5, [r3, #0]
 800530c:	466c      	mov	r4, sp
 800530e:	f107 0314 	add.w	r3, r7, #20
 8005312:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800531a:	f107 0308 	add.w	r3, r7, #8
 800531e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005320:	4628      	mov	r0, r5
 8005322:	f001 ff6d 	bl	8007200 <SDIO_Init>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800532c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e031      	b.n	800539c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <HAL_SD_InitCard+0xbc>)
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f001 ffa5 	bl	8007292 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005348:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <HAL_SD_InitCard+0xbc>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fe84 	bl	800605c <SD_PowerON>
 8005354:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00b      	beq.n	8005374 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e013      	b.n	800539c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fda3 	bl	8005ec0 <SD_InitCard>
 800537a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3728      	adds	r7, #40	; 0x28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bdb0      	pop	{r4, r5, r7, pc}
 80053a4:	422580a0 	.word	0x422580a0

080053a8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b092      	sub	sp, #72	; 0x48
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80053b6:	f7fb fe17 	bl	8000fe8 <HAL_GetTick>
 80053ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e1d9      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	f040 81cc 	bne.w	8005780 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	441a      	add	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d907      	bls.n	800540c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e1c0      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2203      	movs	r2, #3
 8005410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2200      	movs	r2, #0
 800541a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005420:	2b01      	cmp	r3, #1
 8005422:	d002      	beq.n	800542a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	025b      	lsls	r3, r3, #9
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005432:	4618      	mov	r0, r3
 8005434:	f001 ffc0 	bl	80073b8 <SDMMC_CmdBlockLength>
 8005438:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800543a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00f      	beq.n	8005460 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a9b      	ldr	r2, [pc, #620]	; (80056b4 <HAL_SD_ReadBlocks+0x30c>)
 8005446:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544e:	431a      	orrs	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e196      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005460:	f04f 33ff 	mov.w	r3, #4294967295
 8005464:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	025b      	lsls	r3, r3, #9
 800546a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800546c:	2390      	movs	r3, #144	; 0x90
 800546e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005470:	2302      	movs	r3, #2
 8005472:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005474:	2300      	movs	r3, #0
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005478:	2301      	movs	r3, #1
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f107 0214 	add.w	r2, r7, #20
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f001 ff6a 	bl	8007360 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d90a      	bls.n	80054a8 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2202      	movs	r2, #2
 8005496:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 ffce 	bl	8007440 <SDMMC_CmdReadMultiBlock>
 80054a4:	6478      	str	r0, [r7, #68]	; 0x44
 80054a6:	e009      	b.n	80054bc <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054b4:	4618      	mov	r0, r3
 80054b6:	f001 ffa1 	bl	80073fc <SDMMC_CmdReadSingleBlock>
 80054ba:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80054bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d012      	beq.n	80054e8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a7b      	ldr	r2, [pc, #492]	; (80056b4 <HAL_SD_ReadBlocks+0x30c>)
 80054c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e152      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80054ec:	e061      	b.n	80055b2 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d03c      	beq.n	8005576 <HAL_SD_ReadBlocks+0x1ce>
 80054fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d039      	beq.n	8005576 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005502:	2300      	movs	r3, #0
 8005504:	643b      	str	r3, [r7, #64]	; 0x40
 8005506:	e033      	b.n	8005570 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f001 fea2 	bl	8007256 <SDIO_ReadFIFO>
 8005512:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	b2da      	uxtb	r2, r3
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800551c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551e:	3301      	adds	r3, #1
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005524:	3b01      	subs	r3, #1
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	b2da      	uxtb	r2, r3
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	3301      	adds	r3, #1
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553a:	3b01      	subs	r3, #1
 800553c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	b2da      	uxtb	r2, r3
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	3301      	adds	r3, #1
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800554e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005550:	3b01      	subs	r3, #1
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	0e1b      	lsrs	r3, r3, #24
 8005558:	b2da      	uxtb	r2, r3
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	3301      	adds	r3, #1
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005566:	3b01      	subs	r3, #1
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800556a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556c:	3301      	adds	r3, #1
 800556e:	643b      	str	r3, [r7, #64]	; 0x40
 8005570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005572:	2b07      	cmp	r3, #7
 8005574:	d9c8      	bls.n	8005508 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005576:	f7fb fd37 	bl	8000fe8 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005582:	429a      	cmp	r2, r3
 8005584:	d902      	bls.n	800558c <HAL_SD_ReadBlocks+0x1e4>
 8005586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005588:	2b00      	cmp	r3, #0
 800558a:	d112      	bne.n	80055b2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a48      	ldr	r2, [pc, #288]	; (80056b4 <HAL_SD_ReadBlocks+0x30c>)
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e0ed      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b8:	f240 332a 	movw	r3, #810	; 0x32a
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d095      	beq.n	80054ee <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d022      	beq.n	8005616 <HAL_SD_ReadBlocks+0x26e>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d91f      	bls.n	8005616 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d01b      	beq.n	8005616 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 ff92 	bl	800750c <SDMMC_CmdStopTransfer>
 80055e8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80055ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d012      	beq.n	8005616 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2f      	ldr	r2, [pc, #188]	; (80056b4 <HAL_SD_ReadBlocks+0x30c>)
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fe:	431a      	orrs	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0bb      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d012      	beq.n	800564a <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <HAL_SD_ReadBlocks+0x30c>)
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	f043 0208 	orr.w	r2, r3, #8
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0a1      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <HAL_SD_ReadBlocks+0x30c>)
 800565e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	f043 0202 	orr.w	r2, r3, #2
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e087      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d064      	beq.n	8005756 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a08      	ldr	r2, [pc, #32]	; (80056b4 <HAL_SD_ReadBlocks+0x30c>)
 8005692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	f043 0220 	orr.w	r2, r3, #32
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e06d      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
 80056b2:	bf00      	nop
 80056b4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f001 fdca 	bl	8007256 <SDIO_ReadFIFO>
 80056c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	3301      	adds	r3, #1
 80056d0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80056d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d4:	3b01      	subs	r3, #1
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	0a1b      	lsrs	r3, r3, #8
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	3301      	adds	r3, #1
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	3b01      	subs	r3, #1
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80056f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fa:	3301      	adds	r3, #1
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80056fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005700:	3b01      	subs	r3, #1
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	0e1b      	lsrs	r3, r3, #24
 8005708:	b2da      	uxtb	r2, r3
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	3301      	adds	r3, #1
 8005712:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	3b01      	subs	r3, #1
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800571a:	f7fb fc65 	bl	8000fe8 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005726:	429a      	cmp	r2, r3
 8005728:	d902      	bls.n	8005730 <HAL_SD_ReadBlocks+0x388>
 800572a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572c:	2b00      	cmp	r3, #0
 800572e:	d112      	bne.n	8005756 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_SD_ReadBlocks+0x3f0>)
 8005736:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e01b      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_SD_ReadBlocks+0x3c2>
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1a6      	bne.n	80056b8 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005772:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	e006      	b.n	800578e <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3748      	adds	r7, #72	; 0x48
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	004005ff 	.word	0x004005ff

0800579c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b092      	sub	sp, #72	; 0x48
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80057aa:	f7fb fc1d 	bl	8000fe8 <HAL_GetTick>
 80057ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e184      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	f040 8177 	bne.w	8005aca <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80057e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	441a      	add	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d907      	bls.n	8005800 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e16b      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2203      	movs	r2, #3
 8005804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2200      	movs	r2, #0
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005814:	2b01      	cmp	r3, #1
 8005816:	d002      	beq.n	800581e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	025b      	lsls	r3, r3, #9
 800581c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fdc6 	bl	80073b8 <SDMMC_CmdBlockLength>
 800582c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800582e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00f      	beq.n	8005854 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a9d      	ldr	r2, [pc, #628]	; (8005ab0 <HAL_SD_WriteBlocks+0x314>)
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005842:	431a      	orrs	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e141      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005854:	f04f 33ff 	mov.w	r3, #4294967295
 8005858:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	025b      	lsls	r3, r3, #9
 800585e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005860:	2390      	movs	r3, #144	; 0x90
 8005862:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005864:	2300      	movs	r3, #0
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005868:	2300      	movs	r3, #0
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800586c:	2301      	movs	r3, #1
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f107 0218 	add.w	r2, r7, #24
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fd70 	bl	8007360 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d90a      	bls.n	800589c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fe18 	bl	80074c8 <SDMMC_CmdWriteMultiBlock>
 8005898:	6478      	str	r0, [r7, #68]	; 0x44
 800589a:	e009      	b.n	80058b0 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2210      	movs	r2, #16
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 fdeb 	bl	8007484 <SDMMC_CmdWriteSingleBlock>
 80058ae:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80058b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d012      	beq.n	80058dc <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a7d      	ldr	r2, [pc, #500]	; (8005ab0 <HAL_SD_WriteBlocks+0x314>)
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e0fd      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80058e0:	e065      	b.n	80059ae <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d040      	beq.n	8005972 <HAL_SD_WriteBlocks+0x1d6>
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03d      	beq.n	8005972 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	643b      	str	r3, [r7, #64]	; 0x40
 80058fa:	e037      	b.n	800596c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	3301      	adds	r3, #1
 8005906:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590a:	3b01      	subs	r3, #1
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800590e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	021a      	lsls	r2, r3, #8
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	3301      	adds	r3, #1
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005922:	3b01      	subs	r3, #1
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	041a      	lsls	r2, r3, #16
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005934:	3301      	adds	r3, #1
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593a:	3b01      	subs	r3, #1
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	061a      	lsls	r2, r3, #24
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	3301      	adds	r3, #1
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005952:	3b01      	subs	r3, #1
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f107 0214 	add.w	r2, r7, #20
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fc85 	bl	8007270 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005968:	3301      	adds	r3, #1
 800596a:	643b      	str	r3, [r7, #64]	; 0x40
 800596c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800596e:	2b07      	cmp	r3, #7
 8005970:	d9c4      	bls.n	80058fc <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005972:	f7fb fb39 	bl	8000fe8 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800597e:	429a      	cmp	r2, r3
 8005980:	d902      	bls.n	8005988 <HAL_SD_WriteBlocks+0x1ec>
 8005982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005984:	2b00      	cmp	r3, #0
 8005986:	d112      	bne.n	80059ae <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a48      	ldr	r2, [pc, #288]	; (8005ab0 <HAL_SD_WriteBlocks+0x314>)
 800598e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005996:	431a      	orrs	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e094      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b4:	f240 331a 	movw	r3, #794	; 0x31a
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d091      	beq.n	80058e2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d022      	beq.n	8005a12 <HAL_SD_WriteBlocks+0x276>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d91f      	bls.n	8005a12 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d01b      	beq.n	8005a12 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 fd94 	bl	800750c <SDMMC_CmdStopTransfer>
 80059e4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80059e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d012      	beq.n	8005a12 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2f      	ldr	r2, [pc, #188]	; (8005ab0 <HAL_SD_WriteBlocks+0x314>)
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e062      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d012      	beq.n	8005a46 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <HAL_SD_WriteBlocks+0x314>)
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	f043 0208 	orr.w	r2, r3, #8
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e048      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d012      	beq.n	8005a7a <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <HAL_SD_WriteBlocks+0x314>)
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	f043 0202 	orr.w	r2, r3, #2
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e02e      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d015      	beq.n	8005ab4 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <HAL_SD_WriteBlocks+0x314>)
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	f043 0210 	orr.w	r2, r3, #16
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e014      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
 8005aae:	bf00      	nop
 8005ab0:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f240 523a 	movw	r2, #1338	; 0x53a
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e006      	b.n	8005ad8 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
  }
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3748      	adds	r7, #72	; 0x48
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aee:	0f9b      	lsrs	r3, r3, #30
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afa:	0e9b      	lsrs	r3, r3, #26
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0c:	0e1b      	lsrs	r3, r3, #24
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1e:	0c1b      	lsrs	r3, r3, #16
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b40:	0d1b      	lsrs	r3, r3, #20
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5e:	0bdb      	lsrs	r3, r3, #15
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b70:	0b9b      	lsrs	r3, r3, #14
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b82:	0b5b      	lsrs	r3, r3, #13
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b94:	0b1b      	lsrs	r3, r3, #12
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d163      	bne.n	8005c78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb4:	009a      	lsls	r2, r3, #2
 8005bb6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bba:	4013      	ands	r3, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005bc0:	0f92      	lsrs	r2, r2, #30
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bcc:	0edb      	lsrs	r3, r3, #27
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bde:	0e1b      	lsrs	r3, r3, #24
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf0:	0d5b      	lsrs	r3, r3, #21
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c02:	0c9b      	lsrs	r3, r3, #18
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c14:	0bdb      	lsrs	r3, r3, #15
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	7e1b      	ldrb	r3, [r3, #24]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	3302      	adds	r3, #2
 8005c38:	2201      	movs	r2, #1
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c42:	fb02 f203 	mul.w	r2, r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	7a1b      	ldrb	r3, [r3, #8]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	2201      	movs	r2, #1
 8005c56:	409a      	lsls	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c64:	0a52      	lsrs	r2, r2, #9
 8005c66:	fb02 f203 	mul.w	r2, r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c74:	661a      	str	r2, [r3, #96]	; 0x60
 8005c76:	e031      	b.n	8005cdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d11d      	bne.n	8005cbc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	431a      	orrs	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	029a      	lsls	r2, r3, #10
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	661a      	str	r2, [r3, #96]	; 0x60
 8005cba:	e00f      	b.n	8005cdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a58      	ldr	r2, [pc, #352]	; (8005e24 <HAL_SD_GetCardCSD+0x344>)
 8005cc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e09d      	b.n	8005e18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce0:	0b9b      	lsrs	r3, r3, #14
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf2:	09db      	lsrs	r3, r3, #7
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d14:	0fdb      	lsrs	r3, r3, #31
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	0f5b      	lsrs	r3, r3, #29
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	0e9b      	lsrs	r3, r3, #26
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d44:	0d9b      	lsrs	r3, r3, #22
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	0d5b      	lsrs	r3, r3, #21
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d86:	0bdb      	lsrs	r3, r3, #15
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	0b9b      	lsrs	r3, r3, #14
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	0b5b      	lsrs	r3, r3, #13
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	0b1b      	lsrs	r3, r3, #12
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	0a9b      	lsrs	r3, r3, #10
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	004005ff 	.word	0x004005ff

08005e28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005e8c:	f107 030c 	add.w	r3, r7, #12
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f970 	bl	8006178 <SD_SendStatus>
 8005e98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	0a5b      	lsrs	r3, r3, #9
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005eb6:	693b      	ldr	r3, [r7, #16]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005ec0:	b5b0      	push	{r4, r5, r7, lr}
 8005ec2:	b094      	sub	sp, #80	; 0x50
 8005ec4:	af04      	add	r7, sp, #16
 8005ec6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 f9ed 	bl	80072b0 <SDIO_GetPowerState>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005edc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ee0:	e0b7      	b.n	8006052 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d02f      	beq.n	8005f4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f001 fbd3 	bl	800769a <SDMMC_CmdSendCID>
 8005ef4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <SD_InitCard+0x40>
    {
      return errorstate;
 8005efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efe:	e0a8      	b.n	8006052 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 fa17 	bl	800733a <SDIO_GetResponse>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2104      	movs	r1, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 fa0e 	bl	800733a <SDIO_GetResponse>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2108      	movs	r1, #8
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fa05 	bl	800733a <SDIO_GetResponse>
 8005f30:	4602      	mov	r2, r0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	210c      	movs	r1, #12
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 f9fc 	bl	800733a <SDIO_GetResponse>
 8005f42:	4602      	mov	r2, r0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d00d      	beq.n	8005f6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f107 020e 	add.w	r2, r7, #14
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fbd9 	bl	8007714 <SDMMC_CmdSetRelAdd>
 8005f62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <SD_InitCard+0xae>
    {
      return errorstate;
 8005f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6c:	e071      	b.n	8006052 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d036      	beq.n	8005fe4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005f76:	89fb      	ldrh	r3, [r7, #14]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f86:	041b      	lsls	r3, r3, #16
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f001 fba3 	bl	80076d6 <SDMMC_CmdSendCSD>
 8005f90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9a:	e05a      	b.n	8006052 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 f9c9 	bl	800733a <SDIO_GetResponse>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2104      	movs	r1, #4
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 f9c0 	bl	800733a <SDIO_GetResponse>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2108      	movs	r1, #8
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 f9b7 	bl	800733a <SDIO_GetResponse>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	210c      	movs	r1, #12
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 f9ae 	bl	800733a <SDIO_GetResponse>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2104      	movs	r1, #4
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 f9a5 	bl	800733a <SDIO_GetResponse>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	0d1a      	lsrs	r2, r3, #20
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005ff8:	f107 0310 	add.w	r3, r7, #16
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff fd6e 	bl	8005ae0 <HAL_SD_GetCardCSD>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800600a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800600e:	e020      	b.n	8006052 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006018:	041b      	lsls	r3, r3, #16
 800601a:	f04f 0400 	mov.w	r4, #0
 800601e:	461a      	mov	r2, r3
 8006020:	4623      	mov	r3, r4
 8006022:	4608      	mov	r0, r1
 8006024:	f001 fa94 	bl	8007550 <SDMMC_CmdSelDesel>
 8006028:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <SD_InitCard+0x174>
  {
    return errorstate;
 8006030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006032:	e00e      	b.n	8006052 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681d      	ldr	r5, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	466c      	mov	r4, sp
 800603c:	f103 0210 	add.w	r2, r3, #16
 8006040:	ca07      	ldmia	r2, {r0, r1, r2}
 8006042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006046:	3304      	adds	r3, #4
 8006048:	cb0e      	ldmia	r3, {r1, r2, r3}
 800604a:	4628      	mov	r0, r5
 800604c:	f001 f8d8 	bl	8007200 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3740      	adds	r7, #64	; 0x40
 8006056:	46bd      	mov	sp, r7
 8006058:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800605c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	2300      	movs	r3, #0
 800606e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fa8e 	bl	8007596 <SDMMC_CmdGoIdleState>
 800607a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	e072      	b.n	800616c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f001 faa1 	bl	80075d2 <SDMMC_CmdOperCond>
 8006090:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00d      	beq.n	80060b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 fa77 	bl	8007596 <SDMMC_CmdGoIdleState>
 80060a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	e05b      	b.n	800616c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d137      	bne.n	8006132 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2100      	movs	r1, #0
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 faa1 	bl	8007610 <SDMMC_CmdAppCommand>
 80060ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d02d      	beq.n	8006132 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060da:	e047      	b.n	800616c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2100      	movs	r1, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fa94 	bl	8007610 <SDMMC_CmdAppCommand>
 80060e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	e03b      	b.n	800616c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	491e      	ldr	r1, [pc, #120]	; (8006174 <SD_PowerON+0x118>)
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 faaa 	bl	8007654 <SDMMC_CmdAppOperCommand>
 8006100:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800610c:	e02e      	b.n	800616c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2100      	movs	r1, #0
 8006114:	4618      	mov	r0, r3
 8006116:	f001 f910 	bl	800733a <SDIO_GetResponse>
 800611a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	0fdb      	lsrs	r3, r3, #31
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <SD_PowerON+0xcc>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <SD_PowerON+0xce>
 8006128:	2300      	movs	r3, #0
 800612a:	613b      	str	r3, [r7, #16]

    count++;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	3301      	adds	r3, #1
 8006130:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006138:	4293      	cmp	r3, r2
 800613a:	d802      	bhi.n	8006142 <SD_PowerON+0xe6>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0cc      	beq.n	80060dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006148:	4293      	cmp	r3, r2
 800614a:	d902      	bls.n	8006152 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800614c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006150:	e00c      	b.n	800616c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	645a      	str	r2, [r3, #68]	; 0x44
 8006162:	e002      	b.n	800616a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	c1100000 	.word	0xc1100000

08006178 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d102      	bne.n	800618e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800618c:	e018      	b.n	80061c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f001 fadb 	bl	8007756 <SDMMC_CmdSendStatus>
 80061a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	e009      	b.n	80061c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 f8c1 	bl	800733a <SDIO_GetResponse>
 80061b8:	4602      	mov	r2, r0
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e01d      	b.n	8006216 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f008 f980 	bl	800e4f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f000 fcac 	bl	8006b64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b06      	cmp	r3, #6
 8006246:	d007      	beq.n	8006258 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e01d      	b.n	80062b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f008 f959 	bl	800e544 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f000 fc5d 	bl	8006b64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d101      	bne.n	80062da <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
 80062d8:	e0e9      	b.n	80064ae <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d10b      	bne.n	80062fe <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_PWM_Start_DMA+0x3a>
 80062ec:	887b      	ldrh	r3, [r7, #2]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e0db      	b.n	80064ae <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2202      	movs	r2, #2
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b0c      	cmp	r3, #12
 8006302:	f200 80ad 	bhi.w	8006460 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_TIM_PWM_Start_DMA+0x50>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006341 	.word	0x08006341
 8006310:	08006461 	.word	0x08006461
 8006314:	08006461 	.word	0x08006461
 8006318:	08006461 	.word	0x08006461
 800631c:	08006389 	.word	0x08006389
 8006320:	08006461 	.word	0x08006461
 8006324:	08006461 	.word	0x08006461
 8006328:	08006461 	.word	0x08006461
 800632c:	080063d1 	.word	0x080063d1
 8006330:	08006461 	.word	0x08006461
 8006334:	08006461 	.word	0x08006461
 8006338:	08006461 	.word	0x08006461
 800633c:	08006419 	.word	0x08006419
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	4a5c      	ldr	r2, [pc, #368]	; (80064b8 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8006346:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	4a5b      	ldr	r2, [pc, #364]	; (80064bc <HAL_TIM_PWM_Start_DMA+0x200>)
 800634e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	4a5a      	ldr	r2, [pc, #360]	; (80064c0 <HAL_TIM_PWM_Start_DMA+0x204>)
 8006356:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3334      	adds	r3, #52	; 0x34
 8006364:	461a      	mov	r2, r3
 8006366:	887b      	ldrh	r3, [r7, #2]
 8006368:	f7fb fbf8 	bl	8001b5c <HAL_DMA_Start_IT>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e09b      	b.n	80064ae <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006384:	60da      	str	r2, [r3, #12]
      break;
 8006386:	e06c      	b.n	8006462 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	4a4a      	ldr	r2, [pc, #296]	; (80064b8 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800638e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006394:	4a49      	ldr	r2, [pc, #292]	; (80064bc <HAL_TIM_PWM_Start_DMA+0x200>)
 8006396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	4a48      	ldr	r2, [pc, #288]	; (80064c0 <HAL_TIM_PWM_Start_DMA+0x204>)
 800639e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3338      	adds	r3, #56	; 0x38
 80063ac:	461a      	mov	r2, r3
 80063ae:	887b      	ldrh	r3, [r7, #2]
 80063b0:	f7fb fbd4 	bl	8001b5c <HAL_DMA_Start_IT>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e077      	b.n	80064ae <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063cc:	60da      	str	r2, [r3, #12]
      break;
 80063ce:	e048      	b.n	8006462 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4a38      	ldr	r2, [pc, #224]	; (80064b8 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80063d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	4a37      	ldr	r2, [pc, #220]	; (80064bc <HAL_TIM_PWM_Start_DMA+0x200>)
 80063de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a36      	ldr	r2, [pc, #216]	; (80064c0 <HAL_TIM_PWM_Start_DMA+0x204>)
 80063e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	333c      	adds	r3, #60	; 0x3c
 80063f4:	461a      	mov	r2, r3
 80063f6:	887b      	ldrh	r3, [r7, #2]
 80063f8:	f7fb fbb0 	bl	8001b5c <HAL_DMA_Start_IT>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e053      	b.n	80064ae <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006414:	60da      	str	r2, [r3, #12]
      break;
 8006416:	e024      	b.n	8006462 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	4a26      	ldr	r2, [pc, #152]	; (80064b8 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800641e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	4a25      	ldr	r2, [pc, #148]	; (80064bc <HAL_TIM_PWM_Start_DMA+0x200>)
 8006426:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	4a24      	ldr	r2, [pc, #144]	; (80064c0 <HAL_TIM_PWM_Start_DMA+0x204>)
 800642e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3340      	adds	r3, #64	; 0x40
 800643c:	461a      	mov	r2, r3
 800643e:	887b      	ldrh	r3, [r7, #2]
 8006440:	f7fb fb8c 	bl	8001b5c <HAL_DMA_Start_IT>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e02f      	b.n	80064ae <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800645c:	60da      	str	r2, [r3, #12]
      break;
 800645e:	e000      	b.n	8006462 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8006460:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2201      	movs	r2, #1
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fe20 	bl	80070b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <HAL_TIM_PWM_Start_DMA+0x208>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d107      	bne.n	800648a <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b06      	cmp	r3, #6
 800649a:	d007      	beq.n	80064ac <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	08006a83 	.word	0x08006a83
 80064bc:	08006af3 	.word	0x08006af3
 80064c0:	08006a5f 	.word	0x08006a5f
 80064c4:	40010000 	.word	0x40010000

080064c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d122      	bne.n	8006524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d11b      	bne.n	8006524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0202 	mvn.w	r2, #2
 80064f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa75 	bl	80069fa <HAL_TIM_IC_CaptureCallback>
 8006510:	e005      	b.n	800651e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa67 	bl	80069e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fa78 	bl	8006a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b04      	cmp	r3, #4
 8006530:	d122      	bne.n	8006578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b04      	cmp	r3, #4
 800653e:	d11b      	bne.n	8006578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0204 	mvn.w	r2, #4
 8006548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa4b 	bl	80069fa <HAL_TIM_IC_CaptureCallback>
 8006564:	e005      	b.n	8006572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa3d 	bl	80069e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fa4e 	bl	8006a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b08      	cmp	r3, #8
 8006584:	d122      	bne.n	80065cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b08      	cmp	r3, #8
 8006592:	d11b      	bne.n	80065cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0208 	mvn.w	r2, #8
 800659c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2204      	movs	r2, #4
 80065a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa21 	bl	80069fa <HAL_TIM_IC_CaptureCallback>
 80065b8:	e005      	b.n	80065c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa13 	bl	80069e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fa24 	bl	8006a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 0310 	and.w	r3, r3, #16
 80065d6:	2b10      	cmp	r3, #16
 80065d8:	d122      	bne.n	8006620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d11b      	bne.n	8006620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0210 	mvn.w	r2, #16
 80065f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2208      	movs	r2, #8
 80065f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9f7 	bl	80069fa <HAL_TIM_IC_CaptureCallback>
 800660c:	e005      	b.n	800661a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9e9 	bl	80069e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f9fa 	bl	8006a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	d10e      	bne.n	800664c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b01      	cmp	r3, #1
 800663a:	d107      	bne.n	800664c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0201 	mvn.w	r2, #1
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9c3 	bl	80069d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d10e      	bne.n	8006678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d107      	bne.n	8006678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fdba 	bl	80071ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d10e      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d107      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800669c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f9c9 	bl	8006a36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d10e      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d107      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0220 	mvn.w	r2, #32
 80066c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fd84 	bl	80071d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e0b4      	b.n	800685c <HAL_TIM_PWM_ConfigChannel+0x184>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b0c      	cmp	r3, #12
 8006706:	f200 809f 	bhi.w	8006848 <HAL_TIM_PWM_ConfigChannel+0x170>
 800670a:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006745 	.word	0x08006745
 8006714:	08006849 	.word	0x08006849
 8006718:	08006849 	.word	0x08006849
 800671c:	08006849 	.word	0x08006849
 8006720:	08006785 	.word	0x08006785
 8006724:	08006849 	.word	0x08006849
 8006728:	08006849 	.word	0x08006849
 800672c:	08006849 	.word	0x08006849
 8006730:	080067c7 	.word	0x080067c7
 8006734:	08006849 	.word	0x08006849
 8006738:	08006849 	.word	0x08006849
 800673c:	08006849 	.word	0x08006849
 8006740:	08006807 	.word	0x08006807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fa8a 	bl	8006c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0208 	orr.w	r2, r2, #8
 800675e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0204 	bic.w	r2, r2, #4
 800676e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6999      	ldr	r1, [r3, #24]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	619a      	str	r2, [r3, #24]
      break;
 8006782:	e062      	b.n	800684a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fad0 	bl	8006d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800679e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6999      	ldr	r1, [r3, #24]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	021a      	lsls	r2, r3, #8
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	619a      	str	r2, [r3, #24]
      break;
 80067c4:	e041      	b.n	800684a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fb1b 	bl	8006e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0208 	orr.w	r2, r2, #8
 80067e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0204 	bic.w	r2, r2, #4
 80067f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69d9      	ldr	r1, [r3, #28]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	61da      	str	r2, [r3, #28]
      break;
 8006804:	e021      	b.n	800684a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fb65 	bl	8006edc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69d9      	ldr	r1, [r3, #28]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	021a      	lsls	r2, r3, #8
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	61da      	str	r2, [r3, #28]
      break;
 8006846:	e000      	b.n	800684a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006848:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_TIM_ConfigClockSource+0x18>
 8006878:	2302      	movs	r3, #2
 800687a:	e0a6      	b.n	80069ca <HAL_TIM_ConfigClockSource+0x166>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800689a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d067      	beq.n	8006984 <HAL_TIM_ConfigClockSource+0x120>
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d80b      	bhi.n	80068d0 <HAL_TIM_ConfigClockSource+0x6c>
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d073      	beq.n	80069a4 <HAL_TIM_ConfigClockSource+0x140>
 80068bc:	2b10      	cmp	r3, #16
 80068be:	d802      	bhi.n	80068c6 <HAL_TIM_ConfigClockSource+0x62>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d06f      	beq.n	80069a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80068c4:	e078      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d06c      	beq.n	80069a4 <HAL_TIM_ConfigClockSource+0x140>
 80068ca:	2b30      	cmp	r3, #48	; 0x30
 80068cc:	d06a      	beq.n	80069a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80068ce:	e073      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068d0:	2b70      	cmp	r3, #112	; 0x70
 80068d2:	d00d      	beq.n	80068f0 <HAL_TIM_ConfigClockSource+0x8c>
 80068d4:	2b70      	cmp	r3, #112	; 0x70
 80068d6:	d804      	bhi.n	80068e2 <HAL_TIM_ConfigClockSource+0x7e>
 80068d8:	2b50      	cmp	r3, #80	; 0x50
 80068da:	d033      	beq.n	8006944 <HAL_TIM_ConfigClockSource+0xe0>
 80068dc:	2b60      	cmp	r3, #96	; 0x60
 80068de:	d041      	beq.n	8006964 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80068e0:	e06a      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e6:	d066      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x152>
 80068e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ec:	d017      	beq.n	800691e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80068ee:	e063      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6818      	ldr	r0, [r3, #0]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	6899      	ldr	r1, [r3, #8]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f000 fbb6 	bl	8007070 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006912:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	609a      	str	r2, [r3, #8]
      break;
 800691c:	e04c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6899      	ldr	r1, [r3, #8]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f000 fb9f 	bl	8007070 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006940:	609a      	str	r2, [r3, #8]
      break;
 8006942:	e039      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	6859      	ldr	r1, [r3, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	461a      	mov	r2, r3
 8006952:	f000 fb13 	bl	8006f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2150      	movs	r1, #80	; 0x50
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fb6c 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 8006962:	e029      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6859      	ldr	r1, [r3, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	461a      	mov	r2, r3
 8006972:	f000 fb32 	bl	8006fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2160      	movs	r1, #96	; 0x60
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fb5c 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 8006982:	e019      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	6859      	ldr	r1, [r3, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	461a      	mov	r2, r3
 8006992:	f000 faf3 	bl	8006f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2140      	movs	r1, #64	; 0x40
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fb4c 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 80069a2:	e009      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4619      	mov	r1, r3
 80069ae:	4610      	mov	r0, r2
 80069b0:	f000 fb43 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 80069b4:	e000      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80069b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7ff ffe8 	bl	8006a4a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d103      	bne.n	8006aaa <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	771a      	strb	r2, [r3, #28]
 8006aa8:	e019      	b.n	8006ade <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d103      	bne.n	8006abc <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	771a      	strb	r2, [r3, #28]
 8006aba:	e010      	b.n	8006ade <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d103      	bne.n	8006ace <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2204      	movs	r2, #4
 8006aca:	771a      	strb	r2, [r3, #28]
 8006acc:	e007      	b.n	8006ade <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d102      	bne.n	8006ade <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2208      	movs	r2, #8
 8006adc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7ff ff95 	bl	8006a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	771a      	strb	r2, [r3, #28]
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d103      	bne.n	8006b1a <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	771a      	strb	r2, [r3, #28]
 8006b18:	e019      	b.n	8006b4e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d103      	bne.n	8006b2c <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2202      	movs	r2, #2
 8006b28:	771a      	strb	r2, [r3, #28]
 8006b2a:	e010      	b.n	8006b4e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d103      	bne.n	8006b3e <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2204      	movs	r2, #4
 8006b3a:	771a      	strb	r2, [r3, #28]
 8006b3c:	e007      	b.n	8006b4e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d102      	bne.n	8006b4e <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f7ff ff67 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	771a      	strb	r2, [r3, #28]
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a34      	ldr	r2, [pc, #208]	; (8006c48 <TIM_Base_SetConfig+0xe4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00f      	beq.n	8006b9c <TIM_Base_SetConfig+0x38>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b82:	d00b      	beq.n	8006b9c <TIM_Base_SetConfig+0x38>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a31      	ldr	r2, [pc, #196]	; (8006c4c <TIM_Base_SetConfig+0xe8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_Base_SetConfig+0x38>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a30      	ldr	r2, [pc, #192]	; (8006c50 <TIM_Base_SetConfig+0xec>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_Base_SetConfig+0x38>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a2f      	ldr	r2, [pc, #188]	; (8006c54 <TIM_Base_SetConfig+0xf0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d108      	bne.n	8006bae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a25      	ldr	r2, [pc, #148]	; (8006c48 <TIM_Base_SetConfig+0xe4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01b      	beq.n	8006bee <TIM_Base_SetConfig+0x8a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d017      	beq.n	8006bee <TIM_Base_SetConfig+0x8a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a22      	ldr	r2, [pc, #136]	; (8006c4c <TIM_Base_SetConfig+0xe8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <TIM_Base_SetConfig+0x8a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a21      	ldr	r2, [pc, #132]	; (8006c50 <TIM_Base_SetConfig+0xec>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00f      	beq.n	8006bee <TIM_Base_SetConfig+0x8a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <TIM_Base_SetConfig+0xf0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00b      	beq.n	8006bee <TIM_Base_SetConfig+0x8a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1f      	ldr	r2, [pc, #124]	; (8006c58 <TIM_Base_SetConfig+0xf4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d007      	beq.n	8006bee <TIM_Base_SetConfig+0x8a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a1e      	ldr	r2, [pc, #120]	; (8006c5c <TIM_Base_SetConfig+0xf8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_Base_SetConfig+0x8a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a1d      	ldr	r2, [pc, #116]	; (8006c60 <TIM_Base_SetConfig+0xfc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d108      	bne.n	8006c00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <TIM_Base_SetConfig+0xe4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d103      	bne.n	8006c34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	615a      	str	r2, [r3, #20]
}
 8006c3a:	bf00      	nop
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40000c00 	.word	0x40000c00
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40014400 	.word	0x40014400
 8006c60:	40014800 	.word	0x40014800

08006c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f023 0201 	bic.w	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0303 	bic.w	r3, r3, #3
 8006c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f023 0302 	bic.w	r3, r3, #2
 8006cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a1c      	ldr	r2, [pc, #112]	; (8006d2c <TIM_OC1_SetConfig+0xc8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10c      	bne.n	8006cda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 0308 	bic.w	r3, r3, #8
 8006cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 0304 	bic.w	r3, r3, #4
 8006cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <TIM_OC1_SetConfig+0xc8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d111      	bne.n	8006d06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	621a      	str	r2, [r3, #32]
}
 8006d20:	bf00      	nop
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	40010000 	.word	0x40010000

08006d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f023 0210 	bic.w	r2, r3, #16
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f023 0320 	bic.w	r3, r3, #32
 8006d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <TIM_OC2_SetConfig+0xd4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d10d      	bne.n	8006dac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006daa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a15      	ldr	r2, [pc, #84]	; (8006e04 <TIM_OC2_SetConfig+0xd4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d113      	bne.n	8006ddc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40010000 	.word	0x40010000

08006e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a1d      	ldr	r2, [pc, #116]	; (8006ed8 <TIM_OC3_SetConfig+0xd0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d10d      	bne.n	8006e82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <TIM_OC3_SetConfig+0xd0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d113      	bne.n	8006eb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	40010000 	.word	0x40010000

08006edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	031b      	lsls	r3, r3, #12
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <TIM_OC4_SetConfig+0x9c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d109      	bne.n	8006f50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	019b      	lsls	r3, r3, #6
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40010000 	.word	0x40010000

08006f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0201 	bic.w	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 030a 	bic.w	r3, r3, #10
 8006fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b087      	sub	sp, #28
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f023 0210 	bic.w	r2, r3, #16
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	031b      	lsls	r3, r3, #12
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	f043 0307 	orr.w	r3, r3, #7
 800705c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	609a      	str	r2, [r3, #8]
}
 8007064:	bf00      	nop
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800708a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	021a      	lsls	r2, r3, #8
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	431a      	orrs	r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4313      	orrs	r3, r2
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	609a      	str	r2, [r3, #8]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2201      	movs	r2, #1
 80070c4:	fa02 f303 	lsl.w	r3, r2, r3
 80070c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	401a      	ands	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a1a      	ldr	r2, [r3, #32]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	fa01 f303 	lsl.w	r3, r1, r3
 80070e8:	431a      	orrs	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
	...

080070fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d101      	bne.n	8007114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007110:	2302      	movs	r3, #2
 8007112:	e050      	b.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1c      	ldr	r2, [pc, #112]	; (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d018      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007160:	d013      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d00e      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a16      	ldr	r2, [pc, #88]	; (80071cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d009      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d004      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d10c      	bne.n	80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4313      	orrs	r3, r2
 800719a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00
 80071d4:	40014000 	.word	0x40014000

080071d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007200:	b084      	sub	sp, #16
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	f107 001c 	add.w	r0, r7, #28
 800720e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007216:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007218:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800721a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800721e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007222:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007226:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800722a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800723a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	b004      	add	sp, #16
 8007254:	4770      	bx	lr

08007256 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2203      	movs	r2, #3
 800729e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80072a0:	2002      	movs	r0, #2
 80072a2:	f7f9 fead 	bl	8001000 <HAL_Delay>
  
  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0303 	and.w	r3, r3, #3
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80072f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80072f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007306:	f023 030f 	bic.w	r3, r3, #15
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	b2db      	uxtb	r3, r3
}
 800732e:	4618      	mov	r0, r3
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3314      	adds	r3, #20
 8007348:	461a      	mov	r2, r3
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	4413      	add	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
}  
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007386:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800738c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007392:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0

}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80073c6:	2310      	movs	r3, #16
 80073c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073ca:	2340      	movs	r3, #64	; 0x40
 80073cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073d8:	f107 0308 	add.w	r3, r7, #8
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff ff74 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80073e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e8:	2110      	movs	r1, #16
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f9fe 	bl	80077ec <SDMMC_GetCmdResp1>
 80073f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073f2:	69fb      	ldr	r3, [r7, #28]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3720      	adds	r7, #32
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800740a:	2311      	movs	r3, #17
 800740c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800740e:	2340      	movs	r3, #64	; 0x40
 8007410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800741c:	f107 0308 	add.w	r3, r7, #8
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff ff52 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007428:	f241 3288 	movw	r2, #5000	; 0x1388
 800742c:	2111      	movs	r1, #17
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9dc 	bl	80077ec <SDMMC_GetCmdResp1>
 8007434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007436:	69fb      	ldr	r3, [r7, #28]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3720      	adds	r7, #32
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800744e:	2312      	movs	r3, #18
 8007450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007452:	2340      	movs	r3, #64	; 0x40
 8007454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800745a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800745e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007460:	f107 0308 	add.w	r3, r7, #8
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff ff30 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800746c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007470:	2112      	movs	r1, #18
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f9ba 	bl	80077ec <SDMMC_GetCmdResp1>
 8007478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800747a:	69fb      	ldr	r3, [r7, #28]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007492:	2318      	movs	r3, #24
 8007494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007496:	2340      	movs	r3, #64	; 0x40
 8007498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800749e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074a4:	f107 0308 	add.w	r3, r7, #8
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff ff0e 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80074b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b4:	2118      	movs	r1, #24
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f998 	bl	80077ec <SDMMC_GetCmdResp1>
 80074bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074be:	69fb      	ldr	r3, [r7, #28]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3720      	adds	r7, #32
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80074d6:	2319      	movs	r3, #25
 80074d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074da:	2340      	movs	r3, #64	; 0x40
 80074dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074e8:	f107 0308 	add.w	r3, r7, #8
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff feec 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80074f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f8:	2119      	movs	r1, #25
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f976 	bl	80077ec <SDMMC_GetCmdResp1>
 8007500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007502:	69fb      	ldr	r3, [r7, #28]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3720      	adds	r7, #32
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007518:	230c      	movs	r3, #12
 800751a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800751c:	2340      	movs	r3, #64	; 0x40
 800751e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800752a:	f107 0308 	add.w	r3, r7, #8
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff fecb 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007536:	4a05      	ldr	r2, [pc, #20]	; (800754c <SDMMC_CmdStopTransfer+0x40>)
 8007538:	210c      	movs	r1, #12
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f956 	bl	80077ec <SDMMC_GetCmdResp1>
 8007540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007542:	69fb      	ldr	r3, [r7, #28]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3720      	adds	r7, #32
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	05f5e100 	.word	0x05f5e100

08007550 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08a      	sub	sp, #40	; 0x28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007560:	2307      	movs	r3, #7
 8007562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007564:	2340      	movs	r3, #64	; 0x40
 8007566:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007568:	2300      	movs	r3, #0
 800756a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800756c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007570:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007572:	f107 0310 	add.w	r3, r7, #16
 8007576:	4619      	mov	r1, r3
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7ff fea7 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800757e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007582:	2107      	movs	r1, #7
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f931 	bl	80077ec <SDMMC_GetCmdResp1>
 800758a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800758e:	4618      	mov	r0, r3
 8007590:	3728      	adds	r7, #40	; 0x28
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b088      	sub	sp, #32
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80075a6:	2300      	movs	r3, #0
 80075a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075b4:	f107 0308 	add.w	r3, r7, #8
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fe86 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f8eb 	bl	800779c <SDMMC_GetCmdError>
 80075c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075c8:	69fb      	ldr	r3, [r7, #28]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3720      	adds	r7, #32
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b088      	sub	sp, #32
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80075da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80075de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80075e0:	2308      	movs	r3, #8
 80075e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075e4:	2340      	movs	r3, #64	; 0x40
 80075e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075f2:	f107 0308 	add.w	r3, r7, #8
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff fe67 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fad4 	bl	8007bac <SDMMC_GetCmdResp7>
 8007604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007606:	69fb      	ldr	r3, [r7, #28]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3720      	adds	r7, #32
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800761e:	2337      	movs	r3, #55	; 0x37
 8007620:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007622:	2340      	movs	r3, #64	; 0x40
 8007624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800762a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800762e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff fe48 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800763c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007640:	2137      	movs	r1, #55	; 0x37
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f8d2 	bl	80077ec <SDMMC_GetCmdResp1>
 8007648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800764a:	69fb      	ldr	r3, [r7, #28]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3720      	adds	r7, #32
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800766a:	2329      	movs	r3, #41	; 0x29
 800766c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800766e:	2340      	movs	r3, #64	; 0x40
 8007670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007672:	2300      	movs	r3, #0
 8007674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800767a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800767c:	f107 0308 	add.w	r3, r7, #8
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff fe22 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f9e1 	bl	8007a50 <SDMMC_GetCmdResp3>
 800768e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007690:	69fb      	ldr	r3, [r7, #28]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b088      	sub	sp, #32
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80076a6:	2302      	movs	r3, #2
 80076a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80076aa:	23c0      	movs	r3, #192	; 0xc0
 80076ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076ae:	2300      	movs	r3, #0
 80076b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076b8:	f107 0308 	add.w	r3, r7, #8
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fe04 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f97d 	bl	80079c4 <SDMMC_GetCmdResp2>
 80076ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076cc:	69fb      	ldr	r3, [r7, #28]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b088      	sub	sp, #32
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80076e4:	2309      	movs	r3, #9
 80076e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80076e8:	23c0      	movs	r3, #192	; 0xc0
 80076ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076f6:	f107 0308 	add.w	r3, r7, #8
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fde5 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f95e 	bl	80079c4 <SDMMC_GetCmdResp2>
 8007708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800770a:	69fb      	ldr	r3, [r7, #28]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3720      	adds	r7, #32
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007722:	2303      	movs	r3, #3
 8007724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007726:	2340      	movs	r3, #64	; 0x40
 8007728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800772e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007734:	f107 0308 	add.w	r3, r7, #8
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fdc6 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	2103      	movs	r1, #3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f9bd 	bl	8007ac4 <SDMMC_GetCmdResp6>
 800774a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800774c:	69fb      	ldr	r3, [r7, #28]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3720      	adds	r7, #32
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b088      	sub	sp, #32
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007764:	230d      	movs	r3, #13
 8007766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007768:	2340      	movs	r3, #64	; 0x40
 800776a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007774:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff fda5 	bl	80072cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007782:	f241 3288 	movw	r2, #5000	; 0x1388
 8007786:	210d      	movs	r1, #13
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f82f 	bl	80077ec <SDMMC_GetCmdResp1>
 800778e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007790:	69fb      	ldr	r3, [r7, #28]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800779c:	b490      	push	{r4, r7}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077a4:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <SDMMC_GetCmdError+0x48>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a0f      	ldr	r2, [pc, #60]	; (80077e8 <SDMMC_GetCmdError+0x4c>)
 80077aa:	fba2 2303 	umull	r2, r3, r2, r3
 80077ae:	0a5b      	lsrs	r3, r3, #9
 80077b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80077b8:	4623      	mov	r3, r4
 80077ba:	1e5c      	subs	r4, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077c4:	e009      	b.n	80077da <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0f2      	beq.n	80077b8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	22c5      	movs	r2, #197	; 0xc5
 80077d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc90      	pop	{r4, r7}
 80077e2:	4770      	bx	lr
 80077e4:	20000128 	.word	0x20000128
 80077e8:	10624dd3 	.word	0x10624dd3

080077ec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80077ec:	b590      	push	{r4, r7, lr}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	460b      	mov	r3, r1
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077fa:	4b6f      	ldr	r3, [pc, #444]	; (80079b8 <SDMMC_GetCmdResp1+0x1cc>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a6f      	ldr	r2, [pc, #444]	; (80079bc <SDMMC_GetCmdResp1+0x1d0>)
 8007800:	fba2 2303 	umull	r2, r3, r2, r3
 8007804:	0a5b      	lsrs	r3, r3, #9
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800780c:	4623      	mov	r3, r4
 800780e:	1e5c      	subs	r4, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007818:	e0c9      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0f0      	beq.n	800780c <SDMMC_GetCmdResp1+0x20>
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1eb      	bne.n	800780c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2204      	movs	r2, #4
 8007844:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007846:	2304      	movs	r3, #4
 8007848:	e0b1      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800785c:	2301      	movs	r3, #1
 800785e:	e0a6      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	22c5      	movs	r2, #197	; 0xc5
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f7ff fd5a 	bl	8007320 <SDIO_GetCommandResponse>
 800786c:	4603      	mov	r3, r0
 800786e:	461a      	mov	r2, r3
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	4293      	cmp	r3, r2
 8007874:	d001      	beq.n	800787a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007876:	2301      	movs	r3, #1
 8007878:	e099      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800787a:	2100      	movs	r1, #0
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f7ff fd5c 	bl	800733a <SDIO_GetResponse>
 8007882:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4b4e      	ldr	r3, [pc, #312]	; (80079c0 <SDMMC_GetCmdResp1+0x1d4>)
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800788e:	2300      	movs	r3, #0
 8007890:	e08d      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	da02      	bge.n	800789e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800789c:	e087      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80078a8:	2340      	movs	r3, #64	; 0x40
 80078aa:	e080      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80078b6:	2380      	movs	r3, #128	; 0x80
 80078b8:	e079      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80078c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078c8:	e071      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80078d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078d8:	e069      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80078e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e8:	e061      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80078f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078f8:	e059      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007908:	e051      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007918:	e049      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007924:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007928:	e041      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007938:	e039      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007948:	e031      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007954:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007958:	e029      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007964:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007968:	e021      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007974:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007978:	e019      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007984:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007988:	e011      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007994:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007998:	e009      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f003 0308 	and.w	r3, r3, #8
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80079a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80079a8:	e001      	b.n	80079ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80079aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	371c      	adds	r7, #28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd90      	pop	{r4, r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000128 	.word	0x20000128
 80079bc:	10624dd3 	.word	0x10624dd3
 80079c0:	fdffe008 	.word	0xfdffe008

080079c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80079c4:	b490      	push	{r4, r7}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079cc:	4b1e      	ldr	r3, [pc, #120]	; (8007a48 <SDMMC_GetCmdResp2+0x84>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a1e      	ldr	r2, [pc, #120]	; (8007a4c <SDMMC_GetCmdResp2+0x88>)
 80079d2:	fba2 2303 	umull	r2, r3, r2, r3
 80079d6:	0a5b      	lsrs	r3, r3, #9
 80079d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80079e0:	4623      	mov	r3, r4
 80079e2:	1e5c      	subs	r4, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079ec:	e026      	b.n	8007a3c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <SDMMC_GetCmdResp2+0x1c>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1eb      	bne.n	80079e0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d004      	beq.n	8007a1e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2204      	movs	r2, #4
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a1a:	2304      	movs	r3, #4
 8007a1c:	e00e      	b.n	8007a3c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e003      	b.n	8007a3c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	22c5      	movs	r2, #197	; 0xc5
 8007a38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc90      	pop	{r4, r7}
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	20000128 	.word	0x20000128
 8007a4c:	10624dd3 	.word	0x10624dd3

08007a50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007a50:	b490      	push	{r4, r7}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a58:	4b18      	ldr	r3, [pc, #96]	; (8007abc <SDMMC_GetCmdResp3+0x6c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a18      	ldr	r2, [pc, #96]	; (8007ac0 <SDMMC_GetCmdResp3+0x70>)
 8007a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a62:	0a5b      	lsrs	r3, r3, #9
 8007a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007a6c:	4623      	mov	r3, r4
 8007a6e:	1e5c      	subs	r4, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a78:	e01b      	b.n	8007ab2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0f0      	beq.n	8007a6c <SDMMC_GetCmdResp3+0x1c>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1eb      	bne.n	8007a6c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007aa6:	2304      	movs	r3, #4
 8007aa8:	e003      	b.n	8007ab2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	22c5      	movs	r2, #197	; 0xc5
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc90      	pop	{r4, r7}
 8007aba:	4770      	bx	lr
 8007abc:	20000128 	.word	0x20000128
 8007ac0:	10624dd3 	.word	0x10624dd3

08007ac4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007ac4:	b590      	push	{r4, r7, lr}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	460b      	mov	r3, r1
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ad2:	4b34      	ldr	r3, [pc, #208]	; (8007ba4 <SDMMC_GetCmdResp6+0xe0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a34      	ldr	r2, [pc, #208]	; (8007ba8 <SDMMC_GetCmdResp6+0xe4>)
 8007ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8007adc:	0a5b      	lsrs	r3, r3, #9
 8007ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ae6:	4623      	mov	r3, r4
 8007ae8:	1e5c      	subs	r4, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d102      	bne.n	8007af4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007aee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007af2:	e052      	b.n	8007b9a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <SDMMC_GetCmdResp6+0x22>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1eb      	bne.n	8007ae6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d004      	beq.n	8007b24 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b20:	2304      	movs	r3, #4
 8007b22:	e03a      	b.n	8007b9a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d004      	beq.n	8007b3a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e02f      	b.n	8007b9a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff fbf0 	bl	8007320 <SDIO_GetCommandResponse>
 8007b40:	4603      	mov	r3, r0
 8007b42:	461a      	mov	r2, r3
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d001      	beq.n	8007b4e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e025      	b.n	8007b9a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	22c5      	movs	r2, #197	; 0xc5
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007b54:	2100      	movs	r1, #0
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f7ff fbef 	bl	800733a <SDIO_GetResponse>
 8007b5c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d106      	bne.n	8007b76 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	0c1b      	lsrs	r3, r3, #16
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e011      	b.n	8007b9a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b84:	e009      	b.n	8007b9a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b94:	e001      	b.n	8007b9a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd90      	pop	{r4, r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000128 	.word	0x20000128
 8007ba8:	10624dd3 	.word	0x10624dd3

08007bac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007bac:	b490      	push	{r4, r7}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bb4:	4b21      	ldr	r3, [pc, #132]	; (8007c3c <SDMMC_GetCmdResp7+0x90>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a21      	ldr	r2, [pc, #132]	; (8007c40 <SDMMC_GetCmdResp7+0x94>)
 8007bba:	fba2 2303 	umull	r2, r3, r2, r3
 8007bbe:	0a5b      	lsrs	r3, r3, #9
 8007bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007bc8:	4623      	mov	r3, r4
 8007bca:	1e5c      	subs	r4, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bd4:	e02c      	b.n	8007c30 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0f0      	beq.n	8007bc8 <SDMMC_GetCmdResp7+0x1c>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1eb      	bne.n	8007bc8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d004      	beq.n	8007c06 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2204      	movs	r2, #4
 8007c00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c02:	2304      	movs	r3, #4
 8007c04:	e014      	b.n	8007c30 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d004      	beq.n	8007c1c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e009      	b.n	8007c30 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2240      	movs	r2, #64	; 0x40
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c2e:	2300      	movs	r3, #0
  
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc90      	pop	{r4, r7}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	20000128 	.word	0x20000128
 8007c40:	10624dd3 	.word	0x10624dd3

08007c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c44:	b084      	sub	sp, #16
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	f107 001c 	add.w	r0, r7, #28
 8007c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d122      	bne.n	8007ca2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d105      	bne.n	8007c96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fab4 	bl	8009204 <USB_CoreReset>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]
 8007ca0:	e01a      	b.n	8007cd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 faa8 	bl	8009204 <USB_CoreReset>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8007cca:	e005      	b.n	8007cd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d10b      	bne.n	8007cf6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f043 0206 	orr.w	r2, r3, #6
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f043 0220 	orr.w	r2, r3, #32
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d02:	b004      	add	sp, #16
 8007d04:	4770      	bx	lr
	...

08007d08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4613      	mov	r3, r2
 8007d14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d165      	bne.n	8007de8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4a41      	ldr	r2, [pc, #260]	; (8007e24 <USB_SetTurnaroundTime+0x11c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d906      	bls.n	8007d32 <USB_SetTurnaroundTime+0x2a>
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4a40      	ldr	r2, [pc, #256]	; (8007e28 <USB_SetTurnaroundTime+0x120>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d802      	bhi.n	8007d32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d2c:	230f      	movs	r3, #15
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	e062      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	4a3c      	ldr	r2, [pc, #240]	; (8007e28 <USB_SetTurnaroundTime+0x120>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d906      	bls.n	8007d48 <USB_SetTurnaroundTime+0x40>
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4a3b      	ldr	r2, [pc, #236]	; (8007e2c <USB_SetTurnaroundTime+0x124>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d802      	bhi.n	8007d48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d42:	230e      	movs	r3, #14
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	e057      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4a38      	ldr	r2, [pc, #224]	; (8007e2c <USB_SetTurnaroundTime+0x124>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d906      	bls.n	8007d5e <USB_SetTurnaroundTime+0x56>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4a37      	ldr	r2, [pc, #220]	; (8007e30 <USB_SetTurnaroundTime+0x128>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d802      	bhi.n	8007d5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d58:	230d      	movs	r3, #13
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	e04c      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4a33      	ldr	r2, [pc, #204]	; (8007e30 <USB_SetTurnaroundTime+0x128>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d906      	bls.n	8007d74 <USB_SetTurnaroundTime+0x6c>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	4a32      	ldr	r2, [pc, #200]	; (8007e34 <USB_SetTurnaroundTime+0x12c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d802      	bhi.n	8007d74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d6e:	230c      	movs	r3, #12
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	e041      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4a2f      	ldr	r2, [pc, #188]	; (8007e34 <USB_SetTurnaroundTime+0x12c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d906      	bls.n	8007d8a <USB_SetTurnaroundTime+0x82>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4a2e      	ldr	r2, [pc, #184]	; (8007e38 <USB_SetTurnaroundTime+0x130>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d802      	bhi.n	8007d8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d84:	230b      	movs	r3, #11
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	e036      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	4a2a      	ldr	r2, [pc, #168]	; (8007e38 <USB_SetTurnaroundTime+0x130>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d906      	bls.n	8007da0 <USB_SetTurnaroundTime+0x98>
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	4a29      	ldr	r2, [pc, #164]	; (8007e3c <USB_SetTurnaroundTime+0x134>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d802      	bhi.n	8007da0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d9a:	230a      	movs	r3, #10
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	e02b      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	4a26      	ldr	r2, [pc, #152]	; (8007e3c <USB_SetTurnaroundTime+0x134>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d906      	bls.n	8007db6 <USB_SetTurnaroundTime+0xae>
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4a25      	ldr	r2, [pc, #148]	; (8007e40 <USB_SetTurnaroundTime+0x138>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d802      	bhi.n	8007db6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007db0:	2309      	movs	r3, #9
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	e020      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4a21      	ldr	r2, [pc, #132]	; (8007e40 <USB_SetTurnaroundTime+0x138>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d906      	bls.n	8007dcc <USB_SetTurnaroundTime+0xc4>
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	4a20      	ldr	r2, [pc, #128]	; (8007e44 <USB_SetTurnaroundTime+0x13c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d802      	bhi.n	8007dcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007dc6:	2308      	movs	r3, #8
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	e015      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <USB_SetTurnaroundTime+0x13c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d906      	bls.n	8007de2 <USB_SetTurnaroundTime+0xda>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4a1c      	ldr	r2, [pc, #112]	; (8007e48 <USB_SetTurnaroundTime+0x140>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d802      	bhi.n	8007de2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ddc:	2307      	movs	r3, #7
 8007dde:	617b      	str	r3, [r7, #20]
 8007de0:	e00a      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007de2:	2306      	movs	r3, #6
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	e007      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007dee:	2309      	movs	r3, #9
 8007df0:	617b      	str	r3, [r7, #20]
 8007df2:	e001      	b.n	8007df8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007df4:	2309      	movs	r3, #9
 8007df6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	029b      	lsls	r3, r3, #10
 8007e0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007e10:	431a      	orrs	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	00d8acbf 	.word	0x00d8acbf
 8007e28:	00e4e1bf 	.word	0x00e4e1bf
 8007e2c:	00f423ff 	.word	0x00f423ff
 8007e30:	0106737f 	.word	0x0106737f
 8007e34:	011a499f 	.word	0x011a499f
 8007e38:	01312cff 	.word	0x01312cff
 8007e3c:	014ca43f 	.word	0x014ca43f
 8007e40:	016e35ff 	.word	0x016e35ff
 8007e44:	01a6ab1f 	.word	0x01a6ab1f
 8007e48:	01e847ff 	.word	0x01e847ff

08007e4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f043 0201 	orr.w	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f023 0201 	bic.w	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d106      	bne.n	8007ebc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	60da      	str	r2, [r3, #12]
 8007eba:	e00b      	b.n	8007ed4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d106      	bne.n	8007ed0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60da      	str	r2, [r3, #12]
 8007ece:	e001      	b.n	8007ed4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e003      	b.n	8007edc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007ed4:	2032      	movs	r0, #50	; 0x32
 8007ed6:	f7f9 f893 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b086      	sub	sp, #24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007efe:	2300      	movs	r3, #0
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	e009      	b.n	8007f18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	3340      	adds	r3, #64	; 0x40
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	3301      	adds	r3, #1
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b0e      	cmp	r3, #14
 8007f1c:	d9f2      	bls.n	8007f04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d11c      	bne.n	8007f5e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f32:	f043 0302 	orr.w	r3, r3, #2
 8007f36:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38
 8007f5c:	e00b      	b.n	8007f76 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	2300      	movs	r3, #0
 8007f80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f88:	4619      	mov	r1, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f90:	461a      	mov	r2, r3
 8007f92:	680b      	ldr	r3, [r1, #0]
 8007f94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d10c      	bne.n	8007fb6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d104      	bne.n	8007fac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f949 	bl	800823c <USB_SetDevSpeed>
 8007faa:	e008      	b.n	8007fbe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007fac:	2101      	movs	r1, #1
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f944 	bl	800823c <USB_SetDevSpeed>
 8007fb4:	e003      	b.n	8007fbe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007fb6:	2103      	movs	r1, #3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f93f 	bl	800823c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fbe:	2110      	movs	r1, #16
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f8f3 	bl	80081ac <USB_FlushTxFifo>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f911 	bl	80081f8 <USB_FlushRxFifo>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	2300      	movs	r3, #0
 8007fea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffe:	461a      	mov	r2, r3
 8008000:	2300      	movs	r3, #0
 8008002:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008004:	2300      	movs	r3, #0
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	e043      	b.n	8008092 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800801c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008020:	d118      	bne.n	8008054 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008034:	461a      	mov	r2, r3
 8008036:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	e013      	b.n	8008066 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804a:	461a      	mov	r2, r3
 800804c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	e008      	b.n	8008066 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008060:	461a      	mov	r2, r3
 8008062:	2300      	movs	r3, #0
 8008064:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008072:	461a      	mov	r2, r3
 8008074:	2300      	movs	r3, #0
 8008076:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008084:	461a      	mov	r2, r3
 8008086:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800808a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	3301      	adds	r3, #1
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	429a      	cmp	r2, r3
 8008098:	d3b7      	bcc.n	800800a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800809a:	2300      	movs	r3, #0
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	e043      	b.n	8008128 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080b6:	d118      	bne.n	80080ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ca:	461a      	mov	r2, r3
 80080cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	e013      	b.n	80080fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e0:	461a      	mov	r2, r3
 80080e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	e008      	b.n	80080fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f6:	461a      	mov	r2, r3
 80080f8:	2300      	movs	r3, #0
 80080fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008108:	461a      	mov	r2, r3
 800810a:	2300      	movs	r3, #0
 800810c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811a:	461a      	mov	r2, r3
 800811c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008120:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	3301      	adds	r3, #1
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	429a      	cmp	r2, r3
 800812e:	d3b7      	bcc.n	80080a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800813e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008142:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008150:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	2b00      	cmp	r3, #0
 8008156:	d105      	bne.n	8008164 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	f043 0210 	orr.w	r2, r3, #16
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699a      	ldr	r2, [r3, #24]
 8008168:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <USB_DevInit+0x2c4>)
 800816a:	4313      	orrs	r3, r2
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f043 0208 	orr.w	r2, r3, #8
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008184:	2b01      	cmp	r3, #1
 8008186:	d107      	bne.n	8008198 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008190:	f043 0304 	orr.w	r3, r3, #4
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081a4:	b004      	add	sp, #16
 80081a6:	4770      	bx	lr
 80081a8:	803c3800 	.word	0x803c3800

080081ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	019b      	lsls	r3, r3, #6
 80081be:	f043 0220 	orr.w	r2, r3, #32
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3301      	adds	r3, #1
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <USB_FlushTxFifo+0x48>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d901      	bls.n	80081d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e006      	b.n	80081e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b20      	cmp	r3, #32
 80081e2:	d0f0      	beq.n	80081c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	00030d40 	.word	0x00030d40

080081f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2210      	movs	r2, #16
 8008208:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3301      	adds	r3, #1
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4a09      	ldr	r2, [pc, #36]	; (8008238 <USB_FlushRxFifo+0x40>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d901      	bls.n	800821c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e006      	b.n	800822a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b10      	cmp	r3, #16
 8008226:	d0f0      	beq.n	800820a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	00030d40 	.word	0x00030d40

0800823c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	68f9      	ldr	r1, [r7, #12]
 8008258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800825c:	4313      	orrs	r3, r2
 800825e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800826e:	b480      	push	{r7}
 8008270:	b087      	sub	sp, #28
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0306 	and.w	r3, r3, #6
 8008286:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d102      	bne.n	8008294 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800828e:	2300      	movs	r3, #0
 8008290:	75fb      	strb	r3, [r7, #23]
 8008292:	e00a      	b.n	80082aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d002      	beq.n	80082a0 <USB_GetDevSpeed+0x32>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b06      	cmp	r3, #6
 800829e:	d102      	bne.n	80082a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80082a0:	2302      	movs	r3, #2
 80082a2:	75fb      	strb	r3, [r7, #23]
 80082a4:	e001      	b.n	80082aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80082a6:	230f      	movs	r3, #15
 80082a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	785b      	ldrb	r3, [r3, #1]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d13a      	bne.n	800834a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082da:	69da      	ldr	r2, [r3, #28]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	f003 030f 	and.w	r3, r3, #15
 80082e4:	2101      	movs	r1, #1
 80082e6:	fa01 f303 	lsl.w	r3, r1, r3
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	68f9      	ldr	r1, [r7, #12]
 80082ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082f2:	4313      	orrs	r3, r2
 80082f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d155      	bne.n	80083b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	78db      	ldrb	r3, [r3, #3]
 8008326:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008328:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	059b      	lsls	r3, r3, #22
 800832e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008330:	4313      	orrs	r3, r2
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	e036      	b.n	80083b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008350:	69da      	ldr	r2, [r3, #28]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	2101      	movs	r1, #1
 800835c:	fa01 f303 	lsl.w	r3, r1, r3
 8008360:	041b      	lsls	r3, r3, #16
 8008362:	68f9      	ldr	r1, [r7, #12]
 8008364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008368:	4313      	orrs	r3, r2
 800836a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d11a      	bne.n	80083b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	78db      	ldrb	r3, [r3, #3]
 800839c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800839e:	430b      	orrs	r3, r1
 80083a0:	4313      	orrs	r3, r2
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	785b      	ldrb	r3, [r3, #1]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d161      	bne.n	80084a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083fa:	d11f      	bne.n	800843c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	0151      	lsls	r1, r2, #5
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	440a      	add	r2, r1
 8008412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008416:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800841a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	440a      	add	r2, r1
 8008432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008436:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800843a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f003 030f 	and.w	r3, r3, #15
 800844c:	2101      	movs	r1, #1
 800844e:	fa01 f303 	lsl.w	r3, r1, r3
 8008452:	b29b      	uxth	r3, r3
 8008454:	43db      	mvns	r3, r3
 8008456:	68f9      	ldr	r1, [r7, #12]
 8008458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800845c:	4013      	ands	r3, r2
 800845e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	f003 030f 	and.w	r3, r3, #15
 8008470:	2101      	movs	r1, #1
 8008472:	fa01 f303 	lsl.w	r3, r1, r3
 8008476:	b29b      	uxth	r3, r3
 8008478:	43db      	mvns	r3, r3
 800847a:	68f9      	ldr	r1, [r7, #12]
 800847c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008480:	4013      	ands	r3, r2
 8008482:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	0159      	lsls	r1, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	440b      	add	r3, r1
 800849a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849e:	4619      	mov	r1, r3
 80084a0:	4b35      	ldr	r3, [pc, #212]	; (8008578 <USB_DeactivateEndpoint+0x1b0>)
 80084a2:	4013      	ands	r3, r2
 80084a4:	600b      	str	r3, [r1, #0]
 80084a6:	e060      	b.n	800856a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084be:	d11f      	bne.n	8008500 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f303 	lsl.w	r3, r1, r3
 8008516:	041b      	lsls	r3, r3, #16
 8008518:	43db      	mvns	r3, r3
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008520:	4013      	ands	r3, r2
 8008522:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852a:	69da      	ldr	r2, [r3, #28]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	2101      	movs	r1, #1
 8008536:	fa01 f303 	lsl.w	r3, r1, r3
 800853a:	041b      	lsls	r3, r3, #16
 800853c:	43db      	mvns	r3, r3
 800853e:	68f9      	ldr	r1, [r7, #12]
 8008540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008544:	4013      	ands	r3, r2
 8008546:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	0159      	lsls	r1, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	440b      	add	r3, r1
 800855e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008562:	4619      	mov	r1, r3
 8008564:	4b05      	ldr	r3, [pc, #20]	; (800857c <USB_DeactivateEndpoint+0x1b4>)
 8008566:	4013      	ands	r3, r2
 8008568:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	ec337800 	.word	0xec337800
 800857c:	eff37800 	.word	0xeff37800

08008580 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08a      	sub	sp, #40	; 0x28
 8008584:	af02      	add	r7, sp, #8
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	4613      	mov	r3, r2
 800858c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	2b01      	cmp	r3, #1
 800859e:	f040 815c 	bne.w	800885a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d132      	bne.n	8008610 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	0151      	lsls	r1, r2, #5
 80085bc:	69fa      	ldr	r2, [r7, #28]
 80085be:	440a      	add	r2, r1
 80085c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	0151      	lsls	r1, r2, #5
 80085e0:	69fa      	ldr	r2, [r7, #28]
 80085e2:	440a      	add	r2, r1
 80085e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	0151      	lsls	r1, r2, #5
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	440a      	add	r2, r1
 8008604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008608:	0cdb      	lsrs	r3, r3, #19
 800860a:	04db      	lsls	r3, r3, #19
 800860c:	6113      	str	r3, [r2, #16]
 800860e:	e074      	b.n	80086fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	0151      	lsls	r1, r2, #5
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	440a      	add	r2, r1
 8008626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862a:	0cdb      	lsrs	r3, r3, #19
 800862c:	04db      	lsls	r3, r3, #19
 800862e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	440a      	add	r2, r1
 8008646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800864e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6959      	ldr	r1, [r3, #20]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	440b      	add	r3, r1
 800866c:	1e59      	subs	r1, r3, #1
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	fbb1 f3f3 	udiv	r3, r1, r3
 8008676:	04d9      	lsls	r1, r3, #19
 8008678:	4b9d      	ldr	r3, [pc, #628]	; (80088f0 <USB_EPStartXfer+0x370>)
 800867a:	400b      	ands	r3, r1
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	0148      	lsls	r0, r1, #5
 8008680:	69f9      	ldr	r1, [r7, #28]
 8008682:	4401      	add	r1, r0
 8008684:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008688:	4313      	orrs	r3, r2
 800868a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008698:	691a      	ldr	r2, [r3, #16]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086a2:	69b9      	ldr	r1, [r7, #24]
 80086a4:	0148      	lsls	r0, r1, #5
 80086a6:	69f9      	ldr	r1, [r7, #28]
 80086a8:	4401      	add	r1, r0
 80086aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086ae:	4313      	orrs	r3, r2
 80086b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	78db      	ldrb	r3, [r3, #3]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d11f      	bne.n	80086fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80086d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	0151      	lsls	r1, r2, #5
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	440a      	add	r2, r1
 80086f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d14b      	bne.n	8008798 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008714:	461a      	mov	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	78db      	ldrb	r3, [r3, #3]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d128      	bne.n	8008776 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008730:	2b00      	cmp	r3, #0
 8008732:	d110      	bne.n	8008756 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	0151      	lsls	r1, r2, #5
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	440a      	add	r2, r1
 800874a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800874e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	e00f      	b.n	8008776 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	0151      	lsls	r1, r2, #5
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	440a      	add	r2, r1
 800876c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008774:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	440a      	add	r2, r1
 800878c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008790:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	e12f      	b.n	80089f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	78db      	ldrb	r3, [r3, #3]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d015      	beq.n	80087ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8117 	beq.w	80089f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	f003 030f 	and.w	r3, r3, #15
 80087da:	2101      	movs	r1, #1
 80087dc:	fa01 f303 	lsl.w	r3, r1, r3
 80087e0:	69f9      	ldr	r1, [r7, #28]
 80087e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087e6:	4313      	orrs	r3, r2
 80087e8:	634b      	str	r3, [r1, #52]	; 0x34
 80087ea:	e105      	b.n	80089f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d110      	bne.n	800881e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	4413      	add	r3, r2
 8008804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	0151      	lsls	r1, r2, #5
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	440a      	add	r2, r1
 8008812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008816:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	e00f      	b.n	800883e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	440a      	add	r2, r1
 8008834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	68d9      	ldr	r1, [r3, #12]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	781a      	ldrb	r2, [r3, #0]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	b298      	uxth	r0, r3
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	4603      	mov	r3, r0
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 fa2b 	bl	8008cae <USB_WritePacket>
 8008858:	e0ce      	b.n	80089f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008874:	0cdb      	lsrs	r3, r3, #19
 8008876:	04db      	lsls	r3, r3, #19
 8008878:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	0151      	lsls	r1, r2, #5
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	440a      	add	r2, r1
 8008890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008894:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008898:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800889c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d126      	bne.n	80088f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b2:	691a      	ldr	r2, [r3, #16]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088bc:	69b9      	ldr	r1, [r7, #24]
 80088be:	0148      	lsls	r0, r1, #5
 80088c0:	69f9      	ldr	r1, [r7, #28]
 80088c2:	4401      	add	r1, r0
 80088c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088c8:	4313      	orrs	r3, r2
 80088ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	0151      	lsls	r1, r2, #5
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	440a      	add	r2, r1
 80088e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088ea:	6113      	str	r3, [r2, #16]
 80088ec:	e036      	b.n	800895c <USB_EPStartXfer+0x3dc>
 80088ee:	bf00      	nop
 80088f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	695a      	ldr	r2, [r3, #20]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	4413      	add	r3, r2
 80088fe:	1e5a      	subs	r2, r3, #1
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	fbb2 f3f3 	udiv	r3, r2, r3
 8008908:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008916:	691a      	ldr	r2, [r3, #16]
 8008918:	8afb      	ldrh	r3, [r7, #22]
 800891a:	04d9      	lsls	r1, r3, #19
 800891c:	4b39      	ldr	r3, [pc, #228]	; (8008a04 <USB_EPStartXfer+0x484>)
 800891e:	400b      	ands	r3, r1
 8008920:	69b9      	ldr	r1, [r7, #24]
 8008922:	0148      	lsls	r0, r1, #5
 8008924:	69f9      	ldr	r1, [r7, #28]
 8008926:	4401      	add	r1, r0
 8008928:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800892c:	4313      	orrs	r3, r2
 800892e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893c:	691a      	ldr	r2, [r3, #16]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	8af9      	ldrh	r1, [r7, #22]
 8008944:	fb01 f303 	mul.w	r3, r1, r3
 8008948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800894c:	69b9      	ldr	r1, [r7, #24]
 800894e:	0148      	lsls	r0, r1, #5
 8008950:	69f9      	ldr	r1, [r7, #28]
 8008952:	4401      	add	r1, r0
 8008954:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008958:	4313      	orrs	r3, r2
 800895a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d10d      	bne.n	800897e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	68d9      	ldr	r1, [r3, #12]
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	460a      	mov	r2, r1
 800897c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	78db      	ldrb	r3, [r3, #3]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d128      	bne.n	80089d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008992:	2b00      	cmp	r3, #0
 8008994:	d110      	bne.n	80089b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	0151      	lsls	r1, r2, #5
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	440a      	add	r2, r1
 80089ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	e00f      	b.n	80089d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	0151      	lsls	r1, r2, #5
 80089ea:	69fa      	ldr	r2, [r7, #28]
 80089ec:	440a      	add	r2, r1
 80089ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3720      	adds	r7, #32
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	1ff80000 	.word	0x1ff80000

08008a08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	4613      	mov	r3, r2
 8008a14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	785b      	ldrb	r3, [r3, #1]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	f040 80cd 	bne.w	8008bc4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d132      	bne.n	8008a98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	0151      	lsls	r1, r2, #5
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	440a      	add	r2, r1
 8008a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	0151      	lsls	r1, r2, #5
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	0151      	lsls	r1, r2, #5
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	440a      	add	r2, r1
 8008a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a90:	0cdb      	lsrs	r3, r3, #19
 8008a92:	04db      	lsls	r3, r3, #19
 8008a94:	6113      	str	r3, [r2, #16]
 8008a96:	e04e      	b.n	8008b36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab2:	0cdb      	lsrs	r3, r3, #19
 8008ab4:	04db      	lsls	r3, r3, #19
 8008ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ad6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ada:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	695a      	ldr	r2, [r3, #20]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d903      	bls.n	8008af0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	0151      	lsls	r1, r2, #5
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	440a      	add	r2, r1
 8008b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b26:	6939      	ldr	r1, [r7, #16]
 8008b28:	0148      	lsls	r0, r1, #5
 8008b2a:	6979      	ldr	r1, [r7, #20]
 8008b2c:	4401      	add	r1, r0
 8008b2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b32:	4313      	orrs	r3, r2
 8008b34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d11e      	bne.n	8008b7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d009      	beq.n	8008b58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b50:	461a      	mov	r2, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	0151      	lsls	r1, r2, #5
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	440a      	add	r2, r1
 8008b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	e092      	b.n	8008ca0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d07e      	beq.n	8008ca0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb8:	6979      	ldr	r1, [r7, #20]
 8008bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	634b      	str	r3, [r1, #52]	; 0x34
 8008bc2:	e06d      	b.n	8008ca0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	0151      	lsls	r1, r2, #5
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	440a      	add	r2, r1
 8008bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bde:	0cdb      	lsrs	r3, r3, #19
 8008be0:	04db      	lsls	r3, r3, #19
 8008be2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	0151      	lsls	r1, r2, #5
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	440a      	add	r2, r1
 8008bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c06:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	0151      	lsls	r1, r2, #5
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	440a      	add	r2, r1
 8008c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c44:	691a      	ldr	r2, [r3, #16]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c4e:	6939      	ldr	r1, [r7, #16]
 8008c50:	0148      	lsls	r0, r1, #5
 8008c52:	6979      	ldr	r1, [r7, #20]
 8008c54:	4401      	add	r1, r0
 8008c56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d10d      	bne.n	8008c80 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	68d9      	ldr	r1, [r3, #12]
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7c:	460a      	mov	r2, r1
 8008c7e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	0151      	lsls	r1, r2, #5
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	440a      	add	r2, r1
 8008c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b089      	sub	sp, #36	; 0x24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	4611      	mov	r1, r2
 8008cba:	461a      	mov	r2, r3
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	71fb      	strb	r3, [r7, #7]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008ccc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d11a      	bne.n	8008d0a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008cd4:	88bb      	ldrh	r3, [r7, #4]
 8008cd6:	3303      	adds	r3, #3
 8008cd8:	089b      	lsrs	r3, r3, #2
 8008cda:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	e00f      	b.n	8008d02 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	031a      	lsls	r2, r3, #12
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cee:	461a      	mov	r2, r3
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	61bb      	str	r3, [r7, #24]
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d3eb      	bcc.n	8008ce2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3724      	adds	r7, #36	; 0x24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b089      	sub	sp, #36	; 0x24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4613      	mov	r3, r2
 8008d24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008d2e:	88fb      	ldrh	r3, [r7, #6]
 8008d30:	3303      	adds	r3, #3
 8008d32:	089b      	lsrs	r3, r3, #2
 8008d34:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008d36:	2300      	movs	r3, #0
 8008d38:	61bb      	str	r3, [r7, #24]
 8008d3a:	e00b      	b.n	8008d54 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	3301      	adds	r3, #1
 8008d52:	61bb      	str	r3, [r7, #24]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d3ef      	bcc.n	8008d3c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008d5c:	69fb      	ldr	r3, [r7, #28]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3724      	adds	r7, #36	; 0x24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b085      	sub	sp, #20
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d12c      	bne.n	8008de0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	db12      	blt.n	8008dbe <USB_EPSetStall+0x54>
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00f      	beq.n	8008dbe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	0151      	lsls	r1, r2, #5
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	440a      	add	r2, r1
 8008db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008dbc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	0151      	lsls	r1, r2, #5
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	440a      	add	r2, r1
 8008dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	e02b      	b.n	8008e38 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	db12      	blt.n	8008e18 <USB_EPSetStall+0xae>
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00f      	beq.n	8008e18 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e16:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	0151      	lsls	r1, r2, #5
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	440a      	add	r2, r1
 8008e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d128      	bne.n	8008eb4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	0151      	lsls	r1, r2, #5
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	440a      	add	r2, r1
 8008e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	78db      	ldrb	r3, [r3, #3]
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d003      	beq.n	8008e92 <USB_EPClearStall+0x4c>
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	78db      	ldrb	r3, [r3, #3]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d138      	bne.n	8008f04 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	0151      	lsls	r1, r2, #5
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	440a      	add	r2, r1
 8008ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	e027      	b.n	8008f04 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ed2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	78db      	ldrb	r3, [r3, #3]
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d003      	beq.n	8008ee4 <USB_EPClearStall+0x9e>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	78db      	ldrb	r3, [r3, #3]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d10f      	bne.n	8008f04 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	0151      	lsls	r1, r2, #5
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	440a      	add	r2, r1
 8008efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f02:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b085      	sub	sp, #20
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f34:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008f46:	68f9      	ldr	r1, [r7, #12]
 8008f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f78:	f023 0302 	bic.w	r3, r3, #2
 8008f7c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008f7e:	2003      	movs	r0, #3
 8008f80:	f7f8 f83e 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fa8:	f043 0302 	orr.w	r3, r3, #2
 8008fac:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008fae:	2003      	movs	r0, #3
 8008fb0:	f7f8 f826 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b085      	sub	sp, #20
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	4013      	ands	r3, r2
 8009006:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	0c1b      	lsrs	r3, r3, #16
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	4013      	ands	r3, r2
 800903a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	b29b      	uxth	r3, r3
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	4013      	ands	r3, r2
 8009078:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800907a:	68bb      	ldr	r3, [r7, #8]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	fa22 f303 	lsr.w	r3, r2, r3
 80090b8:	01db      	lsls	r3, r3, #7
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	4313      	orrs	r3, r2
 80090c0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4013      	ands	r3, r2
 80090d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090d6:	68bb      	ldr	r3, [r7, #8]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	f003 0301 	and.w	r3, r3, #1
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800911e:	f023 0307 	bic.w	r3, r3, #7
 8009122:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009136:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	460b      	mov	r3, r1
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	333c      	adds	r3, #60	; 0x3c
 800915e:	3304      	adds	r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	4a26      	ldr	r2, [pc, #152]	; (8009200 <USB_EP0_OutStart+0xb8>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d90a      	bls.n	8009182 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800917c:	d101      	bne.n	8009182 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	e037      	b.n	80091f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009188:	461a      	mov	r2, r3
 800918a:	2300      	movs	r3, #0
 800918c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091b0:	f043 0318 	orr.w	r3, r3, #24
 80091b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80091c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d10f      	bne.n	80091f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d6:	461a      	mov	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80091ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	4f54300a 	.word	0x4f54300a

08009204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3301      	adds	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4a13      	ldr	r2, [pc, #76]	; (8009268 <USB_CoreReset+0x64>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d901      	bls.n	8009222 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800921e:	2303      	movs	r3, #3
 8009220:	e01b      	b.n	800925a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	daf2      	bge.n	8009210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f043 0201 	orr.w	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3301      	adds	r3, #1
 800923e:	60fb      	str	r3, [r7, #12]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4a09      	ldr	r2, [pc, #36]	; (8009268 <USB_CoreReset+0x64>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d901      	bls.n	800924c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e006      	b.n	800925a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b01      	cmp	r3, #1
 8009256:	d0f0      	beq.n	800923a <USB_CoreReset+0x36>

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	00030d40 	.word	0x00030d40

0800926c <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
	USBD_HID_Init(pdev, cfgidx);
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fbab 	bl	80099d8 <USBD_HID_Init>
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8009282:	f643 4050 	movw	r0, #15440	; 0x3c50
 8009286:	f006 f92d 	bl	800f4e4 <malloc>
 800928a:	4603      	mov	r3, r0
 800928c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d105      	bne.n	80092a0 <USBD_AUDIO_Init+0x34>
  {
    pdev->pClassData = NULL;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800929c:	2302      	movs	r3, #2
 800929e:	e04b      	b.n	8009338 <USBD_AUDIO_Init+0xcc>
  }

  pdev->pClassData = (void *)haudio;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	7c1b      	ldrb	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d104      	bne.n	80092ba <USBD_AUDIO_Init+0x4e>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80092b8:	e003      	b.n	80092c2 <USBD_AUDIO_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 80092c2:	23c0      	movs	r3, #192	; 0xc0
 80092c4:	2201      	movs	r2, #1
 80092c6:	2101      	movs	r1, #1
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f005 fd76 	bl	800edba <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80092e2:	3304      	adds	r3, #4
 80092e4:	2203      	movs	r2, #3
 80092e6:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80092ee:	3308      	adds	r3, #8
 80092f0:	2200      	movs	r2, #0
 80092f2:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80092fa:	3306      	adds	r3, #6
 80092fc:	2200      	movs	r2, #0
 80092fe:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009306:	3305      	adds	r3, #5
 8009308:	2200      	movs	r2, #0
 800930a:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2200      	movs	r2, #0
 8009316:	2146      	movs	r1, #70	; 0x46
 8009318:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800931c:	4798      	blx	r3
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <USBD_AUDIO_Init+0xbc>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8009324:	2303      	movs	r3, #3
 8009326:	e007      	b.n	8009338 <USBD_AUDIO_Init+0xcc>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	1d1a      	adds	r2, r3, #4
 800932c:	23c0      	movs	r3, #192	; 0xc0
 800932e:	2101      	movs	r1, #1
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f005 fe31 	bl	800ef98 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_HID_DeInit(pdev, cfgidx);
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fb75 	bl	8009a40 <USBD_HID_DeInit>
  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8009356:	2101      	movs	r1, #1
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f005 fd54 	bl	800ee06 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00f      	beq.n	8009398 <USBD_AUDIO_DeInit+0x58>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	2000      	movs	r0, #0
 8009382:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800938a:	4618      	mov	r0, r3
 800938c:	f006 f8b2 	bl	800f4f4 <free>
    pdev->pClassData = NULL;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
	if (req->wIndex==2)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	889b      	ldrh	r3, [r3, #4]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d105      	bne.n	80093c2 <USBD_AUDIO_Setup+0x1e>
	{
		return USBD_HID_Setup(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fb65 	bl	8009a88 <USBD_HID_Setup>
 80093be:	4603      	mov	r3, r0
 80093c0:	e0b6      	b.n	8009530 <USBD_AUDIO_Setup+0x18c>
	}
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093d0:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d01a      	beq.n	8009414 <USBD_AUDIO_Setup+0x70>
 80093de:	2b20      	cmp	r3, #32
 80093e0:	f040 809e 	bne.w	8009520 <USBD_AUDIO_Setup+0x17c>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	785b      	ldrb	r3, [r3, #1]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d006      	beq.n	80093fa <USBD_AUDIO_Setup+0x56>
 80093ec:	2b81      	cmp	r3, #129	; 0x81
 80093ee:	d109      	bne.n	8009404 <USBD_AUDIO_Setup+0x60>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fa76 	bl	80098e4 <AUDIO_REQ_GetCurrent>
      break;
 80093f8:	e00b      	b.n	8009412 <USBD_AUDIO_Setup+0x6e>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fa91 	bl	8009924 <AUDIO_REQ_SetCurrent>
      break;
 8009402:	e006      	b.n	8009412 <USBD_AUDIO_Setup+0x6e>

    default:
      USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 fc86 	bl	800ad18 <USBD_CtlError>
      ret = USBD_FAIL;
 800940c:	2303      	movs	r3, #3
 800940e:	75fb      	strb	r3, [r7, #23]
      break;
 8009410:	bf00      	nop
    }
    break;
 8009412:	e08c      	b.n	800952e <USBD_AUDIO_Setup+0x18a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b0b      	cmp	r3, #11
 800941a:	d876      	bhi.n	800950a <USBD_AUDIO_Setup+0x166>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <USBD_AUDIO_Setup+0x80>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009455 	.word	0x08009455
 8009428:	08009519 	.word	0x08009519
 800942c:	0800950b 	.word	0x0800950b
 8009430:	0800950b 	.word	0x0800950b
 8009434:	0800950b 	.word	0x0800950b
 8009438:	0800950b 	.word	0x0800950b
 800943c:	0800947d 	.word	0x0800947d
 8009440:	0800950b 	.word	0x0800950b
 8009444:	0800950b 	.word	0x0800950b
 8009448:	0800950b 	.word	0x0800950b
 800944c:	080094a7 	.word	0x080094a7
 8009450:	080094cd 	.word	0x080094cd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945a:	2b03      	cmp	r3, #3
 800945c:	d107      	bne.n	800946e <USBD_AUDIO_Setup+0xca>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800945e:	f107 0308 	add.w	r3, r7, #8
 8009462:	2202      	movs	r2, #2
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f001 fcc7 	bl	800adfa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800946c:	e057      	b.n	800951e <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 fc51 	bl	800ad18 <USBD_CtlError>
        ret = USBD_FAIL;
 8009476:	2303      	movs	r3, #3
 8009478:	75fb      	strb	r3, [r7, #23]
      break;
 800947a:	e050      	b.n	800951e <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	885b      	ldrh	r3, [r3, #2]
 8009480:	0a1b      	lsrs	r3, r3, #8
 8009482:	b29b      	uxth	r3, r3
 8009484:	2b21      	cmp	r3, #33	; 0x21
 8009486:	d149      	bne.n	800951c <USBD_AUDIO_Setup+0x178>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 8009488:	4b2b      	ldr	r3, [pc, #172]	; (8009538 <USBD_AUDIO_Setup+0x194>)
 800948a:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	88db      	ldrh	r3, [r3, #6]
 8009490:	2b09      	cmp	r3, #9
 8009492:	bf28      	it	cs
 8009494:	2309      	movcs	r3, #9
 8009496:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009498:	897b      	ldrh	r3, [r7, #10]
 800949a:	461a      	mov	r2, r3
 800949c:	68f9      	ldr	r1, [r7, #12]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f001 fcab 	bl	800adfa <USBD_CtlSendData>
      }
      break;
 80094a4:	e03a      	b.n	800951c <USBD_AUDIO_Setup+0x178>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d106      	bne.n	80094be <USBD_AUDIO_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	2201      	movs	r2, #1
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f001 fc9f 	bl	800adfa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80094bc:	e02f      	b.n	800951e <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 fc29 	bl	800ad18 <USBD_CtlError>
        ret = USBD_FAIL;
 80094c6:	2303      	movs	r3, #3
 80094c8:	75fb      	strb	r3, [r7, #23]
      break;
 80094ca:	e028      	b.n	800951e <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d112      	bne.n	80094fc <USBD_AUDIO_Setup+0x158>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	885b      	ldrh	r3, [r3, #2]
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d806      	bhi.n	80094ee <USBD_AUDIO_Setup+0x14a>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	885b      	ldrh	r3, [r3, #2]
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80094ec:	e017      	b.n	800951e <USBD_AUDIO_Setup+0x17a>
          USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 fc11 	bl	800ad18 <USBD_CtlError>
          ret = USBD_FAIL;
 80094f6:	2303      	movs	r3, #3
 80094f8:	75fb      	strb	r3, [r7, #23]
      break;
 80094fa:	e010      	b.n	800951e <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 fc0a 	bl	800ad18 <USBD_CtlError>
        ret = USBD_FAIL;
 8009504:	2303      	movs	r3, #3
 8009506:	75fb      	strb	r3, [r7, #23]
      break;
 8009508:	e009      	b.n	800951e <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 fc03 	bl	800ad18 <USBD_CtlError>
      ret = USBD_FAIL;
 8009512:	2303      	movs	r3, #3
 8009514:	75fb      	strb	r3, [r7, #23]
      break;
 8009516:	e002      	b.n	800951e <USBD_AUDIO_Setup+0x17a>
      break;
 8009518:	bf00      	nop
 800951a:	e008      	b.n	800952e <USBD_AUDIO_Setup+0x18a>
      break;
 800951c:	bf00      	nop
    }
    break;
 800951e:	e006      	b.n	800952e <USBD_AUDIO_Setup+0x18a>
  default:
    USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 fbf8 	bl	800ad18 <USBD_CtlError>
    ret = USBD_FAIL;
 8009528:	2303      	movs	r3, #3
 800952a:	75fb      	strb	r3, [r7, #23]
    break;
 800952c:	bf00      	nop
  }

  return (uint8_t)ret;
 800952e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20000052 	.word	0x20000052

0800953c <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2297      	movs	r2, #151	; 0x97
 8009548:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800954a:	4b03      	ldr	r3, [pc, #12]	; (8009558 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	20000040 	.word	0x20000040

0800955c <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
//  UNUSED(pdev);
//  UNUSED(epnum);
	USBD_HID_DataIn(pdev, epnum);
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fbab 	bl	8009cc8 <USBD_HID_DataIn>
  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800958a:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009592:	330a      	adds	r3, #10
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d11d      	bne.n	80095d6 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 80095a0:	330c      	adds	r3, #12
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d116      	bne.n	80095d6 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ae:	691a      	ldr	r2, [r3, #16]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80095b6:	330b      	adds	r3, #11
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	4618      	mov	r0, r3
 80095bc:	4790      	blx	r2
      haudio->control.cmd = 0U;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80095c4:	330a      	adds	r3, #10
 80095c6:	2200      	movs	r2, #0
 80095c8:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 80095d0:	330b      	adds	r3, #11
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b083      	sub	sp, #12
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <USBD_AUDIO_Sync>:
  * @param  pdev: device instance
  * @retval status
  */
extern int packetReceived;
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 8009618:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800961c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80b1 	beq.w	800978c <USBD_AUDIO_Sync+0x180>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009630:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009638:	3304      	adds	r3, #4
 800963a:	78fa      	ldrb	r2, [r7, #3]
 800963c:	701a      	strb	r2, [r3, #0]

  if (haudio->rd_enable == 1U)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009644:	3305      	adds	r3, #5
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d11b      	bne.n	8009684 <USBD_AUDIO_Sync+0x78>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009652:	3306      	adds	r3, #6
 8009654:	881a      	ldrh	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	b29b      	uxth	r3, r3
 800965a:	4413      	add	r3, r2
 800965c:	b29a      	uxth	r2, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009664:	3306      	adds	r3, #6
 8009666:	801a      	strh	r2, [r3, #0]

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800966e:	3306      	adds	r3, #6
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8009676:	d105      	bne.n	8009684 <USBD_AUDIO_Sync+0x78>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800967e:	3306      	adds	r3, #6
 8009680:	2200      	movs	r2, #0
 8009682:	801a      	strh	r2, [r3, #0]
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800968a:	3306      	adds	r3, #6
 800968c:	881a      	ldrh	r2, [r3, #0]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009694:	3308      	adds	r3, #8
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d93c      	bls.n	8009716 <USBD_AUDIO_Sync+0x10a>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80096a2:	3306      	adds	r3, #6
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80096ae:	3308      	adds	r3, #8
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2bbf      	cmp	r3, #191	; 0xbf
 80096b6:	dc03      	bgt.n	80096c0 <USBD_AUDIO_Sync+0xb4>
    {
      BufferSize += 4U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3304      	adds	r3, #4
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	e04e      	b.n	800975e <USBD_AUDIO_Sync+0x152>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80096c6:	3306      	adds	r3, #6
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80096d2:	3308      	adds	r3, #8
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 80096dc:	dd3f      	ble.n	800975e <USBD_AUDIO_Sync+0x152>
      {
       // BufferSize -= 4U;
    	  haudio->alt_setting = 0U;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
    	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80096ea:	3304      	adds	r3, #4
 80096ec:	2203      	movs	r2, #3
 80096ee:	701a      	strb	r2, [r3, #0]
    	  haudio->wr_ptr = 0U;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80096f6:	3308      	adds	r3, #8
 80096f8:	2200      	movs	r2, #0
 80096fa:	801a      	strh	r2, [r3, #0]
    	  haudio->rd_ptr = 0U;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009702:	3306      	adds	r3, #6
 8009704:	2200      	movs	r2, #0
 8009706:	801a      	strh	r2, [r3, #0]
    	  haudio->rd_enable = 0U;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800970e:	3305      	adds	r3, #5
 8009710:	2200      	movs	r2, #0
 8009712:	701a      	strb	r2, [r3, #0]
 8009714:	e023      	b.n	800975e <USBD_AUDIO_Sync+0x152>
            }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800971c:	3308      	adds	r3, #8
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009728:	3306      	adds	r3, #6
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	2bbf      	cmp	r3, #191	; 0xbf
 8009730:	dc03      	bgt.n	800973a <USBD_AUDIO_Sync+0x12e>
    {
       BufferSize -= 4U;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3b04      	subs	r3, #4
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e011      	b.n	800975e <USBD_AUDIO_Sync+0x152>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009740:	3308      	adds	r3, #8
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800974c:	3306      	adds	r3, #6
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8009756:	dd02      	ble.n	800975e <USBD_AUDIO_Sync+0x152>
      {
         BufferSize += 4U;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3304      	adds	r3, #4
 800975c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009764:	3304      	adds	r3, #4
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d110      	bne.n	800978e <USBD_AUDIO_Sync+0x182>
  {
	  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	1d10      	adds	r0, r2, #4
 8009778:	2202      	movs	r2, #2
 800977a:	68f9      	ldr	r1, [r7, #12]
 800977c:	4798      	blx	r3
                                                         BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009784:	3304      	adds	r3, #4
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
 800978a:	e000      	b.n	800978e <USBD_AUDIO_Sync+0x182>
    return;
 800978c:	bf00      	nop
  }
}
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097da:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d179      	bne.n	80098d6 <USBD_AUDIO_DataOut+0x10e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f005 fbf7 	bl	800efda <USBD_LL_GetRxDataSize>
 80097ec:	4603      	mov	r3, r0
 80097ee:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097f6:	695c      	ldr	r4, [r3, #20]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80097fe:	3308      	adds	r3, #8
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	3304      	adds	r3, #4
 800980a:	8979      	ldrh	r1, [r7, #10]
 800980c:	2201      	movs	r2, #1
 800980e:	4618      	mov	r0, r3
 8009810:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009818:	3308      	adds	r3, #8
 800981a:	881a      	ldrh	r2, [r3, #0]
 800981c:	897b      	ldrh	r3, [r7, #10]
 800981e:	4413      	add	r3, r2
 8009820:	b29a      	uxth	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009828:	3308      	adds	r3, #8
 800982a:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009832:	3308      	adds	r3, #8
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800983a:	d129      	bne.n	8009890 <USBD_AUDIO_DataOut+0xc8>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009842:	3308      	adds	r3, #8
 8009844:	2200      	movs	r2, #0
 8009846:	801a      	strh	r2, [r3, #0]
      if (playing==0)
 8009848:	4b25      	ldr	r3, [pc, #148]	; (80098e0 <USBD_AUDIO_DataOut+0x118>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d108      	bne.n	8009862 <USBD_AUDIO_DataOut+0x9a>
    	  {
    	  playing=1;
 8009850:	4b23      	ldr	r3, [pc, #140]	; (80098e0 <USBD_AUDIO_DataOut+0x118>)
 8009852:	2201      	movs	r2, #1
 8009854:	601a      	str	r2, [r3, #0]
    	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800985c:	3304      	adds	r3, #4
 800985e:	2203      	movs	r2, #3
 8009860:	701a      	strb	r2, [r3, #0]
    	  }
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009868:	3304      	adds	r3, #4
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b03      	cmp	r3, #3
 800986e:	d10f      	bne.n	8009890 <USBD_AUDIO_DataOut+0xc8>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	1d10      	adds	r0, r2, #4
 800987c:	2201      	movs	r2, #1
 800987e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8009882:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800988a:	3304      	adds	r3, #4
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009896:	3305      	adds	r3, #5
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10d      	bne.n	80098ba <USBD_AUDIO_DataOut+0xf2>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80098a4:	3308      	adds	r3, #8
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80098ac:	d105      	bne.n	80098ba <USBD_AUDIO_DataOut+0xf2>
      {
        haudio->rd_enable = 1U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80098b4:	3305      	adds	r3, #5
 80098b6:	2201      	movs	r2, #1
 80098b8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80098c0:	3308      	adds	r3, #8
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	1d1a      	adds	r2, r3, #4
 80098cc:	23c0      	movs	r3, #192	; 0xc0
 80098ce:	2101      	movs	r1, #1
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f005 fb61 	bl	800ef98 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd90      	pop	{r4, r7, pc}
 80098e0:	20000468 	.word	0x20000468

080098e4 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098f4:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80098fc:	330b      	adds	r3, #11
 80098fe:	2240      	movs	r2, #64	; 0x40
 8009900:	2100      	movs	r1, #0
 8009902:	4618      	mov	r0, r3
 8009904:	f005 fdfe 	bl	800f504 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800990e:	330b      	adds	r3, #11
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	88d2      	ldrh	r2, [r2, #6]
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 fa6f 	bl	800adfa <USBD_CtlSendData>
}
 800991c:	bf00      	nop
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009934:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	88db      	ldrh	r3, [r3, #6]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d021      	beq.n	8009982 <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009944:	330b      	adds	r3, #11
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	88d2      	ldrh	r2, [r2, #6]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 fa80 	bl	800ae52 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009958:	330a      	adds	r3, #10
 800995a:	2201      	movs	r2, #1
 800995c:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	88db      	ldrh	r3, [r3, #6]
 8009962:	b2da      	uxtb	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800996a:	330b      	adds	r3, #11
 800996c:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	889b      	ldrh	r3, [r3, #4]
 8009972:	0a1b      	lsrs	r3, r3, #8
 8009974:	b29b      	uxth	r3, r3
 8009976:	b2da      	uxtb	r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800997e:	330c      	adds	r3, #12
 8009980:	701a      	strb	r2, [r3, #0]
  }
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	220a      	movs	r2, #10
 8009998:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800999a:	4b03      	ldr	r3, [pc, #12]	; (80099a8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	200000d8 	.word	0x200000d8

080099ac <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80099bc:	2303      	movs	r3, #3
 80099be:	e004      	b.n	80099ca <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
	...

080099d8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80099e4:	2010      	movs	r0, #16
 80099e6:	f005 fd7d 	bl	800f4e4 <malloc>
 80099ea:	4603      	mov	r3, r0
 80099ec:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d104      	bne.n	80099fe <USBD_HID_Init+0x26>
  {
    classData = NULL;
 80099f4:	4b11      	ldr	r3, [pc, #68]	; (8009a3c <USBD_HID_Init+0x64>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
    return (uint8_t)USBD_EMEM;
 80099fa:	2302      	movs	r3, #2
 80099fc:	e01a      	b.n	8009a34 <USBD_HID_Init+0x5c>
  }

  classData = (void *)hhid;
 80099fe:	4a0f      	ldr	r2, [pc, #60]	; (8009a3c <USBD_HID_Init+0x64>)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6013      	str	r3, [r2, #0]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	7c1b      	ldrb	r3, [r3, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d103      	bne.n	8009a14 <USBD_HID_Init+0x3c>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2207      	movs	r2, #7
 8009a10:	875a      	strh	r2, [r3, #58]	; 0x3a
 8009a12:	e002      	b.n	8009a1a <USBD_HID_Init+0x42>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	220a      	movs	r2, #10
 8009a18:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009a1a:	2304      	movs	r3, #4
 8009a1c:	2203      	movs	r2, #3
 8009a1e:	2181      	movs	r1, #129	; 0x81
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f005 f9ca 	bl	800edba <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20000a38 	.word	0x20000a38

08009a40 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8009a4c:	2181      	movs	r1, #129	; 0x81
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f005 f9d9 	bl	800ee06 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (classData != NULL)
 8009a60:	4b08      	ldr	r3, [pc, #32]	; (8009a84 <USBD_HID_DeInit+0x44>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d007      	beq.n	8009a78 <USBD_HID_DeInit+0x38>
  {
    (void)USBD_free(classData);
 8009a68:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <USBD_HID_DeInit+0x44>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f005 fd41 	bl	800f4f4 <free>
    classData = NULL;
 8009a72:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <USBD_HID_DeInit+0x44>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]
  }

  return (uint8_t)USBD_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	20000a38 	.word	0x20000a38

08009a88 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)classData;
 8009a92:	4b78      	ldr	r3, [pc, #480]	; (8009c74 <USBD_HID_Setup+0x1ec>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d046      	beq.n	8009b3a <USBD_HID_Setup+0xb2>
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	f040 80d5 	bne.w	8009c5c <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	785b      	ldrb	r3, [r3, #1]
 8009ab6:	3b02      	subs	r3, #2
 8009ab8:	2b09      	cmp	r3, #9
 8009aba:	d836      	bhi.n	8009b2a <USBD_HID_Setup+0xa2>
 8009abc:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <USBD_HID_Setup+0x3c>)
 8009abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac2:	bf00      	nop
 8009ac4:	08009b1b 	.word	0x08009b1b
 8009ac8:	08009afb 	.word	0x08009afb
 8009acc:	08009b2b 	.word	0x08009b2b
 8009ad0:	08009b2b 	.word	0x08009b2b
 8009ad4:	08009b2b 	.word	0x08009b2b
 8009ad8:	08009b2b 	.word	0x08009b2b
 8009adc:	08009b2b 	.word	0x08009b2b
 8009ae0:	08009b2b 	.word	0x08009b2b
 8009ae4:	08009b09 	.word	0x08009b09
 8009ae8:	08009aed 	.word	0x08009aed
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	885b      	ldrh	r3, [r3, #2]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	601a      	str	r2, [r3, #0]
      break;
 8009af8:	e01e      	b.n	8009b38 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2201      	movs	r2, #1
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 f97a 	bl	800adfa <USBD_CtlSendData>
      break;
 8009b06:	e017      	b.n	8009b38 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	885b      	ldrh	r3, [r3, #2]
 8009b0c:	0a1b      	lsrs	r3, r3, #8
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	461a      	mov	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	605a      	str	r2, [r3, #4]
      break;
 8009b18:	e00e      	b.n	8009b38 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	2201      	movs	r2, #1
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 f969 	bl	800adfa <USBD_CtlSendData>
      break;
 8009b28:	e006      	b.n	8009b38 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f001 f8f3 	bl	800ad18 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b32:	2303      	movs	r3, #3
 8009b34:	75fb      	strb	r3, [r7, #23]
      break;
 8009b36:	bf00      	nop
    }
    break;
 8009b38:	e097      	b.n	8009c6a <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	2b0b      	cmp	r3, #11
 8009b40:	f200 8083 	bhi.w	8009c4a <USBD_HID_Setup+0x1c2>
 8009b44:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <USBD_HID_Setup+0xc4>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009b7d 	.word	0x08009b7d
 8009b50:	08009c59 	.word	0x08009c59
 8009b54:	08009c4b 	.word	0x08009c4b
 8009b58:	08009c4b 	.word	0x08009c4b
 8009b5c:	08009c4b 	.word	0x08009c4b
 8009b60:	08009c4b 	.word	0x08009c4b
 8009b64:	08009ba5 	.word	0x08009ba5
 8009b68:	08009c4b 	.word	0x08009c4b
 8009b6c:	08009c4b 	.word	0x08009c4b
 8009b70:	08009c4b 	.word	0x08009c4b
 8009b74:	08009bfd 	.word	0x08009bfd
 8009b78:	08009c25 	.word	0x08009c25
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d107      	bne.n	8009b96 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b86:	f107 030a 	add.w	r3, r7, #10
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f001 f933 	bl	800adfa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009b94:	e061      	b.n	8009c5a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f001 f8bd 	bl	800ad18 <USBD_CtlError>
        ret = USBD_FAIL;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba2:	e05a      	b.n	8009c5a <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	885b      	ldrh	r3, [r3, #2]
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	2b22      	cmp	r3, #34	; 0x22
 8009bae:	d108      	bne.n	8009bc2 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	88db      	ldrh	r3, [r3, #6]
 8009bb4:	2b2c      	cmp	r3, #44	; 0x2c
 8009bb6:	bf28      	it	cs
 8009bb8:	232c      	movcs	r3, #44	; 0x2c
 8009bba:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8009bbc:	4b2e      	ldr	r3, [pc, #184]	; (8009c78 <USBD_HID_Setup+0x1f0>)
 8009bbe:	613b      	str	r3, [r7, #16]
 8009bc0:	e015      	b.n	8009bee <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	885b      	ldrh	r3, [r3, #2]
 8009bc6:	0a1b      	lsrs	r3, r3, #8
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	2b21      	cmp	r3, #33	; 0x21
 8009bcc:	d108      	bne.n	8009be0 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8009bce:	4b2b      	ldr	r3, [pc, #172]	; (8009c7c <USBD_HID_Setup+0x1f4>)
 8009bd0:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	88db      	ldrh	r3, [r3, #6]
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	bf28      	it	cs
 8009bda:	2309      	movcs	r3, #9
 8009bdc:	82bb      	strh	r3, [r7, #20]
 8009bde:	e006      	b.n	8009bee <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f001 f898 	bl	800ad18 <USBD_CtlError>
        ret = USBD_FAIL;
 8009be8:	2303      	movs	r3, #3
 8009bea:	75fb      	strb	r3, [r7, #23]
        break;
 8009bec:	e035      	b.n	8009c5a <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bee:	8abb      	ldrh	r3, [r7, #20]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	6939      	ldr	r1, [r7, #16]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f001 f900 	bl	800adfa <USBD_CtlSendData>
      break;
 8009bfa:	e02e      	b.n	8009c5a <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d107      	bne.n	8009c16 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	3308      	adds	r3, #8
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 f8f3 	bl	800adfa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009c14:	e021      	b.n	8009c5a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 f87d 	bl	800ad18 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	75fb      	strb	r3, [r7, #23]
      break;
 8009c22:	e01a      	b.n	8009c5a <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d106      	bne.n	8009c3c <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	885b      	ldrh	r3, [r3, #2]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	461a      	mov	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009c3a:	e00e      	b.n	8009c5a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 f86a 	bl	800ad18 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c44:	2303      	movs	r3, #3
 8009c46:	75fb      	strb	r3, [r7, #23]
      break;
 8009c48:	e007      	b.n	8009c5a <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f001 f863 	bl	800ad18 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c52:	2303      	movs	r3, #3
 8009c54:	75fb      	strb	r3, [r7, #23]
      break;
 8009c56:	e000      	b.n	8009c5a <USBD_HID_Setup+0x1d2>
      break;
 8009c58:	bf00      	nop
    }
    break;
 8009c5a:	e006      	b.n	8009c6a <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 f85a 	bl	800ad18 <USBD_CtlError>
    ret = USBD_FAIL;
 8009c64:	2303      	movs	r3, #3
 8009c66:	75fb      	strb	r3, [r7, #23]
    break;
 8009c68:	bf00      	nop
  }

  return (uint8_t)ret;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20000a38 	.word	0x20000a38
 8009c78:	200000f0 	.word	0x200000f0
 8009c7c:	200000e4 	.word	0x200000e4

08009c80 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)classData;
 8009c8e:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <USBD_HID_SendReport+0x44>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9a:	2b03      	cmp	r3, #3
 8009c9c:	d10c      	bne.n	8009cb8 <USBD_HID_SendReport+0x38>
  {
    if (hhid->state == HID_IDLE)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	7b1b      	ldrb	r3, [r3, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d108      	bne.n	8009cb8 <USBD_HID_SendReport+0x38>
    {
      hhid->state = HID_BUSY;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8009cac:	88fb      	ldrh	r3, [r7, #6]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	2181      	movs	r1, #129	; 0x81
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f005 f94f 	bl	800ef56 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000a38 	.word	0x20000a38

08009cc8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)classData)->state = HID_IDLE;
 8009cd4:	4b05      	ldr	r3, [pc, #20]	; (8009cec <USBD_HID_DataIn+0x24>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	20000a38 	.word	0x20000a38

08009cf0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e025      	b.n	8009d54 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d003      	beq.n	8009d2c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	79fa      	ldrb	r2, [r7, #7]
 8009d46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f004 ffcf 	bl	800ecec <USBD_LL_Init>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e010      	b.n	8009d96 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d84:	f107 020e 	add.w	r2, r7, #14
 8009d88:	4610      	mov	r0, r2
 8009d8a:	4798      	blx	r3
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f004 ffec 	bl	800ed84 <USBD_LL_Start>
 8009dac:	4603      	mov	r3, r0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b083      	sub	sp, #12
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d009      	beq.n	8009dfa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	4611      	mov	r1, r2
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
 8009df6:	4603      	mov	r3, r0
 8009df8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d007      	beq.n	8009e2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	78fa      	ldrb	r2, [r7, #3]
 8009e24:	4611      	mov	r1, r2
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	4798      	blx	r3
  }

  return USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 ff2c 	bl	800aca4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e68:	f003 031f 	and.w	r3, r3, #31
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d00e      	beq.n	8009e8e <USBD_LL_SetupStage+0x5a>
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d302      	bcc.n	8009e7a <USBD_LL_SetupStage+0x46>
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d014      	beq.n	8009ea2 <USBD_LL_SetupStage+0x6e>
 8009e78:	e01d      	b.n	8009eb6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa18 	bl	800a2b8 <USBD_StdDevReq>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e8c:	e020      	b.n	8009ed0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fa7c 	bl	800a394 <USBD_StdItfReq>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea0:	e016      	b.n	8009ed0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fab8 	bl	800a420 <USBD_StdEPReq>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb4:	e00c      	b.n	8009ed0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ebc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f004 ffbd 	bl	800ee44 <USBD_LL_StallEP>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ece:	bf00      	nop
  }

  return ret;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b086      	sub	sp, #24
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	607a      	str	r2, [r7, #4]
 8009ee6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009ee8:	7afb      	ldrb	r3, [r7, #11]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d137      	bne.n	8009f5e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ef4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d14a      	bne.n	8009f96 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d913      	bls.n	8009f34 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	1ad2      	subs	r2, r2, r3
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	4293      	cmp	r3, r2
 8009f24:	bf28      	it	cs
 8009f26:	4613      	movcs	r3, r2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 ffad 	bl	800ae8c <USBD_CtlContinueRx>
 8009f32:	e030      	b.n	8009f96 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d105      	bne.n	8009f56 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 ffa9 	bl	800aeae <USBD_CtlSendStatus>
 8009f5c:	e01b      	b.n	8009f96 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d013      	beq.n	8009f92 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d10e      	bne.n	8009f92 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	7afa      	ldrb	r2, [r7, #11]
 8009f7e:	4611      	mov	r1, r2
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	4798      	blx	r3
 8009f84:	4603      	mov	r3, r0
 8009f86:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	e002      	b.n	8009f98 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e000      	b.n	8009f98 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d16a      	bne.n	800a08a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d155      	bne.n	800a070 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d914      	bls.n	8009ffa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	1ad2      	subs	r2, r2, r3
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 ff22 	bl	800ae30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fec:	2300      	movs	r3, #0
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f004 ffd0 	bl	800ef98 <USBD_LL_PrepareReceive>
 8009ff8:	e03a      	b.n	800a070 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	429a      	cmp	r2, r3
 800a004:	d11c      	bne.n	800a040 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a00e:	429a      	cmp	r2, r3
 800a010:	d316      	bcc.n	800a040 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d20f      	bcs.n	800a040 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a020:	2200      	movs	r2, #0
 800a022:	2100      	movs	r1, #0
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 ff03 	bl	800ae30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a032:	2300      	movs	r3, #0
 800a034:	2200      	movs	r2, #0
 800a036:	2100      	movs	r1, #0
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f004 ffad 	bl	800ef98 <USBD_LL_PrepareReceive>
 800a03e:	e017      	b.n	800a070 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00a      	beq.n	800a062 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a052:	2b03      	cmp	r3, #3
 800a054:	d105      	bne.n	800a062 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a062:	2180      	movs	r1, #128	; 0x80
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f004 feed 	bl	800ee44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 ff32 	bl	800aed4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a076:	2b01      	cmp	r3, #1
 800a078:	d123      	bne.n	800a0c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff fe9b 	bl	8009db6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a088:	e01b      	b.n	800a0c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d013      	beq.n	800a0be <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d10e      	bne.n	800a0be <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	7afa      	ldrb	r2, [r7, #11]
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	4798      	blx	r3
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	e002      	b.n	800a0c4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e000      	b.n	800a0c4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d009      	beq.n	800a110 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6852      	ldr	r2, [r2, #4]
 800a108:	b2d2      	uxtb	r2, r2
 800a10a:	4611      	mov	r1, r2
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a110:	2340      	movs	r3, #64	; 0x40
 800a112:	2200      	movs	r2, #0
 800a114:	2100      	movs	r1, #0
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f004 fe4f 	bl	800edba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2240      	movs	r2, #64	; 0x40
 800a128:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a12c:	2340      	movs	r3, #64	; 0x40
 800a12e:	2200      	movs	r2, #0
 800a130:	2180      	movs	r1, #128	; 0x80
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f004 fe41 	bl	800edba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2240      	movs	r2, #64	; 0x40
 800a142:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a14e:	b480      	push	{r7}
 800a150:	b083      	sub	sp, #12
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	460b      	mov	r3, r1
 800a158:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a16e:	b480      	push	{r7}
 800a170:	b083      	sub	sp, #12
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2204      	movs	r2, #4
 800a186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d105      	bne.n	800a1b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d10b      	bne.n	800a1ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	460b      	mov	r3, r1
 800a21c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d009      	beq.n	800a270 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	6852      	ldr	r2, [r2, #4]
 800a268:	b2d2      	uxtb	r2, r2
 800a26a:	4611      	mov	r1, r2
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	4798      	blx	r3
  }

  return USBD_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b087      	sub	sp, #28
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	3301      	adds	r3, #1
 800a290:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a298:	8a3b      	ldrh	r3, [r7, #16]
 800a29a:	021b      	lsls	r3, r3, #8
 800a29c:	b21a      	sxth	r2, r3
 800a29e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	b21b      	sxth	r3, r3
 800a2a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a2a8:	89fb      	ldrh	r3, [r7, #14]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	d004      	beq.n	800a2dc <USBD_StdDevReq+0x24>
 800a2d2:	2b40      	cmp	r3, #64	; 0x40
 800a2d4:	d002      	beq.n	800a2dc <USBD_StdDevReq+0x24>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <USBD_StdDevReq+0x38>
 800a2da:	e050      	b.n	800a37e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	4798      	blx	r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ee:	e04b      	b.n	800a388 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	785b      	ldrb	r3, [r3, #1]
 800a2f4:	2b09      	cmp	r3, #9
 800a2f6:	d83c      	bhi.n	800a372 <USBD_StdDevReq+0xba>
 800a2f8:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <USBD_StdDevReq+0x48>)
 800a2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fe:	bf00      	nop
 800a300:	0800a355 	.word	0x0800a355
 800a304:	0800a369 	.word	0x0800a369
 800a308:	0800a373 	.word	0x0800a373
 800a30c:	0800a35f 	.word	0x0800a35f
 800a310:	0800a373 	.word	0x0800a373
 800a314:	0800a333 	.word	0x0800a333
 800a318:	0800a329 	.word	0x0800a329
 800a31c:	0800a373 	.word	0x0800a373
 800a320:	0800a34b 	.word	0x0800a34b
 800a324:	0800a33d 	.word	0x0800a33d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f9ce 	bl	800a6cc <USBD_GetDescriptor>
      break;
 800a330:	e024      	b.n	800a37c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fb33 	bl	800a9a0 <USBD_SetAddress>
      break;
 800a33a:	e01f      	b.n	800a37c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fb70 	bl	800aa24 <USBD_SetConfig>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]
      break;
 800a348:	e018      	b.n	800a37c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fc0d 	bl	800ab6c <USBD_GetConfig>
      break;
 800a352:	e013      	b.n	800a37c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fc3c 	bl	800abd4 <USBD_GetStatus>
      break;
 800a35c:	e00e      	b.n	800a37c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fc6a 	bl	800ac3a <USBD_SetFeature>
      break;
 800a366:	e009      	b.n	800a37c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fc79 	bl	800ac62 <USBD_ClrFeature>
      break;
 800a370:	e004      	b.n	800a37c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fccf 	bl	800ad18 <USBD_CtlError>
      break;
 800a37a:	bf00      	nop
    }
    break;
 800a37c:	e004      	b.n	800a388 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fcc9 	bl	800ad18 <USBD_CtlError>
    break;
 800a386:	bf00      	nop
  }

  return ret;
 800a388:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop

0800a394 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3aa:	2b20      	cmp	r3, #32
 800a3ac:	d003      	beq.n	800a3b6 <USBD_StdItfReq+0x22>
 800a3ae:	2b40      	cmp	r3, #64	; 0x40
 800a3b0:	d001      	beq.n	800a3b6 <USBD_StdItfReq+0x22>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d12a      	bne.n	800a40c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d81d      	bhi.n	800a3fe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	889b      	ldrh	r3, [r3, #4]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d813      	bhi.n	800a3f4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4798      	blx	r3
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	88db      	ldrh	r3, [r3, #6]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d110      	bne.n	800a408 <USBD_StdItfReq+0x74>
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10d      	bne.n	800a408 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fd5e 	bl	800aeae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a3f2:	e009      	b.n	800a408 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fc8e 	bl	800ad18 <USBD_CtlError>
      break;
 800a3fc:	e004      	b.n	800a408 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fc89 	bl	800ad18 <USBD_CtlError>
      break;
 800a406:	e000      	b.n	800a40a <USBD_StdItfReq+0x76>
      break;
 800a408:	bf00      	nop
    }
    break;
 800a40a:	e004      	b.n	800a416 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fc82 	bl	800ad18 <USBD_CtlError>
    break;
 800a414:	bf00      	nop
  }

  return ret;
 800a416:	7bfb      	ldrb	r3, [r7, #15]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	889b      	ldrh	r3, [r3, #4]
 800a432:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	d004      	beq.n	800a44a <USBD_StdEPReq+0x2a>
 800a440:	2b40      	cmp	r3, #64	; 0x40
 800a442:	d002      	beq.n	800a44a <USBD_StdEPReq+0x2a>
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00a      	beq.n	800a45e <USBD_StdEPReq+0x3e>
 800a448:	e135      	b.n	800a6b6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	4798      	blx	r3
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
    break;
 800a45c:	e130      	b.n	800a6c0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	785b      	ldrb	r3, [r3, #1]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d03e      	beq.n	800a4e4 <USBD_StdEPReq+0xc4>
 800a466:	2b03      	cmp	r3, #3
 800a468:	d002      	beq.n	800a470 <USBD_StdEPReq+0x50>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d077      	beq.n	800a55e <USBD_StdEPReq+0x13e>
 800a46e:	e11c      	b.n	800a6aa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a476:	2b02      	cmp	r3, #2
 800a478:	d002      	beq.n	800a480 <USBD_StdEPReq+0x60>
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d015      	beq.n	800a4aa <USBD_StdEPReq+0x8a>
 800a47e:	e02b      	b.n	800a4d8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a480:	7bbb      	ldrb	r3, [r7, #14]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00c      	beq.n	800a4a0 <USBD_StdEPReq+0x80>
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	2b80      	cmp	r3, #128	; 0x80
 800a48a:	d009      	beq.n	800a4a0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f004 fcd7 	bl	800ee44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a496:	2180      	movs	r1, #128	; 0x80
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f004 fcd3 	bl	800ee44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a49e:	e020      	b.n	800a4e2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fc38 	bl	800ad18 <USBD_CtlError>
        break;
 800a4a8:	e01b      	b.n	800a4e2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	885b      	ldrh	r3, [r3, #2]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10e      	bne.n	800a4d0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00b      	beq.n	800a4d0 <USBD_StdEPReq+0xb0>
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	2b80      	cmp	r3, #128	; 0x80
 800a4bc:	d008      	beq.n	800a4d0 <USBD_StdEPReq+0xb0>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	88db      	ldrh	r3, [r3, #6]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d104      	bne.n	800a4d0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4c6:	7bbb      	ldrb	r3, [r7, #14]
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f004 fcba 	bl	800ee44 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fcec 	bl	800aeae <USBD_CtlSendStatus>

        break;
 800a4d6:	e004      	b.n	800a4e2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fc1c 	bl	800ad18 <USBD_CtlError>
        break;
 800a4e0:	bf00      	nop
      }
      break;
 800a4e2:	e0e7      	b.n	800a6b4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d002      	beq.n	800a4f4 <USBD_StdEPReq+0xd4>
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d015      	beq.n	800a51e <USBD_StdEPReq+0xfe>
 800a4f2:	e02d      	b.n	800a550 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4f4:	7bbb      	ldrb	r3, [r7, #14]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00c      	beq.n	800a514 <USBD_StdEPReq+0xf4>
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	2b80      	cmp	r3, #128	; 0x80
 800a4fe:	d009      	beq.n	800a514 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a500:	7bbb      	ldrb	r3, [r7, #14]
 800a502:	4619      	mov	r1, r3
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f004 fc9d 	bl	800ee44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a50a:	2180      	movs	r1, #128	; 0x80
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f004 fc99 	bl	800ee44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a512:	e023      	b.n	800a55c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fbfe 	bl	800ad18 <USBD_CtlError>
        break;
 800a51c:	e01e      	b.n	800a55c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	885b      	ldrh	r3, [r3, #2]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d119      	bne.n	800a55a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d004      	beq.n	800a53a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a530:	7bbb      	ldrb	r3, [r7, #14]
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f004 fca4 	bl	800ee82 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fcb7 	bl	800aeae <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	4798      	blx	r3
        }
        break;
 800a54e:	e004      	b.n	800a55a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fbe0 	bl	800ad18 <USBD_CtlError>
        break;
 800a558:	e000      	b.n	800a55c <USBD_StdEPReq+0x13c>
        break;
 800a55a:	bf00      	nop
      }
      break;
 800a55c:	e0aa      	b.n	800a6b4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a564:	2b02      	cmp	r3, #2
 800a566:	d002      	beq.n	800a56e <USBD_StdEPReq+0x14e>
 800a568:	2b03      	cmp	r3, #3
 800a56a:	d032      	beq.n	800a5d2 <USBD_StdEPReq+0x1b2>
 800a56c:	e097      	b.n	800a69e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d007      	beq.n	800a584 <USBD_StdEPReq+0x164>
 800a574:	7bbb      	ldrb	r3, [r7, #14]
 800a576:	2b80      	cmp	r3, #128	; 0x80
 800a578:	d004      	beq.n	800a584 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fbcb 	bl	800ad18 <USBD_CtlError>
          break;
 800a582:	e091      	b.n	800a6a8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	da0b      	bge.n	800a5a4 <USBD_StdEPReq+0x184>
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
 800a58e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a592:	4613      	mov	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4413      	add	r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	3310      	adds	r3, #16
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	4413      	add	r3, r2
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	e00b      	b.n	800a5bc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a5a4:	7bbb      	ldrb	r3, [r7, #14]
 800a5a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fc15 	bl	800adfa <USBD_CtlSendData>
        break;
 800a5d0:	e06a      	b.n	800a6a8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a5d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	da11      	bge.n	800a5fe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
 800a5dc:	f003 020f 	and.w	r2, r3, #15
 800a5e0:	6879      	ldr	r1, [r7, #4]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	440b      	add	r3, r1
 800a5ec:	3324      	adds	r3, #36	; 0x24
 800a5ee:	881b      	ldrh	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d117      	bne.n	800a624 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fb8e 	bl	800ad18 <USBD_CtlError>
            break;
 800a5fc:	e054      	b.n	800a6a8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	f003 020f 	and.w	r2, r3, #15
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	440b      	add	r3, r1
 800a610:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d104      	bne.n	800a624 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fb7b 	bl	800ad18 <USBD_CtlError>
            break;
 800a622:	e041      	b.n	800a6a8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	da0b      	bge.n	800a644 <USBD_StdEPReq+0x224>
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a632:	4613      	mov	r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	3310      	adds	r3, #16
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	4413      	add	r3, r2
 800a640:	3304      	adds	r3, #4
 800a642:	e00b      	b.n	800a65c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	4413      	add	r3, r2
 800a65a:	3304      	adds	r3, #4
 800a65c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <USBD_StdEPReq+0x24a>
 800a664:	7bbb      	ldrb	r3, [r7, #14]
 800a666:	2b80      	cmp	r3, #128	; 0x80
 800a668:	d103      	bne.n	800a672 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2200      	movs	r2, #0
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	e00e      	b.n	800a690 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a672:	7bbb      	ldrb	r3, [r7, #14]
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f004 fc22 	bl	800eec0 <USBD_LL_IsStallEP>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d003      	beq.n	800a68a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2201      	movs	r2, #1
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	e002      	b.n	800a690 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2202      	movs	r2, #2
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fbaf 	bl	800adfa <USBD_CtlSendData>
          break;
 800a69c:	e004      	b.n	800a6a8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fb39 	bl	800ad18 <USBD_CtlError>
        break;
 800a6a6:	bf00      	nop
      }
      break;
 800a6a8:	e004      	b.n	800a6b4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fb33 	bl	800ad18 <USBD_CtlError>
      break;
 800a6b2:	bf00      	nop
    }
    break;
 800a6b4:	e004      	b.n	800a6c0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fb2d 	bl	800ad18 <USBD_CtlError>
    break;
 800a6be:	bf00      	nop
  }

  return ret;
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
 800a6e6:	0a1b      	lsrs	r3, r3, #8
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	2b06      	cmp	r3, #6
 800a6ee:	f200 8128 	bhi.w	800a942 <USBD_GetDescriptor+0x276>
 800a6f2:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <USBD_GetDescriptor+0x2c>)
 800a6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f8:	0800a715 	.word	0x0800a715
 800a6fc:	0800a72d 	.word	0x0800a72d
 800a700:	0800a76d 	.word	0x0800a76d
 800a704:	0800a943 	.word	0x0800a943
 800a708:	0800a943 	.word	0x0800a943
 800a70c:	0800a8e3 	.word	0x0800a8e3
 800a710:	0800a90f 	.word	0x0800a90f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	7c12      	ldrb	r2, [r2, #16]
 800a720:	f107 0108 	add.w	r1, r7, #8
 800a724:	4610      	mov	r0, r2
 800a726:	4798      	blx	r3
 800a728:	60f8      	str	r0, [r7, #12]
    break;
 800a72a:	e112      	b.n	800a952 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	7c1b      	ldrb	r3, [r3, #16]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10d      	bne.n	800a750 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	f107 0208 	add.w	r2, r7, #8
 800a740:	4610      	mov	r0, r2
 800a742:	4798      	blx	r3
 800a744:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3301      	adds	r3, #1
 800a74a:	2202      	movs	r2, #2
 800a74c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a74e:	e100      	b.n	800a952 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	f107 0208 	add.w	r2, r7, #8
 800a75c:	4610      	mov	r0, r2
 800a75e:	4798      	blx	r3
 800a760:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3301      	adds	r3, #1
 800a766:	2202      	movs	r2, #2
 800a768:	701a      	strb	r2, [r3, #0]
    break;
 800a76a:	e0f2      	b.n	800a952 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	885b      	ldrh	r3, [r3, #2]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b05      	cmp	r3, #5
 800a774:	f200 80ac 	bhi.w	800a8d0 <USBD_GetDescriptor+0x204>
 800a778:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <USBD_GetDescriptor+0xb4>)
 800a77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77e:	bf00      	nop
 800a780:	0800a799 	.word	0x0800a799
 800a784:	0800a7cd 	.word	0x0800a7cd
 800a788:	0800a801 	.word	0x0800a801
 800a78c:	0800a835 	.word	0x0800a835
 800a790:	0800a869 	.word	0x0800a869
 800a794:	0800a89d 	.word	0x0800a89d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00b      	beq.n	800a7bc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	7c12      	ldrb	r2, [r2, #16]
 800a7b0:	f107 0108 	add.w	r1, r7, #8
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	4798      	blx	r3
 800a7b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7ba:	e091      	b.n	800a8e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 faaa 	bl	800ad18 <USBD_CtlError>
        err++;
 800a7c4:	7afb      	ldrb	r3, [r7, #11]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	72fb      	strb	r3, [r7, #11]
      break;
 800a7ca:	e089      	b.n	800a8e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00b      	beq.n	800a7f0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	7c12      	ldrb	r2, [r2, #16]
 800a7e4:	f107 0108 	add.w	r1, r7, #8
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	4798      	blx	r3
 800a7ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7ee:	e077      	b.n	800a8e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa90 	bl	800ad18 <USBD_CtlError>
        err++;
 800a7f8:	7afb      	ldrb	r3, [r7, #11]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	72fb      	strb	r3, [r7, #11]
      break;
 800a7fe:	e06f      	b.n	800a8e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00b      	beq.n	800a824 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	7c12      	ldrb	r2, [r2, #16]
 800a818:	f107 0108 	add.w	r1, r7, #8
 800a81c:	4610      	mov	r0, r2
 800a81e:	4798      	blx	r3
 800a820:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a822:	e05d      	b.n	800a8e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fa76 	bl	800ad18 <USBD_CtlError>
        err++;
 800a82c:	7afb      	ldrb	r3, [r7, #11]
 800a82e:	3301      	adds	r3, #1
 800a830:	72fb      	strb	r3, [r7, #11]
      break;
 800a832:	e055      	b.n	800a8e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00b      	beq.n	800a858 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	7c12      	ldrb	r2, [r2, #16]
 800a84c:	f107 0108 	add.w	r1, r7, #8
 800a850:	4610      	mov	r0, r2
 800a852:	4798      	blx	r3
 800a854:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a856:	e043      	b.n	800a8e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fa5c 	bl	800ad18 <USBD_CtlError>
        err++;
 800a860:	7afb      	ldrb	r3, [r7, #11]
 800a862:	3301      	adds	r3, #1
 800a864:	72fb      	strb	r3, [r7, #11]
      break;
 800a866:	e03b      	b.n	800a8e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00b      	beq.n	800a88c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	7c12      	ldrb	r2, [r2, #16]
 800a880:	f107 0108 	add.w	r1, r7, #8
 800a884:	4610      	mov	r0, r2
 800a886:	4798      	blx	r3
 800a888:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a88a:	e029      	b.n	800a8e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fa42 	bl	800ad18 <USBD_CtlError>
        err++;
 800a894:	7afb      	ldrb	r3, [r7, #11]
 800a896:	3301      	adds	r3, #1
 800a898:	72fb      	strb	r3, [r7, #11]
      break;
 800a89a:	e021      	b.n	800a8e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00b      	beq.n	800a8c0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	7c12      	ldrb	r2, [r2, #16]
 800a8b4:	f107 0108 	add.w	r1, r7, #8
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	4798      	blx	r3
 800a8bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8be:	e00f      	b.n	800a8e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fa28 	bl	800ad18 <USBD_CtlError>
        err++;
 800a8c8:	7afb      	ldrb	r3, [r7, #11]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	72fb      	strb	r3, [r7, #11]
      break;
 800a8ce:	e007      	b.n	800a8e0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fa20 	bl	800ad18 <USBD_CtlError>
      err++;
 800a8d8:	7afb      	ldrb	r3, [r7, #11]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a8de:	bf00      	nop
    }
    break;
 800a8e0:	e037      	b.n	800a952 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	7c1b      	ldrb	r3, [r3, #16]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d109      	bne.n	800a8fe <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f2:	f107 0208 	add.w	r2, r7, #8
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	4798      	blx	r3
 800a8fa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a8fc:	e029      	b.n	800a952 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fa09 	bl	800ad18 <USBD_CtlError>
      err++;
 800a906:	7afb      	ldrb	r3, [r7, #11]
 800a908:	3301      	adds	r3, #1
 800a90a:	72fb      	strb	r3, [r7, #11]
    break;
 800a90c:	e021      	b.n	800a952 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	7c1b      	ldrb	r3, [r3, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10d      	bne.n	800a932 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91e:	f107 0208 	add.w	r2, r7, #8
 800a922:	4610      	mov	r0, r2
 800a924:	4798      	blx	r3
 800a926:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	3301      	adds	r3, #1
 800a92c:	2207      	movs	r2, #7
 800a92e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a930:	e00f      	b.n	800a952 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f9ef 	bl	800ad18 <USBD_CtlError>
      err++;
 800a93a:	7afb      	ldrb	r3, [r7, #11]
 800a93c:	3301      	adds	r3, #1
 800a93e:	72fb      	strb	r3, [r7, #11]
    break;
 800a940:	e007      	b.n	800a952 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800a942:	6839      	ldr	r1, [r7, #0]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f9e7 	bl	800ad18 <USBD_CtlError>
    err++;
 800a94a:	7afb      	ldrb	r3, [r7, #11]
 800a94c:	3301      	adds	r3, #1
 800a94e:	72fb      	strb	r3, [r7, #11]
    break;
 800a950:	bf00      	nop
  }

  if (err != 0U)
 800a952:	7afb      	ldrb	r3, [r7, #11]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d11e      	bne.n	800a996 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	88db      	ldrh	r3, [r3, #6]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d016      	beq.n	800a98e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800a960:	893b      	ldrh	r3, [r7, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00e      	beq.n	800a984 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	88da      	ldrh	r2, [r3, #6]
 800a96a:	893b      	ldrh	r3, [r7, #8]
 800a96c:	4293      	cmp	r3, r2
 800a96e:	bf28      	it	cs
 800a970:	4613      	movcs	r3, r2
 800a972:	b29b      	uxth	r3, r3
 800a974:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a976:	893b      	ldrh	r3, [r7, #8]
 800a978:	461a      	mov	r2, r3
 800a97a:	68f9      	ldr	r1, [r7, #12]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fa3c 	bl	800adfa <USBD_CtlSendData>
 800a982:	e009      	b.n	800a998 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f9c6 	bl	800ad18 <USBD_CtlError>
 800a98c:	e004      	b.n	800a998 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fa8d 	bl	800aeae <USBD_CtlSendStatus>
 800a994:	e000      	b.n	800a998 <USBD_GetDescriptor+0x2cc>
    return;
 800a996:	bf00      	nop
    }
  }
}
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop

0800a9a0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	889b      	ldrh	r3, [r3, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d130      	bne.n	800aa14 <USBD_SetAddress+0x74>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	88db      	ldrh	r3, [r3, #6]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d12c      	bne.n	800aa14 <USBD_SetAddress+0x74>
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	885b      	ldrh	r3, [r3, #2]
 800a9be:	2b7f      	cmp	r3, #127	; 0x7f
 800a9c0:	d828      	bhi.n	800aa14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	885b      	ldrh	r3, [r3, #2]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d104      	bne.n	800a9e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f99c 	bl	800ad18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e0:	e01c      	b.n	800aa1c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	7bfa      	ldrb	r2, [r7, #15]
 800a9e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f004 fa92 	bl	800ef18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fa5a 	bl	800aeae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa08:	e008      	b.n	800aa1c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa12:	e003      	b.n	800aa1c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f97e 	bl	800ad18 <USBD_CtlError>
  }
}
 800aa1c:	bf00      	nop
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	885b      	ldrh	r3, [r3, #2]
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	4b4b      	ldr	r3, [pc, #300]	; (800ab68 <USBD_SetConfig+0x144>)
 800aa3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa3c:	4b4a      	ldr	r3, [pc, #296]	; (800ab68 <USBD_SetConfig+0x144>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d905      	bls.n	800aa50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa44:	6839      	ldr	r1, [r7, #0]
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f966 	bl	800ad18 <USBD_CtlError>
    return USBD_FAIL;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e087      	b.n	800ab60 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d002      	beq.n	800aa60 <USBD_SetConfig+0x3c>
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d025      	beq.n	800aaaa <USBD_SetConfig+0x86>
 800aa5e:	e071      	b.n	800ab44 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800aa60:	4b41      	ldr	r3, [pc, #260]	; (800ab68 <USBD_SetConfig+0x144>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d01c      	beq.n	800aaa2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800aa68:	4b3f      	ldr	r3, [pc, #252]	; (800ab68 <USBD_SetConfig+0x144>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa72:	4b3d      	ldr	r3, [pc, #244]	; (800ab68 <USBD_SetConfig+0x144>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff f9a7 	bl	8009dcc <USBD_SetClassConfig>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f944 	bl	800ad18 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800aa90:	e065      	b.n	800ab5e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fa0b 	bl	800aeae <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2203      	movs	r2, #3
 800aa9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800aaa0:	e05d      	b.n	800ab5e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fa03 	bl	800aeae <USBD_CtlSendStatus>
    break;
 800aaa8:	e059      	b.n	800ab5e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800aaaa:	4b2f      	ldr	r3, [pc, #188]	; (800ab68 <USBD_SetConfig+0x144>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d112      	bne.n	800aad8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2202      	movs	r2, #2
 800aab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800aaba:	4b2b      	ldr	r3, [pc, #172]	; (800ab68 <USBD_SetConfig+0x144>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aac4:	4b28      	ldr	r3, [pc, #160]	; (800ab68 <USBD_SetConfig+0x144>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	4619      	mov	r1, r3
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7ff f99a 	bl	8009e04 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f9ec 	bl	800aeae <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800aad6:	e042      	b.n	800ab5e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800aad8:	4b23      	ldr	r3, [pc, #140]	; (800ab68 <USBD_SetConfig+0x144>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d02a      	beq.n	800ab3c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7ff f988 	bl	8009e04 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800aaf4:	4b1c      	ldr	r3, [pc, #112]	; (800ab68 <USBD_SetConfig+0x144>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800aafe:	4b1a      	ldr	r3, [pc, #104]	; (800ab68 <USBD_SetConfig+0x144>)
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff f961 	bl	8009dcc <USBD_SetClassConfig>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00f      	beq.n	800ab34 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f8fe 	bl	800ad18 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff f96d 	bl	8009e04 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ab32:	e014      	b.n	800ab5e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f9ba 	bl	800aeae <USBD_CtlSendStatus>
    break;
 800ab3a:	e010      	b.n	800ab5e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f9b6 	bl	800aeae <USBD_CtlSendStatus>
    break;
 800ab42:	e00c      	b.n	800ab5e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f8e6 	bl	800ad18 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab4c:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <USBD_SetConfig+0x144>)
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7ff f956 	bl	8009e04 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5c:	bf00      	nop
  }

  return ret;
 800ab5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	20000218 	.word	0x20000218

0800ab6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	88db      	ldrh	r3, [r3, #6]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d004      	beq.n	800ab88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f8c9 	bl	800ad18 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ab86:	e021      	b.n	800abcc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	db17      	blt.n	800abc2 <USBD_GetConfig+0x56>
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	dd02      	ble.n	800ab9c <USBD_GetConfig+0x30>
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	d00b      	beq.n	800abb2 <USBD_GetConfig+0x46>
 800ab9a:	e012      	b.n	800abc2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	3308      	adds	r3, #8
 800aba6:	2201      	movs	r2, #1
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f925 	bl	800adfa <USBD_CtlSendData>
      break;
 800abb0:	e00c      	b.n	800abcc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3304      	adds	r3, #4
 800abb6:	2201      	movs	r2, #1
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f91d 	bl	800adfa <USBD_CtlSendData>
      break;
 800abc0:	e004      	b.n	800abcc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f8a7 	bl	800ad18 <USBD_CtlError>
      break;
 800abca:	bf00      	nop
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe4:	3b01      	subs	r3, #1
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d81e      	bhi.n	800ac28 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	88db      	ldrh	r3, [r3, #6]
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d004      	beq.n	800abfc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f88f 	bl	800ad18 <USBD_CtlError>
      break;
 800abfa:	e01a      	b.n	800ac32 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	f043 0202 	orr.w	r2, r3, #2
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	330c      	adds	r3, #12
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f8ea 	bl	800adfa <USBD_CtlSendData>
    break;
 800ac26:	e004      	b.n	800ac32 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f874 	bl	800ad18 <USBD_CtlError>
    break;
 800ac30:	bf00      	nop
  }
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	885b      	ldrh	r3, [r3, #2]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d106      	bne.n	800ac5a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f92a 	bl	800aeae <USBD_CtlSendStatus>
  }
}
 800ac5a:	bf00      	nop
 800ac5c:	3708      	adds	r7, #8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b082      	sub	sp, #8
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac72:	3b01      	subs	r3, #1
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d80b      	bhi.n	800ac90 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	885b      	ldrh	r3, [r3, #2]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d10c      	bne.n	800ac9a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f910 	bl	800aeae <USBD_CtlSendStatus>
      }
      break;
 800ac8e:	e004      	b.n	800ac9a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f840 	bl	800ad18 <USBD_CtlError>
      break;
 800ac98:	e000      	b.n	800ac9c <USBD_ClrFeature+0x3a>
      break;
 800ac9a:	bf00      	nop
  }
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	781a      	ldrb	r2, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3301      	adds	r3, #1
 800acbe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	781a      	ldrb	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	3301      	adds	r3, #1
 800accc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f7ff fad3 	bl	800a27a <SWAPBYTE>
 800acd4:	4603      	mov	r3, r0
 800acd6:	461a      	mov	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3301      	adds	r3, #1
 800ace0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3301      	adds	r3, #1
 800ace6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f7ff fac6 	bl	800a27a <SWAPBYTE>
 800acee:	4603      	mov	r3, r0
 800acf0:	461a      	mov	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	3301      	adds	r3, #1
 800acfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3301      	adds	r3, #1
 800ad00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f7ff fab9 	bl	800a27a <SWAPBYTE>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	80da      	strh	r2, [r3, #6]
}
 800ad10:	bf00      	nop
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad22:	2180      	movs	r1, #128	; 0x80
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f004 f88d 	bl	800ee44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f004 f889 	bl	800ee44 <USBD_LL_StallEP>
}
 800ad32:	bf00      	nop
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b086      	sub	sp, #24
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d036      	beq.n	800adbe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ad54:	6938      	ldr	r0, [r7, #16]
 800ad56:	f000 f836 	bl	800adc6 <USBD_GetLen>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	7812      	ldrb	r2, [r2, #0]
 800ad72:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	3301      	adds	r3, #1
 800ad78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad7a:	7dfb      	ldrb	r3, [r7, #23]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	4413      	add	r3, r2
 800ad80:	2203      	movs	r2, #3
 800ad82:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	3301      	adds	r3, #1
 800ad88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad8a:	e013      	b.n	800adb4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	4413      	add	r3, r2
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	7812      	ldrb	r2, [r2, #0]
 800ad96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	613b      	str	r3, [r7, #16]
    idx++;
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	3301      	adds	r3, #1
 800ada2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	4413      	add	r3, r2
 800adaa:	2200      	movs	r2, #0
 800adac:	701a      	strb	r2, [r3, #0]
    idx++;
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	3301      	adds	r3, #1
 800adb2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e7      	bne.n	800ad8c <USBD_GetString+0x52>
 800adbc:	e000      	b.n	800adc0 <USBD_GetString+0x86>
    return;
 800adbe:	bf00      	nop
  }
}
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800adc6:	b480      	push	{r7}
 800adc8:	b085      	sub	sp, #20
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800adce:	2300      	movs	r3, #0
 800add0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800add6:	e005      	b.n	800ade4 <USBD_GetLen+0x1e>
  {
    len++;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
 800adda:	3301      	adds	r3, #1
 800addc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	3301      	adds	r3, #1
 800ade2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1f5      	bne.n	800add8 <USBD_GetLen+0x12>
  }

  return len;
 800adec:	7bfb      	ldrb	r3, [r7, #15]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	2100      	movs	r1, #0
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f004 f898 	bl	800ef56 <USBD_LL_Transmit>

  return USBD_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	2100      	movs	r1, #0
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f004 f887 	bl	800ef56 <USBD_LL_Transmit>

  return USBD_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	60f8      	str	r0, [r7, #12]
 800ae5a:	60b9      	str	r1, [r7, #8]
 800ae5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2203      	movs	r2, #3
 800ae62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f004 f88b 	bl	800ef98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f004 f87a 	bl	800ef98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2204      	movs	r2, #4
 800aeba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aebe:	2300      	movs	r3, #0
 800aec0:	2200      	movs	r2, #0
 800aec2:	2100      	movs	r1, #0
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f004 f846 	bl	800ef56 <USBD_LL_Transmit>

  return USBD_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2205      	movs	r2, #5
 800aee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aee4:	2300      	movs	r3, #0
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f004 f854 	bl	800ef98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800af06:	79fb      	ldrb	r3, [r7, #7]
 800af08:	4a08      	ldr	r2, [pc, #32]	; (800af2c <disk_status+0x30>)
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	79fa      	ldrb	r2, [r7, #7]
 800af14:	4905      	ldr	r1, [pc, #20]	; (800af2c <disk_status+0x30>)
 800af16:	440a      	add	r2, r1
 800af18:	7a12      	ldrb	r2, [r2, #8]
 800af1a:	4610      	mov	r0, r2
 800af1c:	4798      	blx	r3
 800af1e:	4603      	mov	r3, r0
 800af20:	73fb      	strb	r3, [r7, #15]
  return stat;
 800af22:	7bfb      	ldrb	r3, [r7, #15]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20000444 	.word	0x20000444

0800af30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	4a0d      	ldr	r2, [pc, #52]	; (800af78 <disk_initialize+0x48>)
 800af42:	5cd3      	ldrb	r3, [r2, r3]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d111      	bne.n	800af6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	4a0b      	ldr	r2, [pc, #44]	; (800af78 <disk_initialize+0x48>)
 800af4c:	2101      	movs	r1, #1
 800af4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800af50:	79fb      	ldrb	r3, [r7, #7]
 800af52:	4a09      	ldr	r2, [pc, #36]	; (800af78 <disk_initialize+0x48>)
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	79fa      	ldrb	r2, [r7, #7]
 800af5e:	4906      	ldr	r1, [pc, #24]	; (800af78 <disk_initialize+0x48>)
 800af60:	440a      	add	r2, r1
 800af62:	7a12      	ldrb	r2, [r2, #8]
 800af64:	4610      	mov	r0, r2
 800af66:	4798      	blx	r3
 800af68:	4603      	mov	r3, r0
 800af6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20000444 	.word	0x20000444

0800af7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800af7c:	b590      	push	{r4, r7, lr}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	607a      	str	r2, [r7, #4]
 800af86:	603b      	str	r3, [r7, #0]
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	4a0a      	ldr	r2, [pc, #40]	; (800afb8 <disk_read+0x3c>)
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	689c      	ldr	r4, [r3, #8]
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	4a07      	ldr	r2, [pc, #28]	; (800afb8 <disk_read+0x3c>)
 800af9c:	4413      	add	r3, r2
 800af9e:	7a18      	ldrb	r0, [r3, #8]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	68b9      	ldr	r1, [r7, #8]
 800afa6:	47a0      	blx	r4
 800afa8:	4603      	mov	r3, r0
 800afaa:	75fb      	strb	r3, [r7, #23]
  return res;
 800afac:	7dfb      	ldrb	r3, [r7, #23]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	371c      	adds	r7, #28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd90      	pop	{r4, r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20000444 	.word	0x20000444

0800afbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800afbc:	b590      	push	{r4, r7, lr}
 800afbe:	b087      	sub	sp, #28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	607a      	str	r2, [r7, #4]
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	4603      	mov	r3, r0
 800afca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
 800afce:	4a0a      	ldr	r2, [pc, #40]	; (800aff8 <disk_write+0x3c>)
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	68dc      	ldr	r4, [r3, #12]
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
 800afda:	4a07      	ldr	r2, [pc, #28]	; (800aff8 <disk_write+0x3c>)
 800afdc:	4413      	add	r3, r2
 800afde:	7a18      	ldrb	r0, [r3, #8]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	47a0      	blx	r4
 800afe8:	4603      	mov	r3, r0
 800afea:	75fb      	strb	r3, [r7, #23]
  return res;
 800afec:	7dfb      	ldrb	r3, [r7, #23]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd90      	pop	{r4, r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20000444 	.word	0x20000444

0800affc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3301      	adds	r3, #1
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b00c:	89fb      	ldrh	r3, [r7, #14]
 800b00e:	021b      	lsls	r3, r3, #8
 800b010:	b21a      	sxth	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	b21b      	sxth	r3, r3
 800b018:	4313      	orrs	r3, r2
 800b01a:	b21b      	sxth	r3, r3
 800b01c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b01e:	89fb      	ldrh	r3, [r7, #14]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3303      	adds	r3, #3
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	021b      	lsls	r3, r3, #8
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	3202      	adds	r2, #2
 800b044:	7812      	ldrb	r2, [r2, #0]
 800b046:	4313      	orrs	r3, r2
 800b048:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	021b      	lsls	r3, r3, #8
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	3201      	adds	r2, #1
 800b052:	7812      	ldrb	r2, [r2, #0]
 800b054:	4313      	orrs	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	021b      	lsls	r3, r3, #8
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	7812      	ldrb	r2, [r2, #0]
 800b060:	4313      	orrs	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]
	return rv;
 800b064:	68fb      	ldr	r3, [r7, #12]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b072:	b480      	push	{r7}
 800b074:	b083      	sub	sp, #12
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	460b      	mov	r3, r1
 800b07c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	1c5a      	adds	r2, r3, #1
 800b082:	607a      	str	r2, [r7, #4]
 800b084:	887a      	ldrh	r2, [r7, #2]
 800b086:	b2d2      	uxtb	r2, r2
 800b088:	701a      	strb	r2, [r3, #0]
 800b08a:	887b      	ldrh	r3, [r7, #2]
 800b08c:	0a1b      	lsrs	r3, r3, #8
 800b08e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	607a      	str	r2, [r7, #4]
 800b096:	887a      	ldrh	r2, [r7, #2]
 800b098:	b2d2      	uxtb	r2, r2
 800b09a:	701a      	strb	r2, [r3, #0]
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	0a1b      	lsrs	r3, r3, #8
 800b0c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	607a      	str	r2, [r7, #4]
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	b2d2      	uxtb	r2, r2
 800b0ce:	701a      	strb	r2, [r3, #0]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	0a1b      	lsrs	r3, r3, #8
 800b0d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	1c5a      	adds	r2, r3, #1
 800b0da:	607a      	str	r2, [r7, #4]
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	b2d2      	uxtb	r2, r2
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	0a1b      	lsrs	r3, r3, #8
 800b0e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	1c5a      	adds	r2, r3, #1
 800b0ec:	607a      	str	r2, [r7, #4]
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	b2d2      	uxtb	r2, r2
 800b0f2:	701a      	strb	r2, [r3, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	617a      	str	r2, [r7, #20]
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	b2d2      	uxtb	r2, r2
 800b11a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3b01      	subs	r3, #1
 800b120:	607b      	str	r3, [r7, #4]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1f3      	bne.n	800b110 <mem_set+0x10>
}
 800b128:	bf00      	nop
 800b12a:	371c      	adds	r7, #28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b134:	b480      	push	{r7}
 800b136:	b089      	sub	sp, #36	; 0x24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	61fb      	str	r3, [r7, #28]
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	61fa      	str	r2, [r7, #28]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	1c5a      	adds	r2, r3, #1
 800b15a:	61ba      	str	r2, [r7, #24]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	1acb      	subs	r3, r1, r3
 800b160:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3b01      	subs	r3, #1
 800b166:	607b      	str	r3, [r7, #4]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <mem_cmp+0x40>
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0eb      	beq.n	800b14c <mem_cmp+0x18>

	return r;
 800b174:	697b      	ldr	r3, [r7, #20]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3724      	adds	r7, #36	; 0x24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b18c:	e002      	b.n	800b194 <chk_chr+0x12>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3301      	adds	r3, #1
 800b192:	607b      	str	r3, [r7, #4]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <chk_chr+0x26>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d1f2      	bne.n	800b18e <chk_chr+0xc>
	return *str;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60fb      	str	r3, [r7, #12]
 800b1c6:	e01f      	b.n	800b208 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b1c8:	4a41      	ldr	r2, [pc, #260]	; (800b2d0 <inc_lock+0x118>)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	011b      	lsls	r3, r3, #4
 800b1ce:	4413      	add	r3, r2
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d113      	bne.n	800b202 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b1da:	4a3d      	ldr	r2, [pc, #244]	; (800b2d0 <inc_lock+0x118>)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	4413      	add	r3, r2
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d109      	bne.n	800b202 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b1ee:	4a38      	ldr	r2, [pc, #224]	; (800b2d0 <inc_lock+0x118>)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	011b      	lsls	r3, r3, #4
 800b1f4:	4413      	add	r3, r2
 800b1f6:	3308      	adds	r3, #8
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d006      	beq.n	800b210 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3301      	adds	r3, #1
 800b206:	60fb      	str	r3, [r7, #12]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d9dc      	bls.n	800b1c8 <inc_lock+0x10>
 800b20e:	e000      	b.n	800b212 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b210:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2b02      	cmp	r3, #2
 800b216:	d132      	bne.n	800b27e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	e002      	b.n	800b224 <inc_lock+0x6c>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3301      	adds	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d806      	bhi.n	800b238 <inc_lock+0x80>
 800b22a:	4a29      	ldr	r2, [pc, #164]	; (800b2d0 <inc_lock+0x118>)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	011b      	lsls	r3, r3, #4
 800b230:	4413      	add	r3, r2
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1f2      	bne.n	800b21e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d101      	bne.n	800b242 <inc_lock+0x8a>
 800b23e:	2300      	movs	r3, #0
 800b240:	e040      	b.n	800b2c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	4922      	ldr	r1, [pc, #136]	; (800b2d0 <inc_lock+0x118>)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	011b      	lsls	r3, r3, #4
 800b24c:	440b      	add	r3, r1
 800b24e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	491e      	ldr	r1, [pc, #120]	; (800b2d0 <inc_lock+0x118>)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	011b      	lsls	r3, r3, #4
 800b25a:	440b      	add	r3, r1
 800b25c:	3304      	adds	r3, #4
 800b25e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	695a      	ldr	r2, [r3, #20]
 800b264:	491a      	ldr	r1, [pc, #104]	; (800b2d0 <inc_lock+0x118>)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	011b      	lsls	r3, r3, #4
 800b26a:	440b      	add	r3, r1
 800b26c:	3308      	adds	r3, #8
 800b26e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b270:	4a17      	ldr	r2, [pc, #92]	; (800b2d0 <inc_lock+0x118>)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	011b      	lsls	r3, r3, #4
 800b276:	4413      	add	r3, r2
 800b278:	330c      	adds	r3, #12
 800b27a:	2200      	movs	r2, #0
 800b27c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d009      	beq.n	800b298 <inc_lock+0xe0>
 800b284:	4a12      	ldr	r2, [pc, #72]	; (800b2d0 <inc_lock+0x118>)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	011b      	lsls	r3, r3, #4
 800b28a:	4413      	add	r3, r2
 800b28c:	330c      	adds	r3, #12
 800b28e:	881b      	ldrh	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <inc_lock+0xe0>
 800b294:	2300      	movs	r3, #0
 800b296:	e015      	b.n	800b2c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d108      	bne.n	800b2b0 <inc_lock+0xf8>
 800b29e:	4a0c      	ldr	r2, [pc, #48]	; (800b2d0 <inc_lock+0x118>)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	011b      	lsls	r3, r3, #4
 800b2a4:	4413      	add	r3, r2
 800b2a6:	330c      	adds	r3, #12
 800b2a8:	881b      	ldrh	r3, [r3, #0]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	e001      	b.n	800b2b4 <inc_lock+0xfc>
 800b2b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2b4:	4906      	ldr	r1, [pc, #24]	; (800b2d0 <inc_lock+0x118>)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	011b      	lsls	r3, r3, #4
 800b2ba:	440b      	add	r3, r1
 800b2bc:	330c      	adds	r3, #12
 800b2be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3301      	adds	r3, #1
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	20000224 	.word	0x20000224

0800b2d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	607b      	str	r3, [r7, #4]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d825      	bhi.n	800b334 <dec_lock+0x60>
		n = Files[i].ctr;
 800b2e8:	4a17      	ldr	r2, [pc, #92]	; (800b348 <dec_lock+0x74>)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	011b      	lsls	r3, r3, #4
 800b2ee:	4413      	add	r3, r2
 800b2f0:	330c      	adds	r3, #12
 800b2f2:	881b      	ldrh	r3, [r3, #0]
 800b2f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b2f6:	89fb      	ldrh	r3, [r7, #14]
 800b2f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2fc:	d101      	bne.n	800b302 <dec_lock+0x2e>
 800b2fe:	2300      	movs	r3, #0
 800b300:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b302:	89fb      	ldrh	r3, [r7, #14]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d002      	beq.n	800b30e <dec_lock+0x3a>
 800b308:	89fb      	ldrh	r3, [r7, #14]
 800b30a:	3b01      	subs	r3, #1
 800b30c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b30e:	4a0e      	ldr	r2, [pc, #56]	; (800b348 <dec_lock+0x74>)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	011b      	lsls	r3, r3, #4
 800b314:	4413      	add	r3, r2
 800b316:	330c      	adds	r3, #12
 800b318:	89fa      	ldrh	r2, [r7, #14]
 800b31a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b31c:	89fb      	ldrh	r3, [r7, #14]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d105      	bne.n	800b32e <dec_lock+0x5a>
 800b322:	4a09      	ldr	r2, [pc, #36]	; (800b348 <dec_lock+0x74>)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	011b      	lsls	r3, r3, #4
 800b328:	4413      	add	r3, r2
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	737b      	strb	r3, [r7, #13]
 800b332:	e001      	b.n	800b338 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b334:	2302      	movs	r3, #2
 800b336:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b338:	7b7b      	ldrb	r3, [r7, #13]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	20000224 	.word	0x20000224

0800b34c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b354:	2300      	movs	r3, #0
 800b356:	60fb      	str	r3, [r7, #12]
 800b358:	e010      	b.n	800b37c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b35a:	4a0d      	ldr	r2, [pc, #52]	; (800b390 <clear_lock+0x44>)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	011b      	lsls	r3, r3, #4
 800b360:	4413      	add	r3, r2
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	429a      	cmp	r2, r3
 800b368:	d105      	bne.n	800b376 <clear_lock+0x2a>
 800b36a:	4a09      	ldr	r2, [pc, #36]	; (800b390 <clear_lock+0x44>)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	011b      	lsls	r3, r3, #4
 800b370:	4413      	add	r3, r2
 800b372:	2200      	movs	r2, #0
 800b374:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3301      	adds	r3, #1
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d9eb      	bls.n	800b35a <clear_lock+0xe>
	}
}
 800b382:	bf00      	nop
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	20000224 	.word	0x20000224

0800b394 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	78db      	ldrb	r3, [r3, #3]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d034      	beq.n	800b412 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	7858      	ldrb	r0, [r3, #1]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	f7ff fdfe 	bl	800afbc <disk_write>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	73fb      	strb	r3, [r7, #15]
 800b3ca:	e022      	b.n	800b412 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	1ad2      	subs	r2, r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	69db      	ldr	r3, [r3, #28]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d217      	bcs.n	800b412 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	789b      	ldrb	r3, [r3, #2]
 800b3e6:	613b      	str	r3, [r7, #16]
 800b3e8:	e010      	b.n	800b40c <sync_window+0x78>
					wsect += fs->fsize;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	7858      	ldrb	r0, [r3, #1]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b3fe:	2301      	movs	r3, #1
 800b400:	697a      	ldr	r2, [r7, #20]
 800b402:	f7ff fddb 	bl	800afbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	3b01      	subs	r3, #1
 800b40a:	613b      	str	r3, [r7, #16]
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d8eb      	bhi.n	800b3ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d01b      	beq.n	800b46c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff ffad 	bl	800b394 <sync_window>
 800b43a:	4603      	mov	r3, r0
 800b43c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b43e:	7bfb      	ldrb	r3, [r7, #15]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d113      	bne.n	800b46c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	7858      	ldrb	r0, [r3, #1]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b44e:	2301      	movs	r3, #1
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	f7ff fd93 	bl	800af7c <disk_read>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d004      	beq.n	800b466 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b45c:	f04f 33ff 	mov.w	r3, #4294967295
 800b460:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b462:	2301      	movs	r3, #1
 800b464:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b476:	b480      	push	{r7}
 800b478:	b083      	sub	sp, #12
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	3b02      	subs	r3, #2
 800b484:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	3b02      	subs	r3, #2
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d301      	bcc.n	800b496 <clust2sect+0x20>
 800b492:	2300      	movs	r3, #0
 800b494:	e008      	b.n	800b4a8 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	895b      	ldrh	r3, [r3, #10]
 800b49a:	461a      	mov	r2, r3
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	fb03 f202 	mul.w	r2, r3, r2
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a6:	4413      	add	r3, r2
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d904      	bls.n	800b4d4 <get_fat+0x20>
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	699b      	ldr	r3, [r3, #24]
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d302      	bcc.n	800b4da <get_fat+0x26>
		val = 1;	/* Internal error */
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	617b      	str	r3, [r7, #20]
 800b4d8:	e08c      	b.n	800b5f4 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b4da:	f04f 33ff 	mov.w	r3, #4294967295
 800b4de:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d045      	beq.n	800b574 <get_fat+0xc0>
 800b4e8:	2b03      	cmp	r3, #3
 800b4ea:	d05d      	beq.n	800b5a8 <get_fat+0xf4>
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d177      	bne.n	800b5e0 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	085b      	lsrs	r3, r3, #1
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	0a5b      	lsrs	r3, r3, #9
 800b506:	4413      	add	r3, r2
 800b508:	4619      	mov	r1, r3
 800b50a:	6938      	ldr	r0, [r7, #16]
 800b50c:	f7ff ff86 	bl	800b41c <move_window>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d167      	bne.n	800b5e6 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	60fa      	str	r2, [r7, #12]
 800b51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	4413      	add	r3, r2
 800b524:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b528:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	0a5b      	lsrs	r3, r3, #9
 800b532:	4413      	add	r3, r2
 800b534:	4619      	mov	r1, r3
 800b536:	6938      	ldr	r0, [r7, #16]
 800b538:	f7ff ff70 	bl	800b41c <move_window>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d153      	bne.n	800b5ea <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	4413      	add	r3, r2
 800b54c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b550:	021b      	lsls	r3, r3, #8
 800b552:	461a      	mov	r2, r3
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	4313      	orrs	r3, r2
 800b558:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	f003 0301 	and.w	r3, r3, #1
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <get_fat+0xb6>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	091b      	lsrs	r3, r3, #4
 800b568:	e002      	b.n	800b570 <get_fat+0xbc>
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b570:	617b      	str	r3, [r7, #20]
			break;
 800b572:	e03f      	b.n	800b5f4 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	0a1b      	lsrs	r3, r3, #8
 800b57c:	4413      	add	r3, r2
 800b57e:	4619      	mov	r1, r3
 800b580:	6938      	ldr	r0, [r7, #16]
 800b582:	f7ff ff4b 	bl	800b41c <move_window>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d130      	bne.n	800b5ee <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b59a:	4413      	add	r3, r2
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff fd2d 	bl	800affc <ld_word>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	617b      	str	r3, [r7, #20]
			break;
 800b5a6:	e025      	b.n	800b5f4 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	09db      	lsrs	r3, r3, #7
 800b5b0:	4413      	add	r3, r2
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6938      	ldr	r0, [r7, #16]
 800b5b6:	f7ff ff31 	bl	800b41c <move_window>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d118      	bne.n	800b5f2 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b5ce:	4413      	add	r3, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff fd2b 	bl	800b02c <ld_dword>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b5dc:	617b      	str	r3, [r7, #20]
			break;
 800b5de:	e009      	b.n	800b5f4 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	617b      	str	r3, [r7, #20]
 800b5e4:	e006      	b.n	800b5f4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5e6:	bf00      	nop
 800b5e8:	e004      	b.n	800b5f4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5ea:	bf00      	nop
 800b5ec:	e002      	b.n	800b5f4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5ee:	bf00      	nop
 800b5f0:	e000      	b.n	800b5f4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b5f2:	bf00      	nop
		}
	}

	return val;
 800b5f4:	697b      	ldr	r3, [r7, #20]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b5fe:	b590      	push	{r4, r7, lr}
 800b600:	b089      	sub	sp, #36	; 0x24
 800b602:	af00      	add	r7, sp, #0
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b60a:	2302      	movs	r3, #2
 800b60c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2b01      	cmp	r3, #1
 800b612:	f240 80d6 	bls.w	800b7c2 <put_fat+0x1c4>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	f080 80d0 	bcs.w	800b7c2 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	2b02      	cmp	r3, #2
 800b628:	d073      	beq.n	800b712 <put_fat+0x114>
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	f000 8091 	beq.w	800b752 <put_fat+0x154>
 800b630:	2b01      	cmp	r3, #1
 800b632:	f040 80c6 	bne.w	800b7c2 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	61bb      	str	r3, [r7, #24]
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	085b      	lsrs	r3, r3, #1
 800b63e:	69ba      	ldr	r2, [r7, #24]
 800b640:	4413      	add	r3, r2
 800b642:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	0a5b      	lsrs	r3, r3, #9
 800b64c:	4413      	add	r3, r2
 800b64e:	4619      	mov	r1, r3
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7ff fee3 	bl	800b41c <move_window>
 800b656:	4603      	mov	r3, r0
 800b658:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b65a:	7ffb      	ldrb	r3, [r7, #31]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f040 80a9 	bne.w	800b7b4 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	1c59      	adds	r1, r3, #1
 800b66c:	61b9      	str	r1, [r7, #24]
 800b66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b672:	4413      	add	r3, r2
 800b674:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f003 0301 	and.w	r3, r3, #1
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00d      	beq.n	800b69c <put_fat+0x9e>
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	b25b      	sxtb	r3, r3
 800b686:	f003 030f 	and.w	r3, r3, #15
 800b68a:	b25a      	sxtb	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	011b      	lsls	r3, r3, #4
 800b692:	b25b      	sxtb	r3, r3
 800b694:	4313      	orrs	r3, r2
 800b696:	b25b      	sxtb	r3, r3
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	e001      	b.n	800b6a0 <put_fat+0xa2>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	697a      	ldr	r2, [r7, #20]
 800b6a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	0a5b      	lsrs	r3, r3, #9
 800b6b2:	4413      	add	r3, r2
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f7ff feb0 	bl	800b41c <move_window>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6c0:	7ffb      	ldrb	r3, [r7, #31]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d178      	bne.n	800b7b8 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d2:	4413      	add	r3, r2
 800b6d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <put_fat+0xea>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	091b      	lsrs	r3, r3, #4
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	e00e      	b.n	800b706 <put_fat+0x108>
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	b25b      	sxtb	r3, r3
 800b6ee:	f023 030f 	bic.w	r3, r3, #15
 800b6f2:	b25a      	sxtb	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	0a1b      	lsrs	r3, r3, #8
 800b6f8:	b25b      	sxtb	r3, r3
 800b6fa:	f003 030f 	and.w	r3, r3, #15
 800b6fe:	b25b      	sxtb	r3, r3
 800b700:	4313      	orrs	r3, r2
 800b702:	b25b      	sxtb	r3, r3
 800b704:	b2db      	uxtb	r3, r3
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2201      	movs	r2, #1
 800b70e:	70da      	strb	r2, [r3, #3]
			break;
 800b710:	e057      	b.n	800b7c2 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	0a1b      	lsrs	r3, r3, #8
 800b71a:	4413      	add	r3, r2
 800b71c:	4619      	mov	r1, r3
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7ff fe7c 	bl	800b41c <move_window>
 800b724:	4603      	mov	r3, r0
 800b726:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b728:	7ffb      	ldrb	r3, [r7, #31]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d146      	bne.n	800b7bc <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b73c:	4413      	add	r3, r2
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	b292      	uxth	r2, r2
 800b742:	4611      	mov	r1, r2
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff fc94 	bl	800b072 <st_word>
			fs->wflag = 1;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2201      	movs	r2, #1
 800b74e:	70da      	strb	r2, [r3, #3]
			break;
 800b750:	e037      	b.n	800b7c2 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	09db      	lsrs	r3, r3, #7
 800b75a:	4413      	add	r3, r2
 800b75c:	4619      	mov	r1, r3
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f7ff fe5c 	bl	800b41c <move_window>
 800b764:	4603      	mov	r3, r0
 800b766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b768:	7ffb      	ldrb	r3, [r7, #31]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d128      	bne.n	800b7c0 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b782:	4413      	add	r3, r2
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fc51 	bl	800b02c <ld_dword>
 800b78a:	4603      	mov	r3, r0
 800b78c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b790:	4323      	orrs	r3, r4
 800b792:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b7a2:	4413      	add	r3, r2
 800b7a4:	6879      	ldr	r1, [r7, #4]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff fc7e 	bl	800b0a8 <st_dword>
			fs->wflag = 1;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	70da      	strb	r2, [r3, #3]
			break;
 800b7b2:	e006      	b.n	800b7c2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b7b4:	bf00      	nop
 800b7b6:	e004      	b.n	800b7c2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b7b8:	bf00      	nop
 800b7ba:	e002      	b.n	800b7c2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b7bc:	bf00      	nop
 800b7be:	e000      	b.n	800b7c2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b7c0:	bf00      	nop
		}
	}
	return res;
 800b7c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3724      	adds	r7, #36	; 0x24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd90      	pop	{r4, r7, pc}

0800b7cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10d      	bne.n	800b7fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d004      	beq.n	800b7f8 <create_chain+0x2c>
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	69ba      	ldr	r2, [r7, #24]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d31b      	bcc.n	800b830 <create_chain+0x64>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	61bb      	str	r3, [r7, #24]
 800b7fc:	e018      	b.n	800b830 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff fe57 	bl	800b4b4 <get_fat>
 800b806:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d801      	bhi.n	800b812 <create_chain+0x46>
 800b80e:	2301      	movs	r3, #1
 800b810:	e070      	b.n	800b8f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b818:	d101      	bne.n	800b81e <create_chain+0x52>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	e06a      	b.n	800b8f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	429a      	cmp	r2, r3
 800b826:	d201      	bcs.n	800b82c <create_chain+0x60>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	e063      	b.n	800b8f4 <create_chain+0x128>
		scl = clst;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	3301      	adds	r3, #1
 800b838:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	69fa      	ldr	r2, [r7, #28]
 800b840:	429a      	cmp	r2, r3
 800b842:	d307      	bcc.n	800b854 <create_chain+0x88>
				ncl = 2;
 800b844:	2302      	movs	r3, #2
 800b846:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b848:	69fa      	ldr	r2, [r7, #28]
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d901      	bls.n	800b854 <create_chain+0x88>
 800b850:	2300      	movs	r3, #0
 800b852:	e04f      	b.n	800b8f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b854:	69f9      	ldr	r1, [r7, #28]
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7ff fe2c 	bl	800b4b4 <get_fat>
 800b85c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00e      	beq.n	800b882 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d003      	beq.n	800b872 <create_chain+0xa6>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b870:	d101      	bne.n	800b876 <create_chain+0xaa>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	e03e      	b.n	800b8f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b876:	69fa      	ldr	r2, [r7, #28]
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d1da      	bne.n	800b834 <create_chain+0x68>
 800b87e:	2300      	movs	r3, #0
 800b880:	e038      	b.n	800b8f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b882:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b884:	f04f 32ff 	mov.w	r2, #4294967295
 800b888:	69f9      	ldr	r1, [r7, #28]
 800b88a:	6938      	ldr	r0, [r7, #16]
 800b88c:	f7ff feb7 	bl	800b5fe <put_fat>
 800b890:	4603      	mov	r3, r0
 800b892:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b894:	7dfb      	ldrb	r3, [r7, #23]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d109      	bne.n	800b8ae <create_chain+0xe2>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d006      	beq.n	800b8ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b8a0:	69fa      	ldr	r2, [r7, #28]
 800b8a2:	6839      	ldr	r1, [r7, #0]
 800b8a4:	6938      	ldr	r0, [r7, #16]
 800b8a6:	f7ff feaa 	bl	800b5fe <put_fat>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d116      	bne.n	800b8e2 <create_chain+0x116>
		fs->last_clst = ncl;
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	69fa      	ldr	r2, [r7, #28]
 800b8b8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	695a      	ldr	r2, [r3, #20]
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	3b02      	subs	r3, #2
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d804      	bhi.n	800b8d2 <create_chain+0x106>
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	695b      	ldr	r3, [r3, #20]
 800b8cc:	1e5a      	subs	r2, r3, #1
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	791b      	ldrb	r3, [r3, #4]
 800b8d6:	f043 0301 	orr.w	r3, r3, #1
 800b8da:	b2da      	uxtb	r2, r3
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	711a      	strb	r2, [r3, #4]
 800b8e0:	e007      	b.n	800b8f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d102      	bne.n	800b8ee <create_chain+0x122>
 800b8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ec:	e000      	b.n	800b8f0 <create_chain+0x124>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b8f2:	69fb      	ldr	r3, [r7, #28]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b912:	d204      	bcs.n	800b91e <dir_sdi+0x22>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	f003 031f 	and.w	r3, r3, #31
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b91e:	2302      	movs	r3, #2
 800b920:	e063      	b.n	800b9ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <dir_sdi+0x46>
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d902      	bls.n	800b942 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b940:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10c      	bne.n	800b962 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	095b      	lsrs	r3, r3, #5
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	8912      	ldrh	r2, [r2, #8]
 800b950:	4293      	cmp	r3, r2
 800b952:	d301      	bcc.n	800b958 <dir_sdi+0x5c>
 800b954:	2302      	movs	r3, #2
 800b956:	e048      	b.n	800b9ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	61da      	str	r2, [r3, #28]
 800b960:	e029      	b.n	800b9b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	895b      	ldrh	r3, [r3, #10]
 800b966:	025b      	lsls	r3, r3, #9
 800b968:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b96a:	e019      	b.n	800b9a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6979      	ldr	r1, [r7, #20]
 800b970:	4618      	mov	r0, r3
 800b972:	f7ff fd9f 	bl	800b4b4 <get_fat>
 800b976:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97e:	d101      	bne.n	800b984 <dir_sdi+0x88>
 800b980:	2301      	movs	r3, #1
 800b982:	e032      	b.n	800b9ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d904      	bls.n	800b994 <dir_sdi+0x98>
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	429a      	cmp	r2, r3
 800b992:	d301      	bcc.n	800b998 <dir_sdi+0x9c>
 800b994:	2302      	movs	r3, #2
 800b996:	e028      	b.n	800b9ea <dir_sdi+0xee>
			ofs -= csz;
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d2e1      	bcs.n	800b96c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b9a8:	6979      	ldr	r1, [r7, #20]
 800b9aa:	6938      	ldr	r0, [r7, #16]
 800b9ac:	f7ff fd63 	bl	800b476 <clust2sect>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	69db      	ldr	r3, [r3, #28]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <dir_sdi+0xcc>
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	e010      	b.n	800b9ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	69da      	ldr	r2, [r3, #28]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	0a5b      	lsrs	r3, r3, #9
 800b9d0:	441a      	add	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e2:	441a      	add	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3718      	adds	r7, #24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b086      	sub	sp, #24
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	695b      	ldr	r3, [r3, #20]
 800ba06:	3320      	adds	r3, #32
 800ba08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d003      	beq.n	800ba1a <dir_next+0x28>
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba18:	d301      	bcc.n	800ba1e <dir_next+0x2c>
 800ba1a:	2304      	movs	r3, #4
 800ba1c:	e0aa      	b.n	800bb74 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f040 8098 	bne.w	800bb5a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	69db      	ldr	r3, [r3, #28]
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10b      	bne.n	800ba54 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	095b      	lsrs	r3, r3, #5
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	8912      	ldrh	r2, [r2, #8]
 800ba44:	4293      	cmp	r3, r2
 800ba46:	f0c0 8088 	bcc.w	800bb5a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	61da      	str	r2, [r3, #28]
 800ba50:	2304      	movs	r3, #4
 800ba52:	e08f      	b.n	800bb74 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	0a5b      	lsrs	r3, r3, #9
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	8952      	ldrh	r2, [r2, #10]
 800ba5c:	3a01      	subs	r2, #1
 800ba5e:	4013      	ands	r3, r2
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d17a      	bne.n	800bb5a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	f7ff fd21 	bl	800b4b4 <get_fat>
 800ba72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d801      	bhi.n	800ba7e <dir_next+0x8c>
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	e07a      	b.n	800bb74 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba84:	d101      	bne.n	800ba8a <dir_next+0x98>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e074      	b.n	800bb74 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	699b      	ldr	r3, [r3, #24]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d358      	bcc.n	800bb46 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d104      	bne.n	800baa4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	61da      	str	r2, [r3, #28]
 800baa0:	2304      	movs	r3, #4
 800baa2:	e067      	b.n	800bb74 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	4619      	mov	r1, r3
 800baac:	4610      	mov	r0, r2
 800baae:	f7ff fe8d 	bl	800b7cc <create_chain>
 800bab2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <dir_next+0xcc>
 800baba:	2307      	movs	r3, #7
 800babc:	e05a      	b.n	800bb74 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d101      	bne.n	800bac8 <dir_next+0xd6>
 800bac4:	2302      	movs	r3, #2
 800bac6:	e055      	b.n	800bb74 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bace:	d101      	bne.n	800bad4 <dir_next+0xe2>
 800bad0:	2301      	movs	r3, #1
 800bad2:	e04f      	b.n	800bb74 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f7ff fc5d 	bl	800b394 <sync_window>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <dir_next+0xf2>
 800bae0:	2301      	movs	r3, #1
 800bae2:	e047      	b.n	800bb74 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3334      	adds	r3, #52	; 0x34
 800bae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baec:	2100      	movs	r1, #0
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fb06 	bl	800b100 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800baf4:	2300      	movs	r3, #0
 800baf6:	613b      	str	r3, [r7, #16]
 800baf8:	6979      	ldr	r1, [r7, #20]
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f7ff fcbb 	bl	800b476 <clust2sect>
 800bb00:	4602      	mov	r2, r0
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	631a      	str	r2, [r3, #48]	; 0x30
 800bb06:	e012      	b.n	800bb2e <dir_next+0x13c>
						fs->wflag = 1;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f7ff fc40 	bl	800b394 <sync_window>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <dir_next+0x12c>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e02a      	b.n	800bb74 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	3301      	adds	r3, #1
 800bb22:	613b      	str	r3, [r7, #16]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	631a      	str	r2, [r3, #48]	; 0x30
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	895b      	ldrh	r3, [r3, #10]
 800bb32:	461a      	mov	r2, r3
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d3e6      	bcc.n	800bb08 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	1ad2      	subs	r2, r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bb4c:	6979      	ldr	r1, [r7, #20]
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f7ff fc91 	bl	800b476 <clust2sect>
 800bb54:	4602      	mov	r2, r0
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb6c:	441a      	add	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	331a      	adds	r3, #26
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7ff fa36 	bl	800affc <ld_word>
 800bb90:	4603      	mov	r3, r0
 800bb92:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	d109      	bne.n	800bbb0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	3314      	adds	r3, #20
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff fa2b 	bl	800affc <ld_word>
 800bba6:	4603      	mov	r3, r0
 800bba8:	041b      	lsls	r3, r3, #16
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bbbc:	b590      	push	{r4, r7, lr}
 800bbbe:	b087      	sub	sp, #28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	331a      	adds	r3, #26
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7ff fa16 	bl	800affc <ld_word>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <cmp_lfn+0x1e>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e059      	b.n	800bc8e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbe2:	1e5a      	subs	r2, r3, #1
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	005b      	lsls	r3, r3, #1
 800bbe8:	4413      	add	r3, r2
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	4413      	add	r3, r2
 800bbee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	81fb      	strh	r3, [r7, #14]
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	613b      	str	r3, [r7, #16]
 800bbf8:	e033      	b.n	800bc62 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bbfa:	4a27      	ldr	r2, [pc, #156]	; (800bc98 <cmp_lfn+0xdc>)
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	4413      	add	r3, r2
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	4413      	add	r3, r2
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff f9f7 	bl	800affc <ld_word>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bc12:	89fb      	ldrh	r3, [r7, #14]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d01a      	beq.n	800bc4e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	2bfe      	cmp	r3, #254	; 0xfe
 800bc1c:	d812      	bhi.n	800bc44 <cmp_lfn+0x88>
 800bc1e:	89bb      	ldrh	r3, [r7, #12]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f001 fabb 	bl	800d19c <ff_wtoupper>
 800bc26:	4603      	mov	r3, r0
 800bc28:	461c      	mov	r4, r3
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	617a      	str	r2, [r7, #20]
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	4413      	add	r3, r2
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f001 faaf 	bl	800d19c <ff_wtoupper>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	429c      	cmp	r4, r3
 800bc42:	d001      	beq.n	800bc48 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bc44:	2300      	movs	r3, #0
 800bc46:	e022      	b.n	800bc8e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bc48:	89bb      	ldrh	r3, [r7, #12]
 800bc4a:	81fb      	strh	r3, [r7, #14]
 800bc4c:	e006      	b.n	800bc5c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bc4e:	89bb      	ldrh	r3, [r7, #12]
 800bc50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d001      	beq.n	800bc5c <cmp_lfn+0xa0>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	e018      	b.n	800bc8e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	613b      	str	r3, [r7, #16]
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	2b0c      	cmp	r3, #12
 800bc66:	d9c8      	bls.n	800bbfa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00b      	beq.n	800bc8c <cmp_lfn+0xd0>
 800bc74:	89fb      	ldrh	r3, [r7, #14]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d008      	beq.n	800bc8c <cmp_lfn+0xd0>
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	4413      	add	r3, r2
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <cmp_lfn+0xd0>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	e000      	b.n	800bc8e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bc8c:	2301      	movs	r3, #1
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	371c      	adds	r7, #28
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd90      	pop	{r4, r7, pc}
 800bc96:	bf00      	nop
 800bc98:	0801166c 	.word	0x0801166c

0800bc9c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	331a      	adds	r3, #26
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7ff f9a6 	bl	800affc <ld_word>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <pick_lfn+0x1e>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e04d      	b.n	800bd56 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcc2:	1e5a      	subs	r2, r3, #1
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	4413      	add	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	4413      	add	r3, r2
 800bcce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	81fb      	strh	r3, [r7, #14]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	613b      	str	r3, [r7, #16]
 800bcd8:	e028      	b.n	800bd2c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bcda:	4a21      	ldr	r2, [pc, #132]	; (800bd60 <pick_lfn+0xc4>)
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	4413      	add	r3, r2
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	461a      	mov	r2, r3
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	4413      	add	r3, r2
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7ff f987 	bl	800affc <ld_word>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bcf2:	89fb      	ldrh	r3, [r7, #14]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00f      	beq.n	800bd18 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	2bfe      	cmp	r3, #254	; 0xfe
 800bcfc:	d901      	bls.n	800bd02 <pick_lfn+0x66>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e029      	b.n	800bd56 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bd02:	89bb      	ldrh	r3, [r7, #12]
 800bd04:	81fb      	strh	r3, [r7, #14]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	617a      	str	r2, [r7, #20]
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	4413      	add	r3, r2
 800bd12:	89fa      	ldrh	r2, [r7, #14]
 800bd14:	801a      	strh	r2, [r3, #0]
 800bd16:	e006      	b.n	800bd26 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd18:	89bb      	ldrh	r3, [r7, #12]
 800bd1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d001      	beq.n	800bd26 <pick_lfn+0x8a>
 800bd22:	2300      	movs	r3, #0
 800bd24:	e017      	b.n	800bd56 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	613b      	str	r3, [r7, #16]
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	2b0c      	cmp	r3, #12
 800bd30:	d9d3      	bls.n	800bcda <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00a      	beq.n	800bd54 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2bfe      	cmp	r3, #254	; 0xfe
 800bd42:	d901      	bls.n	800bd48 <pick_lfn+0xac>
 800bd44:	2300      	movs	r3, #0
 800bd46:	e006      	b.n	800bd56 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	005b      	lsls	r3, r3, #1
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	4413      	add	r3, r2
 800bd50:	2200      	movs	r2, #0
 800bd52:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800bd54:	2301      	movs	r3, #1
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3718      	adds	r7, #24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	0801166c 	.word	0x0801166c

0800bd64 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bd70:	230b      	movs	r3, #11
 800bd72:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	0852      	lsrs	r2, r2, #1
 800bd7a:	01db      	lsls	r3, r3, #7
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	1c59      	adds	r1, r3, #1
 800bd84:	6079      	str	r1, [r7, #4]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	4413      	add	r3, r2
 800bd8a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	60bb      	str	r3, [r7, #8]
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1ed      	bne.n	800bd74 <sum_sfn+0x10>
	return sum;
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr

0800bda6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b086      	sub	sp, #24
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bdb0:	2304      	movs	r3, #4
 800bdb2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800bdba:	23ff      	movs	r3, #255	; 0xff
 800bdbc:	757b      	strb	r3, [r7, #21]
 800bdbe:	23ff      	movs	r3, #255	; 0xff
 800bdc0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bdc2:	e081      	b.n	800bec8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6938      	ldr	r0, [r7, #16]
 800bdcc:	f7ff fb26 	bl	800b41c <move_window>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d17c      	bne.n	800bed4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a1b      	ldr	r3, [r3, #32]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bde2:	7dbb      	ldrb	r3, [r7, #22]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d102      	bne.n	800bdee <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bde8:	2304      	movs	r3, #4
 800bdea:	75fb      	strb	r3, [r7, #23]
 800bdec:	e077      	b.n	800bede <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	330b      	adds	r3, #11
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdfa:	73fb      	strb	r3, [r7, #15]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7bfa      	ldrb	r2, [r7, #15]
 800be00:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800be02:	7dbb      	ldrb	r3, [r7, #22]
 800be04:	2be5      	cmp	r3, #229	; 0xe5
 800be06:	d00e      	beq.n	800be26 <dir_read+0x80>
 800be08:	7dbb      	ldrb	r3, [r7, #22]
 800be0a:	2b2e      	cmp	r3, #46	; 0x2e
 800be0c:	d00b      	beq.n	800be26 <dir_read+0x80>
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
 800be10:	f023 0320 	bic.w	r3, r3, #32
 800be14:	2b08      	cmp	r3, #8
 800be16:	bf0c      	ite	eq
 800be18:	2301      	moveq	r3, #1
 800be1a:	2300      	movne	r3, #0
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	461a      	mov	r2, r3
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	4293      	cmp	r3, r2
 800be24:	d002      	beq.n	800be2c <dir_read+0x86>
				ord = 0xFF;
 800be26:	23ff      	movs	r3, #255	; 0xff
 800be28:	757b      	strb	r3, [r7, #21]
 800be2a:	e044      	b.n	800beb6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
 800be2e:	2b0f      	cmp	r3, #15
 800be30:	d12f      	bne.n	800be92 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800be32:	7dbb      	ldrb	r3, [r7, #22]
 800be34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00d      	beq.n	800be58 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	7b5b      	ldrb	r3, [r3, #13]
 800be42:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800be44:	7dbb      	ldrb	r3, [r7, #22]
 800be46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be4a:	75bb      	strb	r3, [r7, #22]
 800be4c:	7dbb      	ldrb	r3, [r7, #22]
 800be4e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	695a      	ldr	r2, [r3, #20]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800be58:	7dba      	ldrb	r2, [r7, #22]
 800be5a:	7d7b      	ldrb	r3, [r7, #21]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d115      	bne.n	800be8c <dir_read+0xe6>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	330d      	adds	r3, #13
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	7d3a      	ldrb	r2, [r7, #20]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d10e      	bne.n	800be8c <dir_read+0xe6>
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	68da      	ldr	r2, [r3, #12]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	4619      	mov	r1, r3
 800be78:	4610      	mov	r0, r2
 800be7a:	f7ff ff0f 	bl	800bc9c <pick_lfn>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d003      	beq.n	800be8c <dir_read+0xe6>
 800be84:	7d7b      	ldrb	r3, [r7, #21]
 800be86:	3b01      	subs	r3, #1
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	e000      	b.n	800be8e <dir_read+0xe8>
 800be8c:	23ff      	movs	r3, #255	; 0xff
 800be8e:	757b      	strb	r3, [r7, #21]
 800be90:	e011      	b.n	800beb6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800be92:	7d7b      	ldrb	r3, [r7, #21]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d109      	bne.n	800beac <dir_read+0x106>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a1b      	ldr	r3, [r3, #32]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff ff61 	bl	800bd64 <sum_sfn>
 800bea2:	4603      	mov	r3, r0
 800bea4:	461a      	mov	r2, r3
 800bea6:	7d3b      	ldrb	r3, [r7, #20]
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d015      	beq.n	800bed8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f04f 32ff 	mov.w	r2, #4294967295
 800beb2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800beb4:	e010      	b.n	800bed8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800beb6:	2100      	movs	r1, #0
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7ff fd9a 	bl	800b9f2 <dir_next>
 800bebe:	4603      	mov	r3, r0
 800bec0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bec2:	7dfb      	ldrb	r3, [r7, #23]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d109      	bne.n	800bedc <dir_read+0x136>
	while (dp->sect) {
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	2b00      	cmp	r3, #0
 800bece:	f47f af79 	bne.w	800bdc4 <dir_read+0x1e>
 800bed2:	e004      	b.n	800bede <dir_read+0x138>
		if (res != FR_OK) break;
 800bed4:	bf00      	nop
 800bed6:	e002      	b.n	800bede <dir_read+0x138>
					break;
 800bed8:	bf00      	nop
 800beda:	e000      	b.n	800bede <dir_read+0x138>
		if (res != FR_OK) break;
 800bedc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d002      	beq.n	800beea <dir_read+0x144>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	61da      	str	r2, [r3, #28]
	return res;
 800beea:	7dfb      	ldrb	r3, [r7, #23]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bf02:	2100      	movs	r1, #0
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff fcf9 	bl	800b8fc <dir_sdi>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <dir_find+0x24>
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	e0a9      	b.n	800c06c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bf18:	23ff      	movs	r3, #255	; 0xff
 800bf1a:	753b      	strb	r3, [r7, #20]
 800bf1c:	7d3b      	ldrb	r3, [r7, #20]
 800bf1e:	757b      	strb	r3, [r7, #21]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f04f 32ff 	mov.w	r2, #4294967295
 800bf26:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	69db      	ldr	r3, [r3, #28]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6938      	ldr	r0, [r7, #16]
 800bf30:	f7ff fa74 	bl	800b41c <move_window>
 800bf34:	4603      	mov	r3, r0
 800bf36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f040 8090 	bne.w	800c060 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6a1b      	ldr	r3, [r3, #32]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bf48:	7dbb      	ldrb	r3, [r7, #22]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d102      	bne.n	800bf54 <dir_find+0x60>
 800bf4e:	2304      	movs	r3, #4
 800bf50:	75fb      	strb	r3, [r7, #23]
 800bf52:	e08a      	b.n	800c06a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a1b      	ldr	r3, [r3, #32]
 800bf58:	330b      	adds	r3, #11
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf60:	73fb      	strb	r3, [r7, #15]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7bfa      	ldrb	r2, [r7, #15]
 800bf66:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bf68:	7dbb      	ldrb	r3, [r7, #22]
 800bf6a:	2be5      	cmp	r3, #229	; 0xe5
 800bf6c:	d007      	beq.n	800bf7e <dir_find+0x8a>
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	f003 0308 	and.w	r3, r3, #8
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d009      	beq.n	800bf8c <dir_find+0x98>
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
 800bf7a:	2b0f      	cmp	r3, #15
 800bf7c:	d006      	beq.n	800bf8c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bf7e:	23ff      	movs	r3, #255	; 0xff
 800bf80:	757b      	strb	r3, [r7, #21]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f04f 32ff 	mov.w	r2, #4294967295
 800bf88:	631a      	str	r2, [r3, #48]	; 0x30
 800bf8a:	e05e      	b.n	800c04a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	2b0f      	cmp	r3, #15
 800bf90:	d136      	bne.n	800c000 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d154      	bne.n	800c04a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bfa0:	7dbb      	ldrb	r3, [r7, #22]
 800bfa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00d      	beq.n	800bfc6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	7b5b      	ldrb	r3, [r3, #13]
 800bfb0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bfb2:	7dbb      	ldrb	r3, [r7, #22]
 800bfb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfb8:	75bb      	strb	r3, [r7, #22]
 800bfba:	7dbb      	ldrb	r3, [r7, #22]
 800bfbc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	695a      	ldr	r2, [r3, #20]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bfc6:	7dba      	ldrb	r2, [r7, #22]
 800bfc8:	7d7b      	ldrb	r3, [r7, #21]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d115      	bne.n	800bffa <dir_find+0x106>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	330d      	adds	r3, #13
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	7d3a      	ldrb	r2, [r7, #20]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d10e      	bne.n	800bffa <dir_find+0x106>
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	68da      	ldr	r2, [r3, #12]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a1b      	ldr	r3, [r3, #32]
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	f7ff fde8 	bl	800bbbc <cmp_lfn>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <dir_find+0x106>
 800bff2:	7d7b      	ldrb	r3, [r7, #21]
 800bff4:	3b01      	subs	r3, #1
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	e000      	b.n	800bffc <dir_find+0x108>
 800bffa:	23ff      	movs	r3, #255	; 0xff
 800bffc:	757b      	strb	r3, [r7, #21]
 800bffe:	e024      	b.n	800c04a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c000:	7d7b      	ldrb	r3, [r7, #21]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d109      	bne.n	800c01a <dir_find+0x126>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a1b      	ldr	r3, [r3, #32]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff feaa 	bl	800bd64 <sum_sfn>
 800c010:	4603      	mov	r3, r0
 800c012:	461a      	mov	r2, r3
 800c014:	7d3b      	ldrb	r3, [r7, #20]
 800c016:	4293      	cmp	r3, r2
 800c018:	d024      	beq.n	800c064 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c020:	f003 0301 	and.w	r3, r3, #1
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10a      	bne.n	800c03e <dir_find+0x14a>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a18      	ldr	r0, [r3, #32]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3324      	adds	r3, #36	; 0x24
 800c030:	220b      	movs	r2, #11
 800c032:	4619      	mov	r1, r3
 800c034:	f7ff f87e 	bl	800b134 <mem_cmp>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d014      	beq.n	800c068 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c03e:	23ff      	movs	r3, #255	; 0xff
 800c040:	757b      	strb	r3, [r7, #21]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f04f 32ff 	mov.w	r2, #4294967295
 800c048:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c04a:	2100      	movs	r1, #0
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7ff fcd0 	bl	800b9f2 <dir_next>
 800c052:	4603      	mov	r3, r0
 800c054:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f43f af65 	beq.w	800bf28 <dir_find+0x34>
 800c05e:	e004      	b.n	800c06a <dir_find+0x176>
		if (res != FR_OK) break;
 800c060:	bf00      	nop
 800c062:	e002      	b.n	800c06a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c064:	bf00      	nop
 800c066:	e000      	b.n	800c06a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c068:	bf00      	nop

	return res;
 800c06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3718      	adds	r7, #24
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b088      	sub	sp, #32
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2200      	movs	r2, #0
 800c088:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 80c9 	beq.w	800c226 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09c:	d032      	beq.n	800c104 <get_fileinfo+0x90>
			i = j = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	61bb      	str	r3, [r7, #24]
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c0a6:	e01b      	b.n	800c0e0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c0a8:	89fb      	ldrh	r3, [r7, #14]
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f001 f839 	bl	800d124 <ff_convert>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c0b6:	89fb      	ldrh	r3, [r7, #14]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d102      	bne.n	800c0c2 <get_fileinfo+0x4e>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	61fb      	str	r3, [r7, #28]
 800c0c0:	e01a      	b.n	800c0f8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	2bfe      	cmp	r3, #254	; 0xfe
 800c0c6:	d902      	bls.n	800c0ce <get_fileinfo+0x5a>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	61fb      	str	r3, [r7, #28]
 800c0cc:	e014      	b.n	800c0f8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	61fa      	str	r2, [r7, #28]
 800c0d4:	89fa      	ldrh	r2, [r7, #14]
 800c0d6:	b2d1      	uxtb	r1, r2
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	4413      	add	r3, r2
 800c0dc:	460a      	mov	r2, r1
 800c0de:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	68da      	ldr	r2, [r3, #12]
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	1c59      	adds	r1, r3, #1
 800c0e8:	61b9      	str	r1, [r7, #24]
 800c0ea:	005b      	lsls	r3, r3, #1
 800c0ec:	4413      	add	r3, r2
 800c0ee:	881b      	ldrh	r3, [r3, #0]
 800c0f0:	81fb      	strh	r3, [r7, #14]
 800c0f2:	89fb      	ldrh	r3, [r7, #14]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1d7      	bne.n	800c0a8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	3316      	adds	r3, #22
 800c100:	2200      	movs	r2, #0
 800c102:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	61bb      	str	r3, [r7, #24]
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	4413      	add	r3, r2
 800c112:	3316      	adds	r3, #22
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c118:	e04c      	b.n	800c1b4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a1a      	ldr	r2, [r3, #32]
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	1c59      	adds	r1, r3, #1
 800c122:	61f9      	str	r1, [r7, #28]
 800c124:	4413      	add	r3, r2
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c12a:	7dfb      	ldrb	r3, [r7, #23]
 800c12c:	2b20      	cmp	r3, #32
 800c12e:	d100      	bne.n	800c132 <get_fileinfo+0xbe>
 800c130:	e040      	b.n	800c1b4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c132:	7dfb      	ldrb	r3, [r7, #23]
 800c134:	2b05      	cmp	r3, #5
 800c136:	d101      	bne.n	800c13c <get_fileinfo+0xc8>
 800c138:	23e5      	movs	r3, #229	; 0xe5
 800c13a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	2b09      	cmp	r3, #9
 800c140:	d10f      	bne.n	800c162 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800c142:	89bb      	ldrh	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d105      	bne.n	800c154 <get_fileinfo+0xe0>
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	4413      	add	r3, r2
 800c14e:	3316      	adds	r3, #22
 800c150:	222e      	movs	r2, #46	; 0x2e
 800c152:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	61ba      	str	r2, [r7, #24]
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	4413      	add	r3, r2
 800c15e:	222e      	movs	r2, #46	; 0x2e
 800c160:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	4413      	add	r3, r2
 800c168:	3309      	adds	r3, #9
 800c16a:	7dfa      	ldrb	r2, [r7, #23]
 800c16c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c16e:	89bb      	ldrh	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d11c      	bne.n	800c1ae <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c174:	7dfb      	ldrb	r3, [r7, #23]
 800c176:	2b40      	cmp	r3, #64	; 0x40
 800c178:	d913      	bls.n	800c1a2 <get_fileinfo+0x12e>
 800c17a:	7dfb      	ldrb	r3, [r7, #23]
 800c17c:	2b5a      	cmp	r3, #90	; 0x5a
 800c17e:	d810      	bhi.n	800c1a2 <get_fileinfo+0x12e>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a1b      	ldr	r3, [r3, #32]
 800c184:	330c      	adds	r3, #12
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	461a      	mov	r2, r3
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	2b08      	cmp	r3, #8
 800c18e:	d901      	bls.n	800c194 <get_fileinfo+0x120>
 800c190:	2310      	movs	r3, #16
 800c192:	e000      	b.n	800c196 <get_fileinfo+0x122>
 800c194:	2308      	movs	r3, #8
 800c196:	4013      	ands	r3, r2
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800c19c:	7dfb      	ldrb	r3, [r7, #23]
 800c19e:	3320      	adds	r3, #32
 800c1a0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	3316      	adds	r3, #22
 800c1aa:	7dfa      	ldrb	r2, [r7, #23]
 800c1ac:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	2b0a      	cmp	r3, #10
 800c1b8:	d9af      	bls.n	800c11a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c1ba:	89bb      	ldrh	r3, [r7, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10d      	bne.n	800c1dc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	3316      	adds	r3, #22
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a1b      	ldr	r3, [r3, #32]
 800c1d0:	330c      	adds	r3, #12
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <get_fileinfo+0x168>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	3309      	adds	r3, #9
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a1b      	ldr	r3, [r3, #32]
 800c1ec:	7ada      	ldrb	r2, [r3, #11]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	331c      	adds	r3, #28
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fe ff17 	bl	800b02c <ld_dword>
 800c1fe:	4602      	mov	r2, r0
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a1b      	ldr	r3, [r3, #32]
 800c208:	3316      	adds	r3, #22
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe ff0e 	bl	800b02c <ld_dword>
 800c210:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	b29a      	uxth	r2, r3
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	80da      	strh	r2, [r3, #6]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	0c1b      	lsrs	r3, r3, #16
 800c21e:	b29a      	uxth	r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	809a      	strh	r2, [r3, #4]
 800c224:	e000      	b.n	800c228 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c226:	bf00      	nop
}
 800c228:	3720      	adds	r7, #32
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b08a      	sub	sp, #40	; 0x28
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	613b      	str	r3, [r7, #16]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	2300      	movs	r3, #0
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	1c5a      	adds	r2, r3, #1
 800c254:	61ba      	str	r2, [r7, #24]
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	4413      	add	r3, r2
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c25e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c260:	2b1f      	cmp	r3, #31
 800c262:	d940      	bls.n	800c2e6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c266:	2b2f      	cmp	r3, #47	; 0x2f
 800c268:	d006      	beq.n	800c278 <create_name+0x48>
 800c26a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c26c:	2b5c      	cmp	r3, #92	; 0x5c
 800c26e:	d110      	bne.n	800c292 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c270:	e002      	b.n	800c278 <create_name+0x48>
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	3301      	adds	r3, #1
 800c276:	61bb      	str	r3, [r7, #24]
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	4413      	add	r3, r2
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2b2f      	cmp	r3, #47	; 0x2f
 800c282:	d0f6      	beq.n	800c272 <create_name+0x42>
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	4413      	add	r3, r2
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	2b5c      	cmp	r3, #92	; 0x5c
 800c28e:	d0f0      	beq.n	800c272 <create_name+0x42>
			break;
 800c290:	e02a      	b.n	800c2e8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	2bfe      	cmp	r3, #254	; 0xfe
 800c296:	d901      	bls.n	800c29c <create_name+0x6c>
 800c298:	2306      	movs	r3, #6
 800c29a:	e177      	b.n	800c58c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c29c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c2a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 ff3c 	bl	800d124 <ff_convert>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c2b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <create_name+0x8a>
 800c2b6:	2306      	movs	r3, #6
 800c2b8:	e168      	b.n	800c58c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c2ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2bc:	2b7f      	cmp	r3, #127	; 0x7f
 800c2be:	d809      	bhi.n	800c2d4 <create_name+0xa4>
 800c2c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	48b3      	ldr	r0, [pc, #716]	; (800c594 <create_name+0x364>)
 800c2c6:	f7fe ff5c 	bl	800b182 <chk_chr>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <create_name+0xa4>
 800c2d0:	2306      	movs	r3, #6
 800c2d2:	e15b      	b.n	800c58c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	1c5a      	adds	r2, r3, #1
 800c2d8:	617a      	str	r2, [r7, #20]
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	4413      	add	r3, r2
 800c2e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c2e2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c2e4:	e7b4      	b.n	800c250 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c2e6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	441a      	add	r2, r3
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c2f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f4:	2b1f      	cmp	r3, #31
 800c2f6:	d801      	bhi.n	800c2fc <create_name+0xcc>
 800c2f8:	2304      	movs	r3, #4
 800c2fa:	e000      	b.n	800c2fe <create_name+0xce>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c302:	e011      	b.n	800c328 <create_name+0xf8>
		w = lfn[di - 1];
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c30a:	3b01      	subs	r3, #1
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	4413      	add	r3, r2
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c318:	2b20      	cmp	r3, #32
 800c31a:	d002      	beq.n	800c322 <create_name+0xf2>
 800c31c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c31e:	2b2e      	cmp	r3, #46	; 0x2e
 800c320:	d106      	bne.n	800c330 <create_name+0x100>
		di--;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	3b01      	subs	r3, #1
 800c326:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1ea      	bne.n	800c304 <create_name+0xd4>
 800c32e:	e000      	b.n	800c332 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c330:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	4413      	add	r3, r2
 800c33a:	2200      	movs	r2, #0
 800c33c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <create_name+0x118>
 800c344:	2306      	movs	r3, #6
 800c346:	e121      	b.n	800c58c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	3324      	adds	r3, #36	; 0x24
 800c34c:	220b      	movs	r2, #11
 800c34e:	2120      	movs	r1, #32
 800c350:	4618      	mov	r0, r3
 800c352:	f7fe fed5 	bl	800b100 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c356:	2300      	movs	r3, #0
 800c358:	61bb      	str	r3, [r7, #24]
 800c35a:	e002      	b.n	800c362 <create_name+0x132>
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	3301      	adds	r3, #1
 800c360:	61bb      	str	r3, [r7, #24]
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	4413      	add	r3, r2
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	d0f5      	beq.n	800c35c <create_name+0x12c>
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	005b      	lsls	r3, r3, #1
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	4413      	add	r3, r2
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	2b2e      	cmp	r3, #46	; 0x2e
 800c37c:	d0ee      	beq.n	800c35c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d009      	beq.n	800c398 <create_name+0x168>
 800c384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c388:	f043 0303 	orr.w	r3, r3, #3
 800c38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c390:	e002      	b.n	800c398 <create_name+0x168>
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	3b01      	subs	r3, #1
 800c396:	617b      	str	r3, [r7, #20]
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d009      	beq.n	800c3b2 <create_name+0x182>
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c3b0:	d1ef      	bne.n	800c392 <create_name+0x162>

	i = b = 0; ni = 8;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	623b      	str	r3, [r7, #32]
 800c3bc:	2308      	movs	r3, #8
 800c3be:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	1c5a      	adds	r2, r3, #1
 800c3c4:	61ba      	str	r2, [r7, #24]
 800c3c6:	005b      	lsls	r3, r3, #1
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c3d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 8090 	beq.w	800c4f8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c3d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3da:	2b20      	cmp	r3, #32
 800c3dc:	d006      	beq.n	800c3ec <create_name+0x1bc>
 800c3de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3e2:	d10a      	bne.n	800c3fa <create_name+0x1ca>
 800c3e4:	69ba      	ldr	r2, [r7, #24]
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d006      	beq.n	800c3fa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3f0:	f043 0303 	orr.w	r3, r3, #3
 800c3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3f8:	e07d      	b.n	800c4f6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c3fa:	6a3a      	ldr	r2, [r7, #32]
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d203      	bcs.n	800c40a <create_name+0x1da>
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	429a      	cmp	r2, r3
 800c408:	d123      	bne.n	800c452 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	2b0b      	cmp	r3, #11
 800c40e:	d106      	bne.n	800c41e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c414:	f043 0303 	orr.w	r3, r3, #3
 800c418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c41c:	e06f      	b.n	800c4fe <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c41e:	69ba      	ldr	r2, [r7, #24]
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	429a      	cmp	r2, r3
 800c424:	d005      	beq.n	800c432 <create_name+0x202>
 800c426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c42a:	f043 0303 	orr.w	r3, r3, #3
 800c42e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c432:	69ba      	ldr	r2, [r7, #24]
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	429a      	cmp	r2, r3
 800c438:	d860      	bhi.n	800c4fc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	61bb      	str	r3, [r7, #24]
 800c43e:	2308      	movs	r3, #8
 800c440:	623b      	str	r3, [r7, #32]
 800c442:	230b      	movs	r3, #11
 800c444:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c446:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c450:	e051      	b.n	800c4f6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c454:	2b7f      	cmp	r3, #127	; 0x7f
 800c456:	d914      	bls.n	800c482 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c45a:	2100      	movs	r1, #0
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fe61 	bl	800d124 <ff_convert>
 800c462:	4603      	mov	r3, r0
 800c464:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d004      	beq.n	800c476 <create_name+0x246>
 800c46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c46e:	3b80      	subs	r3, #128	; 0x80
 800c470:	4a49      	ldr	r2, [pc, #292]	; (800c598 <create_name+0x368>)
 800c472:	5cd3      	ldrb	r3, [r2, r3]
 800c474:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c47a:	f043 0302 	orr.w	r3, r3, #2
 800c47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c484:	2b00      	cmp	r3, #0
 800c486:	d007      	beq.n	800c498 <create_name+0x268>
 800c488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c48a:	4619      	mov	r1, r3
 800c48c:	4843      	ldr	r0, [pc, #268]	; (800c59c <create_name+0x36c>)
 800c48e:	f7fe fe78 	bl	800b182 <chk_chr>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d008      	beq.n	800c4aa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c498:	235f      	movs	r3, #95	; 0x5f
 800c49a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4a0:	f043 0303 	orr.w	r3, r3, #3
 800c4a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4a8:	e01b      	b.n	800c4e2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c4aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ac:	2b40      	cmp	r3, #64	; 0x40
 800c4ae:	d909      	bls.n	800c4c4 <create_name+0x294>
 800c4b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b2:	2b5a      	cmp	r3, #90	; 0x5a
 800c4b4:	d806      	bhi.n	800c4c4 <create_name+0x294>
					b |= 2;
 800c4b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4ba:	f043 0302 	orr.w	r3, r3, #2
 800c4be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4c2:	e00e      	b.n	800c4e2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c4c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4c6:	2b60      	cmp	r3, #96	; 0x60
 800c4c8:	d90b      	bls.n	800c4e2 <create_name+0x2b2>
 800c4ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4cc:	2b7a      	cmp	r3, #122	; 0x7a
 800c4ce:	d808      	bhi.n	800c4e2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c4d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4d4:	f043 0301 	orr.w	r3, r3, #1
 800c4d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4de:	3b20      	subs	r3, #32
 800c4e0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c4e2:	6a3b      	ldr	r3, [r7, #32]
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	623a      	str	r2, [r7, #32]
 800c4e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4ea:	b2d1      	uxtb	r1, r2
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	460a      	mov	r2, r1
 800c4f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c4f6:	e763      	b.n	800c3c0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c4f8:	bf00      	nop
 800c4fa:	e000      	b.n	800c4fe <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800c4fc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c504:	2be5      	cmp	r3, #229	; 0xe5
 800c506:	d103      	bne.n	800c510 <create_name+0x2e0>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2205      	movs	r2, #5
 800c50c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	2b08      	cmp	r3, #8
 800c514:	d104      	bne.n	800c520 <create_name+0x2f0>
 800c516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c520:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c524:	f003 030c 	and.w	r3, r3, #12
 800c528:	2b0c      	cmp	r3, #12
 800c52a:	d005      	beq.n	800c538 <create_name+0x308>
 800c52c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c530:	f003 0303 	and.w	r3, r3, #3
 800c534:	2b03      	cmp	r3, #3
 800c536:	d105      	bne.n	800c544 <create_name+0x314>
 800c538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c53c:	f043 0302 	orr.w	r3, r3, #2
 800c540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c548:	f003 0302 	and.w	r3, r3, #2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d117      	bne.n	800c580 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c550:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c554:	f003 0303 	and.w	r3, r3, #3
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d105      	bne.n	800c568 <create_name+0x338>
 800c55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c560:	f043 0310 	orr.w	r3, r3, #16
 800c564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c568:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c56c:	f003 030c 	and.w	r3, r3, #12
 800c570:	2b04      	cmp	r3, #4
 800c572:	d105      	bne.n	800c580 <create_name+0x350>
 800c574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c578:	f043 0308 	orr.w	r3, r3, #8
 800c57c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c586:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c58a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3728      	adds	r7, #40	; 0x28
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	080113e8 	.word	0x080113e8
 800c598:	080115ec 	.word	0x080115ec
 800c59c:	080113f4 	.word	0x080113f4

0800c5a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c5b4:	e002      	b.n	800c5bc <follow_path+0x1c>
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	603b      	str	r3, [r7, #0]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b2f      	cmp	r3, #47	; 0x2f
 800c5c2:	d0f8      	beq.n	800c5b6 <follow_path+0x16>
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	2b5c      	cmp	r3, #92	; 0x5c
 800c5ca:	d0f4      	beq.n	800c5b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	2b1f      	cmp	r3, #31
 800c5d8:	d80a      	bhi.n	800c5f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2280      	movs	r2, #128	; 0x80
 800c5de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff f989 	bl	800b8fc <dir_sdi>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	75fb      	strb	r3, [r7, #23]
 800c5ee:	e043      	b.n	800c678 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c5f0:	463b      	mov	r3, r7
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff fe1b 	bl	800c230 <create_name>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d134      	bne.n	800c66e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7ff fc75 	bl	800bef4 <dir_find>
 800c60a:	4603      	mov	r3, r0
 800c60c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c614:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00a      	beq.n	800c632 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c61c:	7dfb      	ldrb	r3, [r7, #23]
 800c61e:	2b04      	cmp	r3, #4
 800c620:	d127      	bne.n	800c672 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c622:	7afb      	ldrb	r3, [r7, #11]
 800c624:	f003 0304 	and.w	r3, r3, #4
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d122      	bne.n	800c672 <follow_path+0xd2>
 800c62c:	2305      	movs	r3, #5
 800c62e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c630:	e01f      	b.n	800c672 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c632:	7afb      	ldrb	r3, [r7, #11]
 800c634:	f003 0304 	and.w	r3, r3, #4
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d11c      	bne.n	800c676 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	799b      	ldrb	r3, [r3, #6]
 800c640:	f003 0310 	and.w	r3, r3, #16
 800c644:	2b00      	cmp	r3, #0
 800c646:	d102      	bne.n	800c64e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c648:	2305      	movs	r3, #5
 800c64a:	75fb      	strb	r3, [r7, #23]
 800c64c:	e014      	b.n	800c678 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c65c:	4413      	add	r3, r2
 800c65e:	4619      	mov	r1, r3
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f7ff fa8b 	bl	800bb7c <ld_clust>
 800c666:	4602      	mov	r2, r0
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c66c:	e7c0      	b.n	800c5f0 <follow_path+0x50>
			if (res != FR_OK) break;
 800c66e:	bf00      	nop
 800c670:	e002      	b.n	800c678 <follow_path+0xd8>
				break;
 800c672:	bf00      	nop
 800c674:	e000      	b.n	800c678 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c676:	bf00      	nop
			}
		}
	}

	return res;
 800c678:	7dfb      	ldrb	r3, [r7, #23]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3718      	adds	r7, #24
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c682:	b480      	push	{r7}
 800c684:	b087      	sub	sp, #28
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c68a:	f04f 33ff 	mov.w	r3, #4294967295
 800c68e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d031      	beq.n	800c6fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	617b      	str	r3, [r7, #20]
 800c69e:	e002      	b.n	800c6a6 <get_ldnumber+0x24>
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	2b1f      	cmp	r3, #31
 800c6ac:	d903      	bls.n	800c6b6 <get_ldnumber+0x34>
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b3a      	cmp	r3, #58	; 0x3a
 800c6b4:	d1f4      	bne.n	800c6a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	2b3a      	cmp	r3, #58	; 0x3a
 800c6bc:	d11c      	bne.n	800c6f8 <get_ldnumber+0x76>
			tp = *path;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	1c5a      	adds	r2, r3, #1
 800c6c8:	60fa      	str	r2, [r7, #12]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	3b30      	subs	r3, #48	; 0x30
 800c6ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b09      	cmp	r3, #9
 800c6d4:	d80e      	bhi.n	800c6f4 <get_ldnumber+0x72>
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d10a      	bne.n	800c6f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d107      	bne.n	800c6f4 <get_ldnumber+0x72>
					vol = (int)i;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	617b      	str	r3, [r7, #20]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	e002      	b.n	800c6fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c6fc:	693b      	ldr	r3, [r7, #16]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	371c      	adds	r7, #28
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
	...

0800c70c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	70da      	strb	r2, [r3, #3]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f04f 32ff 	mov.w	r2, #4294967295
 800c722:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7fe fe78 	bl	800b41c <move_window>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d001      	beq.n	800c736 <check_fs+0x2a>
 800c732:	2304      	movs	r3, #4
 800c734:	e038      	b.n	800c7a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	3334      	adds	r3, #52	; 0x34
 800c73a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe fc5c 	bl	800affc <ld_word>
 800c744:	4603      	mov	r3, r0
 800c746:	461a      	mov	r2, r3
 800c748:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d001      	beq.n	800c754 <check_fs+0x48>
 800c750:	2303      	movs	r3, #3
 800c752:	e029      	b.n	800c7a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c75a:	2be9      	cmp	r3, #233	; 0xe9
 800c75c:	d009      	beq.n	800c772 <check_fs+0x66>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c764:	2beb      	cmp	r3, #235	; 0xeb
 800c766:	d11e      	bne.n	800c7a6 <check_fs+0x9a>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c76e:	2b90      	cmp	r3, #144	; 0x90
 800c770:	d119      	bne.n	800c7a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3334      	adds	r3, #52	; 0x34
 800c776:	3336      	adds	r3, #54	; 0x36
 800c778:	4618      	mov	r0, r3
 800c77a:	f7fe fc57 	bl	800b02c <ld_dword>
 800c77e:	4603      	mov	r3, r0
 800c780:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c784:	4a0a      	ldr	r2, [pc, #40]	; (800c7b0 <check_fs+0xa4>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d101      	bne.n	800c78e <check_fs+0x82>
 800c78a:	2300      	movs	r3, #0
 800c78c:	e00c      	b.n	800c7a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	3334      	adds	r3, #52	; 0x34
 800c792:	3352      	adds	r3, #82	; 0x52
 800c794:	4618      	mov	r0, r3
 800c796:	f7fe fc49 	bl	800b02c <ld_dword>
 800c79a:	4602      	mov	r2, r0
 800c79c:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <check_fs+0xa8>)
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d101      	bne.n	800c7a6 <check_fs+0x9a>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e000      	b.n	800c7a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c7a6:	2302      	movs	r3, #2
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	00544146 	.word	0x00544146
 800c7b4:	33544146 	.word	0x33544146

0800c7b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b096      	sub	sp, #88	; 0x58
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f7ff ff58 	bl	800c682 <get_ldnumber>
 800c7d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	da01      	bge.n	800c7de <find_volume+0x26>
 800c7da:	230b      	movs	r3, #11
 800c7dc:	e231      	b.n	800cc42 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c7de:	4aa8      	ldr	r2, [pc, #672]	; (800ca80 <find_volume+0x2c8>)
 800c7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <find_volume+0x3a>
 800c7ee:	230c      	movs	r3, #12
 800c7f0:	e227      	b.n	800cc42 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c7f8:	79fb      	ldrb	r3, [r7, #7]
 800c7fa:	f023 0301 	bic.w	r3, r3, #1
 800c7fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d01a      	beq.n	800c83e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	785b      	ldrb	r3, [r3, #1]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7fe fb75 	bl	800aefc <disk_status>
 800c812:	4603      	mov	r3, r0
 800c814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c81c:	f003 0301 	and.w	r3, r3, #1
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10c      	bne.n	800c83e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c824:	79fb      	ldrb	r3, [r7, #7]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d007      	beq.n	800c83a <find_volume+0x82>
 800c82a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c82e:	f003 0304 	and.w	r3, r3, #4
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c836:	230a      	movs	r3, #10
 800c838:	e203      	b.n	800cc42 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800c83a:	2300      	movs	r3, #0
 800c83c:	e201      	b.n	800cc42 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c840:	2200      	movs	r2, #0
 800c842:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c846:	b2da      	uxtb	r2, r3
 800c848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	785b      	ldrb	r3, [r3, #1]
 800c850:	4618      	mov	r0, r3
 800c852:	f7fe fb6d 	bl	800af30 <disk_initialize>
 800c856:	4603      	mov	r3, r0
 800c858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c85c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c860:	f003 0301 	and.w	r3, r3, #1
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c868:	2303      	movs	r3, #3
 800c86a:	e1ea      	b.n	800cc42 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c86c:	79fb      	ldrb	r3, [r7, #7]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d007      	beq.n	800c882 <find_volume+0xca>
 800c872:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c876:	f003 0304 	and.w	r3, r3, #4
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d001      	beq.n	800c882 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c87e:	230a      	movs	r3, #10
 800c880:	e1df      	b.n	800cc42 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c88a:	f7ff ff3f 	bl	800c70c <check_fs>
 800c88e:	4603      	mov	r3, r0
 800c890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d14b      	bne.n	800c934 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c89c:	2300      	movs	r3, #0
 800c89e:	643b      	str	r3, [r7, #64]	; 0x40
 800c8a0:	e01f      	b.n	800c8e2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8aa:	011b      	lsls	r3, r3, #4
 800c8ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c8b0:	4413      	add	r3, r2
 800c8b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b6:	3304      	adds	r3, #4
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d006      	beq.n	800c8cc <find_volume+0x114>
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	3308      	adds	r3, #8
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fe fbb2 	bl	800b02c <ld_dword>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	e000      	b.n	800c8ce <find_volume+0x116>
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c8d6:	440b      	add	r3, r1
 800c8d8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8de:	3301      	adds	r3, #1
 800c8e0:	643b      	str	r3, [r7, #64]	; 0x40
 800c8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d9dc      	bls.n	800c8a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d002      	beq.n	800c8f8 <find_volume+0x140>
 800c8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c900:	4413      	add	r3, r2
 800c902:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c906:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d005      	beq.n	800c91a <find_volume+0x162>
 800c90e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c912:	f7ff fefb 	bl	800c70c <check_fs>
 800c916:	4603      	mov	r3, r0
 800c918:	e000      	b.n	800c91c <find_volume+0x164>
 800c91a:	2303      	movs	r3, #3
 800c91c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c924:	2b01      	cmp	r3, #1
 800c926:	d905      	bls.n	800c934 <find_volume+0x17c>
 800c928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c92a:	3301      	adds	r3, #1
 800c92c:	643b      	str	r3, [r7, #64]	; 0x40
 800c92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c930:	2b03      	cmp	r3, #3
 800c932:	d9e1      	bls.n	800c8f8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d101      	bne.n	800c940 <find_volume+0x188>
 800c93c:	2301      	movs	r3, #1
 800c93e:	e180      	b.n	800cc42 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c944:	2b01      	cmp	r3, #1
 800c946:	d901      	bls.n	800c94c <find_volume+0x194>
 800c948:	230d      	movs	r3, #13
 800c94a:	e17a      	b.n	800cc42 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	3334      	adds	r3, #52	; 0x34
 800c950:	330b      	adds	r3, #11
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe fb52 	bl	800affc <ld_word>
 800c958:	4603      	mov	r3, r0
 800c95a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c95e:	d001      	beq.n	800c964 <find_volume+0x1ac>
 800c960:	230d      	movs	r3, #13
 800c962:	e16e      	b.n	800cc42 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	3334      	adds	r3, #52	; 0x34
 800c968:	3316      	adds	r3, #22
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe fb46 	bl	800affc <ld_word>
 800c970:	4603      	mov	r3, r0
 800c972:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d106      	bne.n	800c988 <find_volume+0x1d0>
 800c97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97c:	3334      	adds	r3, #52	; 0x34
 800c97e:	3324      	adds	r3, #36	; 0x24
 800c980:	4618      	mov	r0, r3
 800c982:	f7fe fb53 	bl	800b02c <ld_dword>
 800c986:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c98c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c990:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99a:	789b      	ldrb	r3, [r3, #2]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d005      	beq.n	800c9ac <find_volume+0x1f4>
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	789b      	ldrb	r3, [r3, #2]
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d001      	beq.n	800c9ac <find_volume+0x1f4>
 800c9a8:	230d      	movs	r3, #13
 800c9aa:	e14a      	b.n	800cc42 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	789b      	ldrb	r3, [r3, #2]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b4:	fb02 f303 	mul.w	r3, r2, r3
 800c9b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	895b      	ldrh	r3, [r3, #10]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d008      	beq.n	800c9e0 <find_volume+0x228>
 800c9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d0:	895b      	ldrh	r3, [r3, #10]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	895b      	ldrh	r3, [r3, #10]
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	4013      	ands	r3, r2
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <find_volume+0x22c>
 800c9e0:	230d      	movs	r3, #13
 800c9e2:	e12e      	b.n	800cc42 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e6:	3334      	adds	r3, #52	; 0x34
 800c9e8:	3311      	adds	r3, #17
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fe fb06 	bl	800affc <ld_word>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	891b      	ldrh	r3, [r3, #8]
 800c9fc:	f003 030f 	and.w	r3, r3, #15
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <find_volume+0x252>
 800ca06:	230d      	movs	r3, #13
 800ca08:	e11b      	b.n	800cc42 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	3334      	adds	r3, #52	; 0x34
 800ca0e:	3313      	adds	r3, #19
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fe faf3 	bl	800affc <ld_word>
 800ca16:	4603      	mov	r3, r0
 800ca18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ca1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d106      	bne.n	800ca2e <find_volume+0x276>
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	3334      	adds	r3, #52	; 0x34
 800ca24:	3320      	adds	r3, #32
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe fb00 	bl	800b02c <ld_dword>
 800ca2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	3334      	adds	r3, #52	; 0x34
 800ca32:	330e      	adds	r3, #14
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fe fae1 	bl	800affc <ld_word>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d101      	bne.n	800ca48 <find_volume+0x290>
 800ca44:	230d      	movs	r3, #13
 800ca46:	e0fc      	b.n	800cc42 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ca48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca4c:	4413      	add	r3, r2
 800ca4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca50:	8912      	ldrh	r2, [r2, #8]
 800ca52:	0912      	lsrs	r2, r2, #4
 800ca54:	b292      	uxth	r2, r2
 800ca56:	4413      	add	r3, r2
 800ca58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ca5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d201      	bcs.n	800ca66 <find_volume+0x2ae>
 800ca62:	230d      	movs	r3, #13
 800ca64:	e0ed      	b.n	800cc42 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ca66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca6e:	8952      	ldrh	r2, [r2, #10]
 800ca70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca74:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d103      	bne.n	800ca84 <find_volume+0x2cc>
 800ca7c:	230d      	movs	r3, #13
 800ca7e:	e0e0      	b.n	800cc42 <find_volume+0x48a>
 800ca80:	2000021c 	.word	0x2000021c
		fmt = FS_FAT32;
 800ca84:	2303      	movs	r3, #3
 800ca86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d802      	bhi.n	800ca9a <find_volume+0x2e2>
 800ca94:	2302      	movs	r3, #2
 800ca96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d802      	bhi.n	800caaa <find_volume+0x2f2>
 800caa4:	2301      	movs	r3, #1
 800caa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	1c9a      	adds	r2, r3, #2
 800caae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cab6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cab8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800caba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cabc:	441a      	add	r2, r3
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cac2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac6:	441a      	add	r2, r3
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cacc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cad0:	2b03      	cmp	r3, #3
 800cad2:	d11e      	bne.n	800cb12 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	3334      	adds	r3, #52	; 0x34
 800cad8:	332a      	adds	r3, #42	; 0x2a
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe fa8e 	bl	800affc <ld_word>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d001      	beq.n	800caea <find_volume+0x332>
 800cae6:	230d      	movs	r3, #13
 800cae8:	e0ab      	b.n	800cc42 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	891b      	ldrh	r3, [r3, #8]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <find_volume+0x33e>
 800caf2:	230d      	movs	r3, #13
 800caf4:	e0a5      	b.n	800cc42 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	3334      	adds	r3, #52	; 0x34
 800cafa:	332c      	adds	r3, #44	; 0x2c
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fe fa95 	bl	800b02c <ld_dword>
 800cb02:	4602      	mov	r2, r0
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb10:	e01f      	b.n	800cb52 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	891b      	ldrh	r3, [r3, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <find_volume+0x366>
 800cb1a:	230d      	movs	r3, #13
 800cb1c:	e091      	b.n	800cc42 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb24:	441a      	add	r2, r3
 800cb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb28:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d103      	bne.n	800cb3a <find_volume+0x382>
 800cb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	005b      	lsls	r3, r3, #1
 800cb38:	e00a      	b.n	800cb50 <find_volume+0x398>
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3c:	699a      	ldr	r2, [r3, #24]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	4413      	add	r3, r2
 800cb44:	085a      	lsrs	r2, r3, #1
 800cb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cb50:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb54:	69da      	ldr	r2, [r3, #28]
 800cb56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb5c:	0a5b      	lsrs	r3, r3, #9
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d201      	bcs.n	800cb66 <find_volume+0x3ae>
 800cb62:	230d      	movs	r3, #13
 800cb64:	e06d      	b.n	800cc42 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb68:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6c:	615a      	str	r2, [r3, #20]
 800cb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb70:	695a      	ldr	r2, [r3, #20]
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800cb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb78:	2280      	movs	r2, #128	; 0x80
 800cb7a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cb7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb80:	2b03      	cmp	r3, #3
 800cb82:	d149      	bne.n	800cc18 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb86:	3334      	adds	r3, #52	; 0x34
 800cb88:	3330      	adds	r3, #48	; 0x30
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fe fa36 	bl	800affc <ld_word>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d140      	bne.n	800cc18 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cb96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb98:	3301      	adds	r3, #1
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb9e:	f7fe fc3d 	bl	800b41c <move_window>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d137      	bne.n	800cc18 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	2200      	movs	r2, #0
 800cbac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb0:	3334      	adds	r3, #52	; 0x34
 800cbb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fe fa20 	bl	800affc <ld_word>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d127      	bne.n	800cc18 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	3334      	adds	r3, #52	; 0x34
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fe fa2d 	bl	800b02c <ld_dword>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <find_volume+0x494>)
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d11e      	bne.n	800cc18 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	3334      	adds	r3, #52	; 0x34
 800cbde:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe fa22 	bl	800b02c <ld_dword>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	4b19      	ldr	r3, [pc, #100]	; (800cc50 <find_volume+0x498>)
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d113      	bne.n	800cc18 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	3334      	adds	r3, #52	; 0x34
 800cbf4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe fa17 	bl	800b02c <ld_dword>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc02:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	3334      	adds	r3, #52	; 0x34
 800cc08:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7fe fa0d 	bl	800b02c <ld_dword>
 800cc12:	4602      	mov	r2, r0
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cc1e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc20:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <find_volume+0x49c>)
 800cc22:	881b      	ldrh	r3, [r3, #0]
 800cc24:	3301      	adds	r3, #1
 800cc26:	b29a      	uxth	r2, r3
 800cc28:	4b0a      	ldr	r3, [pc, #40]	; (800cc54 <find_volume+0x49c>)
 800cc2a:	801a      	strh	r2, [r3, #0]
 800cc2c:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <find_volume+0x49c>)
 800cc2e:	881a      	ldrh	r2, [r3, #0]
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	4a08      	ldr	r2, [pc, #32]	; (800cc58 <find_volume+0x4a0>)
 800cc38:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc3c:	f7fe fb86 	bl	800b34c <clear_lock>
#endif
	return FR_OK;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3758      	adds	r7, #88	; 0x58
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	41615252 	.word	0x41615252
 800cc50:	61417272 	.word	0x61417272
 800cc54:	20000220 	.word	0x20000220
 800cc58:	20000244 	.word	0x20000244

0800cc5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cc66:	2309      	movs	r3, #9
 800cc68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d01c      	beq.n	800ccaa <validate+0x4e>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d018      	beq.n	800ccaa <validate+0x4e>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d013      	beq.n	800ccaa <validate+0x4e>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	889a      	ldrh	r2, [r3, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	88db      	ldrh	r3, [r3, #6]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d10c      	bne.n	800ccaa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	785b      	ldrb	r3, [r3, #1]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe f930 	bl	800aefc <disk_status>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <validate+0x4e>
			res = FR_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <validate+0x5a>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	e000      	b.n	800ccb8 <validate+0x5c>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	6013      	str	r3, [r2, #0]
	return res;
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b088      	sub	sp, #32
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ccda:	f107 0310 	add.w	r3, r7, #16
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7ff fccf 	bl	800c682 <get_ldnumber>
 800cce4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	da01      	bge.n	800ccf0 <f_mount+0x28>
 800ccec:	230b      	movs	r3, #11
 800ccee:	e02b      	b.n	800cd48 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ccf0:	4a17      	ldr	r2, [pc, #92]	; (800cd50 <f_mount+0x88>)
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccf8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d005      	beq.n	800cd0c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd00:	69b8      	ldr	r0, [r7, #24]
 800cd02:	f7fe fb23 	bl	800b34c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2200      	movs	r2, #0
 800cd16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	490d      	ldr	r1, [pc, #52]	; (800cd50 <f_mount+0x88>)
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d002      	beq.n	800cd2e <f_mount+0x66>
 800cd28:	79fb      	ldrb	r3, [r7, #7]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d001      	beq.n	800cd32 <f_mount+0x6a>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e00a      	b.n	800cd48 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd32:	f107 010c 	add.w	r1, r7, #12
 800cd36:	f107 0308 	add.w	r3, r7, #8
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff fd3b 	bl	800c7b8 <find_volume>
 800cd42:	4603      	mov	r3, r0
 800cd44:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3720      	adds	r7, #32
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	2000021c 	.word	0x2000021c

0800cd54 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d101      	bne.n	800cd68 <f_opendir+0x14>
 800cd64:	2309      	movs	r3, #9
 800cd66:	e064      	b.n	800ce32 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800cd6c:	f107 010c 	add.w	r1, r7, #12
 800cd70:	463b      	mov	r3, r7
 800cd72:	2200      	movs	r2, #0
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7ff fd1f 	bl	800c7b8 <find_volume>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd7e:	7dfb      	ldrb	r3, [r7, #23]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d14f      	bne.n	800ce24 <f_opendir+0xd0>
		obj->fs = fs;
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7ff fc06 	bl	800c5a0 <follow_path>
 800cd94:	4603      	mov	r3, r0
 800cd96:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d13d      	bne.n	800ce1a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cda4:	b25b      	sxtb	r3, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	db12      	blt.n	800cdd0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	799b      	ldrb	r3, [r3, #6]
 800cdae:	f003 0310 	and.w	r3, r3, #16
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00a      	beq.n	800cdcc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a1b      	ldr	r3, [r3, #32]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	f7fe fedc 	bl	800bb7c <ld_clust>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	609a      	str	r2, [r3, #8]
 800cdca:	e001      	b.n	800cdd0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800cdcc:	2305      	movs	r3, #5
 800cdce:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800cdd0:	7dfb      	ldrb	r3, [r7, #23]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d121      	bne.n	800ce1a <f_opendir+0xc6>
				obj->id = fs->id;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	88da      	ldrh	r2, [r3, #6]
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800cdde:	2100      	movs	r1, #0
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f7fe fd8b 	bl	800b8fc <dir_sdi>
 800cde6:	4603      	mov	r3, r0
 800cde8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800cdea:	7dfb      	ldrb	r3, [r7, #23]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d114      	bne.n	800ce1a <f_opendir+0xc6>
					if (obj->sclust) {
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00d      	beq.n	800ce14 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7fe f9dc 	bl	800b1b8 <inc_lock>
 800ce00:	4602      	mov	r2, r0
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d105      	bne.n	800ce1a <f_opendir+0xc6>
 800ce0e:	2312      	movs	r3, #18
 800ce10:	75fb      	strb	r3, [r7, #23]
 800ce12:	e002      	b.n	800ce1a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	2200      	movs	r2, #0
 800ce18:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	2b04      	cmp	r3, #4
 800ce1e:	d101      	bne.n	800ce24 <f_opendir+0xd0>
 800ce20:	2305      	movs	r3, #5
 800ce22:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d002      	beq.n	800ce30 <f_opendir+0xdc>
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ce30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3718      	adds	r7, #24
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b084      	sub	sp, #16
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f107 0208 	add.w	r2, r7, #8
 800ce48:	4611      	mov	r1, r2
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7ff ff06 	bl	800cc5c <validate>
 800ce50:	4603      	mov	r3, r0
 800ce52:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d110      	bne.n	800ce7c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d006      	beq.n	800ce70 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	691b      	ldr	r3, [r3, #16]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe fa34 	bl	800b2d4 <dec_lock>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d102      	bne.n	800ce7c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b084      	sub	sp, #16
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
 800ce8e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f107 0208 	add.w	r2, r7, #8
 800ce96:	4611      	mov	r1, r2
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff fedf 	bl	800cc5c <validate>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d126      	bne.n	800cef6 <f_readdir+0x70>
		if (!fno) {
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ceae:	2100      	movs	r1, #0
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7fe fd23 	bl	800b8fc <dir_sdi>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	73fb      	strb	r3, [r7, #15]
 800ceba:	e01c      	b.n	800cef6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800cebc:	2100      	movs	r1, #0
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7fe ff71 	bl	800bda6 <dir_read>
 800cec4:	4603      	mov	r3, r0
 800cec6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
 800ceca:	2b04      	cmp	r3, #4
 800cecc:	d101      	bne.n	800ced2 <f_readdir+0x4c>
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ced2:	7bfb      	ldrb	r3, [r7, #15]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10e      	bne.n	800cef6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7ff f8ca 	bl	800c074 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800cee0:	2100      	movs	r1, #0
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7fe fd85 	bl	800b9f2 <dir_next>
 800cee8:	4603      	mov	r3, r0
 800ceea:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
 800ceee:	2b04      	cmp	r3, #4
 800cef0:	d101      	bne.n	800cef6 <f_readdir+0x70>
 800cef2:	2300      	movs	r3, #0
 800cef4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800cef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b092      	sub	sp, #72	; 0x48
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800cf0c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cf10:	f107 030c 	add.w	r3, r7, #12
 800cf14:	2200      	movs	r2, #0
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff fc4e 	bl	800c7b8 <find_volume>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800cf22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f040 8099 	bne.w	800d05e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800cf2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800cf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf34:	695a      	ldr	r2, [r3, #20]
 800cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf38:	699b      	ldr	r3, [r3, #24]
 800cf3a:	3b02      	subs	r3, #2
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d804      	bhi.n	800cf4a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	695a      	ldr	r2, [r3, #20]
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	601a      	str	r2, [r3, #0]
 800cf48:	e089      	b.n	800d05e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800cf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d128      	bne.n	800cfa8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800cf56:	2302      	movs	r3, #2
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800cf5e:	f107 0314 	add.w	r3, r7, #20
 800cf62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe faa5 	bl	800b4b4 <get_fat>
 800cf6a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf72:	d103      	bne.n	800cf7c <f_getfree+0x7c>
 800cf74:	2301      	movs	r3, #1
 800cf76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cf7a:	e063      	b.n	800d044 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d103      	bne.n	800cf8a <f_getfree+0x8a>
 800cf82:	2302      	movs	r3, #2
 800cf84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cf88:	e05c      	b.n	800d044 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d102      	bne.n	800cf96 <f_getfree+0x96>
 800cf90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf92:	3301      	adds	r3, #1
 800cf94:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800cf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf98:	3301      	adds	r3, #1
 800cf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9e:	699b      	ldr	r3, [r3, #24]
 800cfa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d3db      	bcc.n	800cf5e <f_getfree+0x5e>
 800cfa6:	e04d      	b.n	800d044 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	637b      	str	r3, [r7, #52]	; 0x34
 800cfb8:	2300      	movs	r3, #0
 800cfba:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800cfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d113      	bne.n	800cfea <f_getfree+0xea>
							res = move_window(fs, sect++);
 800cfc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	1c5a      	adds	r2, r3, #1
 800cfc8:	63ba      	str	r2, [r7, #56]	; 0x38
 800cfca:	4619      	mov	r1, r3
 800cfcc:	f7fe fa26 	bl	800b41c <move_window>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800cfd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d131      	bne.n	800d042 <f_getfree+0x142>
							p = fs->win;
 800cfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe0:	3334      	adds	r3, #52	; 0x34
 800cfe2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800cfe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfe8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800cfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d10f      	bne.n	800d012 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800cff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cff4:	f7fe f802 	bl	800affc <ld_word>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d102      	bne.n	800d004 <f_getfree+0x104>
 800cffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d000:	3301      	adds	r3, #1
 800d002:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	3302      	adds	r3, #2
 800d008:	633b      	str	r3, [r7, #48]	; 0x30
 800d00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d00c:	3b02      	subs	r3, #2
 800d00e:	637b      	str	r3, [r7, #52]	; 0x34
 800d010:	e010      	b.n	800d034 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d014:	f7fe f80a 	bl	800b02c <ld_dword>
 800d018:	4603      	mov	r3, r0
 800d01a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d102      	bne.n	800d028 <f_getfree+0x128>
 800d022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d024:	3301      	adds	r3, #1
 800d026:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02a:	3304      	adds	r3, #4
 800d02c:	633b      	str	r3, [r7, #48]	; 0x30
 800d02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d030:	3b04      	subs	r3, #4
 800d032:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d036:	3b01      	subs	r3, #1
 800d038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d1bd      	bne.n	800cfbc <f_getfree+0xbc>
 800d040:	e000      	b.n	800d044 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d042:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d048:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d04e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d052:	791a      	ldrb	r2, [r3, #4]
 800d054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d056:	f042 0201 	orr.w	r2, r2, #1
 800d05a:	b2d2      	uxtb	r2, r2
 800d05c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d05e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d062:	4618      	mov	r0, r3
 800d064:	3748      	adds	r7, #72	; 0x48
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
	...

0800d06c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b087      	sub	sp, #28
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	4613      	mov	r3, r2
 800d078:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d07a:	2301      	movs	r3, #1
 800d07c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d082:	4b1f      	ldr	r3, [pc, #124]	; (800d100 <FATFS_LinkDriverEx+0x94>)
 800d084:	7a5b      	ldrb	r3, [r3, #9]
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d131      	bne.n	800d0f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d08c:	4b1c      	ldr	r3, [pc, #112]	; (800d100 <FATFS_LinkDriverEx+0x94>)
 800d08e:	7a5b      	ldrb	r3, [r3, #9]
 800d090:	b2db      	uxtb	r3, r3
 800d092:	461a      	mov	r2, r3
 800d094:	4b1a      	ldr	r3, [pc, #104]	; (800d100 <FATFS_LinkDriverEx+0x94>)
 800d096:	2100      	movs	r1, #0
 800d098:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d09a:	4b19      	ldr	r3, [pc, #100]	; (800d100 <FATFS_LinkDriverEx+0x94>)
 800d09c:	7a5b      	ldrb	r3, [r3, #9]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	4a17      	ldr	r2, [pc, #92]	; (800d100 <FATFS_LinkDriverEx+0x94>)
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	4413      	add	r3, r2
 800d0a6:	68fa      	ldr	r2, [r7, #12]
 800d0a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d0aa:	4b15      	ldr	r3, [pc, #84]	; (800d100 <FATFS_LinkDriverEx+0x94>)
 800d0ac:	7a5b      	ldrb	r3, [r3, #9]
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	4b13      	ldr	r3, [pc, #76]	; (800d100 <FATFS_LinkDriverEx+0x94>)
 800d0b4:	4413      	add	r3, r2
 800d0b6:	79fa      	ldrb	r2, [r7, #7]
 800d0b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d0ba:	4b11      	ldr	r3, [pc, #68]	; (800d100 <FATFS_LinkDriverEx+0x94>)
 800d0bc:	7a5b      	ldrb	r3, [r3, #9]
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	1c5a      	adds	r2, r3, #1
 800d0c2:	b2d1      	uxtb	r1, r2
 800d0c4:	4a0e      	ldr	r2, [pc, #56]	; (800d100 <FATFS_LinkDriverEx+0x94>)
 800d0c6:	7251      	strb	r1, [r2, #9]
 800d0c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d0ca:	7dbb      	ldrb	r3, [r7, #22]
 800d0cc:	3330      	adds	r3, #48	; 0x30
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	223a      	movs	r2, #58	; 0x3a
 800d0da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	3302      	adds	r3, #2
 800d0e0:	222f      	movs	r2, #47	; 0x2f
 800d0e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	3303      	adds	r3, #3
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	371c      	adds	r7, #28
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	20000444 	.word	0x20000444

0800d104 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d10e:	2200      	movs	r2, #0
 800d110:	6839      	ldr	r1, [r7, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7ff ffaa 	bl	800d06c <FATFS_LinkDriverEx>
 800d118:	4603      	mov	r3, r0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
	...

0800d124 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	4603      	mov	r3, r0
 800d12c:	6039      	str	r1, [r7, #0]
 800d12e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d130:	88fb      	ldrh	r3, [r7, #6]
 800d132:	2b7f      	cmp	r3, #127	; 0x7f
 800d134:	d802      	bhi.n	800d13c <ff_convert+0x18>
		c = chr;
 800d136:	88fb      	ldrh	r3, [r7, #6]
 800d138:	81fb      	strh	r3, [r7, #14]
 800d13a:	e025      	b.n	800d188 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00b      	beq.n	800d15a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d142:	88fb      	ldrh	r3, [r7, #6]
 800d144:	2bff      	cmp	r3, #255	; 0xff
 800d146:	d805      	bhi.n	800d154 <ff_convert+0x30>
 800d148:	88fb      	ldrh	r3, [r7, #6]
 800d14a:	3b80      	subs	r3, #128	; 0x80
 800d14c:	4a12      	ldr	r2, [pc, #72]	; (800d198 <ff_convert+0x74>)
 800d14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d152:	e000      	b.n	800d156 <ff_convert+0x32>
 800d154:	2300      	movs	r3, #0
 800d156:	81fb      	strh	r3, [r7, #14]
 800d158:	e016      	b.n	800d188 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d15a:	2300      	movs	r3, #0
 800d15c:	81fb      	strh	r3, [r7, #14]
 800d15e:	e009      	b.n	800d174 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d160:	89fb      	ldrh	r3, [r7, #14]
 800d162:	4a0d      	ldr	r2, [pc, #52]	; (800d198 <ff_convert+0x74>)
 800d164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d168:	88fa      	ldrh	r2, [r7, #6]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d006      	beq.n	800d17c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d16e:	89fb      	ldrh	r3, [r7, #14]
 800d170:	3301      	adds	r3, #1
 800d172:	81fb      	strh	r3, [r7, #14]
 800d174:	89fb      	ldrh	r3, [r7, #14]
 800d176:	2b7f      	cmp	r3, #127	; 0x7f
 800d178:	d9f2      	bls.n	800d160 <ff_convert+0x3c>
 800d17a:	e000      	b.n	800d17e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d17c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d17e:	89fb      	ldrh	r3, [r7, #14]
 800d180:	3380      	adds	r3, #128	; 0x80
 800d182:	b29b      	uxth	r3, r3
 800d184:	b2db      	uxtb	r3, r3
 800d186:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d188:	89fb      	ldrh	r3, [r7, #14]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	0801167c 	.word	0x0801167c

0800d19c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b087      	sub	sp, #28
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d1a6:	88fb      	ldrh	r3, [r7, #6]
 800d1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ac:	d201      	bcs.n	800d1b2 <ff_wtoupper+0x16>
 800d1ae:	4b3e      	ldr	r3, [pc, #248]	; (800d2a8 <ff_wtoupper+0x10c>)
 800d1b0:	e000      	b.n	800d1b4 <ff_wtoupper+0x18>
 800d1b2:	4b3e      	ldr	r3, [pc, #248]	; (800d2ac <ff_wtoupper+0x110>)
 800d1b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	1c9a      	adds	r2, r3, #2
 800d1ba:	617a      	str	r2, [r7, #20]
 800d1bc:	881b      	ldrh	r3, [r3, #0]
 800d1be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d1c0:	8a7b      	ldrh	r3, [r7, #18]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d068      	beq.n	800d298 <ff_wtoupper+0xfc>
 800d1c6:	88fa      	ldrh	r2, [r7, #6]
 800d1c8:	8a7b      	ldrh	r3, [r7, #18]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d364      	bcc.n	800d298 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	1c9a      	adds	r2, r3, #2
 800d1d2:	617a      	str	r2, [r7, #20]
 800d1d4:	881b      	ldrh	r3, [r3, #0]
 800d1d6:	823b      	strh	r3, [r7, #16]
 800d1d8:	8a3b      	ldrh	r3, [r7, #16]
 800d1da:	0a1b      	lsrs	r3, r3, #8
 800d1dc:	81fb      	strh	r3, [r7, #14]
 800d1de:	8a3b      	ldrh	r3, [r7, #16]
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d1e4:	88fa      	ldrh	r2, [r7, #6]
 800d1e6:	8a79      	ldrh	r1, [r7, #18]
 800d1e8:	8a3b      	ldrh	r3, [r7, #16]
 800d1ea:	440b      	add	r3, r1
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	da49      	bge.n	800d284 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d1f0:	89fb      	ldrh	r3, [r7, #14]
 800d1f2:	2b08      	cmp	r3, #8
 800d1f4:	d84f      	bhi.n	800d296 <ff_wtoupper+0xfa>
 800d1f6:	a201      	add	r2, pc, #4	; (adr r2, 800d1fc <ff_wtoupper+0x60>)
 800d1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1fc:	0800d221 	.word	0x0800d221
 800d200:	0800d233 	.word	0x0800d233
 800d204:	0800d249 	.word	0x0800d249
 800d208:	0800d251 	.word	0x0800d251
 800d20c:	0800d259 	.word	0x0800d259
 800d210:	0800d261 	.word	0x0800d261
 800d214:	0800d269 	.word	0x0800d269
 800d218:	0800d271 	.word	0x0800d271
 800d21c:	0800d279 	.word	0x0800d279
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d220:	88fa      	ldrh	r2, [r7, #6]
 800d222:	8a7b      	ldrh	r3, [r7, #18]
 800d224:	1ad3      	subs	r3, r2, r3
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	697a      	ldr	r2, [r7, #20]
 800d22a:	4413      	add	r3, r2
 800d22c:	881b      	ldrh	r3, [r3, #0]
 800d22e:	80fb      	strh	r3, [r7, #6]
 800d230:	e027      	b.n	800d282 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d232:	88fa      	ldrh	r2, [r7, #6]
 800d234:	8a7b      	ldrh	r3, [r7, #18]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	b29b      	uxth	r3, r3
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	b29b      	uxth	r3, r3
 800d240:	88fa      	ldrh	r2, [r7, #6]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	80fb      	strh	r3, [r7, #6]
 800d246:	e01c      	b.n	800d282 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d248:	88fb      	ldrh	r3, [r7, #6]
 800d24a:	3b10      	subs	r3, #16
 800d24c:	80fb      	strh	r3, [r7, #6]
 800d24e:	e018      	b.n	800d282 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d250:	88fb      	ldrh	r3, [r7, #6]
 800d252:	3b20      	subs	r3, #32
 800d254:	80fb      	strh	r3, [r7, #6]
 800d256:	e014      	b.n	800d282 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d258:	88fb      	ldrh	r3, [r7, #6]
 800d25a:	3b30      	subs	r3, #48	; 0x30
 800d25c:	80fb      	strh	r3, [r7, #6]
 800d25e:	e010      	b.n	800d282 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d260:	88fb      	ldrh	r3, [r7, #6]
 800d262:	3b1a      	subs	r3, #26
 800d264:	80fb      	strh	r3, [r7, #6]
 800d266:	e00c      	b.n	800d282 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d268:	88fb      	ldrh	r3, [r7, #6]
 800d26a:	3308      	adds	r3, #8
 800d26c:	80fb      	strh	r3, [r7, #6]
 800d26e:	e008      	b.n	800d282 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d270:	88fb      	ldrh	r3, [r7, #6]
 800d272:	3b50      	subs	r3, #80	; 0x50
 800d274:	80fb      	strh	r3, [r7, #6]
 800d276:	e004      	b.n	800d282 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d278:	88fb      	ldrh	r3, [r7, #6]
 800d27a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d27e:	80fb      	strh	r3, [r7, #6]
 800d280:	bf00      	nop
			}
			break;
 800d282:	e008      	b.n	800d296 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d284:	89fb      	ldrh	r3, [r7, #14]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d195      	bne.n	800d1b6 <ff_wtoupper+0x1a>
 800d28a:	8a3b      	ldrh	r3, [r7, #16]
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	697a      	ldr	r2, [r7, #20]
 800d290:	4413      	add	r3, r2
 800d292:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d294:	e78f      	b.n	800d1b6 <ff_wtoupper+0x1a>
			break;
 800d296:	bf00      	nop
	}

	return chr;
 800d298:	88fb      	ldrh	r3, [r7, #6]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	371c      	adds	r7, #28
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr
 800d2a6:	bf00      	nop
 800d2a8:	0801177c 	.word	0x0801177c
 800d2ac:	08011970 	.word	0x08011970

0800d2b0 <AudioPlay_Play>:
 */
#include "audioplay.h"
extern I2S_HandleTypeDef hi2s2;

uint8_t AudioPlay_Play(uint16_t *pBuffer, uint32_t Size)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
	uint8_t ret=AUDIO_OK;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	73fb      	strb	r3, [r7, #15]

		if(HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pBuffer,
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2c4:	d203      	bcs.n	800d2ce <AudioPlay_Play+0x1e>
									DMA_MAX(Size/AUDIODATA_SIZE))!=HAL_OK)
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	085b      	lsrs	r3, r3, #1
		if(HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pBuffer,
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	e001      	b.n	800d2d2 <AudioPlay_Play+0x22>
 800d2ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	6879      	ldr	r1, [r7, #4]
 800d2d6:	4806      	ldr	r0, [pc, #24]	; (800d2f0 <AudioPlay_Play+0x40>)
 800d2d8:	f7f5 fa4a 	bl	8002770 <HAL_I2S_Transmit_DMA>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <AudioPlay_Play+0x36>
		{
			ret=AUDIO_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	73fb      	strb	r3, [r7, #15]
		}
	return ret;
 800d2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	20001188 	.word	0x20001188

0800d2f4 <AudioPlay_Stop>:
uint8_t AudioPlay_Stop()
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
	uint8_t ret=AUDIO_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	71fb      	strb	r3, [r7, #7]

		if(HAL_I2S_DMAStop(&hi2s2)!=HAL_OK)
 800d2fe:	4806      	ldr	r0, [pc, #24]	; (800d318 <AudioPlay_Stop+0x24>)
 800d300:	f7f5 fade 	bl	80028c0 <HAL_I2S_DMAStop>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <AudioPlay_Stop+0x1a>
		{
			ret=AUDIO_ERROR;
 800d30a:	2301      	movs	r3, #1
 800d30c:	71fb      	strb	r3, [r7, #7]
		}

	return ret;
 800d30e:	79fb      	ldrb	r3, [r7, #7]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	20001188 	.word	0x20001188

0800d31c <AudioPlay_ChangeBuffer>:

void AudioPlay_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	460b      	mov	r3, r1
 800d326:	807b      	strh	r3, [r7, #2]
		if (val>3 || val<-3)
		{
			val=val;
		}
	}*/
	HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pData,Size);
 800d328:	887b      	ldrh	r3, [r7, #2]
 800d32a:	461a      	mov	r2, r3
 800d32c:	6879      	ldr	r1, [r7, #4]
 800d32e:	4803      	ldr	r0, [pc, #12]	; (800d33c <AudioPlay_ChangeBuffer+0x20>)
 800d330:	f7f5 fa1e 	bl	8002770 <HAL_I2S_Transmit_DMA>
}
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	20001188 	.word	0x20001188

0800d340 <AudioPlay_HalfTransfer_CallBack>:

void AudioPlay_HalfTransfer_CallBack(void)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	af00      	add	r7, sp, #0
	HalfTransfer_CallBack_FS();
 800d344:	f001 fb82 	bl	800ea4c <HalfTransfer_CallBack_FS>
}
 800d348:	bf00      	nop
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d356:	f000 f86b 	bl	800d430 <BSP_SD_IsDetected>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d001      	beq.n	800d364 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d360:	2301      	movs	r3, #1
 800d362:	e005      	b.n	800d370 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d364:	4804      	ldr	r0, [pc, #16]	; (800d378 <BSP_SD_Init+0x2c>)
 800d366:	f7f7 ff8f 	bl	8005288 <HAL_SD_Init>
 800d36a:	4603      	mov	r3, r0
 800d36c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d36e:	79fb      	ldrb	r3, [r7, #7]
}
 800d370:	4618      	mov	r0, r3
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	20001044 	.word	0x20001044

0800d37c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b088      	sub	sp, #32
 800d380:	af02      	add	r7, sp, #8
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
 800d388:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	68f9      	ldr	r1, [r7, #12]
 800d398:	4806      	ldr	r0, [pc, #24]	; (800d3b4 <BSP_SD_ReadBlocks+0x38>)
 800d39a:	f7f8 f805 	bl	80053a8 <HAL_SD_ReadBlocks>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d001      	beq.n	800d3a8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3718      	adds	r7, #24
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20001044 	.word	0x20001044

0800d3b8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b088      	sub	sp, #32
 800d3bc:	af02      	add	r7, sp, #8
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
 800d3c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	68f9      	ldr	r1, [r7, #12]
 800d3d4:	4806      	ldr	r0, [pc, #24]	; (800d3f0 <BSP_SD_WriteBlocks+0x38>)
 800d3d6:	f7f8 f9e1 	bl	800579c <HAL_SD_WriteBlocks>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3718      	adds	r7, #24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20001044 	.word	0x20001044

0800d3f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d3f8:	4805      	ldr	r0, [pc, #20]	; (800d410 <BSP_SD_GetCardState+0x1c>)
 800d3fa:	f7f8 fd41 	bl	8005e80 <HAL_SD_GetCardState>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b04      	cmp	r3, #4
 800d402:	bf14      	ite	ne
 800d404:	2301      	movne	r3, #1
 800d406:	2300      	moveq	r3, #0
 800d408:	b2db      	uxtb	r3, r3
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20001044 	.word	0x20001044

0800d414 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d41c:	6879      	ldr	r1, [r7, #4]
 800d41e:	4803      	ldr	r0, [pc, #12]	; (800d42c <BSP_SD_GetCardInfo+0x18>)
 800d420:	f7f8 fd02 	bl	8005e28 <HAL_SD_GetCardInfo>
}
 800d424:	bf00      	nop
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20001044 	.word	0x20001044

0800d430 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d436:	2301      	movs	r3, #1
 800d438:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d43a:	f000 f81d 	bl	800d478 <BSP_PlatformIsDetected>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d444:	2300      	movs	r3, #0
 800d446:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	b2db      	uxtb	r3, r3
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3708      	adds	r7, #8
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d458:	4904      	ldr	r1, [pc, #16]	; (800d46c <MX_FATFS_Init+0x18>)
 800d45a:	4805      	ldr	r0, [pc, #20]	; (800d470 <MX_FATFS_Init+0x1c>)
 800d45c:	f7ff fe52 	bl	800d104 <FATFS_LinkDriver>
 800d460:	4603      	mov	r3, r0
 800d462:	461a      	mov	r2, r3
 800d464:	4b03      	ldr	r3, [pc, #12]	; (800d474 <MX_FATFS_Init+0x20>)
 800d466:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d468:	bf00      	nop
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	20000a40 	.word	0x20000a40
 800d470:	08011a2c 	.word	0x08011a2c
 800d474:	20000a3c 	.word	0x20000a3c

0800d478 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d47e:	2301      	movs	r3, #1
 800d480:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d482:	2180      	movs	r1, #128	; 0x80
 800d484:	4806      	ldr	r0, [pc, #24]	; (800d4a0 <BSP_PlatformIsDetected+0x28>)
 800d486:	f7f5 f81b 	bl	80024c0 <HAL_GPIO_ReadPin>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d001      	beq.n	800d494 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d490:	2300      	movs	r3, #0
 800d492:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d494:	79fb      	ldrb	r3, [r7, #7]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	40020800 	.word	0x40020800

0800d4a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d4ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d4b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800d4b4:	f003 0301 	and.w	r3, r3, #1
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d013      	beq.n	800d4e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800d4bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d4c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800d4c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00b      	beq.n	800d4e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800d4cc:	e000      	b.n	800d4d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800d4ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800d4d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d0f9      	beq.n	800d4ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800d4da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	b2d2      	uxtb	r2, r2
 800d4e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800d4e4:	687b      	ldr	r3, [r7, #4]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	370c      	adds	r7, #12
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <_write>:
 0x09, 0xe2,                    //   USAGE (Mute)
 0x09, 0xe9,                    //   USAGE (Volume Up)
 0x09, 0xea,                    //   USAGE (Volume Down)
 */

int _write(int file, char *ptr, int len) {
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b086      	sub	sp, #24
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	60f8      	str	r0, [r7, #12]
 800d4fa:	60b9      	str	r1, [r7, #8]
 800d4fc:	607a      	str	r2, [r7, #4]

	int i = 0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 800d502:	2300      	movs	r3, #0
 800d504:	617b      	str	r3, [r7, #20]
 800d506:	e009      	b.n	800d51c <_write+0x2a>
		ITM_SendChar((*ptr++));
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	1c5a      	adds	r2, r3, #1
 800d50c:	60ba      	str	r2, [r7, #8]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	4618      	mov	r0, r3
 800d512:	f7ff ffc7 	bl	800d4a4 <ITM_SendChar>
	for (i = 0; i < len; i++)
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	3301      	adds	r3, #1
 800d51a:	617b      	str	r3, [r7, #20]
 800d51c:	697a      	ldr	r2, [r7, #20]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	429a      	cmp	r2, r3
 800d522:	dbf1      	blt.n	800d508 <_write+0x16>
	return len;
 800d524:	687b      	ldr	r3, [r7, #4]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3718      	adds	r7, #24
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <hid_send_stop>:

static void hid_send_stop() {
 800d530:	b580      	push	{r7, lr}
 800d532:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0;
 800d534:	4b10      	ldr	r3, [pc, #64]	; (800d578 <hid_send_stop+0x48>)
 800d536:	2200      	movs	r2, #0
 800d538:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800d53a:	4b0f      	ldr	r3, [pc, #60]	; (800d578 <hid_send_stop+0x48>)
 800d53c:	2200      	movs	r2, #0
 800d53e:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 22;
 800d540:	4b0d      	ldr	r3, [pc, #52]	; (800d578 <hid_send_stop+0x48>)
 800d542:	2216      	movs	r2, #22
 800d544:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[1]=0x00;
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800d546:	2208      	movs	r2, #8
 800d548:	490b      	ldr	r1, [pc, #44]	; (800d578 <hid_send_stop+0x48>)
 800d54a:	480c      	ldr	r0, [pc, #48]	; (800d57c <hid_send_stop+0x4c>)
 800d54c:	f7fc fb98 	bl	8009c80 <USBD_HID_SendReport>
	HAL_Delay(20);
 800d550:	2014      	movs	r0, #20
 800d552:	f7f3 fd55 	bl	8001000 <HAL_Delay>

	HID_Buffer[0] = 0;
 800d556:	4b08      	ldr	r3, [pc, #32]	; (800d578 <hid_send_stop+0x48>)
 800d558:	2200      	movs	r2, #0
 800d55a:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800d55c:	4b06      	ldr	r3, [pc, #24]	; (800d578 <hid_send_stop+0x48>)
 800d55e:	2200      	movs	r2, #0
 800d560:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 0;
 800d562:	4b05      	ldr	r3, [pc, #20]	; (800d578 <hid_send_stop+0x48>)
 800d564:	2200      	movs	r2, #0
 800d566:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800d568:	2208      	movs	r2, #8
 800d56a:	4903      	ldr	r1, [pc, #12]	; (800d578 <hid_send_stop+0x48>)
 800d56c:	4803      	ldr	r0, [pc, #12]	; (800d57c <hid_send_stop+0x4c>)
 800d56e:	f7fc fb87 	bl	8009c80 <USBD_HID_SendReport>
}
 800d572:	bf00      	nop
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	20000ef0 	.word	0x20000ef0
 800d57c:	20005404 	.word	0x20005404

0800d580 <hid_send_start>:
static void hid_send_start() {
 800d580:	b580      	push	{r7, lr}
 800d582:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0;
 800d584:	4b10      	ldr	r3, [pc, #64]	; (800d5c8 <hid_send_start+0x48>)
 800d586:	2200      	movs	r2, #0
 800d588:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800d58a:	4b0f      	ldr	r3, [pc, #60]	; (800d5c8 <hid_send_start+0x48>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 19;
 800d590:	4b0d      	ldr	r3, [pc, #52]	; (800d5c8 <hid_send_start+0x48>)
 800d592:	2213      	movs	r2, #19
 800d594:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800d596:	2208      	movs	r2, #8
 800d598:	490b      	ldr	r1, [pc, #44]	; (800d5c8 <hid_send_start+0x48>)
 800d59a:	480c      	ldr	r0, [pc, #48]	; (800d5cc <hid_send_start+0x4c>)
 800d59c:	f7fc fb70 	bl	8009c80 <USBD_HID_SendReport>
	HAL_Delay(20);
 800d5a0:	2014      	movs	r0, #20
 800d5a2:	f7f3 fd2d 	bl	8001000 <HAL_Delay>

	HID_Buffer[0] = 0;
 800d5a6:	4b08      	ldr	r3, [pc, #32]	; (800d5c8 <hid_send_start+0x48>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800d5ac:	4b06      	ldr	r3, [pc, #24]	; (800d5c8 <hid_send_start+0x48>)
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 0;
 800d5b2:	4b05      	ldr	r3, [pc, #20]	; (800d5c8 <hid_send_start+0x48>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800d5b8:	2208      	movs	r2, #8
 800d5ba:	4903      	ldr	r1, [pc, #12]	; (800d5c8 <hid_send_start+0x48>)
 800d5bc:	4803      	ldr	r0, [pc, #12]	; (800d5cc <hid_send_start+0x4c>)
 800d5be:	f7fc fb5f 	bl	8009c80 <USBD_HID_SendReport>
}
 800d5c2:	bf00      	nop
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20000ef0 	.word	0x20000ef0
 800d5cc:	20005404 	.word	0x20005404

0800d5d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d5d0:	b5b0      	push	{r4, r5, r7, lr}
 800d5d2:	b08a      	sub	sp, #40	; 0x28
 800d5d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d5d6:	f7f3 fca1 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d5da:	f000 f99b 	bl	800d914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d5de:	f000 fb8b 	bl	800dcf8 <MX_GPIO_Init>
  MX_DMA_Init();
 800d5e2:	f000 fb61 	bl	800dca8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800d5e6:	f001 f95b 	bl	800e8a0 <MX_USB_DEVICE_Init>
  MX_I2S2_Init();
 800d5ea:	f000 fa67 	bl	800dabc <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 800d5ee:	f000 fa93 	bl	800db18 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800d5f2:	f7ff ff2f 	bl	800d454 <MX_FATFS_Init>
  MX_TIM1_Init();
 800d5f6:	f000 faaf 	bl	800db58 <MX_TIM1_Init>
  MX_TIM3_Init();
 800d5fa:	f000 fafd 	bl	800dbf8 <MX_TIM3_Init>
  MX_ADC1_Init();
 800d5fe:	f000 fa0b 	bl	800da18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim1);
 800d602:	48b9      	ldr	r0, [pc, #740]	; (800d8e8 <main+0x318>)
 800d604:	f7f8 fe0b 	bl	800621e <HAL_TIM_Base_Start_IT>

	//init led

	ws2812_init();
 800d608:	f001 fe34 	bl	800f274 <ws2812_init>
	for (int t = 0; t < LED_COUNT; t++) {
 800d60c:	2300      	movs	r3, #0
 800d60e:	627b      	str	r3, [r7, #36]	; 0x24
 800d610:	e02a      	b.n	800d668 <main+0x98>
		float val = sin((float) (6.28 / LED_COUNT) * (float) t);
 800d612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d614:	ee07 3a90 	vmov	s15, r3
 800d618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d61c:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800d8ec <main+0x31c>
 800d620:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d624:	ee17 0a90 	vmov	r0, s15
 800d628:	f7f2 ff8e 	bl	8000548 <__aeabi_f2d>
 800d62c:	4603      	mov	r3, r0
 800d62e:	460c      	mov	r4, r1
 800d630:	ec44 3b10 	vmov	d0, r3, r4
 800d634:	f002 feb8 	bl	80103a8 <sin>
 800d638:	ec54 3b10 	vmov	r3, r4, d0
 800d63c:	4618      	mov	r0, r3
 800d63e:	4621      	mov	r1, r4
 800d640:	f7f3 fa9c 	bl	8000b7c <__aeabi_d2f>
 800d644:	4603      	mov	r3, r0
 800d646:	613b      	str	r3, [r7, #16]
		if (val > 0) {
 800d648:	edd7 7a04 	vldr	s15, [r7, #16]
 800d64c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d654:	dd05      	ble.n	800d662 <main+0x92>
			front[t] = val;
 800d656:	4aa6      	ldr	r2, [pc, #664]	; (800d8f0 <main+0x320>)
 800d658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	4413      	add	r3, r2
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	601a      	str	r2, [r3, #0]
	for (int t = 0; t < LED_COUNT; t++) {
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	3301      	adds	r3, #1
 800d666:	627b      	str	r3, [r7, #36]	; 0x24
 800d668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66a:	2b17      	cmp	r3, #23
 800d66c:	ddd1      	ble.n	800d612 <main+0x42>
		}
	}

	RgbColor RGB;
	RGB.r = 0;
 800d66e:	2300      	movs	r3, #0
 800d670:	733b      	strb	r3, [r7, #12]
	RGB.g = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	737b      	strb	r3, [r7, #13]
	RGB.b = MAX_BRIGHT;
 800d676:	23c8      	movs	r3, #200	; 0xc8
 800d678:	73bb      	strb	r3, [r7, #14]
	HsvColor HSV;
	HSV.h = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	723b      	strb	r3, [r7, #8]
	HSV.s = 255;
 800d67e:	23ff      	movs	r3, #255	; 0xff
 800d680:	727b      	strb	r3, [r7, #9]
	HSV.v = MAX_BRIGHT;
 800d682:	23c8      	movs	r3, #200	; 0xc8
 800d684:	72bb      	strb	r3, [r7, #10]


	init();
 800d686:	f000 fbb7 	bl	800ddf8 <init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(5);
 800d68a:	2005      	movs	r0, #5
 800d68c:	f7f3 fcb8 	bl	8001000 <HAL_Delay>

		HAL_ADC_Start(&hadc1);
 800d690:	4898      	ldr	r0, [pc, #608]	; (800d8f4 <main+0x324>)
 800d692:	f7f3 fd1b 	bl	80010cc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 800d696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d69a:	4896      	ldr	r0, [pc, #600]	; (800d8f4 <main+0x324>)
 800d69c:	f7f3 fdef 	bl	800127e <HAL_ADC_PollForConversion>
		adcResult = HAL_ADC_GetValue(&hadc1);
 800d6a0:	4894      	ldr	r0, [pc, #592]	; (800d8f4 <main+0x324>)
 800d6a2:	f7f3 fe70 	bl	8001386 <HAL_ADC_GetValue>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	4b93      	ldr	r3, [pc, #588]	; (800d8f8 <main+0x328>)
 800d6aa:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 800d6ac:	4891      	ldr	r0, [pc, #580]	; (800d8f4 <main+0x324>)
 800d6ae:	f7f3 fdb3 	bl	8001218 <HAL_ADC_Stop>

		//________CALC_MAGNITUDE_________________________
		a = 0.99 * a + 0.01 * adcResult;
 800d6b2:	4b92      	ldr	r3, [pc, #584]	; (800d8fc <main+0x32c>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7f2 ff46 	bl	8000548 <__aeabi_f2d>
 800d6bc:	a382      	add	r3, pc, #520	; (adr r3, 800d8c8 <main+0x2f8>)
 800d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c2:	f7f2 ff99 	bl	80005f8 <__aeabi_dmul>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	4625      	mov	r5, r4
 800d6cc:	461c      	mov	r4, r3
 800d6ce:	4b8a      	ldr	r3, [pc, #552]	; (800d8f8 <main+0x328>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7f2 ff16 	bl	8000504 <__aeabi_ui2d>
 800d6d8:	a37d      	add	r3, pc, #500	; (adr r3, 800d8d0 <main+0x300>)
 800d6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6de:	f7f2 ff8b 	bl	80005f8 <__aeabi_dmul>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	f7f2 fdcf 	bl	800028c <__adddf3>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	460c      	mov	r4, r1
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	f7f3 fa41 	bl	8000b7c <__aeabi_d2f>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	4b7f      	ldr	r3, [pc, #508]	; (800d8fc <main+0x32c>)
 800d6fe:	601a      	str	r2, [r3, #0]
		b = 0.9 * b + 0.1 * adcResult;
 800d700:	4b7f      	ldr	r3, [pc, #508]	; (800d900 <main+0x330>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4618      	mov	r0, r3
 800d706:	f7f2 ff1f 	bl	8000548 <__aeabi_f2d>
 800d70a:	a373      	add	r3, pc, #460	; (adr r3, 800d8d8 <main+0x308>)
 800d70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d710:	f7f2 ff72 	bl	80005f8 <__aeabi_dmul>
 800d714:	4603      	mov	r3, r0
 800d716:	460c      	mov	r4, r1
 800d718:	4625      	mov	r5, r4
 800d71a:	461c      	mov	r4, r3
 800d71c:	4b76      	ldr	r3, [pc, #472]	; (800d8f8 <main+0x328>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4618      	mov	r0, r3
 800d722:	f7f2 feef 	bl	8000504 <__aeabi_ui2d>
 800d726:	a36e      	add	r3, pc, #440	; (adr r3, 800d8e0 <main+0x310>)
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	f7f2 ff64 	bl	80005f8 <__aeabi_dmul>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	4620      	mov	r0, r4
 800d736:	4629      	mov	r1, r5
 800d738:	f7f2 fda8 	bl	800028c <__adddf3>
 800d73c:	4603      	mov	r3, r0
 800d73e:	460c      	mov	r4, r1
 800d740:	4618      	mov	r0, r3
 800d742:	4621      	mov	r1, r4
 800d744:	f7f3 fa1a 	bl	8000b7c <__aeabi_d2f>
 800d748:	4602      	mov	r2, r0
 800d74a:	4b6d      	ldr	r3, [pc, #436]	; (800d900 <main+0x330>)
 800d74c:	601a      	str	r2, [r3, #0]
		d = a - b;
 800d74e:	4b6b      	ldr	r3, [pc, #428]	; (800d8fc <main+0x32c>)
 800d750:	ed93 7a00 	vldr	s14, [r3]
 800d754:	4b6a      	ldr	r3, [pc, #424]	; (800d900 <main+0x330>)
 800d756:	edd3 7a00 	vldr	s15, [r3]
 800d75a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d75e:	4b69      	ldr	r3, [pc, #420]	; (800d904 <main+0x334>)
 800d760:	edc3 7a00 	vstr	s15, [r3]
		if (d > MAG_VAL) {
 800d764:	4b67      	ldr	r3, [pc, #412]	; (800d904 <main+0x334>)
 800d766:	edd3 7a00 	vldr	s15, [r3]
 800d76a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800d76e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d776:	dd03      	ble.n	800d780 <main+0x1b0>
			phoneUp = 0;
 800d778:	4b63      	ldr	r3, [pc, #396]	; (800d908 <main+0x338>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	e00c      	b.n	800d79a <main+0x1ca>
		} else if (d < -MAG_VAL) {
 800d780:	4b60      	ldr	r3, [pc, #384]	; (800d904 <main+0x334>)
 800d782:	edd3 7a00 	vldr	s15, [r3]
 800d786:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800d78a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d792:	d502      	bpl.n	800d79a <main+0x1ca>
			phoneUp = 1;
 800d794:	4b5c      	ldr	r3, [pc, #368]	; (800d908 <main+0x338>)
 800d796:	2201      	movs	r2, #1
 800d798:	601a      	str	r2, [r3, #0]
		 phoneUp = 1;
		 }
		 */

		//___________________HID_Sender____________
		if (phoneUp != phoneUp_) {
 800d79a:	4b5b      	ldr	r3, [pc, #364]	; (800d908 <main+0x338>)
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	4b5b      	ldr	r3, [pc, #364]	; (800d90c <main+0x33c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d008      	beq.n	800d7b8 <main+0x1e8>
			if (phoneUp) {
 800d7a6:	4b58      	ldr	r3, [pc, #352]	; (800d908 <main+0x338>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d002      	beq.n	800d7b4 <main+0x1e4>
				hid_send_start();
 800d7ae:	f7ff fee7 	bl	800d580 <hid_send_start>
 800d7b2:	e001      	b.n	800d7b8 <main+0x1e8>

			} else {
				hid_send_stop();
 800d7b4:	f7ff febc 	bl	800d530 <hid_send_stop>

			}
		}
		phoneUp_ = phoneUp;
 800d7b8:	4b53      	ldr	r3, [pc, #332]	; (800d908 <main+0x338>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a53      	ldr	r2, [pc, #332]	; (800d90c <main+0x33c>)
 800d7be:	6013      	str	r3, [r2, #0]

		if (ledRefresh) {
 800d7c0:	4b53      	ldr	r3, [pc, #332]	; (800d910 <main+0x340>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f43f af60 	beq.w	800d68a <main+0xba>
			 HSV.h = 0;
			 }
			 RGB = HsvToRgb(HSV);
			 */

			ledRefresh = 0;
 800d7ca:	4b51      	ldr	r3, [pc, #324]	; (800d910 <main+0x340>)
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	601a      	str	r2, [r3, #0]
			if (phoneUp) {
 800d7d0:	4b4d      	ldr	r3, [pc, #308]	; (800d908 <main+0x338>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d062      	beq.n	800d89e <main+0x2ce>
				for (int i = 0; i < LED_COUNT; i++) {
 800d7d8:	2300      	movs	r3, #0
 800d7da:	623b      	str	r3, [r7, #32]
 800d7dc:	e03f      	b.n	800d85e <main+0x28e>
					ws2812_setPixel_gammaCorrection(RGB.r * front[i],
 800d7de:	7b3b      	ldrb	r3, [r7, #12]
 800d7e0:	ee07 3a90 	vmov	s15, r3
 800d7e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d7e8:	4a41      	ldr	r2, [pc, #260]	; (800d8f0 <main+0x320>)
 800d7ea:	6a3b      	ldr	r3, [r7, #32]
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	4413      	add	r3, r2
 800d7f0:	edd3 7a00 	vldr	s15, [r3]
 800d7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7fc:	edc7 7a01 	vstr	s15, [r7, #4]
 800d800:	793b      	ldrb	r3, [r7, #4]
 800d802:	b2d8      	uxtb	r0, r3
							RGB.g * front[i], RGB.b * front[i], i);
 800d804:	7b7b      	ldrb	r3, [r7, #13]
 800d806:	ee07 3a90 	vmov	s15, r3
 800d80a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d80e:	4a38      	ldr	r2, [pc, #224]	; (800d8f0 <main+0x320>)
 800d810:	6a3b      	ldr	r3, [r7, #32]
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4413      	add	r3, r2
 800d816:	edd3 7a00 	vldr	s15, [r3]
 800d81a:	ee67 7a27 	vmul.f32	s15, s14, s15
					ws2812_setPixel_gammaCorrection(RGB.r * front[i],
 800d81e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d822:	edc7 7a01 	vstr	s15, [r7, #4]
 800d826:	793b      	ldrb	r3, [r7, #4]
 800d828:	b2d9      	uxtb	r1, r3
							RGB.g * front[i], RGB.b * front[i], i);
 800d82a:	7bbb      	ldrb	r3, [r7, #14]
 800d82c:	ee07 3a90 	vmov	s15, r3
 800d830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d834:	4a2e      	ldr	r2, [pc, #184]	; (800d8f0 <main+0x320>)
 800d836:	6a3b      	ldr	r3, [r7, #32]
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4413      	add	r3, r2
 800d83c:	edd3 7a00 	vldr	s15, [r3]
 800d840:	ee67 7a27 	vmul.f32	s15, s14, s15
					ws2812_setPixel_gammaCorrection(RGB.r * front[i],
 800d844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d848:	edc7 7a01 	vstr	s15, [r7, #4]
 800d84c:	793b      	ldrb	r3, [r7, #4]
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	6a3b      	ldr	r3, [r7, #32]
 800d852:	b29b      	uxth	r3, r3
 800d854:	f001 fd28 	bl	800f2a8 <ws2812_setPixel_gammaCorrection>
				for (int i = 0; i < LED_COUNT; i++) {
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	3301      	adds	r3, #1
 800d85c:	623b      	str	r3, [r7, #32]
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	2b17      	cmp	r3, #23
 800d862:	ddbc      	ble.n	800d7de <main+0x20e>
					//ws2812_pixel_rgb_to_buf_dma(RGB.r * front[i], RGB.g * front[i],RGB.b * front[i], i);
				}
				ws2812_light();
 800d864:	f001 fdda 	bl	800f41c <ws2812_light>
				//HAL_Delay(40);

				//shift front
				float tmp = front[0];
 800d868:	4b21      	ldr	r3, [pc, #132]	; (800d8f0 <main+0x320>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	617b      	str	r3, [r7, #20]
				for (int t = 0; t < (LED_COUNT - 1); t++) {
 800d86e:	2300      	movs	r3, #0
 800d870:	61fb      	str	r3, [r7, #28]
 800d872:	e00d      	b.n	800d890 <main+0x2c0>
					front[t] = front[t + 1];
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	3301      	adds	r3, #1
 800d878:	4a1d      	ldr	r2, [pc, #116]	; (800d8f0 <main+0x320>)
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	4413      	add	r3, r2
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	491b      	ldr	r1, [pc, #108]	; (800d8f0 <main+0x320>)
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	440b      	add	r3, r1
 800d888:	601a      	str	r2, [r3, #0]
				for (int t = 0; t < (LED_COUNT - 1); t++) {
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	3301      	adds	r3, #1
 800d88e:	61fb      	str	r3, [r7, #28]
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	2b16      	cmp	r3, #22
 800d894:	ddee      	ble.n	800d874 <main+0x2a4>
				}
				front[LED_COUNT - 1] = tmp;
 800d896:	4a16      	ldr	r2, [pc, #88]	; (800d8f0 <main+0x320>)
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800d89c:	e6f5      	b.n	800d68a <main+0xba>
			} else {
				for (int i = 0; i < LED_COUNT; i++) {
 800d89e:	2300      	movs	r3, #0
 800d8a0:	61bb      	str	r3, [r7, #24]
 800d8a2:	e009      	b.n	800d8b8 <main+0x2e8>
					ws2812_setPixel_gammaCorrection(RGB.r, RGB.g, RGB.b, i);
 800d8a4:	7b38      	ldrb	r0, [r7, #12]
 800d8a6:	7b79      	ldrb	r1, [r7, #13]
 800d8a8:	7bba      	ldrb	r2, [r7, #14]
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	f001 fcfb 	bl	800f2a8 <ws2812_setPixel_gammaCorrection>
				for (int i = 0; i < LED_COUNT; i++) {
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	61bb      	str	r3, [r7, #24]
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	2b17      	cmp	r3, #23
 800d8bc:	ddf2      	ble.n	800d8a4 <main+0x2d4>
					//ws2812_pixel_rgb_to_buf_dma(RGB.r, RGB.g ,RGB.b , i);
				}
				ws2812_light();
 800d8be:	f001 fdad 	bl	800f41c <ws2812_light>
		HAL_Delay(5);
 800d8c2:	e6e2      	b.n	800d68a <main+0xba>
 800d8c4:	f3af 8000 	nop.w
 800d8c8:	7ae147ae 	.word	0x7ae147ae
 800d8cc:	3fefae14 	.word	0x3fefae14
 800d8d0:	47ae147b 	.word	0x47ae147b
 800d8d4:	3f847ae1 	.word	0x3f847ae1
 800d8d8:	cccccccd 	.word	0xcccccccd
 800d8dc:	3feccccc 	.word	0x3feccccc
 800d8e0:	9999999a 	.word	0x9999999a
 800d8e4:	3fb99999 	.word	0x3fb99999
 800d8e8:	20001004 	.word	0x20001004
 800d8ec:	3e85f92c 	.word	0x3e85f92c
 800d8f0:	20000ef8 	.word	0x20000ef8
 800d8f4:	20000f5c 	.word	0x20000f5c
 800d8f8:	20000f58 	.word	0x20000f58
 800d8fc:	20000454 	.word	0x20000454
 800d900:	20000458 	.word	0x20000458
 800d904:	2000045c 	.word	0x2000045c
 800d908:	20000450 	.word	0x20000450
 800d90c:	20000120 	.word	0x20000120
 800d910:	2000011c 	.word	0x2000011c

0800d914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b098      	sub	sp, #96	; 0x60
 800d918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d91a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d91e:	2230      	movs	r2, #48	; 0x30
 800d920:	2100      	movs	r1, #0
 800d922:	4618      	mov	r0, r3
 800d924:	f001 fdee 	bl	800f504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d928:	f107 031c 	add.w	r3, r7, #28
 800d92c:	2200      	movs	r2, #0
 800d92e:	601a      	str	r2, [r3, #0]
 800d930:	605a      	str	r2, [r3, #4]
 800d932:	609a      	str	r2, [r3, #8]
 800d934:	60da      	str	r2, [r3, #12]
 800d936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d938:	f107 0308 	add.w	r3, r7, #8
 800d93c:	2200      	movs	r2, #0
 800d93e:	601a      	str	r2, [r3, #0]
 800d940:	605a      	str	r2, [r3, #4]
 800d942:	609a      	str	r2, [r3, #8]
 800d944:	60da      	str	r2, [r3, #12]
 800d946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d948:	2300      	movs	r3, #0
 800d94a:	607b      	str	r3, [r7, #4]
 800d94c:	4b30      	ldr	r3, [pc, #192]	; (800da10 <SystemClock_Config+0xfc>)
 800d94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d950:	4a2f      	ldr	r2, [pc, #188]	; (800da10 <SystemClock_Config+0xfc>)
 800d952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d956:	6413      	str	r3, [r2, #64]	; 0x40
 800d958:	4b2d      	ldr	r3, [pc, #180]	; (800da10 <SystemClock_Config+0xfc>)
 800d95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d960:	607b      	str	r3, [r7, #4]
 800d962:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800d964:	2300      	movs	r3, #0
 800d966:	603b      	str	r3, [r7, #0]
 800d968:	4b2a      	ldr	r3, [pc, #168]	; (800da14 <SystemClock_Config+0x100>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800d970:	4a28      	ldr	r2, [pc, #160]	; (800da14 <SystemClock_Config+0x100>)
 800d972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d976:	6013      	str	r3, [r2, #0]
 800d978:	4b26      	ldr	r3, [pc, #152]	; (800da14 <SystemClock_Config+0x100>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d980:	603b      	str	r3, [r7, #0]
 800d982:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d984:	2301      	movs	r3, #1
 800d986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d98c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d98e:	2302      	movs	r3, #2
 800d990:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d996:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d998:	2308      	movs	r3, #8
 800d99a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800d99c:	237d      	movs	r3, #125	; 0x7d
 800d99e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800d9a0:	2304      	movs	r3, #4
 800d9a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d9a4:	2304      	movs	r3, #4
 800d9a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d9a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7f6 fedf 	bl	8004770 <HAL_RCC_OscConfig>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800d9b8:	f000 fa16 	bl	800dde8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d9bc:	230f      	movs	r3, #15
 800d9be:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800d9d2:	f107 031c 	add.w	r3, r7, #28
 800d9d6:	2101      	movs	r1, #1
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7f7 f939 	bl	8004c50 <HAL_RCC_ClockConfig>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800d9e4:	f000 fa00 	bl	800dde8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800d9ec:	23c0      	movs	r3, #192	; 0xc0
 800d9ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 800d9f0:	2304      	movs	r3, #4
 800d9f2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d9f4:	f107 0308 	add.w	r3, r7, #8
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7f7 fafd 	bl	8004ff8 <HAL_RCCEx_PeriphCLKConfig>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d001      	beq.n	800da08 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800da04:	f000 f9f0 	bl	800dde8 <Error_Handler>
  }
}
 800da08:	bf00      	nop
 800da0a:	3760      	adds	r7, #96	; 0x60
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	40023800 	.word	0x40023800
 800da14:	40007000 	.word	0x40007000

0800da18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800da1e:	463b      	mov	r3, r7
 800da20:	2200      	movs	r2, #0
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	605a      	str	r2, [r3, #4]
 800da26:	609a      	str	r2, [r3, #8]
 800da28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800da2a:	4b21      	ldr	r3, [pc, #132]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da2c:	4a21      	ldr	r2, [pc, #132]	; (800dab4 <MX_ADC1_Init+0x9c>)
 800da2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800da30:	4b1f      	ldr	r3, [pc, #124]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da32:	2200      	movs	r2, #0
 800da34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800da36:	4b1e      	ldr	r3, [pc, #120]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da38:	2200      	movs	r2, #0
 800da3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800da3c:	4b1c      	ldr	r3, [pc, #112]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da3e:	2200      	movs	r2, #0
 800da40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800da42:	4b1b      	ldr	r3, [pc, #108]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da44:	2201      	movs	r2, #1
 800da46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800da48:	4b19      	ldr	r3, [pc, #100]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800da50:	4b17      	ldr	r3, [pc, #92]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da52:	2200      	movs	r2, #0
 800da54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800da56:	4b16      	ldr	r3, [pc, #88]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da58:	4a17      	ldr	r2, [pc, #92]	; (800dab8 <MX_ADC1_Init+0xa0>)
 800da5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800da5c:	4b14      	ldr	r3, [pc, #80]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da5e:	2200      	movs	r2, #0
 800da60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800da62:	4b13      	ldr	r3, [pc, #76]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da64:	2201      	movs	r2, #1
 800da66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800da68:	4b11      	ldr	r3, [pc, #68]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800da70:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da72:	2201      	movs	r2, #1
 800da74:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800da76:	480e      	ldr	r0, [pc, #56]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da78:	f7f3 fae4 	bl	8001044 <HAL_ADC_Init>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800da82:	f000 f9b1 	bl	800dde8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800da86:	2303      	movs	r3, #3
 800da88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800da8a:	2301      	movs	r3, #1
 800da8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800da8e:	2300      	movs	r3, #0
 800da90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800da92:	463b      	mov	r3, r7
 800da94:	4619      	mov	r1, r3
 800da96:	4806      	ldr	r0, [pc, #24]	; (800dab0 <MX_ADC1_Init+0x98>)
 800da98:	f7f3 fc82 	bl	80013a0 <HAL_ADC_ConfigChannel>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d001      	beq.n	800daa6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800daa2:	f000 f9a1 	bl	800dde8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800daa6:	bf00      	nop
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20000f5c 	.word	0x20000f5c
 800dab4:	40012000 	.word	0x40012000
 800dab8:	0f000001 	.word	0x0f000001

0800dabc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800dac0:	4b13      	ldr	r3, [pc, #76]	; (800db10 <MX_I2S2_Init+0x54>)
 800dac2:	4a14      	ldr	r2, [pc, #80]	; (800db14 <MX_I2S2_Init+0x58>)
 800dac4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800dac6:	4b12      	ldr	r3, [pc, #72]	; (800db10 <MX_I2S2_Init+0x54>)
 800dac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dacc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800dace:	4b10      	ldr	r3, [pc, #64]	; (800db10 <MX_I2S2_Init+0x54>)
 800dad0:	2200      	movs	r2, #0
 800dad2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800dad4:	4b0e      	ldr	r3, [pc, #56]	; (800db10 <MX_I2S2_Init+0x54>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800dada:	4b0d      	ldr	r3, [pc, #52]	; (800db10 <MX_I2S2_Init+0x54>)
 800dadc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dae0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800dae2:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <MX_I2S2_Init+0x54>)
 800dae4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800dae8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800daea:	4b09      	ldr	r3, [pc, #36]	; (800db10 <MX_I2S2_Init+0x54>)
 800daec:	2200      	movs	r2, #0
 800daee:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800daf0:	4b07      	ldr	r3, [pc, #28]	; (800db10 <MX_I2S2_Init+0x54>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800daf6:	4b06      	ldr	r3, [pc, #24]	; (800db10 <MX_I2S2_Init+0x54>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800dafc:	4804      	ldr	r0, [pc, #16]	; (800db10 <MX_I2S2_Init+0x54>)
 800dafe:	f7f4 fcf7 	bl	80024f0 <HAL_I2S_Init>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800db08:	f000 f96e 	bl	800dde8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800db0c:	bf00      	nop
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	20001188 	.word	0x20001188
 800db14:	40003800 	.word	0x40003800

0800db18 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800db18:	b480      	push	{r7}
 800db1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800db1c:	4b0c      	ldr	r3, [pc, #48]	; (800db50 <MX_SDIO_SD_Init+0x38>)
 800db1e:	4a0d      	ldr	r2, [pc, #52]	; (800db54 <MX_SDIO_SD_Init+0x3c>)
 800db20:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800db22:	4b0b      	ldr	r3, [pc, #44]	; (800db50 <MX_SDIO_SD_Init+0x38>)
 800db24:	2200      	movs	r2, #0
 800db26:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800db28:	4b09      	ldr	r3, [pc, #36]	; (800db50 <MX_SDIO_SD_Init+0x38>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800db2e:	4b08      	ldr	r3, [pc, #32]	; (800db50 <MX_SDIO_SD_Init+0x38>)
 800db30:	2200      	movs	r2, #0
 800db32:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800db34:	4b06      	ldr	r3, [pc, #24]	; (800db50 <MX_SDIO_SD_Init+0x38>)
 800db36:	2200      	movs	r2, #0
 800db38:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800db3a:	4b05      	ldr	r3, [pc, #20]	; (800db50 <MX_SDIO_SD_Init+0x38>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 800db40:	4b03      	ldr	r3, [pc, #12]	; (800db50 <MX_SDIO_SD_Init+0x38>)
 800db42:	2208      	movs	r2, #8
 800db44:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800db46:	bf00      	nop
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	20001044 	.word	0x20001044
 800db54:	40012c00 	.word	0x40012c00

0800db58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800db5e:	f107 0308 	add.w	r3, r7, #8
 800db62:	2200      	movs	r2, #0
 800db64:	601a      	str	r2, [r3, #0]
 800db66:	605a      	str	r2, [r3, #4]
 800db68:	609a      	str	r2, [r3, #8]
 800db6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800db6c:	463b      	mov	r3, r7
 800db6e:	2200      	movs	r2, #0
 800db70:	601a      	str	r2, [r3, #0]
 800db72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800db74:	4b1e      	ldr	r3, [pc, #120]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800db76:	4a1f      	ldr	r2, [pc, #124]	; (800dbf4 <MX_TIM1_Init+0x9c>)
 800db78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000;
 800db7a:	4b1d      	ldr	r3, [pc, #116]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800db7c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800db80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db82:	4b1b      	ldr	r3, [pc, #108]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800db84:	2200      	movs	r2, #0
 800db86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30;
 800db88:	4b19      	ldr	r3, [pc, #100]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800db8a:	221e      	movs	r2, #30
 800db8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db8e:	4b18      	ldr	r3, [pc, #96]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800db90:	2200      	movs	r2, #0
 800db92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800db94:	4b16      	ldr	r3, [pc, #88]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800db96:	2200      	movs	r2, #0
 800db98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db9a:	4b15      	ldr	r3, [pc, #84]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800dba0:	4813      	ldr	r0, [pc, #76]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800dba2:	f7f8 fb11 	bl	80061c8 <HAL_TIM_Base_Init>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800dbac:	f000 f91c 	bl	800dde8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dbb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800dbb6:	f107 0308 	add.w	r3, r7, #8
 800dbba:	4619      	mov	r1, r3
 800dbbc:	480c      	ldr	r0, [pc, #48]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800dbbe:	f7f8 fe51 	bl	8006864 <HAL_TIM_ConfigClockSource>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800dbc8:	f000 f90e 	bl	800dde8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800dbd4:	463b      	mov	r3, r7
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	4805      	ldr	r0, [pc, #20]	; (800dbf0 <MX_TIM1_Init+0x98>)
 800dbda:	f7f9 fa8f 	bl	80070fc <HAL_TIMEx_MasterConfigSynchronization>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800dbe4:	f000 f900 	bl	800dde8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800dbe8:	bf00      	nop
 800dbea:	3718      	adds	r7, #24
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	20001004 	.word	0x20001004
 800dbf4:	40010000 	.word	0x40010000

0800dbf8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08a      	sub	sp, #40	; 0x28
 800dbfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dbfe:	f107 0320 	add.w	r3, r7, #32
 800dc02:	2200      	movs	r2, #0
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc08:	1d3b      	adds	r3, r7, #4
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	601a      	str	r2, [r3, #0]
 800dc0e:	605a      	str	r2, [r3, #4]
 800dc10:	609a      	str	r2, [r3, #8]
 800dc12:	60da      	str	r2, [r3, #12]
 800dc14:	611a      	str	r2, [r3, #16]
 800dc16:	615a      	str	r2, [r3, #20]
 800dc18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dc1a:	4b21      	ldr	r3, [pc, #132]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc1c:	4a21      	ldr	r2, [pc, #132]	; (800dca4 <MX_TIM3_Init+0xac>)
 800dc1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dc20:	4b1f      	ldr	r3, [pc, #124]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc26:	4b1e      	ldr	r3, [pc, #120]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 80;
 800dc2c:	4b1c      	ldr	r3, [pc, #112]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc2e:	2250      	movs	r2, #80	; 0x50
 800dc30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc32:	4b1b      	ldr	r3, [pc, #108]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc38:	4b19      	ldr	r3, [pc, #100]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800dc3e:	4818      	ldr	r0, [pc, #96]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc40:	f7f8 fb11 	bl	8006266 <HAL_TIM_PWM_Init>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800dc4a:	f000 f8cd 	bl	800dde8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc52:	2300      	movs	r3, #0
 800dc54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dc56:	f107 0320 	add.w	r3, r7, #32
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4810      	ldr	r0, [pc, #64]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc5e:	f7f9 fa4d 	bl	80070fc <HAL_TIMEx_MasterConfigSynchronization>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d001      	beq.n	800dc6c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800dc68:	f000 f8be 	bl	800dde8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dc6c:	2360      	movs	r3, #96	; 0x60
 800dc6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800dc70:	2300      	movs	r3, #0
 800dc72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dc74:	2300      	movs	r3, #0
 800dc76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dc7c:	1d3b      	adds	r3, r7, #4
 800dc7e:	2204      	movs	r2, #4
 800dc80:	4619      	mov	r1, r3
 800dc82:	4807      	ldr	r0, [pc, #28]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc84:	f7f8 fd28 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800dc8e:	f000 f8ab 	bl	800dde8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800dc92:	4803      	ldr	r0, [pc, #12]	; (800dca0 <MX_TIM3_Init+0xa8>)
 800dc94:	f000 fcaa 	bl	800e5ec <HAL_TIM_MspPostInit>

}
 800dc98:	bf00      	nop
 800dc9a:	3728      	adds	r7, #40	; 0x28
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	20000eb0 	.word	0x20000eb0
 800dca4:	40000400 	.word	0x40000400

0800dca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800dcae:	2300      	movs	r3, #0
 800dcb0:	607b      	str	r3, [r7, #4]
 800dcb2:	4b10      	ldr	r3, [pc, #64]	; (800dcf4 <MX_DMA_Init+0x4c>)
 800dcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb6:	4a0f      	ldr	r2, [pc, #60]	; (800dcf4 <MX_DMA_Init+0x4c>)
 800dcb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dcbc:	6313      	str	r3, [r2, #48]	; 0x30
 800dcbe:	4b0d      	ldr	r3, [pc, #52]	; (800dcf4 <MX_DMA_Init+0x4c>)
 800dcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dcc6:	607b      	str	r3, [r7, #4]
 800dcc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800dcca:	2200      	movs	r2, #0
 800dccc:	2100      	movs	r1, #0
 800dcce:	200f      	movs	r0, #15
 800dcd0:	f7f3 fe5f 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800dcd4:	200f      	movs	r0, #15
 800dcd6:	f7f3 fe78 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800dcda:	2200      	movs	r2, #0
 800dcdc:	2100      	movs	r1, #0
 800dcde:	2010      	movs	r0, #16
 800dce0:	f7f3 fe57 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800dce4:	2010      	movs	r0, #16
 800dce6:	f7f3 fe70 	bl	80019ca <HAL_NVIC_EnableIRQ>

}
 800dcea:	bf00      	nop
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	40023800 	.word	0x40023800

0800dcf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08a      	sub	sp, #40	; 0x28
 800dcfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcfe:	f107 0314 	add.w	r3, r7, #20
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]
 800dd06:	605a      	str	r2, [r3, #4]
 800dd08:	609a      	str	r2, [r3, #8]
 800dd0a:	60da      	str	r2, [r3, #12]
 800dd0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800dd0e:	2300      	movs	r3, #0
 800dd10:	613b      	str	r3, [r7, #16]
 800dd12:	4b2a      	ldr	r3, [pc, #168]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd16:	4a29      	ldr	r2, [pc, #164]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd1c:	6313      	str	r3, [r2, #48]	; 0x30
 800dd1e:	4b27      	ldr	r3, [pc, #156]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd26:	613b      	str	r3, [r7, #16]
 800dd28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	4b23      	ldr	r3, [pc, #140]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd32:	4a22      	ldr	r2, [pc, #136]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd34:	f043 0304 	orr.w	r3, r3, #4
 800dd38:	6313      	str	r3, [r2, #48]	; 0x30
 800dd3a:	4b20      	ldr	r3, [pc, #128]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd3e:	f003 0304 	and.w	r3, r3, #4
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd46:	2300      	movs	r3, #0
 800dd48:	60bb      	str	r3, [r7, #8]
 800dd4a:	4b1c      	ldr	r3, [pc, #112]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd4e:	4a1b      	ldr	r2, [pc, #108]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd50:	f043 0301 	orr.w	r3, r3, #1
 800dd54:	6313      	str	r3, [r2, #48]	; 0x30
 800dd56:	4b19      	ldr	r3, [pc, #100]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd5a:	f003 0301 	and.w	r3, r3, #1
 800dd5e:	60bb      	str	r3, [r7, #8]
 800dd60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800dd62:	2300      	movs	r3, #0
 800dd64:	607b      	str	r3, [r7, #4]
 800dd66:	4b15      	ldr	r3, [pc, #84]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd6a:	4a14      	ldr	r2, [pc, #80]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd6c:	f043 0302 	orr.w	r3, r3, #2
 800dd70:	6313      	str	r3, [r2, #48]	; 0x30
 800dd72:	4b12      	ldr	r3, [pc, #72]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd76:	f003 0302 	and.w	r3, r3, #2
 800dd7a:	607b      	str	r3, [r7, #4]
 800dd7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800dd7e:	2300      	movs	r3, #0
 800dd80:	603b      	str	r3, [r7, #0]
 800dd82:	4b0e      	ldr	r3, [pc, #56]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd86:	4a0d      	ldr	r2, [pc, #52]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd88:	f043 0308 	orr.w	r3, r3, #8
 800dd8c:	6313      	str	r3, [r2, #48]	; 0x30
 800dd8e:	4b0b      	ldr	r3, [pc, #44]	; (800ddbc <MX_GPIO_Init+0xc4>)
 800dd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd92:	f003 0308 	and.w	r3, r3, #8
 800dd96:	603b      	str	r3, [r7, #0]
 800dd98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CardDet_Pin */
  GPIO_InitStruct.Pin = CardDet_Pin;
 800dd9a:	2380      	movs	r3, #128	; 0x80
 800dd9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dda2:	2301      	movs	r3, #1
 800dda4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CardDet_GPIO_Port, &GPIO_InitStruct);
 800dda6:	f107 0314 	add.w	r3, r7, #20
 800ddaa:	4619      	mov	r1, r3
 800ddac:	4804      	ldr	r0, [pc, #16]	; (800ddc0 <MX_GPIO_Init+0xc8>)
 800ddae:	f7f4 fa05 	bl	80021bc <HAL_GPIO_Init>

}
 800ddb2:	bf00      	nop
 800ddb4:	3728      	adds	r7, #40	; 0x28
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	40023800 	.word	0x40023800
 800ddc0:	40020800 	.word	0x40020800

0800ddc4 <HAL_I2S_TxHalfCpltCallback>:
 AudioPlay_TransferComplete_CallBack();
 }
 }
 */
//---------------------------------------------------------
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s2) {
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
	if (hi2s2->Instance == I2S2) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a04      	ldr	r2, [pc, #16]	; (800dde4 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d101      	bne.n	800ddda <HAL_I2S_TxHalfCpltCallback+0x16>
		AudioPlay_HalfTransfer_CallBack();
 800ddd6:	f7ff fab3 	bl	800d340 <AudioPlay_HalfTransfer_CallBack>
	}
}
 800ddda:	bf00      	nop
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	40003800 	.word	0x40003800

0800dde8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dde8:	b480      	push	{r7}
 800ddea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ddec:	bf00      	nop
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
	...

0800ddf8 <init>:
volatile uint16_t *signal_read_buff = NULL;
volatile uint16_t signal_buff1[4096];
volatile uint16_t signal_buff2[4096];
volatile int adccnt = 0;

void init() {
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b0dc      	sub	sp, #368	; 0x170
 800ddfc:	af00      	add	r7, sp, #0
	FRESULT res;
	printf("hello\n");
 800ddfe:	486c      	ldr	r0, [pc, #432]	; (800dfb0 <init+0x1b8>)
 800de00:	f001 fca4 	bl	800f74c <puts>
	printf("Ready!\r\n");
 800de04:	486b      	ldr	r0, [pc, #428]	; (800dfb4 <init+0x1bc>)
 800de06:	f001 fca1 	bl	800f74c <puts>
	printf("CardDetect : %d!\r\n", HAL_GPIO_ReadPin(CardDet_GPIO_Port, CardDet_Pin) );
 800de0a:	2180      	movs	r1, #128	; 0x80
 800de0c:	486a      	ldr	r0, [pc, #424]	; (800dfb8 <init+0x1c0>)
 800de0e:	f7f4 fb57 	bl	80024c0 <HAL_GPIO_ReadPin>
 800de12:	4603      	mov	r3, r0
 800de14:	4619      	mov	r1, r3
 800de16:	4869      	ldr	r0, [pc, #420]	; (800dfbc <init+0x1c4>)
 800de18:	f001 fc24 	bl	800f664 <iprintf>


	// mount the default drive
	res = f_mount(&fs, "", 1);
 800de1c:	2201      	movs	r2, #1
 800de1e:	4968      	ldr	r1, [pc, #416]	; (800dfc0 <init+0x1c8>)
 800de20:	4868      	ldr	r0, [pc, #416]	; (800dfc4 <init+0x1cc>)
 800de22:	f7fe ff51 	bl	800ccc8 <f_mount>
 800de26:	4603      	mov	r3, r0
 800de28:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 800de2c:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800de30:	2b00      	cmp	r3, #0
 800de32:	d006      	beq.n	800de42 <init+0x4a>
		printf("f_mount() failed, res = %d\r\n", res);
 800de34:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800de38:	4619      	mov	r1, r3
 800de3a:	4863      	ldr	r0, [pc, #396]	; (800dfc8 <init+0x1d0>)
 800de3c:	f001 fc12 	bl	800f664 <iprintf>
		return;
 800de40:	e0b2      	b.n	800dfa8 <init+0x1b0>
	}

	printf("f_mount() done!\r\n");
 800de42:	4862      	ldr	r0, [pc, #392]	; (800dfcc <init+0x1d4>)
 800de44:	f001 fc82 	bl	800f74c <puts>

	uint32_t freeClust;
	FATFS *fs_ptr = &fs;
 800de48:	4b5e      	ldr	r3, [pc, #376]	; (800dfc4 <init+0x1cc>)
 800de4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	// Warning! This fills fs.n_fatent and fs.csize!
	res = f_getfree("", &freeClust, &fs_ptr);
 800de4e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800de52:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800de56:	4619      	mov	r1, r3
 800de58:	4859      	ldr	r0, [pc, #356]	; (800dfc0 <init+0x1c8>)
 800de5a:	f7ff f851 	bl	800cf00 <f_getfree>
 800de5e:	4603      	mov	r3, r0
 800de60:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 800de64:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d006      	beq.n	800de7a <init+0x82>
		printf("f_getfree() failed, res = %d\r\n", res);
 800de6c:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800de70:	4619      	mov	r1, r3
 800de72:	4857      	ldr	r0, [pc, #348]	; (800dfd0 <init+0x1d8>)
 800de74:	f001 fbf6 	bl	800f664 <iprintf>
		return;
 800de78:	e096      	b.n	800dfa8 <init+0x1b0>
	}

	printf("f_getfree() done!\r\n");
 800de7a:	4856      	ldr	r0, [pc, #344]	; (800dfd4 <init+0x1dc>)
 800de7c:	f001 fc66 	bl	800f74c <puts>

	uint32_t totalBlocks = (fs.n_fatent - 2) * fs.csize;
 800de80:	4b50      	ldr	r3, [pc, #320]	; (800dfc4 <init+0x1cc>)
 800de82:	699b      	ldr	r3, [r3, #24]
 800de84:	3b02      	subs	r3, #2
 800de86:	4a4f      	ldr	r2, [pc, #316]	; (800dfc4 <init+0x1cc>)
 800de88:	8952      	ldrh	r2, [r2, #10]
 800de8a:	fb02 f303 	mul.w	r3, r2, r3
 800de8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	uint32_t freeBlocks = freeClust * fs.csize;
 800de92:	4b4c      	ldr	r3, [pc, #304]	; (800dfc4 <init+0x1cc>)
 800de94:	895b      	ldrh	r3, [r3, #10]
 800de96:	461a      	mov	r2, r3
 800de98:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de9c:	fb03 f302 	mul.w	r3, r3, r2
 800dea0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

	printf("Total blocks: %lu (%lu Mb)\r\n", totalBlocks, totalBlocks / 2000);
 800dea4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800dea8:	4a4b      	ldr	r2, [pc, #300]	; (800dfd8 <init+0x1e0>)
 800deaa:	fba2 2303 	umull	r2, r3, r2, r3
 800deae:	09db      	lsrs	r3, r3, #7
 800deb0:	461a      	mov	r2, r3
 800deb2:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 800deb6:	4849      	ldr	r0, [pc, #292]	; (800dfdc <init+0x1e4>)
 800deb8:	f001 fbd4 	bl	800f664 <iprintf>
	printf("Free blocks: %lu (%lu Mb)\r\n", freeBlocks, freeBlocks / 2000);
 800debc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800dec0:	4a45      	ldr	r2, [pc, #276]	; (800dfd8 <init+0x1e0>)
 800dec2:	fba2 2303 	umull	r2, r3, r2, r3
 800dec6:	09db      	lsrs	r3, r3, #7
 800dec8:	461a      	mov	r2, r3
 800deca:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800dece:	4844      	ldr	r0, [pc, #272]	; (800dfe0 <init+0x1e8>)
 800ded0:	f001 fbc8 	bl	800f664 <iprintf>

	DIR dir;
	res = f_opendir(&dir, "/");
 800ded4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800ded8:	4942      	ldr	r1, [pc, #264]	; (800dfe4 <init+0x1ec>)
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fe ff3a 	bl	800cd54 <f_opendir>
 800dee0:	4603      	mov	r3, r0
 800dee2:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 800dee6:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800deea:	2b00      	cmp	r3, #0
 800deec:	d006      	beq.n	800defc <init+0x104>
		printf("f_opendir() failed, res = %d\r\n", res);
 800deee:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800def2:	4619      	mov	r1, r3
 800def4:	483c      	ldr	r0, [pc, #240]	; (800dfe8 <init+0x1f0>)
 800def6:	f001 fbb5 	bl	800f664 <iprintf>
		return;
 800defa:	e055      	b.n	800dfa8 <init+0x1b0>
	}

	FILINFO fileInfo;
	uint32_t totalFiles = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	uint32_t totalDirs = 0;
 800df02:	2300      	movs	r3, #0
 800df04:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	printf("--------\r\nRoot directory:\r\n");
 800df08:	4838      	ldr	r0, [pc, #224]	; (800dfec <init+0x1f4>)
 800df0a:	f001 fc1f 	bl	800f74c <puts>
	for (;;) {
		res = f_readdir(&dir, &fileInfo);
 800df0e:	1d3a      	adds	r2, r7, #4
 800df10:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800df14:	4611      	mov	r1, r2
 800df16:	4618      	mov	r0, r3
 800df18:	f7fe ffb5 	bl	800ce86 <f_readdir>
 800df1c:	4603      	mov	r3, r0
 800df1e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		if ((res != FR_OK) || (fileInfo.fname[0] == '\0')) {
 800df22:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800df26:	2b00      	cmp	r3, #0
 800df28:	d121      	bne.n	800df6e <init+0x176>
 800df2a:	1d3b      	adds	r3, r7, #4
 800df2c:	7d9b      	ldrb	r3, [r3, #22]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d01d      	beq.n	800df6e <init+0x176>
			break;
		}

		if (fileInfo.fattrib & AM_DIR) {
 800df32:	1d3b      	adds	r3, r7, #4
 800df34:	7a1b      	ldrb	r3, [r3, #8]
 800df36:	f003 0310 	and.w	r3, r3, #16
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00b      	beq.n	800df56 <init+0x15e>
			printf("  DIR  %s\r\n", fileInfo.fname);
 800df3e:	1d3b      	adds	r3, r7, #4
 800df40:	3316      	adds	r3, #22
 800df42:	4619      	mov	r1, r3
 800df44:	482a      	ldr	r0, [pc, #168]	; (800dff0 <init+0x1f8>)
 800df46:	f001 fb8d 	bl	800f664 <iprintf>
			totalDirs++;
 800df4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800df4e:	3301      	adds	r3, #1
 800df50:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800df54:	e7db      	b.n	800df0e <init+0x116>
		} else {
			printf("  FILE %s\r\n", fileInfo.fname);
 800df56:	1d3b      	adds	r3, r7, #4
 800df58:	3316      	adds	r3, #22
 800df5a:	4619      	mov	r1, r3
 800df5c:	4825      	ldr	r0, [pc, #148]	; (800dff4 <init+0x1fc>)
 800df5e:	f001 fb81 	bl	800f664 <iprintf>
			totalFiles++;
 800df62:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800df66:	3301      	adds	r3, #1
 800df68:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		res = f_readdir(&dir, &fileInfo);
 800df6c:	e7cf      	b.n	800df0e <init+0x116>
		}
	}

	printf("(total: %lu dirs, %lu files)\r\n--------\r\n", totalDirs,
 800df6e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800df72:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800df76:	4820      	ldr	r0, [pc, #128]	; (800dff8 <init+0x200>)
 800df78:	f001 fb74 	bl	800f664 <iprintf>
			totalFiles);

	res = f_closedir(&dir);
 800df7c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800df80:	4618      	mov	r0, r3
 800df82:	f7fe ff5a 	bl	800ce3a <f_closedir>
 800df86:	4603      	mov	r3, r0
 800df88:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 800df8c:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800df90:	2b00      	cmp	r3, #0
 800df92:	d006      	beq.n	800dfa2 <init+0x1aa>
		printf("f_closedir() failed, res = %d\r\n", res);
 800df94:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800df98:	4619      	mov	r1, r3
 800df9a:	4818      	ldr	r0, [pc, #96]	; (800dffc <init+0x204>)
 800df9c:	f001 fb62 	bl	800f664 <iprintf>
		return;
 800dfa0:	e002      	b.n	800dfa8 <init+0x1b0>
	 if(res != FR_OK) {
	 printf("Unmount failed, res = %d\r\n", res);
	 return;
	 }
	 */
	printf("Done!\r\n");
 800dfa2:	4817      	ldr	r0, [pc, #92]	; (800e000 <init+0x208>)
 800dfa4:	f001 fbd2 	bl	800f74c <puts>
}
 800dfa8:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	08011430 	.word	0x08011430
 800dfb4:	08011438 	.word	0x08011438
 800dfb8:	40020800 	.word	0x40020800
 800dfbc:	08011440 	.word	0x08011440
 800dfc0:	08011454 	.word	0x08011454
 800dfc4:	200031d0 	.word	0x200031d0
 800dfc8:	08011458 	.word	0x08011458
 800dfcc:	08011478 	.word	0x08011478
 800dfd0:	0801148c 	.word	0x0801148c
 800dfd4:	080114ac 	.word	0x080114ac
 800dfd8:	10624dd3 	.word	0x10624dd3
 800dfdc:	080114c0 	.word	0x080114c0
 800dfe0:	080114e0 	.word	0x080114e0
 800dfe4:	080114fc 	.word	0x080114fc
 800dfe8:	08011500 	.word	0x08011500
 800dfec:	08011520 	.word	0x08011520
 800dff0:	0801153c 	.word	0x0801153c
 800dff4:	08011548 	.word	0x08011548
 800dff8:	08011554 	.word	0x08011554
 800dffc:	08011580 	.word	0x08011580
 800e000:	080115a0 	.word	0x080115a0

0800e004 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e00e:	4b0b      	ldr	r3, [pc, #44]	; (800e03c <SD_CheckStatus+0x38>)
 800e010:	2201      	movs	r2, #1
 800e012:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e014:	f7ff f9ee 	bl	800d3f4 <BSP_SD_GetCardState>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d107      	bne.n	800e02e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e01e:	4b07      	ldr	r3, [pc, #28]	; (800e03c <SD_CheckStatus+0x38>)
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	b2db      	uxtb	r3, r3
 800e024:	f023 0301 	bic.w	r3, r3, #1
 800e028:	b2da      	uxtb	r2, r3
 800e02a:	4b04      	ldr	r3, [pc, #16]	; (800e03c <SD_CheckStatus+0x38>)
 800e02c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e02e:	4b03      	ldr	r3, [pc, #12]	; (800e03c <SD_CheckStatus+0x38>)
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	b2db      	uxtb	r3, r3
}
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	20000124 	.word	0x20000124

0800e040 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	4603      	mov	r3, r0
 800e048:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e04a:	4b0b      	ldr	r3, [pc, #44]	; (800e078 <SD_initialize+0x38>)
 800e04c:	2201      	movs	r2, #1
 800e04e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e050:	f7ff f97c 	bl	800d34c <BSP_SD_Init>
 800e054:	4603      	mov	r3, r0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d107      	bne.n	800e06a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e05a:	79fb      	ldrb	r3, [r7, #7]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff ffd1 	bl	800e004 <SD_CheckStatus>
 800e062:	4603      	mov	r3, r0
 800e064:	461a      	mov	r2, r3
 800e066:	4b04      	ldr	r3, [pc, #16]	; (800e078 <SD_initialize+0x38>)
 800e068:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e06a:	4b03      	ldr	r3, [pc, #12]	; (800e078 <SD_initialize+0x38>)
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	b2db      	uxtb	r3, r3
}
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	20000124 	.word	0x20000124

0800e07c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	4603      	mov	r3, r0
 800e084:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e086:	79fb      	ldrb	r3, [r7, #7]
 800e088:	4618      	mov	r0, r3
 800e08a:	f7ff ffbb 	bl	800e004 <SD_CheckStatus>
 800e08e:	4603      	mov	r3, r0
}
 800e090:	4618      	mov	r0, r3
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60b9      	str	r1, [r7, #8]
 800e0a0:	607a      	str	r2, [r7, #4]
 800e0a2:	603b      	str	r3, [r7, #0]
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b0:	683a      	ldr	r2, [r7, #0]
 800e0b2:	6879      	ldr	r1, [r7, #4]
 800e0b4:	68b8      	ldr	r0, [r7, #8]
 800e0b6:	f7ff f961 	bl	800d37c <BSP_SD_ReadBlocks>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d107      	bne.n	800e0d0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e0c0:	bf00      	nop
 800e0c2:	f7ff f997 	bl	800d3f4 <BSP_SD_GetCardState>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1fa      	bne.n	800e0c2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3718      	adds	r7, #24
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b086      	sub	sp, #24
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
 800e0e4:	603b      	str	r3, [r7, #0]
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	6879      	ldr	r1, [r7, #4]
 800e0f6:	68b8      	ldr	r0, [r7, #8]
 800e0f8:	f7ff f95e 	bl	800d3b8 <BSP_SD_WriteBlocks>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d107      	bne.n	800e112 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e102:	bf00      	nop
 800e104:	f7ff f976 	bl	800d3f4 <BSP_SD_GetCardState>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1fa      	bne.n	800e104 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e10e:	2300      	movs	r3, #0
 800e110:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e112:	7dfb      	ldrb	r3, [r7, #23]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3718      	adds	r7, #24
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b08c      	sub	sp, #48	; 0x30
 800e120:	af00      	add	r7, sp, #0
 800e122:	4603      	mov	r3, r0
 800e124:	603a      	str	r2, [r7, #0]
 800e126:	71fb      	strb	r3, [r7, #7]
 800e128:	460b      	mov	r3, r1
 800e12a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e12c:	2301      	movs	r3, #1
 800e12e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e132:	4b25      	ldr	r3, [pc, #148]	; (800e1c8 <SD_ioctl+0xac>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	b2db      	uxtb	r3, r3
 800e138:	f003 0301 	and.w	r3, r3, #1
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <SD_ioctl+0x28>
 800e140:	2303      	movs	r3, #3
 800e142:	e03c      	b.n	800e1be <SD_ioctl+0xa2>

  switch (cmd)
 800e144:	79bb      	ldrb	r3, [r7, #6]
 800e146:	2b03      	cmp	r3, #3
 800e148:	d834      	bhi.n	800e1b4 <SD_ioctl+0x98>
 800e14a:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <SD_ioctl+0x34>)
 800e14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e150:	0800e161 	.word	0x0800e161
 800e154:	0800e169 	.word	0x0800e169
 800e158:	0800e181 	.word	0x0800e181
 800e15c:	0800e19b 	.word	0x0800e19b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e166:	e028      	b.n	800e1ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e168:	f107 030c 	add.w	r3, r7, #12
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7ff f951 	bl	800d414 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e178:	2300      	movs	r3, #0
 800e17a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e17e:	e01c      	b.n	800e1ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e180:	f107 030c 	add.w	r3, r7, #12
 800e184:	4618      	mov	r0, r3
 800e186:	f7ff f945 	bl	800d414 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e198:	e00f      	b.n	800e1ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e19a:	f107 030c 	add.w	r3, r7, #12
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7ff f938 	bl	800d414 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	0a5a      	lsrs	r2, r3, #9
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e1b2:	e002      	b.n	800e1ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e1b4:	2304      	movs	r3, #4
 800e1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e1ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3730      	adds	r7, #48	; 0x30
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	20000124 	.word	0x20000124

0800e1cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	607b      	str	r3, [r7, #4]
 800e1d6:	4b10      	ldr	r3, [pc, #64]	; (800e218 <HAL_MspInit+0x4c>)
 800e1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1da:	4a0f      	ldr	r2, [pc, #60]	; (800e218 <HAL_MspInit+0x4c>)
 800e1dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e1e0:	6453      	str	r3, [r2, #68]	; 0x44
 800e1e2:	4b0d      	ldr	r3, [pc, #52]	; (800e218 <HAL_MspInit+0x4c>)
 800e1e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1ea:	607b      	str	r3, [r7, #4]
 800e1ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	603b      	str	r3, [r7, #0]
 800e1f2:	4b09      	ldr	r3, [pc, #36]	; (800e218 <HAL_MspInit+0x4c>)
 800e1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1f6:	4a08      	ldr	r2, [pc, #32]	; (800e218 <HAL_MspInit+0x4c>)
 800e1f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1fc:	6413      	str	r3, [r2, #64]	; 0x40
 800e1fe:	4b06      	ldr	r3, [pc, #24]	; (800e218 <HAL_MspInit+0x4c>)
 800e200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e206:	603b      	str	r3, [r7, #0]
 800e208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e20a:	bf00      	nop
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	40023800 	.word	0x40023800

0800e21c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08a      	sub	sp, #40	; 0x28
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e224:	f107 0314 	add.w	r3, r7, #20
 800e228:	2200      	movs	r2, #0
 800e22a:	601a      	str	r2, [r3, #0]
 800e22c:	605a      	str	r2, [r3, #4]
 800e22e:	609a      	str	r2, [r3, #8]
 800e230:	60da      	str	r2, [r3, #12]
 800e232:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a17      	ldr	r2, [pc, #92]	; (800e298 <HAL_ADC_MspInit+0x7c>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d127      	bne.n	800e28e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e23e:	2300      	movs	r3, #0
 800e240:	613b      	str	r3, [r7, #16]
 800e242:	4b16      	ldr	r3, [pc, #88]	; (800e29c <HAL_ADC_MspInit+0x80>)
 800e244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e246:	4a15      	ldr	r2, [pc, #84]	; (800e29c <HAL_ADC_MspInit+0x80>)
 800e248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e24c:	6453      	str	r3, [r2, #68]	; 0x44
 800e24e:	4b13      	ldr	r3, [pc, #76]	; (800e29c <HAL_ADC_MspInit+0x80>)
 800e250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e256:	613b      	str	r3, [r7, #16]
 800e258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e25a:	2300      	movs	r3, #0
 800e25c:	60fb      	str	r3, [r7, #12]
 800e25e:	4b0f      	ldr	r3, [pc, #60]	; (800e29c <HAL_ADC_MspInit+0x80>)
 800e260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e262:	4a0e      	ldr	r2, [pc, #56]	; (800e29c <HAL_ADC_MspInit+0x80>)
 800e264:	f043 0301 	orr.w	r3, r3, #1
 800e268:	6313      	str	r3, [r2, #48]	; 0x30
 800e26a:	4b0c      	ldr	r3, [pc, #48]	; (800e29c <HAL_ADC_MspInit+0x80>)
 800e26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26e:	f003 0301 	and.w	r3, r3, #1
 800e272:	60fb      	str	r3, [r7, #12]
 800e274:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 800e276:	2308      	movs	r3, #8
 800e278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e27a:	2303      	movs	r3, #3
 800e27c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e27e:	2300      	movs	r3, #0
 800e280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 800e282:	f107 0314 	add.w	r3, r7, #20
 800e286:	4619      	mov	r1, r3
 800e288:	4805      	ldr	r0, [pc, #20]	; (800e2a0 <HAL_ADC_MspInit+0x84>)
 800e28a:	f7f3 ff97 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e28e:	bf00      	nop
 800e290:	3728      	adds	r7, #40	; 0x28
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	40012000 	.word	0x40012000
 800e29c:	40023800 	.word	0x40023800
 800e2a0:	40020000 	.word	0x40020000

0800e2a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b08a      	sub	sp, #40	; 0x28
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2ac:	f107 0314 	add.w	r3, r7, #20
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	601a      	str	r2, [r3, #0]
 800e2b4:	605a      	str	r2, [r3, #4]
 800e2b6:	609a      	str	r2, [r3, #8]
 800e2b8:	60da      	str	r2, [r3, #12]
 800e2ba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a52      	ldr	r2, [pc, #328]	; (800e40c <HAL_I2S_MspInit+0x168>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	f040 809d 	bne.w	800e402 <HAL_I2S_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	613b      	str	r3, [r7, #16]
 800e2cc:	4b50      	ldr	r3, [pc, #320]	; (800e410 <HAL_I2S_MspInit+0x16c>)
 800e2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d0:	4a4f      	ldr	r2, [pc, #316]	; (800e410 <HAL_I2S_MspInit+0x16c>)
 800e2d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2d6:	6413      	str	r3, [r2, #64]	; 0x40
 800e2d8:	4b4d      	ldr	r3, [pc, #308]	; (800e410 <HAL_I2S_MspInit+0x16c>)
 800e2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2e0:	613b      	str	r3, [r7, #16]
 800e2e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	60fb      	str	r3, [r7, #12]
 800e2e8:	4b49      	ldr	r3, [pc, #292]	; (800e410 <HAL_I2S_MspInit+0x16c>)
 800e2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ec:	4a48      	ldr	r2, [pc, #288]	; (800e410 <HAL_I2S_MspInit+0x16c>)
 800e2ee:	f043 0304 	orr.w	r3, r3, #4
 800e2f2:	6313      	str	r3, [r2, #48]	; 0x30
 800e2f4:	4b46      	ldr	r3, [pc, #280]	; (800e410 <HAL_I2S_MspInit+0x16c>)
 800e2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2f8:	f003 0304 	and.w	r3, r3, #4
 800e2fc:	60fb      	str	r3, [r7, #12]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e300:	2300      	movs	r3, #0
 800e302:	60bb      	str	r3, [r7, #8]
 800e304:	4b42      	ldr	r3, [pc, #264]	; (800e410 <HAL_I2S_MspInit+0x16c>)
 800e306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e308:	4a41      	ldr	r2, [pc, #260]	; (800e410 <HAL_I2S_MspInit+0x16c>)
 800e30a:	f043 0302 	orr.w	r3, r3, #2
 800e30e:	6313      	str	r3, [r2, #48]	; 0x30
 800e310:	4b3f      	ldr	r3, [pc, #252]	; (800e410 <HAL_I2S_MspInit+0x16c>)
 800e312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e314:	f003 0302 	and.w	r3, r3, #2
 800e318:	60bb      	str	r3, [r7, #8]
 800e31a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e31c:	2308      	movs	r3, #8
 800e31e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e320:	2302      	movs	r3, #2
 800e322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e324:	2300      	movs	r3, #0
 800e326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e328:	2300      	movs	r3, #0
 800e32a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e32c:	2305      	movs	r3, #5
 800e32e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e330:	f107 0314 	add.w	r3, r7, #20
 800e334:	4619      	mov	r1, r3
 800e336:	4837      	ldr	r0, [pc, #220]	; (800e414 <HAL_I2S_MspInit+0x170>)
 800e338:	f7f3 ff40 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800e33c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e342:	2302      	movs	r3, #2
 800e344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e346:	2300      	movs	r3, #0
 800e348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e34a:	2300      	movs	r3, #0
 800e34c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e34e:	2305      	movs	r3, #5
 800e350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e352:	f107 0314 	add.w	r3, r7, #20
 800e356:	4619      	mov	r1, r3
 800e358:	482f      	ldr	r0, [pc, #188]	; (800e418 <HAL_I2S_MspInit+0x174>)
 800e35a:	f7f3 ff2f 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e35e:	2340      	movs	r3, #64	; 0x40
 800e360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e362:	2302      	movs	r3, #2
 800e364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e366:	2300      	movs	r3, #0
 800e368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800e36a:	2301      	movs	r3, #1
 800e36c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e36e:	2305      	movs	r3, #5
 800e370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e372:	f107 0314 	add.w	r3, r7, #20
 800e376:	4619      	mov	r1, r3
 800e378:	4826      	ldr	r0, [pc, #152]	; (800e414 <HAL_I2S_MspInit+0x170>)
 800e37a:	f7f3 ff1f 	bl	80021bc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800e37e:	4b27      	ldr	r3, [pc, #156]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e380:	4a27      	ldr	r2, [pc, #156]	; (800e420 <HAL_I2S_MspInit+0x17c>)
 800e382:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800e384:	4b25      	ldr	r3, [pc, #148]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e386:	2200      	movs	r2, #0
 800e388:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e38a:	4b24      	ldr	r3, [pc, #144]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e38c:	2240      	movs	r2, #64	; 0x40
 800e38e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e390:	4b22      	ldr	r3, [pc, #136]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e392:	2200      	movs	r2, #0
 800e394:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e396:	4b21      	ldr	r3, [pc, #132]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e39c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e39e:	4b1f      	ldr	r3, [pc, #124]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3a4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e3a6:	4b1d      	ldr	r3, [pc, #116]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e3ac:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800e3ae:	4b1b      	ldr	r3, [pc, #108]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800e3b4:	4b19      	ldr	r3, [pc, #100]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e3ba:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e3bc:	4b17      	ldr	r3, [pc, #92]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3be:	2204      	movs	r2, #4
 800e3c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e3c2:	4b16      	ldr	r3, [pc, #88]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3c4:	2203      	movs	r2, #3
 800e3c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_INC8;
 800e3c8:	4b14      	ldr	r3, [pc, #80]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e3ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800e3d0:	4b12      	ldr	r3, [pc, #72]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800e3d6:	4811      	ldr	r0, [pc, #68]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3d8:	f7f3 fb12 	bl	8001a00 <HAL_DMA_Init>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d001      	beq.n	800e3e6 <HAL_I2S_MspInit+0x142>
    {
      Error_Handler();
 800e3e2:	f7ff fd01 	bl	800dde8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	4a0c      	ldr	r2, [pc, #48]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3ea:	639a      	str	r2, [r3, #56]	; 0x38
 800e3ec:	4a0b      	ldr	r2, [pc, #44]	; (800e41c <HAL_I2S_MspInit+0x178>)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	2100      	movs	r1, #0
 800e3f6:	2024      	movs	r0, #36	; 0x24
 800e3f8:	f7f3 facb 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800e3fc:	2024      	movs	r0, #36	; 0x24
 800e3fe:	f7f3 fae4 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e402:	bf00      	nop
 800e404:	3728      	adds	r7, #40	; 0x28
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	40003800 	.word	0x40003800
 800e410:	40023800 	.word	0x40023800
 800e414:	40020800 	.word	0x40020800
 800e418:	40020400 	.word	0x40020400
 800e41c:	20001128 	.word	0x20001128
 800e420:	40026070 	.word	0x40026070

0800e424 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b08a      	sub	sp, #40	; 0x28
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e42c:	f107 0314 	add.w	r3, r7, #20
 800e430:	2200      	movs	r2, #0
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	605a      	str	r2, [r3, #4]
 800e436:	609a      	str	r2, [r3, #8]
 800e438:	60da      	str	r2, [r3, #12]
 800e43a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4a28      	ldr	r2, [pc, #160]	; (800e4e4 <HAL_SD_MspInit+0xc0>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d14a      	bne.n	800e4dc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800e446:	2300      	movs	r3, #0
 800e448:	613b      	str	r3, [r7, #16]
 800e44a:	4b27      	ldr	r3, [pc, #156]	; (800e4e8 <HAL_SD_MspInit+0xc4>)
 800e44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e44e:	4a26      	ldr	r2, [pc, #152]	; (800e4e8 <HAL_SD_MspInit+0xc4>)
 800e450:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e454:	6453      	str	r3, [r2, #68]	; 0x44
 800e456:	4b24      	ldr	r3, [pc, #144]	; (800e4e8 <HAL_SD_MspInit+0xc4>)
 800e458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e45a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e45e:	613b      	str	r3, [r7, #16]
 800e460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e462:	2300      	movs	r3, #0
 800e464:	60fb      	str	r3, [r7, #12]
 800e466:	4b20      	ldr	r3, [pc, #128]	; (800e4e8 <HAL_SD_MspInit+0xc4>)
 800e468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e46a:	4a1f      	ldr	r2, [pc, #124]	; (800e4e8 <HAL_SD_MspInit+0xc4>)
 800e46c:	f043 0304 	orr.w	r3, r3, #4
 800e470:	6313      	str	r3, [r2, #48]	; 0x30
 800e472:	4b1d      	ldr	r3, [pc, #116]	; (800e4e8 <HAL_SD_MspInit+0xc4>)
 800e474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e476:	f003 0304 	and.w	r3, r3, #4
 800e47a:	60fb      	str	r3, [r7, #12]
 800e47c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e47e:	2300      	movs	r3, #0
 800e480:	60bb      	str	r3, [r7, #8]
 800e482:	4b19      	ldr	r3, [pc, #100]	; (800e4e8 <HAL_SD_MspInit+0xc4>)
 800e484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e486:	4a18      	ldr	r2, [pc, #96]	; (800e4e8 <HAL_SD_MspInit+0xc4>)
 800e488:	f043 0308 	orr.w	r3, r3, #8
 800e48c:	6313      	str	r3, [r2, #48]	; 0x30
 800e48e:	4b16      	ldr	r3, [pc, #88]	; (800e4e8 <HAL_SD_MspInit+0xc4>)
 800e490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e492:	f003 0308 	and.w	r3, r3, #8
 800e496:	60bb      	str	r3, [r7, #8]
 800e498:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800e49a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800e49e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4a0:	2302      	movs	r3, #2
 800e4a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4a8:	2303      	movs	r3, #3
 800e4aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e4ac:	230c      	movs	r3, #12
 800e4ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e4b0:	f107 0314 	add.w	r3, r7, #20
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	480d      	ldr	r0, [pc, #52]	; (800e4ec <HAL_SD_MspInit+0xc8>)
 800e4b8:	f7f3 fe80 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e4bc:	2304      	movs	r3, #4
 800e4be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4c8:	2303      	movs	r3, #3
 800e4ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e4cc:	230c      	movs	r3, #12
 800e4ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e4d0:	f107 0314 	add.w	r3, r7, #20
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4806      	ldr	r0, [pc, #24]	; (800e4f0 <HAL_SD_MspInit+0xcc>)
 800e4d8:	f7f3 fe70 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800e4dc:	bf00      	nop
 800e4de:	3728      	adds	r7, #40	; 0x28
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	40012c00 	.word	0x40012c00
 800e4e8:	40023800 	.word	0x40023800
 800e4ec:	40020800 	.word	0x40020800
 800e4f0:	40020c00 	.word	0x40020c00

0800e4f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a0e      	ldr	r2, [pc, #56]	; (800e53c <HAL_TIM_Base_MspInit+0x48>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d115      	bne.n	800e532 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e506:	2300      	movs	r3, #0
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	4b0d      	ldr	r3, [pc, #52]	; (800e540 <HAL_TIM_Base_MspInit+0x4c>)
 800e50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e50e:	4a0c      	ldr	r2, [pc, #48]	; (800e540 <HAL_TIM_Base_MspInit+0x4c>)
 800e510:	f043 0301 	orr.w	r3, r3, #1
 800e514:	6453      	str	r3, [r2, #68]	; 0x44
 800e516:	4b0a      	ldr	r3, [pc, #40]	; (800e540 <HAL_TIM_Base_MspInit+0x4c>)
 800e518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e51a:	f003 0301 	and.w	r3, r3, #1
 800e51e:	60fb      	str	r3, [r7, #12]
 800e520:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800e522:	2200      	movs	r2, #0
 800e524:	2100      	movs	r1, #0
 800e526:	2019      	movs	r0, #25
 800e528:	f7f3 fa33 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e52c:	2019      	movs	r0, #25
 800e52e:	f7f3 fa4c 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800e532:	bf00      	nop
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	40010000 	.word	0x40010000
 800e540:	40023800 	.word	0x40023800

0800e544 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a22      	ldr	r2, [pc, #136]	; (800e5dc <HAL_TIM_PWM_MspInit+0x98>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d13d      	bne.n	800e5d2 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e556:	2300      	movs	r3, #0
 800e558:	60fb      	str	r3, [r7, #12]
 800e55a:	4b21      	ldr	r3, [pc, #132]	; (800e5e0 <HAL_TIM_PWM_MspInit+0x9c>)
 800e55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e55e:	4a20      	ldr	r2, [pc, #128]	; (800e5e0 <HAL_TIM_PWM_MspInit+0x9c>)
 800e560:	f043 0302 	orr.w	r3, r3, #2
 800e564:	6413      	str	r3, [r2, #64]	; 0x40
 800e566:	4b1e      	ldr	r3, [pc, #120]	; (800e5e0 <HAL_TIM_PWM_MspInit+0x9c>)
 800e568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e56a:	f003 0302 	and.w	r3, r3, #2
 800e56e:	60fb      	str	r3, [r7, #12]
 800e570:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800e572:	4b1c      	ldr	r3, [pc, #112]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e574:	4a1c      	ldr	r2, [pc, #112]	; (800e5e8 <HAL_TIM_PWM_MspInit+0xa4>)
 800e576:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800e578:	4b1a      	ldr	r3, [pc, #104]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e57a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800e57e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e580:	4b18      	ldr	r3, [pc, #96]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e582:	2240      	movs	r2, #64	; 0x40
 800e584:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e586:	4b17      	ldr	r3, [pc, #92]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e588:	2200      	movs	r2, #0
 800e58a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800e58c:	4b15      	ldr	r3, [pc, #84]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e58e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e592:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e594:	4b13      	ldr	r3, [pc, #76]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e59a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e59c:	4b11      	ldr	r3, [pc, #68]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e59e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e5a2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800e5a4:	4b0f      	ldr	r3, [pc, #60]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800e5aa:	4b0e      	ldr	r3, [pc, #56]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e5b0:	4b0c      	ldr	r3, [pc, #48]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800e5b6:	480b      	ldr	r0, [pc, #44]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e5b8:	f7f3 fa22 	bl	8001a00 <HAL_DMA_Init>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d001      	beq.n	800e5c6 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800e5c2:	f7ff fc11 	bl	800dde8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4a06      	ldr	r2, [pc, #24]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e5ca:	629a      	str	r2, [r3, #40]	; 0x28
 800e5cc:	4a05      	ldr	r2, [pc, #20]	; (800e5e4 <HAL_TIM_PWM_MspInit+0xa0>)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800e5d2:	bf00      	nop
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	40000400 	.word	0x40000400
 800e5e0:	40023800 	.word	0x40023800
 800e5e4:	20000fa4 	.word	0x20000fa4
 800e5e8:	40026088 	.word	0x40026088

0800e5ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b08a      	sub	sp, #40	; 0x28
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5f4:	f107 0314 	add.w	r3, r7, #20
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	601a      	str	r2, [r3, #0]
 800e5fc:	605a      	str	r2, [r3, #4]
 800e5fe:	609a      	str	r2, [r3, #8]
 800e600:	60da      	str	r2, [r3, #12]
 800e602:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a24      	ldr	r2, [pc, #144]	; (800e69c <HAL_TIM_MspPostInit+0xb0>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d11f      	bne.n	800e64e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e60e:	2300      	movs	r3, #0
 800e610:	613b      	str	r3, [r7, #16]
 800e612:	4b23      	ldr	r3, [pc, #140]	; (800e6a0 <HAL_TIM_MspPostInit+0xb4>)
 800e614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e616:	4a22      	ldr	r2, [pc, #136]	; (800e6a0 <HAL_TIM_MspPostInit+0xb4>)
 800e618:	f043 0302 	orr.w	r3, r3, #2
 800e61c:	6313      	str	r3, [r2, #48]	; 0x30
 800e61e:	4b20      	ldr	r3, [pc, #128]	; (800e6a0 <HAL_TIM_MspPostInit+0xb4>)
 800e620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e622:	f003 0302 	and.w	r3, r3, #2
 800e626:	613b      	str	r3, [r7, #16]
 800e628:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e62a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e62e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e630:	2302      	movs	r3, #2
 800e632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e634:	2300      	movs	r3, #0
 800e636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e638:	2300      	movs	r3, #0
 800e63a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e63c:	2301      	movs	r3, #1
 800e63e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e640:	f107 0314 	add.w	r3, r7, #20
 800e644:	4619      	mov	r1, r3
 800e646:	4817      	ldr	r0, [pc, #92]	; (800e6a4 <HAL_TIM_MspPostInit+0xb8>)
 800e648:	f7f3 fdb8 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e64c:	e022      	b.n	800e694 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a15      	ldr	r2, [pc, #84]	; (800e6a8 <HAL_TIM_MspPostInit+0xbc>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d11d      	bne.n	800e694 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e658:	2300      	movs	r3, #0
 800e65a:	60fb      	str	r3, [r7, #12]
 800e65c:	4b10      	ldr	r3, [pc, #64]	; (800e6a0 <HAL_TIM_MspPostInit+0xb4>)
 800e65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e660:	4a0f      	ldr	r2, [pc, #60]	; (800e6a0 <HAL_TIM_MspPostInit+0xb4>)
 800e662:	f043 0301 	orr.w	r3, r3, #1
 800e666:	6313      	str	r3, [r2, #48]	; 0x30
 800e668:	4b0d      	ldr	r3, [pc, #52]	; (800e6a0 <HAL_TIM_MspPostInit+0xb4>)
 800e66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e66c:	f003 0301 	and.w	r3, r3, #1
 800e670:	60fb      	str	r3, [r7, #12]
 800e672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800e674:	2380      	movs	r3, #128	; 0x80
 800e676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e678:	2302      	movs	r3, #2
 800e67a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e67c:	2300      	movs	r3, #0
 800e67e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e680:	2300      	movs	r3, #0
 800e682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e684:	2302      	movs	r3, #2
 800e686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e688:	f107 0314 	add.w	r3, r7, #20
 800e68c:	4619      	mov	r1, r3
 800e68e:	4807      	ldr	r0, [pc, #28]	; (800e6ac <HAL_TIM_MspPostInit+0xc0>)
 800e690:	f7f3 fd94 	bl	80021bc <HAL_GPIO_Init>
}
 800e694:	bf00      	nop
 800e696:	3728      	adds	r7, #40	; 0x28
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	40010000 	.word	0x40010000
 800e6a0:	40023800 	.word	0x40023800
 800e6a4:	40020400 	.word	0x40020400
 800e6a8:	40000400 	.word	0x40000400
 800e6ac:	40020000 	.word	0x40020000

0800e6b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e6b4:	bf00      	nop
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr

0800e6be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e6be:	b480      	push	{r7}
 800e6c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e6c2:	e7fe      	b.n	800e6c2 <HardFault_Handler+0x4>

0800e6c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e6c8:	e7fe      	b.n	800e6c8 <MemManage_Handler+0x4>

0800e6ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e6ce:	e7fe      	b.n	800e6ce <BusFault_Handler+0x4>

0800e6d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e6d4:	e7fe      	b.n	800e6d4 <UsageFault_Handler+0x4>

0800e6d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e6d6:	b480      	push	{r7}
 800e6d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e6da:	bf00      	nop
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e6e8:	bf00      	nop
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e6f2:	b480      	push	{r7}
 800e6f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e6f6:	bf00      	nop
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e704:	f7f2 fc5c 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e708:	bf00      	nop
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800e710:	4802      	ldr	r0, [pc, #8]	; (800e71c <DMA1_Stream4_IRQHandler+0x10>)
 800e712:	f7f3 faeb 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800e716:	bf00      	nop
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	20001128 	.word	0x20001128

0800e720 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800e724:	4802      	ldr	r0, [pc, #8]	; (800e730 <DMA1_Stream5_IRQHandler+0x10>)
 800e726:	f7f3 fae1 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800e72a:	bf00      	nop
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	20000fa4 	.word	0x20000fa4

0800e734 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ledRefresh = 1;
 800e738:	4b03      	ldr	r3, [pc, #12]	; (800e748 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800e73a:	2201      	movs	r2, #1
 800e73c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e73e:	4803      	ldr	r0, [pc, #12]	; (800e74c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800e740:	f7f7 fec2 	bl	80064c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e744:	bf00      	nop
 800e746:	bd80      	pop	{r7, pc}
 800e748:	2000011c 	.word	0x2000011c
 800e74c:	20001004 	.word	0x20001004

0800e750 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800e754:	4802      	ldr	r0, [pc, #8]	; (800e760 <SPI2_IRQHandler+0x10>)
 800e756:	f7f4 fa8d 	bl	8002c74 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800e75a:	bf00      	nop
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20001188 	.word	0x20001188

0800e764 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800e768:	4802      	ldr	r0, [pc, #8]	; (800e774 <OTG_FS_IRQHandler+0x10>)
 800e76a:	f7f4 ffcd 	bl	8003708 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800e76e:	bf00      	nop
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	200056d4 	.word	0x200056d4

0800e778 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e784:	2300      	movs	r3, #0
 800e786:	617b      	str	r3, [r7, #20]
 800e788:	e00a      	b.n	800e7a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e78a:	f3af 8000 	nop.w
 800e78e:	4601      	mov	r1, r0
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	1c5a      	adds	r2, r3, #1
 800e794:	60ba      	str	r2, [r7, #8]
 800e796:	b2ca      	uxtb	r2, r1
 800e798:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	3301      	adds	r3, #1
 800e79e:	617b      	str	r3, [r7, #20]
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	dbf0      	blt.n	800e78a <_read+0x12>
	}

return len;
 800e7a8:	687b      	ldr	r3, [r7, #4]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3718      	adds	r7, #24
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <_close>:
}



int _close(int file)
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b083      	sub	sp, #12
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
	return -1;
 800e7ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	370c      	adds	r7, #12
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e7ca:	b480      	push	{r7}
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e7da:	605a      	str	r2, [r3, #4]
	return 0;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	370c      	adds	r7, #12
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr

0800e7ea <_isatty>:

int _isatty(int file)
{
 800e7ea:	b480      	push	{r7}
 800e7ec:	b083      	sub	sp, #12
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
	return 1;
 800e7f2:	2301      	movs	r3, #1
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e800:	b480      	push	{r7}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]
	return 0;
 800e80c:	2300      	movs	r3, #0
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3714      	adds	r7, #20
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
	...

0800e81c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]

	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e824:	4b11      	ldr	r3, [pc, #68]	; (800e86c <_sbrk+0x50>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d102      	bne.n	800e832 <_sbrk+0x16>
		heap_end = &end;
 800e82c:	4b0f      	ldr	r3, [pc, #60]	; (800e86c <_sbrk+0x50>)
 800e82e:	4a10      	ldr	r2, [pc, #64]	; (800e870 <_sbrk+0x54>)
 800e830:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e832:	4b0e      	ldr	r3, [pc, #56]	; (800e86c <_sbrk+0x50>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e838:	4b0c      	ldr	r3, [pc, #48]	; (800e86c <_sbrk+0x50>)
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4413      	add	r3, r2
 800e840:	466a      	mov	r2, sp
 800e842:	4293      	cmp	r3, r2
 800e844:	d907      	bls.n	800e856 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e846:	f000 fe23 	bl	800f490 <__errno>
 800e84a:	4602      	mov	r2, r0
 800e84c:	230c      	movs	r3, #12
 800e84e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e850:	f04f 33ff 	mov.w	r3, #4294967295
 800e854:	e006      	b.n	800e864 <_sbrk+0x48>
	}

	heap_end += incr;
 800e856:	4b05      	ldr	r3, [pc, #20]	; (800e86c <_sbrk+0x50>)
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4413      	add	r3, r2
 800e85e:	4a03      	ldr	r2, [pc, #12]	; (800e86c <_sbrk+0x50>)
 800e860:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e862:	68fb      	ldr	r3, [r7, #12]

}
 800e864:	4618      	mov	r0, r3
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	20000460 	.word	0x20000460
 800e870:	20005ce0 	.word	0x20005ce0

0800e874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e874:	b480      	push	{r7}
 800e876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e878:	4b08      	ldr	r3, [pc, #32]	; (800e89c <SystemInit+0x28>)
 800e87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e87e:	4a07      	ldr	r2, [pc, #28]	; (800e89c <SystemInit+0x28>)
 800e880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e888:	4b04      	ldr	r3, [pc, #16]	; (800e89c <SystemInit+0x28>)
 800e88a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e88e:	609a      	str	r2, [r3, #8]
#endif
}
 800e890:	bf00      	nop
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr
 800e89a:	bf00      	nop
 800e89c:	e000ed00 	.word	0xe000ed00

0800e8a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	4912      	ldr	r1, [pc, #72]	; (800e8f0 <MX_USB_DEVICE_Init+0x50>)
 800e8a8:	4812      	ldr	r0, [pc, #72]	; (800e8f4 <MX_USB_DEVICE_Init+0x54>)
 800e8aa:	f7fb fa21 	bl	8009cf0 <USBD_Init>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d001      	beq.n	800e8b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8b4:	f7ff fa98 	bl	800dde8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800e8b8:	490f      	ldr	r1, [pc, #60]	; (800e8f8 <MX_USB_DEVICE_Init+0x58>)
 800e8ba:	480e      	ldr	r0, [pc, #56]	; (800e8f4 <MX_USB_DEVICE_Init+0x54>)
 800e8bc:	f7fb fa4e 	bl	8009d5c <USBD_RegisterClass>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d001      	beq.n	800e8ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8c6:	f7ff fa8f 	bl	800dde8 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800e8ca:	490c      	ldr	r1, [pc, #48]	; (800e8fc <MX_USB_DEVICE_Init+0x5c>)
 800e8cc:	4809      	ldr	r0, [pc, #36]	; (800e8f4 <MX_USB_DEVICE_Init+0x54>)
 800e8ce:	f7fb f86d 	bl	80099ac <USBD_AUDIO_RegisterInterface>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d001      	beq.n	800e8dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e8d8:	f7ff fa86 	bl	800dde8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e8dc:	4805      	ldr	r0, [pc, #20]	; (800e8f4 <MX_USB_DEVICE_Init+0x54>)
 800e8de:	f7fb fa5e 	bl	8009d9e <USBD_Start>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e8e8:	f7ff fa7e 	bl	800dde8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e8ec:	bf00      	nop
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	20000148 	.word	0x20000148
 800e8f4:	20005404 	.word	0x20005404
 800e8f8:	20000008 	.word	0x20000008
 800e8fc:	2000012c 	.word	0x2000012c

0800e900 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, 8192);
  return (USBD_OK);
 800e90c:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b082      	sub	sp, #8
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  AudioPlay_Stop();
 800e922:	f7fe fce7 	bl	800d2f4 <AudioPlay_Stop>
	return (USBD_OK);
 800e926:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	4613      	mov	r3, r2
 800e93c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	//if (packetReceived>=-80)  {}//packetReceived-=80;
	packetReceived-=size;
 800e93e:	4b25      	ldr	r3, [pc, #148]	; (800e9d4 <AUDIO_AudioCmd_FS+0xa4>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	1ad3      	subs	r3, r2, r3
 800e948:	461a      	mov	r2, r3
 800e94a:	4b22      	ldr	r3, [pc, #136]	; (800e9d4 <AUDIO_AudioCmd_FS+0xa4>)
 800e94c:	601a      	str	r2, [r3, #0]
	if (packetReceived<-(2*7680) && playing)
 800e94e:	4b21      	ldr	r3, [pc, #132]	; (800e9d4 <AUDIO_AudioCmd_FS+0xa4>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f513 5f70 	cmn.w	r3, #15360	; 0x3c00
 800e956:	da11      	bge.n	800e97c <AUDIO_AudioCmd_FS+0x4c>
 800e958:	4b1f      	ldr	r3, [pc, #124]	; (800e9d8 <AUDIO_AudioCmd_FS+0xa8>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00d      	beq.n	800e97c <AUDIO_AudioCmd_FS+0x4c>
	{	memset(pbuf,0,AUDIO_TOTAL_BUF_SIZE);
 800e960:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800e964:	2100      	movs	r1, #0
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f000 fdcc 	bl	800f504 <memset>
		packetReceived=0;
 800e96c:	4b19      	ldr	r3, [pc, #100]	; (800e9d4 <AUDIO_AudioCmd_FS+0xa4>)
 800e96e:	2200      	movs	r2, #0
 800e970:	601a      	str	r2, [r3, #0]
		cmd=AUDIO_CMD_STOP;
 800e972:	2304      	movs	r3, #4
 800e974:	71fb      	strb	r3, [r7, #7]
		playing=0;
 800e976:	4b18      	ldr	r3, [pc, #96]	; (800e9d8 <AUDIO_AudioCmd_FS+0xa8>)
 800e978:	2200      	movs	r2, #0
 800e97a:	601a      	str	r2, [r3, #0]
	}

	//if (packetReceived<0) return (USBD_OK);;
	switch(cmd)
 800e97c:	79fb      	ldrb	r3, [r7, #7]
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d011      	beq.n	800e9a6 <AUDIO_AudioCmd_FS+0x76>
 800e982:	2b04      	cmp	r3, #4
 800e984:	d01e      	beq.n	800e9c4 <AUDIO_AudioCmd_FS+0x94>
 800e986:	2b01      	cmp	r3, #1
 800e988:	d11f      	bne.n	800e9ca <AUDIO_AudioCmd_FS+0x9a>
  {
    case AUDIO_CMD_START:
    	packetReceived-=2*size;
 800e98a:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <AUDIO_AudioCmd_FS+0xa4>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	461a      	mov	r2, r3
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	005b      	lsls	r3, r3, #1
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	461a      	mov	r2, r3
 800e998:	4b0e      	ldr	r3, [pc, #56]	; (800e9d4 <AUDIO_AudioCmd_FS+0xa4>)
 800e99a:	601a      	str	r2, [r3, #0]
    	//if (packetReceived>=-80)
    	AudioPlay_Play((uint16_t*) pbuf, size);
 800e99c:	68b9      	ldr	r1, [r7, #8]
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f7fe fc86 	bl	800d2b0 <AudioPlay_Play>
    	//else AudioPlay_Play(nulls, size);
	break;
 800e9a4:	e011      	b.n	800e9ca <AUDIO_AudioCmd_FS+0x9a>
    case AUDIO_CMD_PLAY:
    	packetReceived-=size;
 800e9a6:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <AUDIO_AudioCmd_FS+0xa4>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <AUDIO_AudioCmd_FS+0xa4>)
 800e9b4:	601a      	str	r2, [r3, #0]
    	//if (packetReceived>=-80)
    	AudioPlay_ChangeBuffer((uint16_t*) pbuf, size);
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f7fe fcad 	bl	800d31c <AudioPlay_ChangeBuffer>
    	//else AudioPlay_ChangeBuffer(nulls, size);
    break;	
 800e9c2:	e002      	b.n	800e9ca <AUDIO_AudioCmd_FS+0x9a>
    case AUDIO_CMD_STOP:
    	AudioPlay_Stop();
 800e9c4:	f7fe fc96 	bl	800d2f4 <AudioPlay_Stop>
    	break;
 800e9c8:	bf00      	nop

  }
  //UNUSED(pbuf);
  //UNUSED(size);
 // UNUSED(cmd);
	return (USBD_OK);
 800e9ca:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3710      	adds	r7, #16
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	20000464 	.word	0x20000464
 800e9d8:	20000468 	.word	0x20000468

0800e9dc <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  //UNUSED(vol);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, vol*64);
  return (USBD_OK);
 800e9e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, 4096);
  return (USBD_OK);
 800e9fe:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	4613      	mov	r3, r2
 800ea18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  //UNUSED(pbuf);
  //UNUSED(size);
  UNUSED(cmd);
  packetReceived+=size;
 800ea1a:	4b07      	ldr	r3, [pc, #28]	; (800ea38 <AUDIO_PeriodicTC_FS+0x2c>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	4413      	add	r3, r2
 800ea24:	461a      	mov	r2, r3
 800ea26:	4b04      	ldr	r3, [pc, #16]	; (800ea38 <AUDIO_PeriodicTC_FS+0x2c>)
 800ea28:	601a      	str	r2, [r3, #0]
  //HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) pbuf , size);
  return (USBD_OK);
 800ea2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr
 800ea38:	20000464 	.word	0x20000464

0800ea3c <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800ea40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	af00      	add	r7, sp, #0
	/*if (packetReceived<=0)
			{
				packetReceived=0;
				AudioPlay_Stop();
			} else*/
	USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 800ea50:	2101      	movs	r1, #1
 800ea52:	4802      	ldr	r0, [pc, #8]	; (800ea5c <HalfTransfer_CallBack_FS+0x10>)
 800ea54:	f7fa fdda 	bl	800960c <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 800ea58:	bf00      	nop
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	20005404 	.word	0x20005404

0800ea60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b08a      	sub	sp, #40	; 0x28
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea68:	f107 0314 	add.w	r3, r7, #20
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	601a      	str	r2, [r3, #0]
 800ea70:	605a      	str	r2, [r3, #4]
 800ea72:	609a      	str	r2, [r3, #8]
 800ea74:	60da      	str	r2, [r3, #12]
 800ea76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea80:	d13a      	bne.n	800eaf8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea82:	2300      	movs	r3, #0
 800ea84:	613b      	str	r3, [r7, #16]
 800ea86:	4b1e      	ldr	r3, [pc, #120]	; (800eb00 <HAL_PCD_MspInit+0xa0>)
 800ea88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea8a:	4a1d      	ldr	r2, [pc, #116]	; (800eb00 <HAL_PCD_MspInit+0xa0>)
 800ea8c:	f043 0301 	orr.w	r3, r3, #1
 800ea90:	6313      	str	r3, [r2, #48]	; 0x30
 800ea92:	4b1b      	ldr	r3, [pc, #108]	; (800eb00 <HAL_PCD_MspInit+0xa0>)
 800ea94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	613b      	str	r3, [r7, #16]
 800ea9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ea9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eaa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eaa4:	2302      	movs	r3, #2
 800eaa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eaac:	2303      	movs	r3, #3
 800eaae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eab0:	230a      	movs	r3, #10
 800eab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eab4:	f107 0314 	add.w	r3, r7, #20
 800eab8:	4619      	mov	r1, r3
 800eaba:	4812      	ldr	r0, [pc, #72]	; (800eb04 <HAL_PCD_MspInit+0xa4>)
 800eabc:	f7f3 fb7e 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eac0:	4b0f      	ldr	r3, [pc, #60]	; (800eb00 <HAL_PCD_MspInit+0xa0>)
 800eac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac4:	4a0e      	ldr	r2, [pc, #56]	; (800eb00 <HAL_PCD_MspInit+0xa0>)
 800eac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaca:	6353      	str	r3, [r2, #52]	; 0x34
 800eacc:	2300      	movs	r3, #0
 800eace:	60fb      	str	r3, [r7, #12]
 800ead0:	4b0b      	ldr	r3, [pc, #44]	; (800eb00 <HAL_PCD_MspInit+0xa0>)
 800ead2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ead4:	4a0a      	ldr	r2, [pc, #40]	; (800eb00 <HAL_PCD_MspInit+0xa0>)
 800ead6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eada:	6453      	str	r3, [r2, #68]	; 0x44
 800eadc:	4b08      	ldr	r3, [pc, #32]	; (800eb00 <HAL_PCD_MspInit+0xa0>)
 800eade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eae4:	60fb      	str	r3, [r7, #12]
 800eae6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eae8:	2200      	movs	r2, #0
 800eaea:	2100      	movs	r1, #0
 800eaec:	2043      	movs	r0, #67	; 0x43
 800eaee:	f7f2 ff50 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eaf2:	2043      	movs	r0, #67	; 0x43
 800eaf4:	f7f2 ff69 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eaf8:	bf00      	nop
 800eafa:	3728      	adds	r7, #40	; 0x28
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	40023800 	.word	0x40023800
 800eb04:	40020000 	.word	0x40020000

0800eb08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4610      	mov	r0, r2
 800eb20:	f7fb f988 	bl	8009e34 <USBD_LL_SetupStage>
}
 800eb24:	bf00      	nop
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800eb3e:	78fa      	ldrb	r2, [r7, #3]
 800eb40:	6879      	ldr	r1, [r7, #4]
 800eb42:	4613      	mov	r3, r2
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	1a9b      	subs	r3, r3, r2
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	440b      	add	r3, r1
 800eb4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	78fb      	ldrb	r3, [r7, #3]
 800eb54:	4619      	mov	r1, r3
 800eb56:	f7fb f9c0 	bl	8009eda <USBD_LL_DataOutStage>
}
 800eb5a:	bf00      	nop
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b082      	sub	sp, #8
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800eb74:	78fa      	ldrb	r2, [r7, #3]
 800eb76:	6879      	ldr	r1, [r7, #4]
 800eb78:	4613      	mov	r3, r2
 800eb7a:	00db      	lsls	r3, r3, #3
 800eb7c:	1a9b      	subs	r3, r3, r2
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	440b      	add	r3, r1
 800eb82:	3348      	adds	r3, #72	; 0x48
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	78fb      	ldrb	r3, [r7, #3]
 800eb88:	4619      	mov	r1, r3
 800eb8a:	f7fb fa09 	bl	8009fa0 <USBD_LL_DataInStage>
}
 800eb8e:	bf00      	nop
 800eb90:	3708      	adds	r7, #8
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b082      	sub	sp, #8
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fb fb0d 	bl	800a1c4 <USBD_LL_SOF>
}
 800ebaa:	bf00      	nop
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b084      	sub	sp, #16
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	68db      	ldr	r3, [r3, #12]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d102      	bne.n	800ebcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	73fb      	strb	r3, [r7, #15]
 800ebca:	e008      	b.n	800ebde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	2b02      	cmp	r3, #2
 800ebd2:	d102      	bne.n	800ebda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	73fb      	strb	r3, [r7, #15]
 800ebd8:	e001      	b.n	800ebde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ebda:	f7ff f905 	bl	800dde8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ebe4:	7bfa      	ldrb	r2, [r7, #15]
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fb fab0 	bl	800a14e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7fb fa69 	bl	800a0cc <USBD_LL_Reset>
}
 800ebfa:	bf00      	nop
 800ebfc:	3710      	adds	r7, #16
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
	...

0800ec04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fb faab 	bl	800a16e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	6812      	ldr	r2, [r2, #0]
 800ec26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec2a:	f043 0301 	orr.w	r3, r3, #1
 800ec2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6a1b      	ldr	r3, [r3, #32]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d005      	beq.n	800ec44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec38:	4b04      	ldr	r3, [pc, #16]	; (800ec4c <HAL_PCD_SuspendCallback+0x48>)
 800ec3a:	691b      	ldr	r3, [r3, #16]
 800ec3c:	4a03      	ldr	r2, [pc, #12]	; (800ec4c <HAL_PCD_SuspendCallback+0x48>)
 800ec3e:	f043 0306 	orr.w	r3, r3, #6
 800ec42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ec44:	bf00      	nop
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	e000ed00 	.word	0xe000ed00

0800ec50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fb fa9a 	bl	800a198 <USBD_LL_Resume>
}
 800ec64:	bf00      	nop
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	460b      	mov	r3, r1
 800ec76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ec7e:	78fa      	ldrb	r2, [r7, #3]
 800ec80:	4611      	mov	r1, r2
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fb fac5 	bl	800a212 <USBD_LL_IsoOUTIncomplete>
}
 800ec88:	bf00      	nop
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	460b      	mov	r3, r1
 800ec9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eca2:	78fa      	ldrb	r2, [r7, #3]
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fb faa6 	bl	800a1f8 <USBD_LL_IsoINIncomplete>
}
 800ecac:	bf00      	nop
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fb fab2 	bl	800a22c <USBD_LL_DevConnected>
}
 800ecc8:	bf00      	nop
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fb faaf 	bl	800a242 <USBD_LL_DevDisconnected>
}
 800ece4:	bf00      	nop
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d13c      	bne.n	800ed76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ecfc:	4a20      	ldr	r2, [pc, #128]	; (800ed80 <USBD_LL_Init+0x94>)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4a1e      	ldr	r2, [pc, #120]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed0c:	4b1c      	ldr	r3, [pc, #112]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ed12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ed14:	4b1a      	ldr	r3, [pc, #104]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed16:	2204      	movs	r2, #4
 800ed18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ed1a:	4b19      	ldr	r3, [pc, #100]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed1c:	2202      	movs	r2, #2
 800ed1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ed20:	4b17      	ldr	r3, [pc, #92]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed22:	2200      	movs	r2, #0
 800ed24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ed26:	4b16      	ldr	r3, [pc, #88]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed28:	2202      	movs	r2, #2
 800ed2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ed2c:	4b14      	ldr	r3, [pc, #80]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed2e:	2201      	movs	r2, #1
 800ed30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ed32:	4b13      	ldr	r3, [pc, #76]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ed38:	4b11      	ldr	r3, [pc, #68]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ed3e:	4b10      	ldr	r3, [pc, #64]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed40:	2200      	movs	r2, #0
 800ed42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ed44:	4b0e      	ldr	r3, [pc, #56]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed46:	2200      	movs	r2, #0
 800ed48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ed4a:	480d      	ldr	r0, [pc, #52]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed4c:	f7f4 fb8c 	bl	8003468 <HAL_PCD_Init>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ed56:	f7ff f847 	bl	800dde8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ed5a:	2180      	movs	r1, #128	; 0x80
 800ed5c:	4808      	ldr	r0, [pc, #32]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed5e:	f7f5 fcea 	bl	8004736 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ed62:	2240      	movs	r2, #64	; 0x40
 800ed64:	2100      	movs	r1, #0
 800ed66:	4806      	ldr	r0, [pc, #24]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed68:	f7f5 fc9e 	bl	80046a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ed6c:	2280      	movs	r2, #128	; 0x80
 800ed6e:	2101      	movs	r1, #1
 800ed70:	4803      	ldr	r0, [pc, #12]	; (800ed80 <USBD_LL_Init+0x94>)
 800ed72:	f7f5 fc99 	bl	80046a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	200056d4 	.word	0x200056d4

0800ed84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed90:	2300      	movs	r3, #0
 800ed92:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7f4 fc81 	bl	80036a2 <HAL_PCD_Start>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f000 f92a 	bl	800f000 <USBD_Get_USB_Status>
 800edac:	4603      	mov	r3, r0
 800edae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800edb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b084      	sub	sp, #16
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
 800edc2:	4608      	mov	r0, r1
 800edc4:	4611      	mov	r1, r2
 800edc6:	461a      	mov	r2, r3
 800edc8:	4603      	mov	r3, r0
 800edca:	70fb      	strb	r3, [r7, #3]
 800edcc:	460b      	mov	r3, r1
 800edce:	70bb      	strb	r3, [r7, #2]
 800edd0:	4613      	mov	r3, r2
 800edd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edd4:	2300      	movs	r3, #0
 800edd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edd8:	2300      	movs	r3, #0
 800edda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ede2:	78bb      	ldrb	r3, [r7, #2]
 800ede4:	883a      	ldrh	r2, [r7, #0]
 800ede6:	78f9      	ldrb	r1, [r7, #3]
 800ede8:	f7f5 f865 	bl	8003eb6 <HAL_PCD_EP_Open>
 800edec:	4603      	mov	r3, r0
 800edee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edf0:	7bfb      	ldrb	r3, [r7, #15]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f000 f904 	bl	800f000 <USBD_Get_USB_Status>
 800edf8:	4603      	mov	r3, r0
 800edfa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800edfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b084      	sub	sp, #16
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	460b      	mov	r3, r1
 800ee10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee16:	2300      	movs	r3, #0
 800ee18:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee20:	78fa      	ldrb	r2, [r7, #3]
 800ee22:	4611      	mov	r1, r2
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7f5 f8ae 	bl	8003f86 <HAL_PCD_EP_Close>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800ee2e:	7bfb      	ldrb	r3, [r7, #15]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f000 f8e5 	bl	800f000 <USBD_Get_USB_Status>
 800ee36:	4603      	mov	r3, r0
 800ee38:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800ee3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee50:	2300      	movs	r3, #0
 800ee52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee54:	2300      	movs	r3, #0
 800ee56:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee5e:	78fa      	ldrb	r2, [r7, #3]
 800ee60:	4611      	mov	r1, r2
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7f5 f986 	bl	8004174 <HAL_PCD_EP_SetStall>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee6c:	7bfb      	ldrb	r3, [r7, #15]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f000 f8c6 	bl	800f000 <USBD_Get_USB_Status>
 800ee74:	4603      	mov	r3, r0
 800ee76:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ee78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b084      	sub	sp, #16
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee92:	2300      	movs	r3, #0
 800ee94:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee9c:	78fa      	ldrb	r2, [r7, #3]
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7f5 f9cb 	bl	800423c <HAL_PCD_EP_ClrStall>
 800eea6:	4603      	mov	r3, r0
 800eea8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800eeaa:	7bfb      	ldrb	r3, [r7, #15]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f000 f8a7 	bl	800f000 <USBD_Get_USB_Status>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800eeb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	460b      	mov	r3, r1
 800eeca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eed2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800eed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	da0b      	bge.n	800eef4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800eedc:	78fb      	ldrb	r3, [r7, #3]
 800eede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eee2:	68f9      	ldr	r1, [r7, #12]
 800eee4:	4613      	mov	r3, r2
 800eee6:	00db      	lsls	r3, r3, #3
 800eee8:	1a9b      	subs	r3, r3, r2
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	440b      	add	r3, r1
 800eeee:	333e      	adds	r3, #62	; 0x3e
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	e00b      	b.n	800ef0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800eef4:	78fb      	ldrb	r3, [r7, #3]
 800eef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eefa:	68f9      	ldr	r1, [r7, #12]
 800eefc:	4613      	mov	r3, r2
 800eefe:	00db      	lsls	r3, r3, #3
 800ef00:	1a9b      	subs	r3, r3, r2
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	440b      	add	r3, r1
 800ef06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3714      	adds	r7, #20
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	460b      	mov	r3, r1
 800ef22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef32:	78fa      	ldrb	r2, [r7, #3]
 800ef34:	4611      	mov	r1, r2
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7f4 ff98 	bl	8003e6c <HAL_PCD_SetAddress>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef40:	7bfb      	ldrb	r3, [r7, #15]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f000 f85c 	bl	800f000 <USBD_Get_USB_Status>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ef4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b086      	sub	sp, #24
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	60f8      	str	r0, [r7, #12]
 800ef5e:	607a      	str	r2, [r7, #4]
 800ef60:	603b      	str	r3, [r7, #0]
 800ef62:	460b      	mov	r3, r1
 800ef64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef74:	7af9      	ldrb	r1, [r7, #11]
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	f7f5 f8b1 	bl	80040e0 <HAL_PCD_EP_Transmit>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800ef82:	7dfb      	ldrb	r3, [r7, #23]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f000 f83b 	bl	800f000 <USBD_Get_USB_Status>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800ef8e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3718      	adds	r7, #24
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b086      	sub	sp, #24
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	607a      	str	r2, [r7, #4]
 800efa2:	603b      	str	r3, [r7, #0]
 800efa4:	460b      	mov	r3, r1
 800efa6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efac:	2300      	movs	r3, #0
 800efae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800efb6:	7af9      	ldrb	r1, [r7, #11]
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	f7f5 f82d 	bl	800401a <HAL_PCD_EP_Receive>
 800efc0:	4603      	mov	r3, r0
 800efc2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800efc4:	7dfb      	ldrb	r3, [r7, #23]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 f81a 	bl	800f000 <USBD_Get_USB_Status>
 800efcc:	4603      	mov	r3, r0
 800efce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800efd0:	7dbb      	ldrb	r3, [r7, #22]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	460b      	mov	r3, r1
 800efe4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efec:	78fa      	ldrb	r2, [r7, #3]
 800efee:	4611      	mov	r1, r2
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7f5 f85d 	bl	80040b0 <HAL_PCD_EP_GetRxCount>
 800eff6:	4603      	mov	r3, r0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3708      	adds	r7, #8
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	4603      	mov	r3, r0
 800f008:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f00a:	2300      	movs	r3, #0
 800f00c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f00e:	79fb      	ldrb	r3, [r7, #7]
 800f010:	2b03      	cmp	r3, #3
 800f012:	d817      	bhi.n	800f044 <USBD_Get_USB_Status+0x44>
 800f014:	a201      	add	r2, pc, #4	; (adr r2, 800f01c <USBD_Get_USB_Status+0x1c>)
 800f016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01a:	bf00      	nop
 800f01c:	0800f02d 	.word	0x0800f02d
 800f020:	0800f033 	.word	0x0800f033
 800f024:	0800f039 	.word	0x0800f039
 800f028:	0800f03f 	.word	0x0800f03f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f02c:	2300      	movs	r3, #0
 800f02e:	73fb      	strb	r3, [r7, #15]
    break;
 800f030:	e00b      	b.n	800f04a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f032:	2303      	movs	r3, #3
 800f034:	73fb      	strb	r3, [r7, #15]
    break;
 800f036:	e008      	b.n	800f04a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f038:	2301      	movs	r3, #1
 800f03a:	73fb      	strb	r3, [r7, #15]
    break;
 800f03c:	e005      	b.n	800f04a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f03e:	2303      	movs	r3, #3
 800f040:	73fb      	strb	r3, [r7, #15]
    break;
 800f042:	e002      	b.n	800f04a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f044:	2303      	movs	r3, #3
 800f046:	73fb      	strb	r3, [r7, #15]
    break;
 800f048:	bf00      	nop
  }
  return usb_status;
 800f04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	4603      	mov	r3, r0
 800f060:	6039      	str	r1, [r7, #0]
 800f062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	2212      	movs	r2, #18
 800f068:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f06a:	4b03      	ldr	r3, [pc, #12]	; (800f078 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	370c      	adds	r7, #12
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr
 800f078:	20000164 	.word	0x20000164

0800f07c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	4603      	mov	r3, r0
 800f084:	6039      	str	r1, [r7, #0]
 800f086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	2204      	movs	r2, #4
 800f08c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f08e:	4b03      	ldr	r3, [pc, #12]	; (800f09c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f090:	4618      	mov	r0, r3
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	20000178 	.word	0x20000178

0800f0a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	6039      	str	r1, [r7, #0]
 800f0aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f0ac:	79fb      	ldrb	r3, [r7, #7]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d105      	bne.n	800f0be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f0b2:	683a      	ldr	r2, [r7, #0]
 800f0b4:	4907      	ldr	r1, [pc, #28]	; (800f0d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f0b6:	4808      	ldr	r0, [pc, #32]	; (800f0d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f0b8:	f7fb fe3f 	bl	800ad3a <USBD_GetString>
 800f0bc:	e004      	b.n	800f0c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f0be:	683a      	ldr	r2, [r7, #0]
 800f0c0:	4904      	ldr	r1, [pc, #16]	; (800f0d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f0c2:	4805      	ldr	r0, [pc, #20]	; (800f0d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f0c4:	f7fb fe39 	bl	800ad3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0c8:	4b02      	ldr	r3, [pc, #8]	; (800f0d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3708      	adds	r7, #8
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20005adc 	.word	0x20005adc
 800f0d8:	080115a8 	.word	0x080115a8

0800f0dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	6039      	str	r1, [r7, #0]
 800f0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	4904      	ldr	r1, [pc, #16]	; (800f0fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f0ec:	4804      	ldr	r0, [pc, #16]	; (800f100 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f0ee:	f7fb fe24 	bl	800ad3a <USBD_GetString>
  return USBD_StrDesc;
 800f0f2:	4b02      	ldr	r3, [pc, #8]	; (800f0fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	20005adc 	.word	0x20005adc
 800f100:	080115b4 	.word	0x080115b4

0800f104 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	4603      	mov	r3, r0
 800f10c:	6039      	str	r1, [r7, #0]
 800f10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	221a      	movs	r2, #26
 800f114:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f116:	f000 f843 	bl	800f1a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f11a:	4b02      	ldr	r3, [pc, #8]	; (800f124 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3708      	adds	r7, #8
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	2000017c 	.word	0x2000017c

0800f128 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	4603      	mov	r3, r0
 800f130:	6039      	str	r1, [r7, #0]
 800f132:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f134:	79fb      	ldrb	r3, [r7, #7]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d105      	bne.n	800f146 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	4907      	ldr	r1, [pc, #28]	; (800f15c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f13e:	4808      	ldr	r0, [pc, #32]	; (800f160 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f140:	f7fb fdfb 	bl	800ad3a <USBD_GetString>
 800f144:	e004      	b.n	800f150 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f146:	683a      	ldr	r2, [r7, #0]
 800f148:	4904      	ldr	r1, [pc, #16]	; (800f15c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f14a:	4805      	ldr	r0, [pc, #20]	; (800f160 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f14c:	f7fb fdf5 	bl	800ad3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f150:	4b02      	ldr	r3, [pc, #8]	; (800f15c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f152:	4618      	mov	r0, r3
 800f154:	3708      	adds	r7, #8
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	20005adc 	.word	0x20005adc
 800f160:	080115c4 	.word	0x080115c4

0800f164 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	4603      	mov	r3, r0
 800f16c:	6039      	str	r1, [r7, #0]
 800f16e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f170:	79fb      	ldrb	r3, [r7, #7]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d105      	bne.n	800f182 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	4907      	ldr	r1, [pc, #28]	; (800f198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f17a:	4808      	ldr	r0, [pc, #32]	; (800f19c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f17c:	f7fb fddd 	bl	800ad3a <USBD_GetString>
 800f180:	e004      	b.n	800f18c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	4904      	ldr	r1, [pc, #16]	; (800f198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f186:	4805      	ldr	r0, [pc, #20]	; (800f19c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f188:	f7fb fdd7 	bl	800ad3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f18c:	4b02      	ldr	r3, [pc, #8]	; (800f198 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3708      	adds	r7, #8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	20005adc 	.word	0x20005adc
 800f19c:	080115d4 	.word	0x080115d4

0800f1a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f1a6:	4b0f      	ldr	r3, [pc, #60]	; (800f1e4 <Get_SerialNum+0x44>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f1ac:	4b0e      	ldr	r3, [pc, #56]	; (800f1e8 <Get_SerialNum+0x48>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f1b2:	4b0e      	ldr	r3, [pc, #56]	; (800f1ec <Get_SerialNum+0x4c>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f1b8:	68fa      	ldr	r2, [r7, #12]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4413      	add	r3, r2
 800f1be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d009      	beq.n	800f1da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f1c6:	2208      	movs	r2, #8
 800f1c8:	4909      	ldr	r1, [pc, #36]	; (800f1f0 <Get_SerialNum+0x50>)
 800f1ca:	68f8      	ldr	r0, [r7, #12]
 800f1cc:	f000 f814 	bl	800f1f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f1d0:	2204      	movs	r2, #4
 800f1d2:	4908      	ldr	r1, [pc, #32]	; (800f1f4 <Get_SerialNum+0x54>)
 800f1d4:	68b8      	ldr	r0, [r7, #8]
 800f1d6:	f000 f80f 	bl	800f1f8 <IntToUnicode>
  }
}
 800f1da:	bf00      	nop
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	1fff7a10 	.word	0x1fff7a10
 800f1e8:	1fff7a14 	.word	0x1fff7a14
 800f1ec:	1fff7a18 	.word	0x1fff7a18
 800f1f0:	2000017e 	.word	0x2000017e
 800f1f4:	2000018e 	.word	0x2000018e

0800f1f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b087      	sub	sp, #28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	4613      	mov	r3, r2
 800f204:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f206:	2300      	movs	r3, #0
 800f208:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f20a:	2300      	movs	r3, #0
 800f20c:	75fb      	strb	r3, [r7, #23]
 800f20e:	e027      	b.n	800f260 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	0f1b      	lsrs	r3, r3, #28
 800f214:	2b09      	cmp	r3, #9
 800f216:	d80b      	bhi.n	800f230 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	0f1b      	lsrs	r3, r3, #28
 800f21c:	b2da      	uxtb	r2, r3
 800f21e:	7dfb      	ldrb	r3, [r7, #23]
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	4619      	mov	r1, r3
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	440b      	add	r3, r1
 800f228:	3230      	adds	r2, #48	; 0x30
 800f22a:	b2d2      	uxtb	r2, r2
 800f22c:	701a      	strb	r2, [r3, #0]
 800f22e:	e00a      	b.n	800f246 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	0f1b      	lsrs	r3, r3, #28
 800f234:	b2da      	uxtb	r2, r3
 800f236:	7dfb      	ldrb	r3, [r7, #23]
 800f238:	005b      	lsls	r3, r3, #1
 800f23a:	4619      	mov	r1, r3
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	440b      	add	r3, r1
 800f240:	3237      	adds	r2, #55	; 0x37
 800f242:	b2d2      	uxtb	r2, r2
 800f244:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	011b      	lsls	r3, r3, #4
 800f24a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f24c:	7dfb      	ldrb	r3, [r7, #23]
 800f24e:	005b      	lsls	r3, r3, #1
 800f250:	3301      	adds	r3, #1
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	4413      	add	r3, r2
 800f256:	2200      	movs	r2, #0
 800f258:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f25a:	7dfb      	ldrb	r3, [r7, #23]
 800f25c:	3301      	adds	r3, #1
 800f25e:	75fb      	strb	r3, [r7, #23]
 800f260:	7dfa      	ldrb	r2, [r7, #23]
 800f262:	79fb      	ldrb	r3, [r7, #7]
 800f264:	429a      	cmp	r2, r3
 800f266:	d3d3      	bcc.n	800f210 <IntToUnicode+0x18>
  }
}
 800f268:	bf00      	nop
 800f26a:	371c      	adds	r7, #28
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <ws2812_init>:
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
//------------------------------------------------------------------


void ws2812_init(void)
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 800f27a:	2350      	movs	r3, #80	; 0x50
 800f27c:	607b      	str	r3, [r7, #4]
 800f27e:	e007      	b.n	800f290 <ws2812_init+0x1c>
	  BUF_DMA[i] = LOW;
 800f280:	4a08      	ldr	r2, [pc, #32]	; (800f2a4 <ws2812_init+0x30>)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2119      	movs	r1, #25
 800f286:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	3301      	adds	r3, #1
 800f28e:	607b      	str	r3, [r7, #4]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f296:	dbf3      	blt.n	800f280 <ws2812_init+0xc>

  }
}
 800f298:	bf00      	nop
 800f29a:	370c      	adds	r7, #12
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr
 800f2a4:	2000046c 	.word	0x2000046c

0800f2a8 <ws2812_setPixel_gammaCorrection>:
	for( int i; i<LED_COUNT; i++){
		ws2812_pixel_rgb_to_buf_dma(0,0,0,i);
	}
}

void ws2812_setPixel_gammaCorrection(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t pos){
 800f2a8:	b590      	push	{r4, r7, lr}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	4608      	mov	r0, r1
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	4623      	mov	r3, r4
 800f2b8:	71fb      	strb	r3, [r7, #7]
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	71bb      	strb	r3, [r7, #6]
 800f2be:	460b      	mov	r3, r1
 800f2c0:	717b      	strb	r3, [r7, #5]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	807b      	strh	r3, [r7, #2]
	ws2812_pixel_rgb_to_buf_dma(gamma8[Rpixel],gamma8[Gpixel],gamma8[Bpixel],pos);
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
 800f2c8:	4a07      	ldr	r2, [pc, #28]	; (800f2e8 <ws2812_setPixel_gammaCorrection+0x40>)
 800f2ca:	5cd0      	ldrb	r0, [r2, r3]
 800f2cc:	79bb      	ldrb	r3, [r7, #6]
 800f2ce:	4a06      	ldr	r2, [pc, #24]	; (800f2e8 <ws2812_setPixel_gammaCorrection+0x40>)
 800f2d0:	5cd1      	ldrb	r1, [r2, r3]
 800f2d2:	797b      	ldrb	r3, [r7, #5]
 800f2d4:	4a04      	ldr	r2, [pc, #16]	; (800f2e8 <ws2812_setPixel_gammaCorrection+0x40>)
 800f2d6:	5cd2      	ldrb	r2, [r2, r3]
 800f2d8:	887b      	ldrh	r3, [r7, #2]
 800f2da:	f000 f807 	bl	800f2ec <ws2812_pixel_rgb_to_buf_dma>
}
 800f2de:	bf00      	nop
 800f2e0:	370c      	adds	r7, #12
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd90      	pop	{r4, r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	08011a50 	.word	0x08011a50

0800f2ec <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 800f2ec:	b490      	push	{r4, r7}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	4608      	mov	r0, r1
 800f2f6:	4611      	mov	r1, r2
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	4623      	mov	r3, r4
 800f2fc:	71fb      	strb	r3, [r7, #7]
 800f2fe:	4603      	mov	r3, r0
 800f300:	71bb      	strb	r3, [r7, #6]
 800f302:	460b      	mov	r3, r1
 800f304:	717b      	strb	r3, [r7, #5]
 800f306:	4613      	mov	r3, r2
 800f308:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 800f30a:	2300      	movs	r3, #0
 800f30c:	81fb      	strh	r3, [r7, #14]
 800f30e:	e07a      	b.n	800f406 <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 800f310:	79fa      	ldrb	r2, [r7, #7]
 800f312:	89fb      	ldrh	r3, [r7, #14]
 800f314:	b29b      	uxth	r3, r3
 800f316:	f1c3 0307 	rsb	r3, r3, #7
 800f31a:	fa42 f303 	asr.w	r3, r2, r3
 800f31e:	f003 0301 	and.w	r3, r3, #1
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00e      	beq.n	800f344 <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 800f326:	887a      	ldrh	r2, [r7, #2]
 800f328:	4613      	mov	r3, r2
 800f32a:	005b      	lsls	r3, r3, #1
 800f32c:	4413      	add	r3, r2
 800f32e:	00db      	lsls	r3, r3, #3
 800f330:	3350      	adds	r3, #80	; 0x50
 800f332:	89fa      	ldrh	r2, [r7, #14]
 800f334:	b292      	uxth	r2, r2
 800f336:	4413      	add	r3, r2
 800f338:	3308      	adds	r3, #8
 800f33a:	4a37      	ldr	r2, [pc, #220]	; (800f418 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f33c:	2141      	movs	r1, #65	; 0x41
 800f33e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800f342:	e00d      	b.n	800f360 <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 800f344:	887a      	ldrh	r2, [r7, #2]
 800f346:	4613      	mov	r3, r2
 800f348:	005b      	lsls	r3, r3, #1
 800f34a:	4413      	add	r3, r2
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	3350      	adds	r3, #80	; 0x50
 800f350:	89fa      	ldrh	r2, [r7, #14]
 800f352:	b292      	uxth	r2, r2
 800f354:	4413      	add	r3, r2
 800f356:	3308      	adds	r3, #8
 800f358:	4a2f      	ldr	r2, [pc, #188]	; (800f418 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f35a:	2119      	movs	r1, #25
 800f35c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 800f360:	79ba      	ldrb	r2, [r7, #6]
 800f362:	89fb      	ldrh	r3, [r7, #14]
 800f364:	b29b      	uxth	r3, r3
 800f366:	f1c3 0307 	rsb	r3, r3, #7
 800f36a:	fa42 f303 	asr.w	r3, r2, r3
 800f36e:	f003 0301 	and.w	r3, r3, #1
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00d      	beq.n	800f392 <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 800f376:	887a      	ldrh	r2, [r7, #2]
 800f378:	4613      	mov	r3, r2
 800f37a:	005b      	lsls	r3, r3, #1
 800f37c:	4413      	add	r3, r2
 800f37e:	00db      	lsls	r3, r3, #3
 800f380:	3350      	adds	r3, #80	; 0x50
 800f382:	89fa      	ldrh	r2, [r7, #14]
 800f384:	b292      	uxth	r2, r2
 800f386:	4413      	add	r3, r2
 800f388:	4a23      	ldr	r2, [pc, #140]	; (800f418 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f38a:	2141      	movs	r1, #65	; 0x41
 800f38c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800f390:	e00c      	b.n	800f3ac <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 800f392:	887a      	ldrh	r2, [r7, #2]
 800f394:	4613      	mov	r3, r2
 800f396:	005b      	lsls	r3, r3, #1
 800f398:	4413      	add	r3, r2
 800f39a:	00db      	lsls	r3, r3, #3
 800f39c:	3350      	adds	r3, #80	; 0x50
 800f39e:	89fa      	ldrh	r2, [r7, #14]
 800f3a0:	b292      	uxth	r2, r2
 800f3a2:	4413      	add	r3, r2
 800f3a4:	4a1c      	ldr	r2, [pc, #112]	; (800f418 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f3a6:	2119      	movs	r1, #25
 800f3a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 800f3ac:	797a      	ldrb	r2, [r7, #5]
 800f3ae:	89fb      	ldrh	r3, [r7, #14]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	f1c3 0307 	rsb	r3, r3, #7
 800f3b6:	fa42 f303 	asr.w	r3, r2, r3
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00e      	beq.n	800f3e0 <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 800f3c2:	887a      	ldrh	r2, [r7, #2]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	005b      	lsls	r3, r3, #1
 800f3c8:	4413      	add	r3, r2
 800f3ca:	00db      	lsls	r3, r3, #3
 800f3cc:	3350      	adds	r3, #80	; 0x50
 800f3ce:	89fa      	ldrh	r2, [r7, #14]
 800f3d0:	b292      	uxth	r2, r2
 800f3d2:	4413      	add	r3, r2
 800f3d4:	3310      	adds	r3, #16
 800f3d6:	4a10      	ldr	r2, [pc, #64]	; (800f418 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f3d8:	2141      	movs	r1, #65	; 0x41
 800f3da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800f3de:	e00d      	b.n	800f3fc <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 800f3e0:	887a      	ldrh	r2, [r7, #2]
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	005b      	lsls	r3, r3, #1
 800f3e6:	4413      	add	r3, r2
 800f3e8:	00db      	lsls	r3, r3, #3
 800f3ea:	3350      	adds	r3, #80	; 0x50
 800f3ec:	89fa      	ldrh	r2, [r7, #14]
 800f3ee:	b292      	uxth	r2, r2
 800f3f0:	4413      	add	r3, r2
 800f3f2:	3310      	adds	r3, #16
 800f3f4:	4a08      	ldr	r2, [pc, #32]	; (800f418 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f3f6:	2119      	movs	r1, #25
 800f3f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 800f3fc:	89fb      	ldrh	r3, [r7, #14]
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	3301      	adds	r3, #1
 800f402:	b29b      	uxth	r3, r3
 800f404:	81fb      	strh	r3, [r7, #14]
 800f406:	89fb      	ldrh	r3, [r7, #14]
 800f408:	b29b      	uxth	r3, r3
 800f40a:	2b07      	cmp	r3, #7
 800f40c:	d980      	bls.n	800f310 <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 800f40e:	bf00      	nop
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	bc90      	pop	{r4, r7}
 800f416:	4770      	bx	lr
 800f418:	2000046c 	.word	0x2000046c

0800f41c <ws2812_light>:



//------------------------------------------------------------------
void ws2812_light(void)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim3,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA,ARRAY_LEN*2);
 800f420:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800f424:	4a03      	ldr	r2, [pc, #12]	; (800f434 <ws2812_light+0x18>)
 800f426:	2104      	movs	r1, #4
 800f428:	4803      	ldr	r0, [pc, #12]	; (800f438 <ws2812_light+0x1c>)
 800f42a:	f7f6 ff47 	bl	80062bc <HAL_TIM_PWM_Start_DMA>
}
 800f42e:	bf00      	nop
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	2000046c 	.word	0x2000046c
 800f438:	20000eb0 	.word	0x20000eb0

0800f43c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800f43c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f474 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f442:	e003      	b.n	800f44c <LoopCopyDataInit>

0800f444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f444:	4b0c      	ldr	r3, [pc, #48]	; (800f478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f44a:	3104      	adds	r1, #4

0800f44c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f44c:	480b      	ldr	r0, [pc, #44]	; (800f47c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f44e:	4b0c      	ldr	r3, [pc, #48]	; (800f480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f454:	d3f6      	bcc.n	800f444 <CopyDataInit>
  ldr  r2, =_sbss
 800f456:	4a0b      	ldr	r2, [pc, #44]	; (800f484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f458:	e002      	b.n	800f460 <LoopFillZerobss>

0800f45a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f45a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f45c:	f842 3b04 	str.w	r3, [r2], #4

0800f460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f460:	4b09      	ldr	r3, [pc, #36]	; (800f488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f464:	d3f9      	bcc.n	800f45a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f466:	f7ff fa05 	bl	800e874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f46a:	f000 f817 	bl	800f49c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f46e:	f7fe f8af 	bl	800d5d0 <main>
  bx  lr    
 800f472:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800f474:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800f478:	08011dd0 	.word	0x08011dd0
  ldr  r0, =_sdata
 800f47c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f480:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800f484:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800f488:	20005ce0 	.word	0x20005ce0

0800f48c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f48c:	e7fe      	b.n	800f48c <ADC_IRQHandler>
	...

0800f490 <__errno>:
 800f490:	4b01      	ldr	r3, [pc, #4]	; (800f498 <__errno+0x8>)
 800f492:	6818      	ldr	r0, [r3, #0]
 800f494:	4770      	bx	lr
 800f496:	bf00      	nop
 800f498:	20000198 	.word	0x20000198

0800f49c <__libc_init_array>:
 800f49c:	b570      	push	{r4, r5, r6, lr}
 800f49e:	4e0d      	ldr	r6, [pc, #52]	; (800f4d4 <__libc_init_array+0x38>)
 800f4a0:	4c0d      	ldr	r4, [pc, #52]	; (800f4d8 <__libc_init_array+0x3c>)
 800f4a2:	1ba4      	subs	r4, r4, r6
 800f4a4:	10a4      	asrs	r4, r4, #2
 800f4a6:	2500      	movs	r5, #0
 800f4a8:	42a5      	cmp	r5, r4
 800f4aa:	d109      	bne.n	800f4c0 <__libc_init_array+0x24>
 800f4ac:	4e0b      	ldr	r6, [pc, #44]	; (800f4dc <__libc_init_array+0x40>)
 800f4ae:	4c0c      	ldr	r4, [pc, #48]	; (800f4e0 <__libc_init_array+0x44>)
 800f4b0:	f001 ff8c 	bl	80113cc <_init>
 800f4b4:	1ba4      	subs	r4, r4, r6
 800f4b6:	10a4      	asrs	r4, r4, #2
 800f4b8:	2500      	movs	r5, #0
 800f4ba:	42a5      	cmp	r5, r4
 800f4bc:	d105      	bne.n	800f4ca <__libc_init_array+0x2e>
 800f4be:	bd70      	pop	{r4, r5, r6, pc}
 800f4c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4c4:	4798      	blx	r3
 800f4c6:	3501      	adds	r5, #1
 800f4c8:	e7ee      	b.n	800f4a8 <__libc_init_array+0xc>
 800f4ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4ce:	4798      	blx	r3
 800f4d0:	3501      	adds	r5, #1
 800f4d2:	e7f2      	b.n	800f4ba <__libc_init_array+0x1e>
 800f4d4:	08011dc8 	.word	0x08011dc8
 800f4d8:	08011dc8 	.word	0x08011dc8
 800f4dc:	08011dc8 	.word	0x08011dc8
 800f4e0:	08011dcc 	.word	0x08011dcc

0800f4e4 <malloc>:
 800f4e4:	4b02      	ldr	r3, [pc, #8]	; (800f4f0 <malloc+0xc>)
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	6818      	ldr	r0, [r3, #0]
 800f4ea:	f000 b861 	b.w	800f5b0 <_malloc_r>
 800f4ee:	bf00      	nop
 800f4f0:	20000198 	.word	0x20000198

0800f4f4 <free>:
 800f4f4:	4b02      	ldr	r3, [pc, #8]	; (800f500 <free+0xc>)
 800f4f6:	4601      	mov	r1, r0
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	f000 b80b 	b.w	800f514 <_free_r>
 800f4fe:	bf00      	nop
 800f500:	20000198 	.word	0x20000198

0800f504 <memset>:
 800f504:	4402      	add	r2, r0
 800f506:	4603      	mov	r3, r0
 800f508:	4293      	cmp	r3, r2
 800f50a:	d100      	bne.n	800f50e <memset+0xa>
 800f50c:	4770      	bx	lr
 800f50e:	f803 1b01 	strb.w	r1, [r3], #1
 800f512:	e7f9      	b.n	800f508 <memset+0x4>

0800f514 <_free_r>:
 800f514:	b538      	push	{r3, r4, r5, lr}
 800f516:	4605      	mov	r5, r0
 800f518:	2900      	cmp	r1, #0
 800f51a:	d045      	beq.n	800f5a8 <_free_r+0x94>
 800f51c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f520:	1f0c      	subs	r4, r1, #4
 800f522:	2b00      	cmp	r3, #0
 800f524:	bfb8      	it	lt
 800f526:	18e4      	addlt	r4, r4, r3
 800f528:	f000 fbc6 	bl	800fcb8 <__malloc_lock>
 800f52c:	4a1f      	ldr	r2, [pc, #124]	; (800f5ac <_free_r+0x98>)
 800f52e:	6813      	ldr	r3, [r2, #0]
 800f530:	4610      	mov	r0, r2
 800f532:	b933      	cbnz	r3, 800f542 <_free_r+0x2e>
 800f534:	6063      	str	r3, [r4, #4]
 800f536:	6014      	str	r4, [r2, #0]
 800f538:	4628      	mov	r0, r5
 800f53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f53e:	f000 bbbc 	b.w	800fcba <__malloc_unlock>
 800f542:	42a3      	cmp	r3, r4
 800f544:	d90c      	bls.n	800f560 <_free_r+0x4c>
 800f546:	6821      	ldr	r1, [r4, #0]
 800f548:	1862      	adds	r2, r4, r1
 800f54a:	4293      	cmp	r3, r2
 800f54c:	bf04      	itt	eq
 800f54e:	681a      	ldreq	r2, [r3, #0]
 800f550:	685b      	ldreq	r3, [r3, #4]
 800f552:	6063      	str	r3, [r4, #4]
 800f554:	bf04      	itt	eq
 800f556:	1852      	addeq	r2, r2, r1
 800f558:	6022      	streq	r2, [r4, #0]
 800f55a:	6004      	str	r4, [r0, #0]
 800f55c:	e7ec      	b.n	800f538 <_free_r+0x24>
 800f55e:	4613      	mov	r3, r2
 800f560:	685a      	ldr	r2, [r3, #4]
 800f562:	b10a      	cbz	r2, 800f568 <_free_r+0x54>
 800f564:	42a2      	cmp	r2, r4
 800f566:	d9fa      	bls.n	800f55e <_free_r+0x4a>
 800f568:	6819      	ldr	r1, [r3, #0]
 800f56a:	1858      	adds	r0, r3, r1
 800f56c:	42a0      	cmp	r0, r4
 800f56e:	d10b      	bne.n	800f588 <_free_r+0x74>
 800f570:	6820      	ldr	r0, [r4, #0]
 800f572:	4401      	add	r1, r0
 800f574:	1858      	adds	r0, r3, r1
 800f576:	4282      	cmp	r2, r0
 800f578:	6019      	str	r1, [r3, #0]
 800f57a:	d1dd      	bne.n	800f538 <_free_r+0x24>
 800f57c:	6810      	ldr	r0, [r2, #0]
 800f57e:	6852      	ldr	r2, [r2, #4]
 800f580:	605a      	str	r2, [r3, #4]
 800f582:	4401      	add	r1, r0
 800f584:	6019      	str	r1, [r3, #0]
 800f586:	e7d7      	b.n	800f538 <_free_r+0x24>
 800f588:	d902      	bls.n	800f590 <_free_r+0x7c>
 800f58a:	230c      	movs	r3, #12
 800f58c:	602b      	str	r3, [r5, #0]
 800f58e:	e7d3      	b.n	800f538 <_free_r+0x24>
 800f590:	6820      	ldr	r0, [r4, #0]
 800f592:	1821      	adds	r1, r4, r0
 800f594:	428a      	cmp	r2, r1
 800f596:	bf04      	itt	eq
 800f598:	6811      	ldreq	r1, [r2, #0]
 800f59a:	6852      	ldreq	r2, [r2, #4]
 800f59c:	6062      	str	r2, [r4, #4]
 800f59e:	bf04      	itt	eq
 800f5a0:	1809      	addeq	r1, r1, r0
 800f5a2:	6021      	streq	r1, [r4, #0]
 800f5a4:	605c      	str	r4, [r3, #4]
 800f5a6:	e7c7      	b.n	800f538 <_free_r+0x24>
 800f5a8:	bd38      	pop	{r3, r4, r5, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20000a2c 	.word	0x20000a2c

0800f5b0 <_malloc_r>:
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	1ccd      	adds	r5, r1, #3
 800f5b4:	f025 0503 	bic.w	r5, r5, #3
 800f5b8:	3508      	adds	r5, #8
 800f5ba:	2d0c      	cmp	r5, #12
 800f5bc:	bf38      	it	cc
 800f5be:	250c      	movcc	r5, #12
 800f5c0:	2d00      	cmp	r5, #0
 800f5c2:	4606      	mov	r6, r0
 800f5c4:	db01      	blt.n	800f5ca <_malloc_r+0x1a>
 800f5c6:	42a9      	cmp	r1, r5
 800f5c8:	d903      	bls.n	800f5d2 <_malloc_r+0x22>
 800f5ca:	230c      	movs	r3, #12
 800f5cc:	6033      	str	r3, [r6, #0]
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	bd70      	pop	{r4, r5, r6, pc}
 800f5d2:	f000 fb71 	bl	800fcb8 <__malloc_lock>
 800f5d6:	4a21      	ldr	r2, [pc, #132]	; (800f65c <_malloc_r+0xac>)
 800f5d8:	6814      	ldr	r4, [r2, #0]
 800f5da:	4621      	mov	r1, r4
 800f5dc:	b991      	cbnz	r1, 800f604 <_malloc_r+0x54>
 800f5de:	4c20      	ldr	r4, [pc, #128]	; (800f660 <_malloc_r+0xb0>)
 800f5e0:	6823      	ldr	r3, [r4, #0]
 800f5e2:	b91b      	cbnz	r3, 800f5ec <_malloc_r+0x3c>
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	f000 f8b9 	bl	800f75c <_sbrk_r>
 800f5ea:	6020      	str	r0, [r4, #0]
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	f000 f8b4 	bl	800f75c <_sbrk_r>
 800f5f4:	1c43      	adds	r3, r0, #1
 800f5f6:	d124      	bne.n	800f642 <_malloc_r+0x92>
 800f5f8:	230c      	movs	r3, #12
 800f5fa:	6033      	str	r3, [r6, #0]
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	f000 fb5c 	bl	800fcba <__malloc_unlock>
 800f602:	e7e4      	b.n	800f5ce <_malloc_r+0x1e>
 800f604:	680b      	ldr	r3, [r1, #0]
 800f606:	1b5b      	subs	r3, r3, r5
 800f608:	d418      	bmi.n	800f63c <_malloc_r+0x8c>
 800f60a:	2b0b      	cmp	r3, #11
 800f60c:	d90f      	bls.n	800f62e <_malloc_r+0x7e>
 800f60e:	600b      	str	r3, [r1, #0]
 800f610:	50cd      	str	r5, [r1, r3]
 800f612:	18cc      	adds	r4, r1, r3
 800f614:	4630      	mov	r0, r6
 800f616:	f000 fb50 	bl	800fcba <__malloc_unlock>
 800f61a:	f104 000b 	add.w	r0, r4, #11
 800f61e:	1d23      	adds	r3, r4, #4
 800f620:	f020 0007 	bic.w	r0, r0, #7
 800f624:	1ac3      	subs	r3, r0, r3
 800f626:	d0d3      	beq.n	800f5d0 <_malloc_r+0x20>
 800f628:	425a      	negs	r2, r3
 800f62a:	50e2      	str	r2, [r4, r3]
 800f62c:	e7d0      	b.n	800f5d0 <_malloc_r+0x20>
 800f62e:	428c      	cmp	r4, r1
 800f630:	684b      	ldr	r3, [r1, #4]
 800f632:	bf16      	itet	ne
 800f634:	6063      	strne	r3, [r4, #4]
 800f636:	6013      	streq	r3, [r2, #0]
 800f638:	460c      	movne	r4, r1
 800f63a:	e7eb      	b.n	800f614 <_malloc_r+0x64>
 800f63c:	460c      	mov	r4, r1
 800f63e:	6849      	ldr	r1, [r1, #4]
 800f640:	e7cc      	b.n	800f5dc <_malloc_r+0x2c>
 800f642:	1cc4      	adds	r4, r0, #3
 800f644:	f024 0403 	bic.w	r4, r4, #3
 800f648:	42a0      	cmp	r0, r4
 800f64a:	d005      	beq.n	800f658 <_malloc_r+0xa8>
 800f64c:	1a21      	subs	r1, r4, r0
 800f64e:	4630      	mov	r0, r6
 800f650:	f000 f884 	bl	800f75c <_sbrk_r>
 800f654:	3001      	adds	r0, #1
 800f656:	d0cf      	beq.n	800f5f8 <_malloc_r+0x48>
 800f658:	6025      	str	r5, [r4, #0]
 800f65a:	e7db      	b.n	800f614 <_malloc_r+0x64>
 800f65c:	20000a2c 	.word	0x20000a2c
 800f660:	20000a30 	.word	0x20000a30

0800f664 <iprintf>:
 800f664:	b40f      	push	{r0, r1, r2, r3}
 800f666:	4b0a      	ldr	r3, [pc, #40]	; (800f690 <iprintf+0x2c>)
 800f668:	b513      	push	{r0, r1, r4, lr}
 800f66a:	681c      	ldr	r4, [r3, #0]
 800f66c:	b124      	cbz	r4, 800f678 <iprintf+0x14>
 800f66e:	69a3      	ldr	r3, [r4, #24]
 800f670:	b913      	cbnz	r3, 800f678 <iprintf+0x14>
 800f672:	4620      	mov	r0, r4
 800f674:	f000 fa32 	bl	800fadc <__sinit>
 800f678:	ab05      	add	r3, sp, #20
 800f67a:	9a04      	ldr	r2, [sp, #16]
 800f67c:	68a1      	ldr	r1, [r4, #8]
 800f67e:	9301      	str	r3, [sp, #4]
 800f680:	4620      	mov	r0, r4
 800f682:	f000 fb45 	bl	800fd10 <_vfiprintf_r>
 800f686:	b002      	add	sp, #8
 800f688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f68c:	b004      	add	sp, #16
 800f68e:	4770      	bx	lr
 800f690:	20000198 	.word	0x20000198

0800f694 <_puts_r>:
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	460e      	mov	r6, r1
 800f698:	4605      	mov	r5, r0
 800f69a:	b118      	cbz	r0, 800f6a4 <_puts_r+0x10>
 800f69c:	6983      	ldr	r3, [r0, #24]
 800f69e:	b90b      	cbnz	r3, 800f6a4 <_puts_r+0x10>
 800f6a0:	f000 fa1c 	bl	800fadc <__sinit>
 800f6a4:	69ab      	ldr	r3, [r5, #24]
 800f6a6:	68ac      	ldr	r4, [r5, #8]
 800f6a8:	b913      	cbnz	r3, 800f6b0 <_puts_r+0x1c>
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f000 fa16 	bl	800fadc <__sinit>
 800f6b0:	4b23      	ldr	r3, [pc, #140]	; (800f740 <_puts_r+0xac>)
 800f6b2:	429c      	cmp	r4, r3
 800f6b4:	d117      	bne.n	800f6e6 <_puts_r+0x52>
 800f6b6:	686c      	ldr	r4, [r5, #4]
 800f6b8:	89a3      	ldrh	r3, [r4, #12]
 800f6ba:	071b      	lsls	r3, r3, #28
 800f6bc:	d51d      	bpl.n	800f6fa <_puts_r+0x66>
 800f6be:	6923      	ldr	r3, [r4, #16]
 800f6c0:	b1db      	cbz	r3, 800f6fa <_puts_r+0x66>
 800f6c2:	3e01      	subs	r6, #1
 800f6c4:	68a3      	ldr	r3, [r4, #8]
 800f6c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	60a3      	str	r3, [r4, #8]
 800f6ce:	b9e9      	cbnz	r1, 800f70c <_puts_r+0x78>
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	da2e      	bge.n	800f732 <_puts_r+0x9e>
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	210a      	movs	r1, #10
 800f6d8:	4628      	mov	r0, r5
 800f6da:	f000 f84f 	bl	800f77c <__swbuf_r>
 800f6de:	3001      	adds	r0, #1
 800f6e0:	d011      	beq.n	800f706 <_puts_r+0x72>
 800f6e2:	200a      	movs	r0, #10
 800f6e4:	e011      	b.n	800f70a <_puts_r+0x76>
 800f6e6:	4b17      	ldr	r3, [pc, #92]	; (800f744 <_puts_r+0xb0>)
 800f6e8:	429c      	cmp	r4, r3
 800f6ea:	d101      	bne.n	800f6f0 <_puts_r+0x5c>
 800f6ec:	68ac      	ldr	r4, [r5, #8]
 800f6ee:	e7e3      	b.n	800f6b8 <_puts_r+0x24>
 800f6f0:	4b15      	ldr	r3, [pc, #84]	; (800f748 <_puts_r+0xb4>)
 800f6f2:	429c      	cmp	r4, r3
 800f6f4:	bf08      	it	eq
 800f6f6:	68ec      	ldreq	r4, [r5, #12]
 800f6f8:	e7de      	b.n	800f6b8 <_puts_r+0x24>
 800f6fa:	4621      	mov	r1, r4
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	f000 f88f 	bl	800f820 <__swsetup_r>
 800f702:	2800      	cmp	r0, #0
 800f704:	d0dd      	beq.n	800f6c2 <_puts_r+0x2e>
 800f706:	f04f 30ff 	mov.w	r0, #4294967295
 800f70a:	bd70      	pop	{r4, r5, r6, pc}
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	da04      	bge.n	800f71a <_puts_r+0x86>
 800f710:	69a2      	ldr	r2, [r4, #24]
 800f712:	429a      	cmp	r2, r3
 800f714:	dc06      	bgt.n	800f724 <_puts_r+0x90>
 800f716:	290a      	cmp	r1, #10
 800f718:	d004      	beq.n	800f724 <_puts_r+0x90>
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	6022      	str	r2, [r4, #0]
 800f720:	7019      	strb	r1, [r3, #0]
 800f722:	e7cf      	b.n	800f6c4 <_puts_r+0x30>
 800f724:	4622      	mov	r2, r4
 800f726:	4628      	mov	r0, r5
 800f728:	f000 f828 	bl	800f77c <__swbuf_r>
 800f72c:	3001      	adds	r0, #1
 800f72e:	d1c9      	bne.n	800f6c4 <_puts_r+0x30>
 800f730:	e7e9      	b.n	800f706 <_puts_r+0x72>
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	200a      	movs	r0, #10
 800f736:	1c5a      	adds	r2, r3, #1
 800f738:	6022      	str	r2, [r4, #0]
 800f73a:	7018      	strb	r0, [r3, #0]
 800f73c:	e7e5      	b.n	800f70a <_puts_r+0x76>
 800f73e:	bf00      	nop
 800f740:	08011b74 	.word	0x08011b74
 800f744:	08011b94 	.word	0x08011b94
 800f748:	08011b54 	.word	0x08011b54

0800f74c <puts>:
 800f74c:	4b02      	ldr	r3, [pc, #8]	; (800f758 <puts+0xc>)
 800f74e:	4601      	mov	r1, r0
 800f750:	6818      	ldr	r0, [r3, #0]
 800f752:	f7ff bf9f 	b.w	800f694 <_puts_r>
 800f756:	bf00      	nop
 800f758:	20000198 	.word	0x20000198

0800f75c <_sbrk_r>:
 800f75c:	b538      	push	{r3, r4, r5, lr}
 800f75e:	4c06      	ldr	r4, [pc, #24]	; (800f778 <_sbrk_r+0x1c>)
 800f760:	2300      	movs	r3, #0
 800f762:	4605      	mov	r5, r0
 800f764:	4608      	mov	r0, r1
 800f766:	6023      	str	r3, [r4, #0]
 800f768:	f7ff f858 	bl	800e81c <_sbrk>
 800f76c:	1c43      	adds	r3, r0, #1
 800f76e:	d102      	bne.n	800f776 <_sbrk_r+0x1a>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	b103      	cbz	r3, 800f776 <_sbrk_r+0x1a>
 800f774:	602b      	str	r3, [r5, #0]
 800f776:	bd38      	pop	{r3, r4, r5, pc}
 800f778:	20005cdc 	.word	0x20005cdc

0800f77c <__swbuf_r>:
 800f77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77e:	460e      	mov	r6, r1
 800f780:	4614      	mov	r4, r2
 800f782:	4605      	mov	r5, r0
 800f784:	b118      	cbz	r0, 800f78e <__swbuf_r+0x12>
 800f786:	6983      	ldr	r3, [r0, #24]
 800f788:	b90b      	cbnz	r3, 800f78e <__swbuf_r+0x12>
 800f78a:	f000 f9a7 	bl	800fadc <__sinit>
 800f78e:	4b21      	ldr	r3, [pc, #132]	; (800f814 <__swbuf_r+0x98>)
 800f790:	429c      	cmp	r4, r3
 800f792:	d12a      	bne.n	800f7ea <__swbuf_r+0x6e>
 800f794:	686c      	ldr	r4, [r5, #4]
 800f796:	69a3      	ldr	r3, [r4, #24]
 800f798:	60a3      	str	r3, [r4, #8]
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	071a      	lsls	r2, r3, #28
 800f79e:	d52e      	bpl.n	800f7fe <__swbuf_r+0x82>
 800f7a0:	6923      	ldr	r3, [r4, #16]
 800f7a2:	b363      	cbz	r3, 800f7fe <__swbuf_r+0x82>
 800f7a4:	6923      	ldr	r3, [r4, #16]
 800f7a6:	6820      	ldr	r0, [r4, #0]
 800f7a8:	1ac0      	subs	r0, r0, r3
 800f7aa:	6963      	ldr	r3, [r4, #20]
 800f7ac:	b2f6      	uxtb	r6, r6
 800f7ae:	4283      	cmp	r3, r0
 800f7b0:	4637      	mov	r7, r6
 800f7b2:	dc04      	bgt.n	800f7be <__swbuf_r+0x42>
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	f000 f926 	bl	800fa08 <_fflush_r>
 800f7bc:	bb28      	cbnz	r0, 800f80a <__swbuf_r+0x8e>
 800f7be:	68a3      	ldr	r3, [r4, #8]
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	60a3      	str	r3, [r4, #8]
 800f7c4:	6823      	ldr	r3, [r4, #0]
 800f7c6:	1c5a      	adds	r2, r3, #1
 800f7c8:	6022      	str	r2, [r4, #0]
 800f7ca:	701e      	strb	r6, [r3, #0]
 800f7cc:	6963      	ldr	r3, [r4, #20]
 800f7ce:	3001      	adds	r0, #1
 800f7d0:	4283      	cmp	r3, r0
 800f7d2:	d004      	beq.n	800f7de <__swbuf_r+0x62>
 800f7d4:	89a3      	ldrh	r3, [r4, #12]
 800f7d6:	07db      	lsls	r3, r3, #31
 800f7d8:	d519      	bpl.n	800f80e <__swbuf_r+0x92>
 800f7da:	2e0a      	cmp	r6, #10
 800f7dc:	d117      	bne.n	800f80e <__swbuf_r+0x92>
 800f7de:	4621      	mov	r1, r4
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	f000 f911 	bl	800fa08 <_fflush_r>
 800f7e6:	b190      	cbz	r0, 800f80e <__swbuf_r+0x92>
 800f7e8:	e00f      	b.n	800f80a <__swbuf_r+0x8e>
 800f7ea:	4b0b      	ldr	r3, [pc, #44]	; (800f818 <__swbuf_r+0x9c>)
 800f7ec:	429c      	cmp	r4, r3
 800f7ee:	d101      	bne.n	800f7f4 <__swbuf_r+0x78>
 800f7f0:	68ac      	ldr	r4, [r5, #8]
 800f7f2:	e7d0      	b.n	800f796 <__swbuf_r+0x1a>
 800f7f4:	4b09      	ldr	r3, [pc, #36]	; (800f81c <__swbuf_r+0xa0>)
 800f7f6:	429c      	cmp	r4, r3
 800f7f8:	bf08      	it	eq
 800f7fa:	68ec      	ldreq	r4, [r5, #12]
 800f7fc:	e7cb      	b.n	800f796 <__swbuf_r+0x1a>
 800f7fe:	4621      	mov	r1, r4
 800f800:	4628      	mov	r0, r5
 800f802:	f000 f80d 	bl	800f820 <__swsetup_r>
 800f806:	2800      	cmp	r0, #0
 800f808:	d0cc      	beq.n	800f7a4 <__swbuf_r+0x28>
 800f80a:	f04f 37ff 	mov.w	r7, #4294967295
 800f80e:	4638      	mov	r0, r7
 800f810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f812:	bf00      	nop
 800f814:	08011b74 	.word	0x08011b74
 800f818:	08011b94 	.word	0x08011b94
 800f81c:	08011b54 	.word	0x08011b54

0800f820 <__swsetup_r>:
 800f820:	4b32      	ldr	r3, [pc, #200]	; (800f8ec <__swsetup_r+0xcc>)
 800f822:	b570      	push	{r4, r5, r6, lr}
 800f824:	681d      	ldr	r5, [r3, #0]
 800f826:	4606      	mov	r6, r0
 800f828:	460c      	mov	r4, r1
 800f82a:	b125      	cbz	r5, 800f836 <__swsetup_r+0x16>
 800f82c:	69ab      	ldr	r3, [r5, #24]
 800f82e:	b913      	cbnz	r3, 800f836 <__swsetup_r+0x16>
 800f830:	4628      	mov	r0, r5
 800f832:	f000 f953 	bl	800fadc <__sinit>
 800f836:	4b2e      	ldr	r3, [pc, #184]	; (800f8f0 <__swsetup_r+0xd0>)
 800f838:	429c      	cmp	r4, r3
 800f83a:	d10f      	bne.n	800f85c <__swsetup_r+0x3c>
 800f83c:	686c      	ldr	r4, [r5, #4]
 800f83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f842:	b29a      	uxth	r2, r3
 800f844:	0715      	lsls	r5, r2, #28
 800f846:	d42c      	bmi.n	800f8a2 <__swsetup_r+0x82>
 800f848:	06d0      	lsls	r0, r2, #27
 800f84a:	d411      	bmi.n	800f870 <__swsetup_r+0x50>
 800f84c:	2209      	movs	r2, #9
 800f84e:	6032      	str	r2, [r6, #0]
 800f850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f854:	81a3      	strh	r3, [r4, #12]
 800f856:	f04f 30ff 	mov.w	r0, #4294967295
 800f85a:	e03e      	b.n	800f8da <__swsetup_r+0xba>
 800f85c:	4b25      	ldr	r3, [pc, #148]	; (800f8f4 <__swsetup_r+0xd4>)
 800f85e:	429c      	cmp	r4, r3
 800f860:	d101      	bne.n	800f866 <__swsetup_r+0x46>
 800f862:	68ac      	ldr	r4, [r5, #8]
 800f864:	e7eb      	b.n	800f83e <__swsetup_r+0x1e>
 800f866:	4b24      	ldr	r3, [pc, #144]	; (800f8f8 <__swsetup_r+0xd8>)
 800f868:	429c      	cmp	r4, r3
 800f86a:	bf08      	it	eq
 800f86c:	68ec      	ldreq	r4, [r5, #12]
 800f86e:	e7e6      	b.n	800f83e <__swsetup_r+0x1e>
 800f870:	0751      	lsls	r1, r2, #29
 800f872:	d512      	bpl.n	800f89a <__swsetup_r+0x7a>
 800f874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f876:	b141      	cbz	r1, 800f88a <__swsetup_r+0x6a>
 800f878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f87c:	4299      	cmp	r1, r3
 800f87e:	d002      	beq.n	800f886 <__swsetup_r+0x66>
 800f880:	4630      	mov	r0, r6
 800f882:	f7ff fe47 	bl	800f514 <_free_r>
 800f886:	2300      	movs	r3, #0
 800f888:	6363      	str	r3, [r4, #52]	; 0x34
 800f88a:	89a3      	ldrh	r3, [r4, #12]
 800f88c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f890:	81a3      	strh	r3, [r4, #12]
 800f892:	2300      	movs	r3, #0
 800f894:	6063      	str	r3, [r4, #4]
 800f896:	6923      	ldr	r3, [r4, #16]
 800f898:	6023      	str	r3, [r4, #0]
 800f89a:	89a3      	ldrh	r3, [r4, #12]
 800f89c:	f043 0308 	orr.w	r3, r3, #8
 800f8a0:	81a3      	strh	r3, [r4, #12]
 800f8a2:	6923      	ldr	r3, [r4, #16]
 800f8a4:	b94b      	cbnz	r3, 800f8ba <__swsetup_r+0x9a>
 800f8a6:	89a3      	ldrh	r3, [r4, #12]
 800f8a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8b0:	d003      	beq.n	800f8ba <__swsetup_r+0x9a>
 800f8b2:	4621      	mov	r1, r4
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	f000 f9bf 	bl	800fc38 <__smakebuf_r>
 800f8ba:	89a2      	ldrh	r2, [r4, #12]
 800f8bc:	f012 0301 	ands.w	r3, r2, #1
 800f8c0:	d00c      	beq.n	800f8dc <__swsetup_r+0xbc>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	60a3      	str	r3, [r4, #8]
 800f8c6:	6963      	ldr	r3, [r4, #20]
 800f8c8:	425b      	negs	r3, r3
 800f8ca:	61a3      	str	r3, [r4, #24]
 800f8cc:	6923      	ldr	r3, [r4, #16]
 800f8ce:	b953      	cbnz	r3, 800f8e6 <__swsetup_r+0xc6>
 800f8d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f8d8:	d1ba      	bne.n	800f850 <__swsetup_r+0x30>
 800f8da:	bd70      	pop	{r4, r5, r6, pc}
 800f8dc:	0792      	lsls	r2, r2, #30
 800f8de:	bf58      	it	pl
 800f8e0:	6963      	ldrpl	r3, [r4, #20]
 800f8e2:	60a3      	str	r3, [r4, #8]
 800f8e4:	e7f2      	b.n	800f8cc <__swsetup_r+0xac>
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	e7f7      	b.n	800f8da <__swsetup_r+0xba>
 800f8ea:	bf00      	nop
 800f8ec:	20000198 	.word	0x20000198
 800f8f0:	08011b74 	.word	0x08011b74
 800f8f4:	08011b94 	.word	0x08011b94
 800f8f8:	08011b54 	.word	0x08011b54

0800f8fc <__sflush_r>:
 800f8fc:	898a      	ldrh	r2, [r1, #12]
 800f8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f902:	4605      	mov	r5, r0
 800f904:	0710      	lsls	r0, r2, #28
 800f906:	460c      	mov	r4, r1
 800f908:	d458      	bmi.n	800f9bc <__sflush_r+0xc0>
 800f90a:	684b      	ldr	r3, [r1, #4]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	dc05      	bgt.n	800f91c <__sflush_r+0x20>
 800f910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f912:	2b00      	cmp	r3, #0
 800f914:	dc02      	bgt.n	800f91c <__sflush_r+0x20>
 800f916:	2000      	movs	r0, #0
 800f918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f91c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f91e:	2e00      	cmp	r6, #0
 800f920:	d0f9      	beq.n	800f916 <__sflush_r+0x1a>
 800f922:	2300      	movs	r3, #0
 800f924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f928:	682f      	ldr	r7, [r5, #0]
 800f92a:	6a21      	ldr	r1, [r4, #32]
 800f92c:	602b      	str	r3, [r5, #0]
 800f92e:	d032      	beq.n	800f996 <__sflush_r+0x9a>
 800f930:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f932:	89a3      	ldrh	r3, [r4, #12]
 800f934:	075a      	lsls	r2, r3, #29
 800f936:	d505      	bpl.n	800f944 <__sflush_r+0x48>
 800f938:	6863      	ldr	r3, [r4, #4]
 800f93a:	1ac0      	subs	r0, r0, r3
 800f93c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f93e:	b10b      	cbz	r3, 800f944 <__sflush_r+0x48>
 800f940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f942:	1ac0      	subs	r0, r0, r3
 800f944:	2300      	movs	r3, #0
 800f946:	4602      	mov	r2, r0
 800f948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f94a:	6a21      	ldr	r1, [r4, #32]
 800f94c:	4628      	mov	r0, r5
 800f94e:	47b0      	blx	r6
 800f950:	1c43      	adds	r3, r0, #1
 800f952:	89a3      	ldrh	r3, [r4, #12]
 800f954:	d106      	bne.n	800f964 <__sflush_r+0x68>
 800f956:	6829      	ldr	r1, [r5, #0]
 800f958:	291d      	cmp	r1, #29
 800f95a:	d848      	bhi.n	800f9ee <__sflush_r+0xf2>
 800f95c:	4a29      	ldr	r2, [pc, #164]	; (800fa04 <__sflush_r+0x108>)
 800f95e:	40ca      	lsrs	r2, r1
 800f960:	07d6      	lsls	r6, r2, #31
 800f962:	d544      	bpl.n	800f9ee <__sflush_r+0xf2>
 800f964:	2200      	movs	r2, #0
 800f966:	6062      	str	r2, [r4, #4]
 800f968:	04d9      	lsls	r1, r3, #19
 800f96a:	6922      	ldr	r2, [r4, #16]
 800f96c:	6022      	str	r2, [r4, #0]
 800f96e:	d504      	bpl.n	800f97a <__sflush_r+0x7e>
 800f970:	1c42      	adds	r2, r0, #1
 800f972:	d101      	bne.n	800f978 <__sflush_r+0x7c>
 800f974:	682b      	ldr	r3, [r5, #0]
 800f976:	b903      	cbnz	r3, 800f97a <__sflush_r+0x7e>
 800f978:	6560      	str	r0, [r4, #84]	; 0x54
 800f97a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f97c:	602f      	str	r7, [r5, #0]
 800f97e:	2900      	cmp	r1, #0
 800f980:	d0c9      	beq.n	800f916 <__sflush_r+0x1a>
 800f982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f986:	4299      	cmp	r1, r3
 800f988:	d002      	beq.n	800f990 <__sflush_r+0x94>
 800f98a:	4628      	mov	r0, r5
 800f98c:	f7ff fdc2 	bl	800f514 <_free_r>
 800f990:	2000      	movs	r0, #0
 800f992:	6360      	str	r0, [r4, #52]	; 0x34
 800f994:	e7c0      	b.n	800f918 <__sflush_r+0x1c>
 800f996:	2301      	movs	r3, #1
 800f998:	4628      	mov	r0, r5
 800f99a:	47b0      	blx	r6
 800f99c:	1c41      	adds	r1, r0, #1
 800f99e:	d1c8      	bne.n	800f932 <__sflush_r+0x36>
 800f9a0:	682b      	ldr	r3, [r5, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d0c5      	beq.n	800f932 <__sflush_r+0x36>
 800f9a6:	2b1d      	cmp	r3, #29
 800f9a8:	d001      	beq.n	800f9ae <__sflush_r+0xb2>
 800f9aa:	2b16      	cmp	r3, #22
 800f9ac:	d101      	bne.n	800f9b2 <__sflush_r+0xb6>
 800f9ae:	602f      	str	r7, [r5, #0]
 800f9b0:	e7b1      	b.n	800f916 <__sflush_r+0x1a>
 800f9b2:	89a3      	ldrh	r3, [r4, #12]
 800f9b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9b8:	81a3      	strh	r3, [r4, #12]
 800f9ba:	e7ad      	b.n	800f918 <__sflush_r+0x1c>
 800f9bc:	690f      	ldr	r7, [r1, #16]
 800f9be:	2f00      	cmp	r7, #0
 800f9c0:	d0a9      	beq.n	800f916 <__sflush_r+0x1a>
 800f9c2:	0793      	lsls	r3, r2, #30
 800f9c4:	680e      	ldr	r6, [r1, #0]
 800f9c6:	bf08      	it	eq
 800f9c8:	694b      	ldreq	r3, [r1, #20]
 800f9ca:	600f      	str	r7, [r1, #0]
 800f9cc:	bf18      	it	ne
 800f9ce:	2300      	movne	r3, #0
 800f9d0:	eba6 0807 	sub.w	r8, r6, r7
 800f9d4:	608b      	str	r3, [r1, #8]
 800f9d6:	f1b8 0f00 	cmp.w	r8, #0
 800f9da:	dd9c      	ble.n	800f916 <__sflush_r+0x1a>
 800f9dc:	4643      	mov	r3, r8
 800f9de:	463a      	mov	r2, r7
 800f9e0:	6a21      	ldr	r1, [r4, #32]
 800f9e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f9e4:	4628      	mov	r0, r5
 800f9e6:	47b0      	blx	r6
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	dc06      	bgt.n	800f9fa <__sflush_r+0xfe>
 800f9ec:	89a3      	ldrh	r3, [r4, #12]
 800f9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9f2:	81a3      	strh	r3, [r4, #12]
 800f9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f8:	e78e      	b.n	800f918 <__sflush_r+0x1c>
 800f9fa:	4407      	add	r7, r0
 800f9fc:	eba8 0800 	sub.w	r8, r8, r0
 800fa00:	e7e9      	b.n	800f9d6 <__sflush_r+0xda>
 800fa02:	bf00      	nop
 800fa04:	20400001 	.word	0x20400001

0800fa08 <_fflush_r>:
 800fa08:	b538      	push	{r3, r4, r5, lr}
 800fa0a:	690b      	ldr	r3, [r1, #16]
 800fa0c:	4605      	mov	r5, r0
 800fa0e:	460c      	mov	r4, r1
 800fa10:	b1db      	cbz	r3, 800fa4a <_fflush_r+0x42>
 800fa12:	b118      	cbz	r0, 800fa1c <_fflush_r+0x14>
 800fa14:	6983      	ldr	r3, [r0, #24]
 800fa16:	b90b      	cbnz	r3, 800fa1c <_fflush_r+0x14>
 800fa18:	f000 f860 	bl	800fadc <__sinit>
 800fa1c:	4b0c      	ldr	r3, [pc, #48]	; (800fa50 <_fflush_r+0x48>)
 800fa1e:	429c      	cmp	r4, r3
 800fa20:	d109      	bne.n	800fa36 <_fflush_r+0x2e>
 800fa22:	686c      	ldr	r4, [r5, #4]
 800fa24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa28:	b17b      	cbz	r3, 800fa4a <_fflush_r+0x42>
 800fa2a:	4621      	mov	r1, r4
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa32:	f7ff bf63 	b.w	800f8fc <__sflush_r>
 800fa36:	4b07      	ldr	r3, [pc, #28]	; (800fa54 <_fflush_r+0x4c>)
 800fa38:	429c      	cmp	r4, r3
 800fa3a:	d101      	bne.n	800fa40 <_fflush_r+0x38>
 800fa3c:	68ac      	ldr	r4, [r5, #8]
 800fa3e:	e7f1      	b.n	800fa24 <_fflush_r+0x1c>
 800fa40:	4b05      	ldr	r3, [pc, #20]	; (800fa58 <_fflush_r+0x50>)
 800fa42:	429c      	cmp	r4, r3
 800fa44:	bf08      	it	eq
 800fa46:	68ec      	ldreq	r4, [r5, #12]
 800fa48:	e7ec      	b.n	800fa24 <_fflush_r+0x1c>
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	bd38      	pop	{r3, r4, r5, pc}
 800fa4e:	bf00      	nop
 800fa50:	08011b74 	.word	0x08011b74
 800fa54:	08011b94 	.word	0x08011b94
 800fa58:	08011b54 	.word	0x08011b54

0800fa5c <std>:
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	b510      	push	{r4, lr}
 800fa60:	4604      	mov	r4, r0
 800fa62:	e9c0 3300 	strd	r3, r3, [r0]
 800fa66:	6083      	str	r3, [r0, #8]
 800fa68:	8181      	strh	r1, [r0, #12]
 800fa6a:	6643      	str	r3, [r0, #100]	; 0x64
 800fa6c:	81c2      	strh	r2, [r0, #14]
 800fa6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa72:	6183      	str	r3, [r0, #24]
 800fa74:	4619      	mov	r1, r3
 800fa76:	2208      	movs	r2, #8
 800fa78:	305c      	adds	r0, #92	; 0x5c
 800fa7a:	f7ff fd43 	bl	800f504 <memset>
 800fa7e:	4b05      	ldr	r3, [pc, #20]	; (800fa94 <std+0x38>)
 800fa80:	6263      	str	r3, [r4, #36]	; 0x24
 800fa82:	4b05      	ldr	r3, [pc, #20]	; (800fa98 <std+0x3c>)
 800fa84:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa86:	4b05      	ldr	r3, [pc, #20]	; (800fa9c <std+0x40>)
 800fa88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa8a:	4b05      	ldr	r3, [pc, #20]	; (800faa0 <std+0x44>)
 800fa8c:	6224      	str	r4, [r4, #32]
 800fa8e:	6323      	str	r3, [r4, #48]	; 0x30
 800fa90:	bd10      	pop	{r4, pc}
 800fa92:	bf00      	nop
 800fa94:	0801024d 	.word	0x0801024d
 800fa98:	0801026f 	.word	0x0801026f
 800fa9c:	080102a7 	.word	0x080102a7
 800faa0:	080102cb 	.word	0x080102cb

0800faa4 <_cleanup_r>:
 800faa4:	4901      	ldr	r1, [pc, #4]	; (800faac <_cleanup_r+0x8>)
 800faa6:	f000 b885 	b.w	800fbb4 <_fwalk_reent>
 800faaa:	bf00      	nop
 800faac:	0800fa09 	.word	0x0800fa09

0800fab0 <__sfmoreglue>:
 800fab0:	b570      	push	{r4, r5, r6, lr}
 800fab2:	1e4a      	subs	r2, r1, #1
 800fab4:	2568      	movs	r5, #104	; 0x68
 800fab6:	4355      	muls	r5, r2
 800fab8:	460e      	mov	r6, r1
 800faba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fabe:	f7ff fd77 	bl	800f5b0 <_malloc_r>
 800fac2:	4604      	mov	r4, r0
 800fac4:	b140      	cbz	r0, 800fad8 <__sfmoreglue+0x28>
 800fac6:	2100      	movs	r1, #0
 800fac8:	e9c0 1600 	strd	r1, r6, [r0]
 800facc:	300c      	adds	r0, #12
 800face:	60a0      	str	r0, [r4, #8]
 800fad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fad4:	f7ff fd16 	bl	800f504 <memset>
 800fad8:	4620      	mov	r0, r4
 800fada:	bd70      	pop	{r4, r5, r6, pc}

0800fadc <__sinit>:
 800fadc:	6983      	ldr	r3, [r0, #24]
 800fade:	b510      	push	{r4, lr}
 800fae0:	4604      	mov	r4, r0
 800fae2:	bb33      	cbnz	r3, 800fb32 <__sinit+0x56>
 800fae4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fae8:	6503      	str	r3, [r0, #80]	; 0x50
 800faea:	4b12      	ldr	r3, [pc, #72]	; (800fb34 <__sinit+0x58>)
 800faec:	4a12      	ldr	r2, [pc, #72]	; (800fb38 <__sinit+0x5c>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	6282      	str	r2, [r0, #40]	; 0x28
 800faf2:	4298      	cmp	r0, r3
 800faf4:	bf04      	itt	eq
 800faf6:	2301      	moveq	r3, #1
 800faf8:	6183      	streq	r3, [r0, #24]
 800fafa:	f000 f81f 	bl	800fb3c <__sfp>
 800fafe:	6060      	str	r0, [r4, #4]
 800fb00:	4620      	mov	r0, r4
 800fb02:	f000 f81b 	bl	800fb3c <__sfp>
 800fb06:	60a0      	str	r0, [r4, #8]
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f000 f817 	bl	800fb3c <__sfp>
 800fb0e:	2200      	movs	r2, #0
 800fb10:	60e0      	str	r0, [r4, #12]
 800fb12:	2104      	movs	r1, #4
 800fb14:	6860      	ldr	r0, [r4, #4]
 800fb16:	f7ff ffa1 	bl	800fa5c <std>
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	2109      	movs	r1, #9
 800fb1e:	68a0      	ldr	r0, [r4, #8]
 800fb20:	f7ff ff9c 	bl	800fa5c <std>
 800fb24:	2202      	movs	r2, #2
 800fb26:	2112      	movs	r1, #18
 800fb28:	68e0      	ldr	r0, [r4, #12]
 800fb2a:	f7ff ff97 	bl	800fa5c <std>
 800fb2e:	2301      	movs	r3, #1
 800fb30:	61a3      	str	r3, [r4, #24]
 800fb32:	bd10      	pop	{r4, pc}
 800fb34:	08011b50 	.word	0x08011b50
 800fb38:	0800faa5 	.word	0x0800faa5

0800fb3c <__sfp>:
 800fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3e:	4b1b      	ldr	r3, [pc, #108]	; (800fbac <__sfp+0x70>)
 800fb40:	681e      	ldr	r6, [r3, #0]
 800fb42:	69b3      	ldr	r3, [r6, #24]
 800fb44:	4607      	mov	r7, r0
 800fb46:	b913      	cbnz	r3, 800fb4e <__sfp+0x12>
 800fb48:	4630      	mov	r0, r6
 800fb4a:	f7ff ffc7 	bl	800fadc <__sinit>
 800fb4e:	3648      	adds	r6, #72	; 0x48
 800fb50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb54:	3b01      	subs	r3, #1
 800fb56:	d503      	bpl.n	800fb60 <__sfp+0x24>
 800fb58:	6833      	ldr	r3, [r6, #0]
 800fb5a:	b133      	cbz	r3, 800fb6a <__sfp+0x2e>
 800fb5c:	6836      	ldr	r6, [r6, #0]
 800fb5e:	e7f7      	b.n	800fb50 <__sfp+0x14>
 800fb60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb64:	b16d      	cbz	r5, 800fb82 <__sfp+0x46>
 800fb66:	3468      	adds	r4, #104	; 0x68
 800fb68:	e7f4      	b.n	800fb54 <__sfp+0x18>
 800fb6a:	2104      	movs	r1, #4
 800fb6c:	4638      	mov	r0, r7
 800fb6e:	f7ff ff9f 	bl	800fab0 <__sfmoreglue>
 800fb72:	6030      	str	r0, [r6, #0]
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d1f1      	bne.n	800fb5c <__sfp+0x20>
 800fb78:	230c      	movs	r3, #12
 800fb7a:	603b      	str	r3, [r7, #0]
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	4620      	mov	r0, r4
 800fb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb82:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <__sfp+0x74>)
 800fb84:	6665      	str	r5, [r4, #100]	; 0x64
 800fb86:	e9c4 5500 	strd	r5, r5, [r4]
 800fb8a:	60a5      	str	r5, [r4, #8]
 800fb8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fb90:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fb94:	2208      	movs	r2, #8
 800fb96:	4629      	mov	r1, r5
 800fb98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb9c:	f7ff fcb2 	bl	800f504 <memset>
 800fba0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fba4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fba8:	e7e9      	b.n	800fb7e <__sfp+0x42>
 800fbaa:	bf00      	nop
 800fbac:	08011b50 	.word	0x08011b50
 800fbb0:	ffff0001 	.word	0xffff0001

0800fbb4 <_fwalk_reent>:
 800fbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbb8:	4680      	mov	r8, r0
 800fbba:	4689      	mov	r9, r1
 800fbbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fbc0:	2600      	movs	r6, #0
 800fbc2:	b914      	cbnz	r4, 800fbca <_fwalk_reent+0x16>
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fbce:	3f01      	subs	r7, #1
 800fbd0:	d501      	bpl.n	800fbd6 <_fwalk_reent+0x22>
 800fbd2:	6824      	ldr	r4, [r4, #0]
 800fbd4:	e7f5      	b.n	800fbc2 <_fwalk_reent+0xe>
 800fbd6:	89ab      	ldrh	r3, [r5, #12]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d907      	bls.n	800fbec <_fwalk_reent+0x38>
 800fbdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	d003      	beq.n	800fbec <_fwalk_reent+0x38>
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	4640      	mov	r0, r8
 800fbe8:	47c8      	blx	r9
 800fbea:	4306      	orrs	r6, r0
 800fbec:	3568      	adds	r5, #104	; 0x68
 800fbee:	e7ee      	b.n	800fbce <_fwalk_reent+0x1a>

0800fbf0 <__swhatbuf_r>:
 800fbf0:	b570      	push	{r4, r5, r6, lr}
 800fbf2:	460e      	mov	r6, r1
 800fbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbf8:	2900      	cmp	r1, #0
 800fbfa:	b096      	sub	sp, #88	; 0x58
 800fbfc:	4614      	mov	r4, r2
 800fbfe:	461d      	mov	r5, r3
 800fc00:	da07      	bge.n	800fc12 <__swhatbuf_r+0x22>
 800fc02:	2300      	movs	r3, #0
 800fc04:	602b      	str	r3, [r5, #0]
 800fc06:	89b3      	ldrh	r3, [r6, #12]
 800fc08:	061a      	lsls	r2, r3, #24
 800fc0a:	d410      	bmi.n	800fc2e <__swhatbuf_r+0x3e>
 800fc0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc10:	e00e      	b.n	800fc30 <__swhatbuf_r+0x40>
 800fc12:	466a      	mov	r2, sp
 800fc14:	f000 fb80 	bl	8010318 <_fstat_r>
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	dbf2      	blt.n	800fc02 <__swhatbuf_r+0x12>
 800fc1c:	9a01      	ldr	r2, [sp, #4]
 800fc1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc26:	425a      	negs	r2, r3
 800fc28:	415a      	adcs	r2, r3
 800fc2a:	602a      	str	r2, [r5, #0]
 800fc2c:	e7ee      	b.n	800fc0c <__swhatbuf_r+0x1c>
 800fc2e:	2340      	movs	r3, #64	; 0x40
 800fc30:	2000      	movs	r0, #0
 800fc32:	6023      	str	r3, [r4, #0]
 800fc34:	b016      	add	sp, #88	; 0x58
 800fc36:	bd70      	pop	{r4, r5, r6, pc}

0800fc38 <__smakebuf_r>:
 800fc38:	898b      	ldrh	r3, [r1, #12]
 800fc3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc3c:	079d      	lsls	r5, r3, #30
 800fc3e:	4606      	mov	r6, r0
 800fc40:	460c      	mov	r4, r1
 800fc42:	d507      	bpl.n	800fc54 <__smakebuf_r+0x1c>
 800fc44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	6123      	str	r3, [r4, #16]
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	6163      	str	r3, [r4, #20]
 800fc50:	b002      	add	sp, #8
 800fc52:	bd70      	pop	{r4, r5, r6, pc}
 800fc54:	ab01      	add	r3, sp, #4
 800fc56:	466a      	mov	r2, sp
 800fc58:	f7ff ffca 	bl	800fbf0 <__swhatbuf_r>
 800fc5c:	9900      	ldr	r1, [sp, #0]
 800fc5e:	4605      	mov	r5, r0
 800fc60:	4630      	mov	r0, r6
 800fc62:	f7ff fca5 	bl	800f5b0 <_malloc_r>
 800fc66:	b948      	cbnz	r0, 800fc7c <__smakebuf_r+0x44>
 800fc68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc6c:	059a      	lsls	r2, r3, #22
 800fc6e:	d4ef      	bmi.n	800fc50 <__smakebuf_r+0x18>
 800fc70:	f023 0303 	bic.w	r3, r3, #3
 800fc74:	f043 0302 	orr.w	r3, r3, #2
 800fc78:	81a3      	strh	r3, [r4, #12]
 800fc7a:	e7e3      	b.n	800fc44 <__smakebuf_r+0xc>
 800fc7c:	4b0d      	ldr	r3, [pc, #52]	; (800fcb4 <__smakebuf_r+0x7c>)
 800fc7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc80:	89a3      	ldrh	r3, [r4, #12]
 800fc82:	6020      	str	r0, [r4, #0]
 800fc84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc88:	81a3      	strh	r3, [r4, #12]
 800fc8a:	9b00      	ldr	r3, [sp, #0]
 800fc8c:	6163      	str	r3, [r4, #20]
 800fc8e:	9b01      	ldr	r3, [sp, #4]
 800fc90:	6120      	str	r0, [r4, #16]
 800fc92:	b15b      	cbz	r3, 800fcac <__smakebuf_r+0x74>
 800fc94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc98:	4630      	mov	r0, r6
 800fc9a:	f000 fb4f 	bl	801033c <_isatty_r>
 800fc9e:	b128      	cbz	r0, 800fcac <__smakebuf_r+0x74>
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	f023 0303 	bic.w	r3, r3, #3
 800fca6:	f043 0301 	orr.w	r3, r3, #1
 800fcaa:	81a3      	strh	r3, [r4, #12]
 800fcac:	89a3      	ldrh	r3, [r4, #12]
 800fcae:	431d      	orrs	r5, r3
 800fcb0:	81a5      	strh	r5, [r4, #12]
 800fcb2:	e7cd      	b.n	800fc50 <__smakebuf_r+0x18>
 800fcb4:	0800faa5 	.word	0x0800faa5

0800fcb8 <__malloc_lock>:
 800fcb8:	4770      	bx	lr

0800fcba <__malloc_unlock>:
 800fcba:	4770      	bx	lr

0800fcbc <__sfputc_r>:
 800fcbc:	6893      	ldr	r3, [r2, #8]
 800fcbe:	3b01      	subs	r3, #1
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	b410      	push	{r4}
 800fcc4:	6093      	str	r3, [r2, #8]
 800fcc6:	da08      	bge.n	800fcda <__sfputc_r+0x1e>
 800fcc8:	6994      	ldr	r4, [r2, #24]
 800fcca:	42a3      	cmp	r3, r4
 800fccc:	db01      	blt.n	800fcd2 <__sfputc_r+0x16>
 800fcce:	290a      	cmp	r1, #10
 800fcd0:	d103      	bne.n	800fcda <__sfputc_r+0x1e>
 800fcd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcd6:	f7ff bd51 	b.w	800f77c <__swbuf_r>
 800fcda:	6813      	ldr	r3, [r2, #0]
 800fcdc:	1c58      	adds	r0, r3, #1
 800fcde:	6010      	str	r0, [r2, #0]
 800fce0:	7019      	strb	r1, [r3, #0]
 800fce2:	4608      	mov	r0, r1
 800fce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fce8:	4770      	bx	lr

0800fcea <__sfputs_r>:
 800fcea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcec:	4606      	mov	r6, r0
 800fcee:	460f      	mov	r7, r1
 800fcf0:	4614      	mov	r4, r2
 800fcf2:	18d5      	adds	r5, r2, r3
 800fcf4:	42ac      	cmp	r4, r5
 800fcf6:	d101      	bne.n	800fcfc <__sfputs_r+0x12>
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	e007      	b.n	800fd0c <__sfputs_r+0x22>
 800fcfc:	463a      	mov	r2, r7
 800fcfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd02:	4630      	mov	r0, r6
 800fd04:	f7ff ffda 	bl	800fcbc <__sfputc_r>
 800fd08:	1c43      	adds	r3, r0, #1
 800fd0a:	d1f3      	bne.n	800fcf4 <__sfputs_r+0xa>
 800fd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd10 <_vfiprintf_r>:
 800fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd14:	460c      	mov	r4, r1
 800fd16:	b09d      	sub	sp, #116	; 0x74
 800fd18:	4617      	mov	r7, r2
 800fd1a:	461d      	mov	r5, r3
 800fd1c:	4606      	mov	r6, r0
 800fd1e:	b118      	cbz	r0, 800fd28 <_vfiprintf_r+0x18>
 800fd20:	6983      	ldr	r3, [r0, #24]
 800fd22:	b90b      	cbnz	r3, 800fd28 <_vfiprintf_r+0x18>
 800fd24:	f7ff feda 	bl	800fadc <__sinit>
 800fd28:	4b7c      	ldr	r3, [pc, #496]	; (800ff1c <_vfiprintf_r+0x20c>)
 800fd2a:	429c      	cmp	r4, r3
 800fd2c:	d158      	bne.n	800fde0 <_vfiprintf_r+0xd0>
 800fd2e:	6874      	ldr	r4, [r6, #4]
 800fd30:	89a3      	ldrh	r3, [r4, #12]
 800fd32:	0718      	lsls	r0, r3, #28
 800fd34:	d55e      	bpl.n	800fdf4 <_vfiprintf_r+0xe4>
 800fd36:	6923      	ldr	r3, [r4, #16]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d05b      	beq.n	800fdf4 <_vfiprintf_r+0xe4>
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800fd40:	2320      	movs	r3, #32
 800fd42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd46:	2330      	movs	r3, #48	; 0x30
 800fd48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd4c:	9503      	str	r5, [sp, #12]
 800fd4e:	f04f 0b01 	mov.w	fp, #1
 800fd52:	46b8      	mov	r8, r7
 800fd54:	4645      	mov	r5, r8
 800fd56:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fd5a:	b10b      	cbz	r3, 800fd60 <_vfiprintf_r+0x50>
 800fd5c:	2b25      	cmp	r3, #37	; 0x25
 800fd5e:	d154      	bne.n	800fe0a <_vfiprintf_r+0xfa>
 800fd60:	ebb8 0a07 	subs.w	sl, r8, r7
 800fd64:	d00b      	beq.n	800fd7e <_vfiprintf_r+0x6e>
 800fd66:	4653      	mov	r3, sl
 800fd68:	463a      	mov	r2, r7
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	4630      	mov	r0, r6
 800fd6e:	f7ff ffbc 	bl	800fcea <__sfputs_r>
 800fd72:	3001      	adds	r0, #1
 800fd74:	f000 80c2 	beq.w	800fefc <_vfiprintf_r+0x1ec>
 800fd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd7a:	4453      	add	r3, sl
 800fd7c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd7e:	f898 3000 	ldrb.w	r3, [r8]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	f000 80ba 	beq.w	800fefc <_vfiprintf_r+0x1ec>
 800fd88:	2300      	movs	r3, #0
 800fd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd92:	9304      	str	r3, [sp, #16]
 800fd94:	9307      	str	r3, [sp, #28]
 800fd96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd9a:	931a      	str	r3, [sp, #104]	; 0x68
 800fd9c:	46a8      	mov	r8, r5
 800fd9e:	2205      	movs	r2, #5
 800fda0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800fda4:	485e      	ldr	r0, [pc, #376]	; (800ff20 <_vfiprintf_r+0x210>)
 800fda6:	f7f0 fa1b 	bl	80001e0 <memchr>
 800fdaa:	9b04      	ldr	r3, [sp, #16]
 800fdac:	bb78      	cbnz	r0, 800fe0e <_vfiprintf_r+0xfe>
 800fdae:	06d9      	lsls	r1, r3, #27
 800fdb0:	bf44      	itt	mi
 800fdb2:	2220      	movmi	r2, #32
 800fdb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fdb8:	071a      	lsls	r2, r3, #28
 800fdba:	bf44      	itt	mi
 800fdbc:	222b      	movmi	r2, #43	; 0x2b
 800fdbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fdc2:	782a      	ldrb	r2, [r5, #0]
 800fdc4:	2a2a      	cmp	r2, #42	; 0x2a
 800fdc6:	d02a      	beq.n	800fe1e <_vfiprintf_r+0x10e>
 800fdc8:	9a07      	ldr	r2, [sp, #28]
 800fdca:	46a8      	mov	r8, r5
 800fdcc:	2000      	movs	r0, #0
 800fdce:	250a      	movs	r5, #10
 800fdd0:	4641      	mov	r1, r8
 800fdd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdd6:	3b30      	subs	r3, #48	; 0x30
 800fdd8:	2b09      	cmp	r3, #9
 800fdda:	d969      	bls.n	800feb0 <_vfiprintf_r+0x1a0>
 800fddc:	b360      	cbz	r0, 800fe38 <_vfiprintf_r+0x128>
 800fdde:	e024      	b.n	800fe2a <_vfiprintf_r+0x11a>
 800fde0:	4b50      	ldr	r3, [pc, #320]	; (800ff24 <_vfiprintf_r+0x214>)
 800fde2:	429c      	cmp	r4, r3
 800fde4:	d101      	bne.n	800fdea <_vfiprintf_r+0xda>
 800fde6:	68b4      	ldr	r4, [r6, #8]
 800fde8:	e7a2      	b.n	800fd30 <_vfiprintf_r+0x20>
 800fdea:	4b4f      	ldr	r3, [pc, #316]	; (800ff28 <_vfiprintf_r+0x218>)
 800fdec:	429c      	cmp	r4, r3
 800fdee:	bf08      	it	eq
 800fdf0:	68f4      	ldreq	r4, [r6, #12]
 800fdf2:	e79d      	b.n	800fd30 <_vfiprintf_r+0x20>
 800fdf4:	4621      	mov	r1, r4
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	f7ff fd12 	bl	800f820 <__swsetup_r>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d09d      	beq.n	800fd3c <_vfiprintf_r+0x2c>
 800fe00:	f04f 30ff 	mov.w	r0, #4294967295
 800fe04:	b01d      	add	sp, #116	; 0x74
 800fe06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe0a:	46a8      	mov	r8, r5
 800fe0c:	e7a2      	b.n	800fd54 <_vfiprintf_r+0x44>
 800fe0e:	4a44      	ldr	r2, [pc, #272]	; (800ff20 <_vfiprintf_r+0x210>)
 800fe10:	1a80      	subs	r0, r0, r2
 800fe12:	fa0b f000 	lsl.w	r0, fp, r0
 800fe16:	4318      	orrs	r0, r3
 800fe18:	9004      	str	r0, [sp, #16]
 800fe1a:	4645      	mov	r5, r8
 800fe1c:	e7be      	b.n	800fd9c <_vfiprintf_r+0x8c>
 800fe1e:	9a03      	ldr	r2, [sp, #12]
 800fe20:	1d11      	adds	r1, r2, #4
 800fe22:	6812      	ldr	r2, [r2, #0]
 800fe24:	9103      	str	r1, [sp, #12]
 800fe26:	2a00      	cmp	r2, #0
 800fe28:	db01      	blt.n	800fe2e <_vfiprintf_r+0x11e>
 800fe2a:	9207      	str	r2, [sp, #28]
 800fe2c:	e004      	b.n	800fe38 <_vfiprintf_r+0x128>
 800fe2e:	4252      	negs	r2, r2
 800fe30:	f043 0302 	orr.w	r3, r3, #2
 800fe34:	9207      	str	r2, [sp, #28]
 800fe36:	9304      	str	r3, [sp, #16]
 800fe38:	f898 3000 	ldrb.w	r3, [r8]
 800fe3c:	2b2e      	cmp	r3, #46	; 0x2e
 800fe3e:	d10e      	bne.n	800fe5e <_vfiprintf_r+0x14e>
 800fe40:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fe44:	2b2a      	cmp	r3, #42	; 0x2a
 800fe46:	d138      	bne.n	800feba <_vfiprintf_r+0x1aa>
 800fe48:	9b03      	ldr	r3, [sp, #12]
 800fe4a:	1d1a      	adds	r2, r3, #4
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	9203      	str	r2, [sp, #12]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	bfb8      	it	lt
 800fe54:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe58:	f108 0802 	add.w	r8, r8, #2
 800fe5c:	9305      	str	r3, [sp, #20]
 800fe5e:	4d33      	ldr	r5, [pc, #204]	; (800ff2c <_vfiprintf_r+0x21c>)
 800fe60:	f898 1000 	ldrb.w	r1, [r8]
 800fe64:	2203      	movs	r2, #3
 800fe66:	4628      	mov	r0, r5
 800fe68:	f7f0 f9ba 	bl	80001e0 <memchr>
 800fe6c:	b140      	cbz	r0, 800fe80 <_vfiprintf_r+0x170>
 800fe6e:	2340      	movs	r3, #64	; 0x40
 800fe70:	1b40      	subs	r0, r0, r5
 800fe72:	fa03 f000 	lsl.w	r0, r3, r0
 800fe76:	9b04      	ldr	r3, [sp, #16]
 800fe78:	4303      	orrs	r3, r0
 800fe7a:	f108 0801 	add.w	r8, r8, #1
 800fe7e:	9304      	str	r3, [sp, #16]
 800fe80:	f898 1000 	ldrb.w	r1, [r8]
 800fe84:	482a      	ldr	r0, [pc, #168]	; (800ff30 <_vfiprintf_r+0x220>)
 800fe86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe8a:	2206      	movs	r2, #6
 800fe8c:	f108 0701 	add.w	r7, r8, #1
 800fe90:	f7f0 f9a6 	bl	80001e0 <memchr>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	d037      	beq.n	800ff08 <_vfiprintf_r+0x1f8>
 800fe98:	4b26      	ldr	r3, [pc, #152]	; (800ff34 <_vfiprintf_r+0x224>)
 800fe9a:	bb1b      	cbnz	r3, 800fee4 <_vfiprintf_r+0x1d4>
 800fe9c:	9b03      	ldr	r3, [sp, #12]
 800fe9e:	3307      	adds	r3, #7
 800fea0:	f023 0307 	bic.w	r3, r3, #7
 800fea4:	3308      	adds	r3, #8
 800fea6:	9303      	str	r3, [sp, #12]
 800fea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feaa:	444b      	add	r3, r9
 800feac:	9309      	str	r3, [sp, #36]	; 0x24
 800feae:	e750      	b.n	800fd52 <_vfiprintf_r+0x42>
 800feb0:	fb05 3202 	mla	r2, r5, r2, r3
 800feb4:	2001      	movs	r0, #1
 800feb6:	4688      	mov	r8, r1
 800feb8:	e78a      	b.n	800fdd0 <_vfiprintf_r+0xc0>
 800feba:	2300      	movs	r3, #0
 800febc:	f108 0801 	add.w	r8, r8, #1
 800fec0:	9305      	str	r3, [sp, #20]
 800fec2:	4619      	mov	r1, r3
 800fec4:	250a      	movs	r5, #10
 800fec6:	4640      	mov	r0, r8
 800fec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fecc:	3a30      	subs	r2, #48	; 0x30
 800fece:	2a09      	cmp	r2, #9
 800fed0:	d903      	bls.n	800feda <_vfiprintf_r+0x1ca>
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d0c3      	beq.n	800fe5e <_vfiprintf_r+0x14e>
 800fed6:	9105      	str	r1, [sp, #20]
 800fed8:	e7c1      	b.n	800fe5e <_vfiprintf_r+0x14e>
 800feda:	fb05 2101 	mla	r1, r5, r1, r2
 800fede:	2301      	movs	r3, #1
 800fee0:	4680      	mov	r8, r0
 800fee2:	e7f0      	b.n	800fec6 <_vfiprintf_r+0x1b6>
 800fee4:	ab03      	add	r3, sp, #12
 800fee6:	9300      	str	r3, [sp, #0]
 800fee8:	4622      	mov	r2, r4
 800feea:	4b13      	ldr	r3, [pc, #76]	; (800ff38 <_vfiprintf_r+0x228>)
 800feec:	a904      	add	r1, sp, #16
 800feee:	4630      	mov	r0, r6
 800fef0:	f3af 8000 	nop.w
 800fef4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fef8:	4681      	mov	r9, r0
 800fefa:	d1d5      	bne.n	800fea8 <_vfiprintf_r+0x198>
 800fefc:	89a3      	ldrh	r3, [r4, #12]
 800fefe:	065b      	lsls	r3, r3, #25
 800ff00:	f53f af7e 	bmi.w	800fe00 <_vfiprintf_r+0xf0>
 800ff04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff06:	e77d      	b.n	800fe04 <_vfiprintf_r+0xf4>
 800ff08:	ab03      	add	r3, sp, #12
 800ff0a:	9300      	str	r3, [sp, #0]
 800ff0c:	4622      	mov	r2, r4
 800ff0e:	4b0a      	ldr	r3, [pc, #40]	; (800ff38 <_vfiprintf_r+0x228>)
 800ff10:	a904      	add	r1, sp, #16
 800ff12:	4630      	mov	r0, r6
 800ff14:	f000 f888 	bl	8010028 <_printf_i>
 800ff18:	e7ec      	b.n	800fef4 <_vfiprintf_r+0x1e4>
 800ff1a:	bf00      	nop
 800ff1c:	08011b74 	.word	0x08011b74
 800ff20:	08011bb4 	.word	0x08011bb4
 800ff24:	08011b94 	.word	0x08011b94
 800ff28:	08011b54 	.word	0x08011b54
 800ff2c:	08011bba 	.word	0x08011bba
 800ff30:	08011bbe 	.word	0x08011bbe
 800ff34:	00000000 	.word	0x00000000
 800ff38:	0800fceb 	.word	0x0800fceb

0800ff3c <_printf_common>:
 800ff3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff40:	4691      	mov	r9, r2
 800ff42:	461f      	mov	r7, r3
 800ff44:	688a      	ldr	r2, [r1, #8]
 800ff46:	690b      	ldr	r3, [r1, #16]
 800ff48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	bfb8      	it	lt
 800ff50:	4613      	movlt	r3, r2
 800ff52:	f8c9 3000 	str.w	r3, [r9]
 800ff56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	460c      	mov	r4, r1
 800ff5e:	b112      	cbz	r2, 800ff66 <_printf_common+0x2a>
 800ff60:	3301      	adds	r3, #1
 800ff62:	f8c9 3000 	str.w	r3, [r9]
 800ff66:	6823      	ldr	r3, [r4, #0]
 800ff68:	0699      	lsls	r1, r3, #26
 800ff6a:	bf42      	ittt	mi
 800ff6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ff70:	3302      	addmi	r3, #2
 800ff72:	f8c9 3000 	strmi.w	r3, [r9]
 800ff76:	6825      	ldr	r5, [r4, #0]
 800ff78:	f015 0506 	ands.w	r5, r5, #6
 800ff7c:	d107      	bne.n	800ff8e <_printf_common+0x52>
 800ff7e:	f104 0a19 	add.w	sl, r4, #25
 800ff82:	68e3      	ldr	r3, [r4, #12]
 800ff84:	f8d9 2000 	ldr.w	r2, [r9]
 800ff88:	1a9b      	subs	r3, r3, r2
 800ff8a:	42ab      	cmp	r3, r5
 800ff8c:	dc28      	bgt.n	800ffe0 <_printf_common+0xa4>
 800ff8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ff92:	6822      	ldr	r2, [r4, #0]
 800ff94:	3300      	adds	r3, #0
 800ff96:	bf18      	it	ne
 800ff98:	2301      	movne	r3, #1
 800ff9a:	0692      	lsls	r2, r2, #26
 800ff9c:	d42d      	bmi.n	800fffa <_printf_common+0xbe>
 800ff9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ffa2:	4639      	mov	r1, r7
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	47c0      	blx	r8
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	d020      	beq.n	800ffee <_printf_common+0xb2>
 800ffac:	6823      	ldr	r3, [r4, #0]
 800ffae:	68e5      	ldr	r5, [r4, #12]
 800ffb0:	f8d9 2000 	ldr.w	r2, [r9]
 800ffb4:	f003 0306 	and.w	r3, r3, #6
 800ffb8:	2b04      	cmp	r3, #4
 800ffba:	bf08      	it	eq
 800ffbc:	1aad      	subeq	r5, r5, r2
 800ffbe:	68a3      	ldr	r3, [r4, #8]
 800ffc0:	6922      	ldr	r2, [r4, #16]
 800ffc2:	bf0c      	ite	eq
 800ffc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffc8:	2500      	movne	r5, #0
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	bfc4      	itt	gt
 800ffce:	1a9b      	subgt	r3, r3, r2
 800ffd0:	18ed      	addgt	r5, r5, r3
 800ffd2:	f04f 0900 	mov.w	r9, #0
 800ffd6:	341a      	adds	r4, #26
 800ffd8:	454d      	cmp	r5, r9
 800ffda:	d11a      	bne.n	8010012 <_printf_common+0xd6>
 800ffdc:	2000      	movs	r0, #0
 800ffde:	e008      	b.n	800fff2 <_printf_common+0xb6>
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	4652      	mov	r2, sl
 800ffe4:	4639      	mov	r1, r7
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	47c0      	blx	r8
 800ffea:	3001      	adds	r0, #1
 800ffec:	d103      	bne.n	800fff6 <_printf_common+0xba>
 800ffee:	f04f 30ff 	mov.w	r0, #4294967295
 800fff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fff6:	3501      	adds	r5, #1
 800fff8:	e7c3      	b.n	800ff82 <_printf_common+0x46>
 800fffa:	18e1      	adds	r1, r4, r3
 800fffc:	1c5a      	adds	r2, r3, #1
 800fffe:	2030      	movs	r0, #48	; 0x30
 8010000:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010004:	4422      	add	r2, r4
 8010006:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801000a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801000e:	3302      	adds	r3, #2
 8010010:	e7c5      	b.n	800ff9e <_printf_common+0x62>
 8010012:	2301      	movs	r3, #1
 8010014:	4622      	mov	r2, r4
 8010016:	4639      	mov	r1, r7
 8010018:	4630      	mov	r0, r6
 801001a:	47c0      	blx	r8
 801001c:	3001      	adds	r0, #1
 801001e:	d0e6      	beq.n	800ffee <_printf_common+0xb2>
 8010020:	f109 0901 	add.w	r9, r9, #1
 8010024:	e7d8      	b.n	800ffd8 <_printf_common+0x9c>
	...

08010028 <_printf_i>:
 8010028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801002c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010030:	460c      	mov	r4, r1
 8010032:	7e09      	ldrb	r1, [r1, #24]
 8010034:	b085      	sub	sp, #20
 8010036:	296e      	cmp	r1, #110	; 0x6e
 8010038:	4617      	mov	r7, r2
 801003a:	4606      	mov	r6, r0
 801003c:	4698      	mov	r8, r3
 801003e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010040:	f000 80b3 	beq.w	80101aa <_printf_i+0x182>
 8010044:	d822      	bhi.n	801008c <_printf_i+0x64>
 8010046:	2963      	cmp	r1, #99	; 0x63
 8010048:	d036      	beq.n	80100b8 <_printf_i+0x90>
 801004a:	d80a      	bhi.n	8010062 <_printf_i+0x3a>
 801004c:	2900      	cmp	r1, #0
 801004e:	f000 80b9 	beq.w	80101c4 <_printf_i+0x19c>
 8010052:	2958      	cmp	r1, #88	; 0x58
 8010054:	f000 8083 	beq.w	801015e <_printf_i+0x136>
 8010058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801005c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010060:	e032      	b.n	80100c8 <_printf_i+0xa0>
 8010062:	2964      	cmp	r1, #100	; 0x64
 8010064:	d001      	beq.n	801006a <_printf_i+0x42>
 8010066:	2969      	cmp	r1, #105	; 0x69
 8010068:	d1f6      	bne.n	8010058 <_printf_i+0x30>
 801006a:	6820      	ldr	r0, [r4, #0]
 801006c:	6813      	ldr	r3, [r2, #0]
 801006e:	0605      	lsls	r5, r0, #24
 8010070:	f103 0104 	add.w	r1, r3, #4
 8010074:	d52a      	bpl.n	80100cc <_printf_i+0xa4>
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	6011      	str	r1, [r2, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	da03      	bge.n	8010086 <_printf_i+0x5e>
 801007e:	222d      	movs	r2, #45	; 0x2d
 8010080:	425b      	negs	r3, r3
 8010082:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010086:	486f      	ldr	r0, [pc, #444]	; (8010244 <_printf_i+0x21c>)
 8010088:	220a      	movs	r2, #10
 801008a:	e039      	b.n	8010100 <_printf_i+0xd8>
 801008c:	2973      	cmp	r1, #115	; 0x73
 801008e:	f000 809d 	beq.w	80101cc <_printf_i+0x1a4>
 8010092:	d808      	bhi.n	80100a6 <_printf_i+0x7e>
 8010094:	296f      	cmp	r1, #111	; 0x6f
 8010096:	d020      	beq.n	80100da <_printf_i+0xb2>
 8010098:	2970      	cmp	r1, #112	; 0x70
 801009a:	d1dd      	bne.n	8010058 <_printf_i+0x30>
 801009c:	6823      	ldr	r3, [r4, #0]
 801009e:	f043 0320 	orr.w	r3, r3, #32
 80100a2:	6023      	str	r3, [r4, #0]
 80100a4:	e003      	b.n	80100ae <_printf_i+0x86>
 80100a6:	2975      	cmp	r1, #117	; 0x75
 80100a8:	d017      	beq.n	80100da <_printf_i+0xb2>
 80100aa:	2978      	cmp	r1, #120	; 0x78
 80100ac:	d1d4      	bne.n	8010058 <_printf_i+0x30>
 80100ae:	2378      	movs	r3, #120	; 0x78
 80100b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100b4:	4864      	ldr	r0, [pc, #400]	; (8010248 <_printf_i+0x220>)
 80100b6:	e055      	b.n	8010164 <_printf_i+0x13c>
 80100b8:	6813      	ldr	r3, [r2, #0]
 80100ba:	1d19      	adds	r1, r3, #4
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	6011      	str	r1, [r2, #0]
 80100c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100c8:	2301      	movs	r3, #1
 80100ca:	e08c      	b.n	80101e6 <_printf_i+0x1be>
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	6011      	str	r1, [r2, #0]
 80100d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80100d4:	bf18      	it	ne
 80100d6:	b21b      	sxthne	r3, r3
 80100d8:	e7cf      	b.n	801007a <_printf_i+0x52>
 80100da:	6813      	ldr	r3, [r2, #0]
 80100dc:	6825      	ldr	r5, [r4, #0]
 80100de:	1d18      	adds	r0, r3, #4
 80100e0:	6010      	str	r0, [r2, #0]
 80100e2:	0628      	lsls	r0, r5, #24
 80100e4:	d501      	bpl.n	80100ea <_printf_i+0xc2>
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	e002      	b.n	80100f0 <_printf_i+0xc8>
 80100ea:	0668      	lsls	r0, r5, #25
 80100ec:	d5fb      	bpl.n	80100e6 <_printf_i+0xbe>
 80100ee:	881b      	ldrh	r3, [r3, #0]
 80100f0:	4854      	ldr	r0, [pc, #336]	; (8010244 <_printf_i+0x21c>)
 80100f2:	296f      	cmp	r1, #111	; 0x6f
 80100f4:	bf14      	ite	ne
 80100f6:	220a      	movne	r2, #10
 80100f8:	2208      	moveq	r2, #8
 80100fa:	2100      	movs	r1, #0
 80100fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010100:	6865      	ldr	r5, [r4, #4]
 8010102:	60a5      	str	r5, [r4, #8]
 8010104:	2d00      	cmp	r5, #0
 8010106:	f2c0 8095 	blt.w	8010234 <_printf_i+0x20c>
 801010a:	6821      	ldr	r1, [r4, #0]
 801010c:	f021 0104 	bic.w	r1, r1, #4
 8010110:	6021      	str	r1, [r4, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d13d      	bne.n	8010192 <_printf_i+0x16a>
 8010116:	2d00      	cmp	r5, #0
 8010118:	f040 808e 	bne.w	8010238 <_printf_i+0x210>
 801011c:	4665      	mov	r5, ip
 801011e:	2a08      	cmp	r2, #8
 8010120:	d10b      	bne.n	801013a <_printf_i+0x112>
 8010122:	6823      	ldr	r3, [r4, #0]
 8010124:	07db      	lsls	r3, r3, #31
 8010126:	d508      	bpl.n	801013a <_printf_i+0x112>
 8010128:	6923      	ldr	r3, [r4, #16]
 801012a:	6862      	ldr	r2, [r4, #4]
 801012c:	429a      	cmp	r2, r3
 801012e:	bfde      	ittt	le
 8010130:	2330      	movle	r3, #48	; 0x30
 8010132:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010136:	f105 35ff 	addle.w	r5, r5, #4294967295
 801013a:	ebac 0305 	sub.w	r3, ip, r5
 801013e:	6123      	str	r3, [r4, #16]
 8010140:	f8cd 8000 	str.w	r8, [sp]
 8010144:	463b      	mov	r3, r7
 8010146:	aa03      	add	r2, sp, #12
 8010148:	4621      	mov	r1, r4
 801014a:	4630      	mov	r0, r6
 801014c:	f7ff fef6 	bl	800ff3c <_printf_common>
 8010150:	3001      	adds	r0, #1
 8010152:	d14d      	bne.n	80101f0 <_printf_i+0x1c8>
 8010154:	f04f 30ff 	mov.w	r0, #4294967295
 8010158:	b005      	add	sp, #20
 801015a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801015e:	4839      	ldr	r0, [pc, #228]	; (8010244 <_printf_i+0x21c>)
 8010160:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010164:	6813      	ldr	r3, [r2, #0]
 8010166:	6821      	ldr	r1, [r4, #0]
 8010168:	1d1d      	adds	r5, r3, #4
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	6015      	str	r5, [r2, #0]
 801016e:	060a      	lsls	r2, r1, #24
 8010170:	d50b      	bpl.n	801018a <_printf_i+0x162>
 8010172:	07ca      	lsls	r2, r1, #31
 8010174:	bf44      	itt	mi
 8010176:	f041 0120 	orrmi.w	r1, r1, #32
 801017a:	6021      	strmi	r1, [r4, #0]
 801017c:	b91b      	cbnz	r3, 8010186 <_printf_i+0x15e>
 801017e:	6822      	ldr	r2, [r4, #0]
 8010180:	f022 0220 	bic.w	r2, r2, #32
 8010184:	6022      	str	r2, [r4, #0]
 8010186:	2210      	movs	r2, #16
 8010188:	e7b7      	b.n	80100fa <_printf_i+0xd2>
 801018a:	064d      	lsls	r5, r1, #25
 801018c:	bf48      	it	mi
 801018e:	b29b      	uxthmi	r3, r3
 8010190:	e7ef      	b.n	8010172 <_printf_i+0x14a>
 8010192:	4665      	mov	r5, ip
 8010194:	fbb3 f1f2 	udiv	r1, r3, r2
 8010198:	fb02 3311 	mls	r3, r2, r1, r3
 801019c:	5cc3      	ldrb	r3, [r0, r3]
 801019e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80101a2:	460b      	mov	r3, r1
 80101a4:	2900      	cmp	r1, #0
 80101a6:	d1f5      	bne.n	8010194 <_printf_i+0x16c>
 80101a8:	e7b9      	b.n	801011e <_printf_i+0xf6>
 80101aa:	6813      	ldr	r3, [r2, #0]
 80101ac:	6825      	ldr	r5, [r4, #0]
 80101ae:	6961      	ldr	r1, [r4, #20]
 80101b0:	1d18      	adds	r0, r3, #4
 80101b2:	6010      	str	r0, [r2, #0]
 80101b4:	0628      	lsls	r0, r5, #24
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	d501      	bpl.n	80101be <_printf_i+0x196>
 80101ba:	6019      	str	r1, [r3, #0]
 80101bc:	e002      	b.n	80101c4 <_printf_i+0x19c>
 80101be:	066a      	lsls	r2, r5, #25
 80101c0:	d5fb      	bpl.n	80101ba <_printf_i+0x192>
 80101c2:	8019      	strh	r1, [r3, #0]
 80101c4:	2300      	movs	r3, #0
 80101c6:	6123      	str	r3, [r4, #16]
 80101c8:	4665      	mov	r5, ip
 80101ca:	e7b9      	b.n	8010140 <_printf_i+0x118>
 80101cc:	6813      	ldr	r3, [r2, #0]
 80101ce:	1d19      	adds	r1, r3, #4
 80101d0:	6011      	str	r1, [r2, #0]
 80101d2:	681d      	ldr	r5, [r3, #0]
 80101d4:	6862      	ldr	r2, [r4, #4]
 80101d6:	2100      	movs	r1, #0
 80101d8:	4628      	mov	r0, r5
 80101da:	f7f0 f801 	bl	80001e0 <memchr>
 80101de:	b108      	cbz	r0, 80101e4 <_printf_i+0x1bc>
 80101e0:	1b40      	subs	r0, r0, r5
 80101e2:	6060      	str	r0, [r4, #4]
 80101e4:	6863      	ldr	r3, [r4, #4]
 80101e6:	6123      	str	r3, [r4, #16]
 80101e8:	2300      	movs	r3, #0
 80101ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101ee:	e7a7      	b.n	8010140 <_printf_i+0x118>
 80101f0:	6923      	ldr	r3, [r4, #16]
 80101f2:	462a      	mov	r2, r5
 80101f4:	4639      	mov	r1, r7
 80101f6:	4630      	mov	r0, r6
 80101f8:	47c0      	blx	r8
 80101fa:	3001      	adds	r0, #1
 80101fc:	d0aa      	beq.n	8010154 <_printf_i+0x12c>
 80101fe:	6823      	ldr	r3, [r4, #0]
 8010200:	079b      	lsls	r3, r3, #30
 8010202:	d413      	bmi.n	801022c <_printf_i+0x204>
 8010204:	68e0      	ldr	r0, [r4, #12]
 8010206:	9b03      	ldr	r3, [sp, #12]
 8010208:	4298      	cmp	r0, r3
 801020a:	bfb8      	it	lt
 801020c:	4618      	movlt	r0, r3
 801020e:	e7a3      	b.n	8010158 <_printf_i+0x130>
 8010210:	2301      	movs	r3, #1
 8010212:	464a      	mov	r2, r9
 8010214:	4639      	mov	r1, r7
 8010216:	4630      	mov	r0, r6
 8010218:	47c0      	blx	r8
 801021a:	3001      	adds	r0, #1
 801021c:	d09a      	beq.n	8010154 <_printf_i+0x12c>
 801021e:	3501      	adds	r5, #1
 8010220:	68e3      	ldr	r3, [r4, #12]
 8010222:	9a03      	ldr	r2, [sp, #12]
 8010224:	1a9b      	subs	r3, r3, r2
 8010226:	42ab      	cmp	r3, r5
 8010228:	dcf2      	bgt.n	8010210 <_printf_i+0x1e8>
 801022a:	e7eb      	b.n	8010204 <_printf_i+0x1dc>
 801022c:	2500      	movs	r5, #0
 801022e:	f104 0919 	add.w	r9, r4, #25
 8010232:	e7f5      	b.n	8010220 <_printf_i+0x1f8>
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1ac      	bne.n	8010192 <_printf_i+0x16a>
 8010238:	7803      	ldrb	r3, [r0, #0]
 801023a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801023e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010242:	e76c      	b.n	801011e <_printf_i+0xf6>
 8010244:	08011bc5 	.word	0x08011bc5
 8010248:	08011bd6 	.word	0x08011bd6

0801024c <__sread>:
 801024c:	b510      	push	{r4, lr}
 801024e:	460c      	mov	r4, r1
 8010250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010254:	f000 f894 	bl	8010380 <_read_r>
 8010258:	2800      	cmp	r0, #0
 801025a:	bfab      	itete	ge
 801025c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801025e:	89a3      	ldrhlt	r3, [r4, #12]
 8010260:	181b      	addge	r3, r3, r0
 8010262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010266:	bfac      	ite	ge
 8010268:	6563      	strge	r3, [r4, #84]	; 0x54
 801026a:	81a3      	strhlt	r3, [r4, #12]
 801026c:	bd10      	pop	{r4, pc}

0801026e <__swrite>:
 801026e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010272:	461f      	mov	r7, r3
 8010274:	898b      	ldrh	r3, [r1, #12]
 8010276:	05db      	lsls	r3, r3, #23
 8010278:	4605      	mov	r5, r0
 801027a:	460c      	mov	r4, r1
 801027c:	4616      	mov	r6, r2
 801027e:	d505      	bpl.n	801028c <__swrite+0x1e>
 8010280:	2302      	movs	r3, #2
 8010282:	2200      	movs	r2, #0
 8010284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010288:	f000 f868 	bl	801035c <_lseek_r>
 801028c:	89a3      	ldrh	r3, [r4, #12]
 801028e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010296:	81a3      	strh	r3, [r4, #12]
 8010298:	4632      	mov	r2, r6
 801029a:	463b      	mov	r3, r7
 801029c:	4628      	mov	r0, r5
 801029e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102a2:	f000 b817 	b.w	80102d4 <_write_r>

080102a6 <__sseek>:
 80102a6:	b510      	push	{r4, lr}
 80102a8:	460c      	mov	r4, r1
 80102aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ae:	f000 f855 	bl	801035c <_lseek_r>
 80102b2:	1c43      	adds	r3, r0, #1
 80102b4:	89a3      	ldrh	r3, [r4, #12]
 80102b6:	bf15      	itete	ne
 80102b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80102ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102c2:	81a3      	strheq	r3, [r4, #12]
 80102c4:	bf18      	it	ne
 80102c6:	81a3      	strhne	r3, [r4, #12]
 80102c8:	bd10      	pop	{r4, pc}

080102ca <__sclose>:
 80102ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ce:	f000 b813 	b.w	80102f8 <_close_r>
	...

080102d4 <_write_r>:
 80102d4:	b538      	push	{r3, r4, r5, lr}
 80102d6:	4c07      	ldr	r4, [pc, #28]	; (80102f4 <_write_r+0x20>)
 80102d8:	4605      	mov	r5, r0
 80102da:	4608      	mov	r0, r1
 80102dc:	4611      	mov	r1, r2
 80102de:	2200      	movs	r2, #0
 80102e0:	6022      	str	r2, [r4, #0]
 80102e2:	461a      	mov	r2, r3
 80102e4:	f7fd f905 	bl	800d4f2 <_write>
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	d102      	bne.n	80102f2 <_write_r+0x1e>
 80102ec:	6823      	ldr	r3, [r4, #0]
 80102ee:	b103      	cbz	r3, 80102f2 <_write_r+0x1e>
 80102f0:	602b      	str	r3, [r5, #0]
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
 80102f4:	20005cdc 	.word	0x20005cdc

080102f8 <_close_r>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4c06      	ldr	r4, [pc, #24]	; (8010314 <_close_r+0x1c>)
 80102fc:	2300      	movs	r3, #0
 80102fe:	4605      	mov	r5, r0
 8010300:	4608      	mov	r0, r1
 8010302:	6023      	str	r3, [r4, #0]
 8010304:	f7fe fa55 	bl	800e7b2 <_close>
 8010308:	1c43      	adds	r3, r0, #1
 801030a:	d102      	bne.n	8010312 <_close_r+0x1a>
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	b103      	cbz	r3, 8010312 <_close_r+0x1a>
 8010310:	602b      	str	r3, [r5, #0]
 8010312:	bd38      	pop	{r3, r4, r5, pc}
 8010314:	20005cdc 	.word	0x20005cdc

08010318 <_fstat_r>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4c07      	ldr	r4, [pc, #28]	; (8010338 <_fstat_r+0x20>)
 801031c:	2300      	movs	r3, #0
 801031e:	4605      	mov	r5, r0
 8010320:	4608      	mov	r0, r1
 8010322:	4611      	mov	r1, r2
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	f7fe fa50 	bl	800e7ca <_fstat>
 801032a:	1c43      	adds	r3, r0, #1
 801032c:	d102      	bne.n	8010334 <_fstat_r+0x1c>
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	b103      	cbz	r3, 8010334 <_fstat_r+0x1c>
 8010332:	602b      	str	r3, [r5, #0]
 8010334:	bd38      	pop	{r3, r4, r5, pc}
 8010336:	bf00      	nop
 8010338:	20005cdc 	.word	0x20005cdc

0801033c <_isatty_r>:
 801033c:	b538      	push	{r3, r4, r5, lr}
 801033e:	4c06      	ldr	r4, [pc, #24]	; (8010358 <_isatty_r+0x1c>)
 8010340:	2300      	movs	r3, #0
 8010342:	4605      	mov	r5, r0
 8010344:	4608      	mov	r0, r1
 8010346:	6023      	str	r3, [r4, #0]
 8010348:	f7fe fa4f 	bl	800e7ea <_isatty>
 801034c:	1c43      	adds	r3, r0, #1
 801034e:	d102      	bne.n	8010356 <_isatty_r+0x1a>
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	b103      	cbz	r3, 8010356 <_isatty_r+0x1a>
 8010354:	602b      	str	r3, [r5, #0]
 8010356:	bd38      	pop	{r3, r4, r5, pc}
 8010358:	20005cdc 	.word	0x20005cdc

0801035c <_lseek_r>:
 801035c:	b538      	push	{r3, r4, r5, lr}
 801035e:	4c07      	ldr	r4, [pc, #28]	; (801037c <_lseek_r+0x20>)
 8010360:	4605      	mov	r5, r0
 8010362:	4608      	mov	r0, r1
 8010364:	4611      	mov	r1, r2
 8010366:	2200      	movs	r2, #0
 8010368:	6022      	str	r2, [r4, #0]
 801036a:	461a      	mov	r2, r3
 801036c:	f7fe fa48 	bl	800e800 <_lseek>
 8010370:	1c43      	adds	r3, r0, #1
 8010372:	d102      	bne.n	801037a <_lseek_r+0x1e>
 8010374:	6823      	ldr	r3, [r4, #0]
 8010376:	b103      	cbz	r3, 801037a <_lseek_r+0x1e>
 8010378:	602b      	str	r3, [r5, #0]
 801037a:	bd38      	pop	{r3, r4, r5, pc}
 801037c:	20005cdc 	.word	0x20005cdc

08010380 <_read_r>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4c07      	ldr	r4, [pc, #28]	; (80103a0 <_read_r+0x20>)
 8010384:	4605      	mov	r5, r0
 8010386:	4608      	mov	r0, r1
 8010388:	4611      	mov	r1, r2
 801038a:	2200      	movs	r2, #0
 801038c:	6022      	str	r2, [r4, #0]
 801038e:	461a      	mov	r2, r3
 8010390:	f7fe f9f2 	bl	800e778 <_read>
 8010394:	1c43      	adds	r3, r0, #1
 8010396:	d102      	bne.n	801039e <_read_r+0x1e>
 8010398:	6823      	ldr	r3, [r4, #0]
 801039a:	b103      	cbz	r3, 801039e <_read_r+0x1e>
 801039c:	602b      	str	r3, [r5, #0]
 801039e:	bd38      	pop	{r3, r4, r5, pc}
 80103a0:	20005cdc 	.word	0x20005cdc
 80103a4:	00000000 	.word	0x00000000

080103a8 <sin>:
 80103a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103aa:	ec51 0b10 	vmov	r0, r1, d0
 80103ae:	4a20      	ldr	r2, [pc, #128]	; (8010430 <sin+0x88>)
 80103b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80103b4:	4293      	cmp	r3, r2
 80103b6:	dc07      	bgt.n	80103c8 <sin+0x20>
 80103b8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8010428 <sin+0x80>
 80103bc:	2000      	movs	r0, #0
 80103be:	f000 fe37 	bl	8011030 <__kernel_sin>
 80103c2:	ec51 0b10 	vmov	r0, r1, d0
 80103c6:	e007      	b.n	80103d8 <sin+0x30>
 80103c8:	4a1a      	ldr	r2, [pc, #104]	; (8010434 <sin+0x8c>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	dd09      	ble.n	80103e2 <sin+0x3a>
 80103ce:	ee10 2a10 	vmov	r2, s0
 80103d2:	460b      	mov	r3, r1
 80103d4:	f7ef ff58 	bl	8000288 <__aeabi_dsub>
 80103d8:	ec41 0b10 	vmov	d0, r0, r1
 80103dc:	b005      	add	sp, #20
 80103de:	f85d fb04 	ldr.w	pc, [sp], #4
 80103e2:	4668      	mov	r0, sp
 80103e4:	f000 f828 	bl	8010438 <__ieee754_rem_pio2>
 80103e8:	f000 0003 	and.w	r0, r0, #3
 80103ec:	2801      	cmp	r0, #1
 80103ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103f2:	ed9d 0b00 	vldr	d0, [sp]
 80103f6:	d004      	beq.n	8010402 <sin+0x5a>
 80103f8:	2802      	cmp	r0, #2
 80103fa:	d005      	beq.n	8010408 <sin+0x60>
 80103fc:	b970      	cbnz	r0, 801041c <sin+0x74>
 80103fe:	2001      	movs	r0, #1
 8010400:	e7dd      	b.n	80103be <sin+0x16>
 8010402:	f000 fa0d 	bl	8010820 <__kernel_cos>
 8010406:	e7dc      	b.n	80103c2 <sin+0x1a>
 8010408:	2001      	movs	r0, #1
 801040a:	f000 fe11 	bl	8011030 <__kernel_sin>
 801040e:	ec53 2b10 	vmov	r2, r3, d0
 8010412:	ee10 0a10 	vmov	r0, s0
 8010416:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801041a:	e7dd      	b.n	80103d8 <sin+0x30>
 801041c:	f000 fa00 	bl	8010820 <__kernel_cos>
 8010420:	e7f5      	b.n	801040e <sin+0x66>
 8010422:	bf00      	nop
 8010424:	f3af 8000 	nop.w
	...
 8010430:	3fe921fb 	.word	0x3fe921fb
 8010434:	7fefffff 	.word	0x7fefffff

08010438 <__ieee754_rem_pio2>:
 8010438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801043c:	ec57 6b10 	vmov	r6, r7, d0
 8010440:	4bc3      	ldr	r3, [pc, #780]	; (8010750 <__ieee754_rem_pio2+0x318>)
 8010442:	b08d      	sub	sp, #52	; 0x34
 8010444:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010448:	4598      	cmp	r8, r3
 801044a:	4604      	mov	r4, r0
 801044c:	9704      	str	r7, [sp, #16]
 801044e:	dc07      	bgt.n	8010460 <__ieee754_rem_pio2+0x28>
 8010450:	2200      	movs	r2, #0
 8010452:	2300      	movs	r3, #0
 8010454:	ed84 0b00 	vstr	d0, [r4]
 8010458:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801045c:	2500      	movs	r5, #0
 801045e:	e027      	b.n	80104b0 <__ieee754_rem_pio2+0x78>
 8010460:	4bbc      	ldr	r3, [pc, #752]	; (8010754 <__ieee754_rem_pio2+0x31c>)
 8010462:	4598      	cmp	r8, r3
 8010464:	dc75      	bgt.n	8010552 <__ieee754_rem_pio2+0x11a>
 8010466:	9b04      	ldr	r3, [sp, #16]
 8010468:	4dbb      	ldr	r5, [pc, #748]	; (8010758 <__ieee754_rem_pio2+0x320>)
 801046a:	2b00      	cmp	r3, #0
 801046c:	ee10 0a10 	vmov	r0, s0
 8010470:	a3a9      	add	r3, pc, #676	; (adr r3, 8010718 <__ieee754_rem_pio2+0x2e0>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	4639      	mov	r1, r7
 8010478:	dd36      	ble.n	80104e8 <__ieee754_rem_pio2+0xb0>
 801047a:	f7ef ff05 	bl	8000288 <__aeabi_dsub>
 801047e:	45a8      	cmp	r8, r5
 8010480:	4606      	mov	r6, r0
 8010482:	460f      	mov	r7, r1
 8010484:	d018      	beq.n	80104b8 <__ieee754_rem_pio2+0x80>
 8010486:	a3a6      	add	r3, pc, #664	; (adr r3, 8010720 <__ieee754_rem_pio2+0x2e8>)
 8010488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048c:	f7ef fefc 	bl	8000288 <__aeabi_dsub>
 8010490:	4602      	mov	r2, r0
 8010492:	460b      	mov	r3, r1
 8010494:	e9c4 2300 	strd	r2, r3, [r4]
 8010498:	4630      	mov	r0, r6
 801049a:	4639      	mov	r1, r7
 801049c:	f7ef fef4 	bl	8000288 <__aeabi_dsub>
 80104a0:	a39f      	add	r3, pc, #636	; (adr r3, 8010720 <__ieee754_rem_pio2+0x2e8>)
 80104a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a6:	f7ef feef 	bl	8000288 <__aeabi_dsub>
 80104aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80104ae:	2501      	movs	r5, #1
 80104b0:	4628      	mov	r0, r5
 80104b2:	b00d      	add	sp, #52	; 0x34
 80104b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b8:	a39b      	add	r3, pc, #620	; (adr r3, 8010728 <__ieee754_rem_pio2+0x2f0>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	f7ef fee3 	bl	8000288 <__aeabi_dsub>
 80104c2:	a39b      	add	r3, pc, #620	; (adr r3, 8010730 <__ieee754_rem_pio2+0x2f8>)
 80104c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c8:	4606      	mov	r6, r0
 80104ca:	460f      	mov	r7, r1
 80104cc:	f7ef fedc 	bl	8000288 <__aeabi_dsub>
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	e9c4 2300 	strd	r2, r3, [r4]
 80104d8:	4630      	mov	r0, r6
 80104da:	4639      	mov	r1, r7
 80104dc:	f7ef fed4 	bl	8000288 <__aeabi_dsub>
 80104e0:	a393      	add	r3, pc, #588	; (adr r3, 8010730 <__ieee754_rem_pio2+0x2f8>)
 80104e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e6:	e7de      	b.n	80104a6 <__ieee754_rem_pio2+0x6e>
 80104e8:	f7ef fed0 	bl	800028c <__adddf3>
 80104ec:	45a8      	cmp	r8, r5
 80104ee:	4606      	mov	r6, r0
 80104f0:	460f      	mov	r7, r1
 80104f2:	d016      	beq.n	8010522 <__ieee754_rem_pio2+0xea>
 80104f4:	a38a      	add	r3, pc, #552	; (adr r3, 8010720 <__ieee754_rem_pio2+0x2e8>)
 80104f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fa:	f7ef fec7 	bl	800028c <__adddf3>
 80104fe:	4602      	mov	r2, r0
 8010500:	460b      	mov	r3, r1
 8010502:	e9c4 2300 	strd	r2, r3, [r4]
 8010506:	4630      	mov	r0, r6
 8010508:	4639      	mov	r1, r7
 801050a:	f7ef febd 	bl	8000288 <__aeabi_dsub>
 801050e:	a384      	add	r3, pc, #528	; (adr r3, 8010720 <__ieee754_rem_pio2+0x2e8>)
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f7ef feba 	bl	800028c <__adddf3>
 8010518:	f04f 35ff 	mov.w	r5, #4294967295
 801051c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010520:	e7c6      	b.n	80104b0 <__ieee754_rem_pio2+0x78>
 8010522:	a381      	add	r3, pc, #516	; (adr r3, 8010728 <__ieee754_rem_pio2+0x2f0>)
 8010524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010528:	f7ef feb0 	bl	800028c <__adddf3>
 801052c:	a380      	add	r3, pc, #512	; (adr r3, 8010730 <__ieee754_rem_pio2+0x2f8>)
 801052e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010532:	4606      	mov	r6, r0
 8010534:	460f      	mov	r7, r1
 8010536:	f7ef fea9 	bl	800028c <__adddf3>
 801053a:	4602      	mov	r2, r0
 801053c:	460b      	mov	r3, r1
 801053e:	e9c4 2300 	strd	r2, r3, [r4]
 8010542:	4630      	mov	r0, r6
 8010544:	4639      	mov	r1, r7
 8010546:	f7ef fe9f 	bl	8000288 <__aeabi_dsub>
 801054a:	a379      	add	r3, pc, #484	; (adr r3, 8010730 <__ieee754_rem_pio2+0x2f8>)
 801054c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010550:	e7e0      	b.n	8010514 <__ieee754_rem_pio2+0xdc>
 8010552:	4b82      	ldr	r3, [pc, #520]	; (801075c <__ieee754_rem_pio2+0x324>)
 8010554:	4598      	cmp	r8, r3
 8010556:	f300 80d0 	bgt.w	80106fa <__ieee754_rem_pio2+0x2c2>
 801055a:	f000 fe23 	bl	80111a4 <fabs>
 801055e:	ec57 6b10 	vmov	r6, r7, d0
 8010562:	ee10 0a10 	vmov	r0, s0
 8010566:	a374      	add	r3, pc, #464	; (adr r3, 8010738 <__ieee754_rem_pio2+0x300>)
 8010568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056c:	4639      	mov	r1, r7
 801056e:	f7f0 f843 	bl	80005f8 <__aeabi_dmul>
 8010572:	2200      	movs	r2, #0
 8010574:	4b7a      	ldr	r3, [pc, #488]	; (8010760 <__ieee754_rem_pio2+0x328>)
 8010576:	f7ef fe89 	bl	800028c <__adddf3>
 801057a:	f7f0 fad7 	bl	8000b2c <__aeabi_d2iz>
 801057e:	4605      	mov	r5, r0
 8010580:	f7ef ffd0 	bl	8000524 <__aeabi_i2d>
 8010584:	a364      	add	r3, pc, #400	; (adr r3, 8010718 <__ieee754_rem_pio2+0x2e0>)
 8010586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801058e:	f7f0 f833 	bl	80005f8 <__aeabi_dmul>
 8010592:	4602      	mov	r2, r0
 8010594:	460b      	mov	r3, r1
 8010596:	4630      	mov	r0, r6
 8010598:	4639      	mov	r1, r7
 801059a:	f7ef fe75 	bl	8000288 <__aeabi_dsub>
 801059e:	a360      	add	r3, pc, #384	; (adr r3, 8010720 <__ieee754_rem_pio2+0x2e8>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	4682      	mov	sl, r0
 80105a6:	468b      	mov	fp, r1
 80105a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105ac:	f7f0 f824 	bl	80005f8 <__aeabi_dmul>
 80105b0:	2d1f      	cmp	r5, #31
 80105b2:	4606      	mov	r6, r0
 80105b4:	460f      	mov	r7, r1
 80105b6:	dc0c      	bgt.n	80105d2 <__ieee754_rem_pio2+0x19a>
 80105b8:	1e6a      	subs	r2, r5, #1
 80105ba:	4b6a      	ldr	r3, [pc, #424]	; (8010764 <__ieee754_rem_pio2+0x32c>)
 80105bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105c0:	4543      	cmp	r3, r8
 80105c2:	d006      	beq.n	80105d2 <__ieee754_rem_pio2+0x19a>
 80105c4:	4632      	mov	r2, r6
 80105c6:	463b      	mov	r3, r7
 80105c8:	4650      	mov	r0, sl
 80105ca:	4659      	mov	r1, fp
 80105cc:	f7ef fe5c 	bl	8000288 <__aeabi_dsub>
 80105d0:	e00e      	b.n	80105f0 <__ieee754_rem_pio2+0x1b8>
 80105d2:	4632      	mov	r2, r6
 80105d4:	463b      	mov	r3, r7
 80105d6:	4650      	mov	r0, sl
 80105d8:	4659      	mov	r1, fp
 80105da:	f7ef fe55 	bl	8000288 <__aeabi_dsub>
 80105de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80105e2:	9305      	str	r3, [sp, #20]
 80105e4:	9a05      	ldr	r2, [sp, #20]
 80105e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80105ea:	1ad3      	subs	r3, r2, r3
 80105ec:	2b10      	cmp	r3, #16
 80105ee:	dc02      	bgt.n	80105f6 <__ieee754_rem_pio2+0x1be>
 80105f0:	e9c4 0100 	strd	r0, r1, [r4]
 80105f4:	e039      	b.n	801066a <__ieee754_rem_pio2+0x232>
 80105f6:	a34c      	add	r3, pc, #304	; (adr r3, 8010728 <__ieee754_rem_pio2+0x2f0>)
 80105f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010600:	f7ef fffa 	bl	80005f8 <__aeabi_dmul>
 8010604:	4606      	mov	r6, r0
 8010606:	460f      	mov	r7, r1
 8010608:	4602      	mov	r2, r0
 801060a:	460b      	mov	r3, r1
 801060c:	4650      	mov	r0, sl
 801060e:	4659      	mov	r1, fp
 8010610:	f7ef fe3a 	bl	8000288 <__aeabi_dsub>
 8010614:	4602      	mov	r2, r0
 8010616:	460b      	mov	r3, r1
 8010618:	4680      	mov	r8, r0
 801061a:	4689      	mov	r9, r1
 801061c:	4650      	mov	r0, sl
 801061e:	4659      	mov	r1, fp
 8010620:	f7ef fe32 	bl	8000288 <__aeabi_dsub>
 8010624:	4632      	mov	r2, r6
 8010626:	463b      	mov	r3, r7
 8010628:	f7ef fe2e 	bl	8000288 <__aeabi_dsub>
 801062c:	a340      	add	r3, pc, #256	; (adr r3, 8010730 <__ieee754_rem_pio2+0x2f8>)
 801062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010632:	4606      	mov	r6, r0
 8010634:	460f      	mov	r7, r1
 8010636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801063a:	f7ef ffdd 	bl	80005f8 <__aeabi_dmul>
 801063e:	4632      	mov	r2, r6
 8010640:	463b      	mov	r3, r7
 8010642:	f7ef fe21 	bl	8000288 <__aeabi_dsub>
 8010646:	4602      	mov	r2, r0
 8010648:	460b      	mov	r3, r1
 801064a:	4606      	mov	r6, r0
 801064c:	460f      	mov	r7, r1
 801064e:	4640      	mov	r0, r8
 8010650:	4649      	mov	r1, r9
 8010652:	f7ef fe19 	bl	8000288 <__aeabi_dsub>
 8010656:	9a05      	ldr	r2, [sp, #20]
 8010658:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	2b31      	cmp	r3, #49	; 0x31
 8010660:	dc20      	bgt.n	80106a4 <__ieee754_rem_pio2+0x26c>
 8010662:	e9c4 0100 	strd	r0, r1, [r4]
 8010666:	46c2      	mov	sl, r8
 8010668:	46cb      	mov	fp, r9
 801066a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801066e:	4650      	mov	r0, sl
 8010670:	4642      	mov	r2, r8
 8010672:	464b      	mov	r3, r9
 8010674:	4659      	mov	r1, fp
 8010676:	f7ef fe07 	bl	8000288 <__aeabi_dsub>
 801067a:	463b      	mov	r3, r7
 801067c:	4632      	mov	r2, r6
 801067e:	f7ef fe03 	bl	8000288 <__aeabi_dsub>
 8010682:	9b04      	ldr	r3, [sp, #16]
 8010684:	2b00      	cmp	r3, #0
 8010686:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801068a:	f6bf af11 	bge.w	80104b0 <__ieee754_rem_pio2+0x78>
 801068e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010692:	6063      	str	r3, [r4, #4]
 8010694:	f8c4 8000 	str.w	r8, [r4]
 8010698:	60a0      	str	r0, [r4, #8]
 801069a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801069e:	60e3      	str	r3, [r4, #12]
 80106a0:	426d      	negs	r5, r5
 80106a2:	e705      	b.n	80104b0 <__ieee754_rem_pio2+0x78>
 80106a4:	a326      	add	r3, pc, #152	; (adr r3, 8010740 <__ieee754_rem_pio2+0x308>)
 80106a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106ae:	f7ef ffa3 	bl	80005f8 <__aeabi_dmul>
 80106b2:	4606      	mov	r6, r0
 80106b4:	460f      	mov	r7, r1
 80106b6:	4602      	mov	r2, r0
 80106b8:	460b      	mov	r3, r1
 80106ba:	4640      	mov	r0, r8
 80106bc:	4649      	mov	r1, r9
 80106be:	f7ef fde3 	bl	8000288 <__aeabi_dsub>
 80106c2:	4602      	mov	r2, r0
 80106c4:	460b      	mov	r3, r1
 80106c6:	4682      	mov	sl, r0
 80106c8:	468b      	mov	fp, r1
 80106ca:	4640      	mov	r0, r8
 80106cc:	4649      	mov	r1, r9
 80106ce:	f7ef fddb 	bl	8000288 <__aeabi_dsub>
 80106d2:	4632      	mov	r2, r6
 80106d4:	463b      	mov	r3, r7
 80106d6:	f7ef fdd7 	bl	8000288 <__aeabi_dsub>
 80106da:	a31b      	add	r3, pc, #108	; (adr r3, 8010748 <__ieee754_rem_pio2+0x310>)
 80106dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e0:	4606      	mov	r6, r0
 80106e2:	460f      	mov	r7, r1
 80106e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106e8:	f7ef ff86 	bl	80005f8 <__aeabi_dmul>
 80106ec:	4632      	mov	r2, r6
 80106ee:	463b      	mov	r3, r7
 80106f0:	f7ef fdca 	bl	8000288 <__aeabi_dsub>
 80106f4:	4606      	mov	r6, r0
 80106f6:	460f      	mov	r7, r1
 80106f8:	e764      	b.n	80105c4 <__ieee754_rem_pio2+0x18c>
 80106fa:	4b1b      	ldr	r3, [pc, #108]	; (8010768 <__ieee754_rem_pio2+0x330>)
 80106fc:	4598      	cmp	r8, r3
 80106fe:	dd35      	ble.n	801076c <__ieee754_rem_pio2+0x334>
 8010700:	ee10 2a10 	vmov	r2, s0
 8010704:	463b      	mov	r3, r7
 8010706:	4630      	mov	r0, r6
 8010708:	4639      	mov	r1, r7
 801070a:	f7ef fdbd 	bl	8000288 <__aeabi_dsub>
 801070e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010712:	e9c4 0100 	strd	r0, r1, [r4]
 8010716:	e6a1      	b.n	801045c <__ieee754_rem_pio2+0x24>
 8010718:	54400000 	.word	0x54400000
 801071c:	3ff921fb 	.word	0x3ff921fb
 8010720:	1a626331 	.word	0x1a626331
 8010724:	3dd0b461 	.word	0x3dd0b461
 8010728:	1a600000 	.word	0x1a600000
 801072c:	3dd0b461 	.word	0x3dd0b461
 8010730:	2e037073 	.word	0x2e037073
 8010734:	3ba3198a 	.word	0x3ba3198a
 8010738:	6dc9c883 	.word	0x6dc9c883
 801073c:	3fe45f30 	.word	0x3fe45f30
 8010740:	2e000000 	.word	0x2e000000
 8010744:	3ba3198a 	.word	0x3ba3198a
 8010748:	252049c1 	.word	0x252049c1
 801074c:	397b839a 	.word	0x397b839a
 8010750:	3fe921fb 	.word	0x3fe921fb
 8010754:	4002d97b 	.word	0x4002d97b
 8010758:	3ff921fb 	.word	0x3ff921fb
 801075c:	413921fb 	.word	0x413921fb
 8010760:	3fe00000 	.word	0x3fe00000
 8010764:	08011be8 	.word	0x08011be8
 8010768:	7fefffff 	.word	0x7fefffff
 801076c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010770:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8010774:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010778:	4630      	mov	r0, r6
 801077a:	460f      	mov	r7, r1
 801077c:	f7f0 f9d6 	bl	8000b2c <__aeabi_d2iz>
 8010780:	f7ef fed0 	bl	8000524 <__aeabi_i2d>
 8010784:	4602      	mov	r2, r0
 8010786:	460b      	mov	r3, r1
 8010788:	4630      	mov	r0, r6
 801078a:	4639      	mov	r1, r7
 801078c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010790:	f7ef fd7a 	bl	8000288 <__aeabi_dsub>
 8010794:	2200      	movs	r2, #0
 8010796:	4b1f      	ldr	r3, [pc, #124]	; (8010814 <__ieee754_rem_pio2+0x3dc>)
 8010798:	f7ef ff2e 	bl	80005f8 <__aeabi_dmul>
 801079c:	460f      	mov	r7, r1
 801079e:	4606      	mov	r6, r0
 80107a0:	f7f0 f9c4 	bl	8000b2c <__aeabi_d2iz>
 80107a4:	f7ef febe 	bl	8000524 <__aeabi_i2d>
 80107a8:	4602      	mov	r2, r0
 80107aa:	460b      	mov	r3, r1
 80107ac:	4630      	mov	r0, r6
 80107ae:	4639      	mov	r1, r7
 80107b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80107b4:	f7ef fd68 	bl	8000288 <__aeabi_dsub>
 80107b8:	2200      	movs	r2, #0
 80107ba:	4b16      	ldr	r3, [pc, #88]	; (8010814 <__ieee754_rem_pio2+0x3dc>)
 80107bc:	f7ef ff1c 	bl	80005f8 <__aeabi_dmul>
 80107c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80107c4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80107c8:	f04f 0803 	mov.w	r8, #3
 80107cc:	2600      	movs	r6, #0
 80107ce:	2700      	movs	r7, #0
 80107d0:	4632      	mov	r2, r6
 80107d2:	463b      	mov	r3, r7
 80107d4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80107d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80107dc:	f7f0 f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80107e0:	b9b0      	cbnz	r0, 8010810 <__ieee754_rem_pio2+0x3d8>
 80107e2:	4b0d      	ldr	r3, [pc, #52]	; (8010818 <__ieee754_rem_pio2+0x3e0>)
 80107e4:	9301      	str	r3, [sp, #4]
 80107e6:	2302      	movs	r3, #2
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	462a      	mov	r2, r5
 80107ec:	4643      	mov	r3, r8
 80107ee:	4621      	mov	r1, r4
 80107f0:	a806      	add	r0, sp, #24
 80107f2:	f000 f8dd 	bl	80109b0 <__kernel_rem_pio2>
 80107f6:	9b04      	ldr	r3, [sp, #16]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	4605      	mov	r5, r0
 80107fc:	f6bf ae58 	bge.w	80104b0 <__ieee754_rem_pio2+0x78>
 8010800:	6863      	ldr	r3, [r4, #4]
 8010802:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010806:	6063      	str	r3, [r4, #4]
 8010808:	68e3      	ldr	r3, [r4, #12]
 801080a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801080e:	e746      	b.n	801069e <__ieee754_rem_pio2+0x266>
 8010810:	46d0      	mov	r8, sl
 8010812:	e7dd      	b.n	80107d0 <__ieee754_rem_pio2+0x398>
 8010814:	41700000 	.word	0x41700000
 8010818:	08011c68 	.word	0x08011c68
 801081c:	00000000 	.word	0x00000000

08010820 <__kernel_cos>:
 8010820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010824:	ec59 8b10 	vmov	r8, r9, d0
 8010828:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801082c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8010830:	ed2d 8b02 	vpush	{d8}
 8010834:	eeb0 8a41 	vmov.f32	s16, s2
 8010838:	eef0 8a61 	vmov.f32	s17, s3
 801083c:	da07      	bge.n	801084e <__kernel_cos+0x2e>
 801083e:	ee10 0a10 	vmov	r0, s0
 8010842:	4649      	mov	r1, r9
 8010844:	f7f0 f972 	bl	8000b2c <__aeabi_d2iz>
 8010848:	2800      	cmp	r0, #0
 801084a:	f000 8089 	beq.w	8010960 <__kernel_cos+0x140>
 801084e:	4642      	mov	r2, r8
 8010850:	464b      	mov	r3, r9
 8010852:	4640      	mov	r0, r8
 8010854:	4649      	mov	r1, r9
 8010856:	f7ef fecf 	bl	80005f8 <__aeabi_dmul>
 801085a:	2200      	movs	r2, #0
 801085c:	4b4e      	ldr	r3, [pc, #312]	; (8010998 <__kernel_cos+0x178>)
 801085e:	4604      	mov	r4, r0
 8010860:	460d      	mov	r5, r1
 8010862:	f7ef fec9 	bl	80005f8 <__aeabi_dmul>
 8010866:	a340      	add	r3, pc, #256	; (adr r3, 8010968 <__kernel_cos+0x148>)
 8010868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086c:	4682      	mov	sl, r0
 801086e:	468b      	mov	fp, r1
 8010870:	4620      	mov	r0, r4
 8010872:	4629      	mov	r1, r5
 8010874:	f7ef fec0 	bl	80005f8 <__aeabi_dmul>
 8010878:	a33d      	add	r3, pc, #244	; (adr r3, 8010970 <__kernel_cos+0x150>)
 801087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087e:	f7ef fd05 	bl	800028c <__adddf3>
 8010882:	4622      	mov	r2, r4
 8010884:	462b      	mov	r3, r5
 8010886:	f7ef feb7 	bl	80005f8 <__aeabi_dmul>
 801088a:	a33b      	add	r3, pc, #236	; (adr r3, 8010978 <__kernel_cos+0x158>)
 801088c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010890:	f7ef fcfa 	bl	8000288 <__aeabi_dsub>
 8010894:	4622      	mov	r2, r4
 8010896:	462b      	mov	r3, r5
 8010898:	f7ef feae 	bl	80005f8 <__aeabi_dmul>
 801089c:	a338      	add	r3, pc, #224	; (adr r3, 8010980 <__kernel_cos+0x160>)
 801089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a2:	f7ef fcf3 	bl	800028c <__adddf3>
 80108a6:	4622      	mov	r2, r4
 80108a8:	462b      	mov	r3, r5
 80108aa:	f7ef fea5 	bl	80005f8 <__aeabi_dmul>
 80108ae:	a336      	add	r3, pc, #216	; (adr r3, 8010988 <__kernel_cos+0x168>)
 80108b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b4:	f7ef fce8 	bl	8000288 <__aeabi_dsub>
 80108b8:	4622      	mov	r2, r4
 80108ba:	462b      	mov	r3, r5
 80108bc:	f7ef fe9c 	bl	80005f8 <__aeabi_dmul>
 80108c0:	a333      	add	r3, pc, #204	; (adr r3, 8010990 <__kernel_cos+0x170>)
 80108c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c6:	f7ef fce1 	bl	800028c <__adddf3>
 80108ca:	4622      	mov	r2, r4
 80108cc:	462b      	mov	r3, r5
 80108ce:	f7ef fe93 	bl	80005f8 <__aeabi_dmul>
 80108d2:	4622      	mov	r2, r4
 80108d4:	462b      	mov	r3, r5
 80108d6:	f7ef fe8f 	bl	80005f8 <__aeabi_dmul>
 80108da:	ec53 2b18 	vmov	r2, r3, d8
 80108de:	4604      	mov	r4, r0
 80108e0:	460d      	mov	r5, r1
 80108e2:	4640      	mov	r0, r8
 80108e4:	4649      	mov	r1, r9
 80108e6:	f7ef fe87 	bl	80005f8 <__aeabi_dmul>
 80108ea:	460b      	mov	r3, r1
 80108ec:	4602      	mov	r2, r0
 80108ee:	4629      	mov	r1, r5
 80108f0:	4620      	mov	r0, r4
 80108f2:	f7ef fcc9 	bl	8000288 <__aeabi_dsub>
 80108f6:	4b29      	ldr	r3, [pc, #164]	; (801099c <__kernel_cos+0x17c>)
 80108f8:	429e      	cmp	r6, r3
 80108fa:	4680      	mov	r8, r0
 80108fc:	4689      	mov	r9, r1
 80108fe:	dc11      	bgt.n	8010924 <__kernel_cos+0x104>
 8010900:	4602      	mov	r2, r0
 8010902:	460b      	mov	r3, r1
 8010904:	4650      	mov	r0, sl
 8010906:	4659      	mov	r1, fp
 8010908:	f7ef fcbe 	bl	8000288 <__aeabi_dsub>
 801090c:	460b      	mov	r3, r1
 801090e:	4924      	ldr	r1, [pc, #144]	; (80109a0 <__kernel_cos+0x180>)
 8010910:	4602      	mov	r2, r0
 8010912:	2000      	movs	r0, #0
 8010914:	f7ef fcb8 	bl	8000288 <__aeabi_dsub>
 8010918:	ecbd 8b02 	vpop	{d8}
 801091c:	ec41 0b10 	vmov	d0, r0, r1
 8010920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010924:	4b1f      	ldr	r3, [pc, #124]	; (80109a4 <__kernel_cos+0x184>)
 8010926:	491e      	ldr	r1, [pc, #120]	; (80109a0 <__kernel_cos+0x180>)
 8010928:	429e      	cmp	r6, r3
 801092a:	bfcc      	ite	gt
 801092c:	4d1e      	ldrgt	r5, [pc, #120]	; (80109a8 <__kernel_cos+0x188>)
 801092e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8010932:	2400      	movs	r4, #0
 8010934:	4622      	mov	r2, r4
 8010936:	462b      	mov	r3, r5
 8010938:	2000      	movs	r0, #0
 801093a:	f7ef fca5 	bl	8000288 <__aeabi_dsub>
 801093e:	4622      	mov	r2, r4
 8010940:	4606      	mov	r6, r0
 8010942:	460f      	mov	r7, r1
 8010944:	462b      	mov	r3, r5
 8010946:	4650      	mov	r0, sl
 8010948:	4659      	mov	r1, fp
 801094a:	f7ef fc9d 	bl	8000288 <__aeabi_dsub>
 801094e:	4642      	mov	r2, r8
 8010950:	464b      	mov	r3, r9
 8010952:	f7ef fc99 	bl	8000288 <__aeabi_dsub>
 8010956:	4602      	mov	r2, r0
 8010958:	460b      	mov	r3, r1
 801095a:	4630      	mov	r0, r6
 801095c:	4639      	mov	r1, r7
 801095e:	e7d9      	b.n	8010914 <__kernel_cos+0xf4>
 8010960:	2000      	movs	r0, #0
 8010962:	490f      	ldr	r1, [pc, #60]	; (80109a0 <__kernel_cos+0x180>)
 8010964:	e7d8      	b.n	8010918 <__kernel_cos+0xf8>
 8010966:	bf00      	nop
 8010968:	be8838d4 	.word	0xbe8838d4
 801096c:	bda8fae9 	.word	0xbda8fae9
 8010970:	bdb4b1c4 	.word	0xbdb4b1c4
 8010974:	3e21ee9e 	.word	0x3e21ee9e
 8010978:	809c52ad 	.word	0x809c52ad
 801097c:	3e927e4f 	.word	0x3e927e4f
 8010980:	19cb1590 	.word	0x19cb1590
 8010984:	3efa01a0 	.word	0x3efa01a0
 8010988:	16c15177 	.word	0x16c15177
 801098c:	3f56c16c 	.word	0x3f56c16c
 8010990:	5555554c 	.word	0x5555554c
 8010994:	3fa55555 	.word	0x3fa55555
 8010998:	3fe00000 	.word	0x3fe00000
 801099c:	3fd33332 	.word	0x3fd33332
 80109a0:	3ff00000 	.word	0x3ff00000
 80109a4:	3fe90000 	.word	0x3fe90000
 80109a8:	3fd20000 	.word	0x3fd20000
 80109ac:	00000000 	.word	0x00000000

080109b0 <__kernel_rem_pio2>:
 80109b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b4:	ed2d 8b02 	vpush	{d8}
 80109b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80109bc:	1ed4      	subs	r4, r2, #3
 80109be:	9308      	str	r3, [sp, #32]
 80109c0:	9101      	str	r1, [sp, #4]
 80109c2:	4bc5      	ldr	r3, [pc, #788]	; (8010cd8 <__kernel_rem_pio2+0x328>)
 80109c4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80109c6:	9009      	str	r0, [sp, #36]	; 0x24
 80109c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80109cc:	9304      	str	r3, [sp, #16]
 80109ce:	9b08      	ldr	r3, [sp, #32]
 80109d0:	3b01      	subs	r3, #1
 80109d2:	9307      	str	r3, [sp, #28]
 80109d4:	2318      	movs	r3, #24
 80109d6:	fb94 f4f3 	sdiv	r4, r4, r3
 80109da:	f06f 0317 	mvn.w	r3, #23
 80109de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80109e2:	fb04 3303 	mla	r3, r4, r3, r3
 80109e6:	eb03 0a02 	add.w	sl, r3, r2
 80109ea:	9b04      	ldr	r3, [sp, #16]
 80109ec:	9a07      	ldr	r2, [sp, #28]
 80109ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010cc8 <__kernel_rem_pio2+0x318>
 80109f2:	eb03 0802 	add.w	r8, r3, r2
 80109f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80109f8:	1aa7      	subs	r7, r4, r2
 80109fa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80109fe:	ae22      	add	r6, sp, #136	; 0x88
 8010a00:	2500      	movs	r5, #0
 8010a02:	4545      	cmp	r5, r8
 8010a04:	dd13      	ble.n	8010a2e <__kernel_rem_pio2+0x7e>
 8010a06:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8010cc8 <__kernel_rem_pio2+0x318>
 8010a0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8010a0e:	2600      	movs	r6, #0
 8010a10:	9b04      	ldr	r3, [sp, #16]
 8010a12:	429e      	cmp	r6, r3
 8010a14:	dc32      	bgt.n	8010a7c <__kernel_rem_pio2+0xcc>
 8010a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a18:	9302      	str	r3, [sp, #8]
 8010a1a:	9b08      	ldr	r3, [sp, #32]
 8010a1c:	199d      	adds	r5, r3, r6
 8010a1e:	ab22      	add	r3, sp, #136	; 0x88
 8010a20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010a24:	9306      	str	r3, [sp, #24]
 8010a26:	ec59 8b18 	vmov	r8, r9, d8
 8010a2a:	2700      	movs	r7, #0
 8010a2c:	e01f      	b.n	8010a6e <__kernel_rem_pio2+0xbe>
 8010a2e:	42ef      	cmn	r7, r5
 8010a30:	d407      	bmi.n	8010a42 <__kernel_rem_pio2+0x92>
 8010a32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010a36:	f7ef fd75 	bl	8000524 <__aeabi_i2d>
 8010a3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010a3e:	3501      	adds	r5, #1
 8010a40:	e7df      	b.n	8010a02 <__kernel_rem_pio2+0x52>
 8010a42:	ec51 0b18 	vmov	r0, r1, d8
 8010a46:	e7f8      	b.n	8010a3a <__kernel_rem_pio2+0x8a>
 8010a48:	9906      	ldr	r1, [sp, #24]
 8010a4a:	9d02      	ldr	r5, [sp, #8]
 8010a4c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8010a50:	9106      	str	r1, [sp, #24]
 8010a52:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8010a56:	9502      	str	r5, [sp, #8]
 8010a58:	f7ef fdce 	bl	80005f8 <__aeabi_dmul>
 8010a5c:	4602      	mov	r2, r0
 8010a5e:	460b      	mov	r3, r1
 8010a60:	4640      	mov	r0, r8
 8010a62:	4649      	mov	r1, r9
 8010a64:	f7ef fc12 	bl	800028c <__adddf3>
 8010a68:	3701      	adds	r7, #1
 8010a6a:	4680      	mov	r8, r0
 8010a6c:	4689      	mov	r9, r1
 8010a6e:	9b07      	ldr	r3, [sp, #28]
 8010a70:	429f      	cmp	r7, r3
 8010a72:	dde9      	ble.n	8010a48 <__kernel_rem_pio2+0x98>
 8010a74:	e8eb 8902 	strd	r8, r9, [fp], #8
 8010a78:	3601      	adds	r6, #1
 8010a7a:	e7c9      	b.n	8010a10 <__kernel_rem_pio2+0x60>
 8010a7c:	9b04      	ldr	r3, [sp, #16]
 8010a7e:	aa0e      	add	r2, sp, #56	; 0x38
 8010a80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a84:	930c      	str	r3, [sp, #48]	; 0x30
 8010a86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010a88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010a8c:	9c04      	ldr	r4, [sp, #16]
 8010a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a90:	ab9a      	add	r3, sp, #616	; 0x268
 8010a92:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8010a96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a9e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8010aa2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8010aa6:	ab9a      	add	r3, sp, #616	; 0x268
 8010aa8:	445b      	add	r3, fp
 8010aaa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8010aae:	2500      	movs	r5, #0
 8010ab0:	1b63      	subs	r3, r4, r5
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	dc78      	bgt.n	8010ba8 <__kernel_rem_pio2+0x1f8>
 8010ab6:	4650      	mov	r0, sl
 8010ab8:	ec49 8b10 	vmov	d0, r8, r9
 8010abc:	f000 fc00 	bl	80112c0 <scalbn>
 8010ac0:	ec57 6b10 	vmov	r6, r7, d0
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010aca:	ee10 0a10 	vmov	r0, s0
 8010ace:	4639      	mov	r1, r7
 8010ad0:	f7ef fd92 	bl	80005f8 <__aeabi_dmul>
 8010ad4:	ec41 0b10 	vmov	d0, r0, r1
 8010ad8:	f000 fb6e 	bl	80111b8 <floor>
 8010adc:	2200      	movs	r2, #0
 8010ade:	ec51 0b10 	vmov	r0, r1, d0
 8010ae2:	4b7e      	ldr	r3, [pc, #504]	; (8010cdc <__kernel_rem_pio2+0x32c>)
 8010ae4:	f7ef fd88 	bl	80005f8 <__aeabi_dmul>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	460b      	mov	r3, r1
 8010aec:	4630      	mov	r0, r6
 8010aee:	4639      	mov	r1, r7
 8010af0:	f7ef fbca 	bl	8000288 <__aeabi_dsub>
 8010af4:	460f      	mov	r7, r1
 8010af6:	4606      	mov	r6, r0
 8010af8:	f7f0 f818 	bl	8000b2c <__aeabi_d2iz>
 8010afc:	9006      	str	r0, [sp, #24]
 8010afe:	f7ef fd11 	bl	8000524 <__aeabi_i2d>
 8010b02:	4602      	mov	r2, r0
 8010b04:	460b      	mov	r3, r1
 8010b06:	4630      	mov	r0, r6
 8010b08:	4639      	mov	r1, r7
 8010b0a:	f7ef fbbd 	bl	8000288 <__aeabi_dsub>
 8010b0e:	f1ba 0f00 	cmp.w	sl, #0
 8010b12:	4606      	mov	r6, r0
 8010b14:	460f      	mov	r7, r1
 8010b16:	dd6c      	ble.n	8010bf2 <__kernel_rem_pio2+0x242>
 8010b18:	1e62      	subs	r2, r4, #1
 8010b1a:	ab0e      	add	r3, sp, #56	; 0x38
 8010b1c:	f1ca 0118 	rsb	r1, sl, #24
 8010b20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010b24:	9d06      	ldr	r5, [sp, #24]
 8010b26:	fa40 f301 	asr.w	r3, r0, r1
 8010b2a:	441d      	add	r5, r3
 8010b2c:	408b      	lsls	r3, r1
 8010b2e:	1ac0      	subs	r0, r0, r3
 8010b30:	ab0e      	add	r3, sp, #56	; 0x38
 8010b32:	9506      	str	r5, [sp, #24]
 8010b34:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010b38:	f1ca 0317 	rsb	r3, sl, #23
 8010b3c:	fa40 f303 	asr.w	r3, r0, r3
 8010b40:	9302      	str	r3, [sp, #8]
 8010b42:	9b02      	ldr	r3, [sp, #8]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	dd62      	ble.n	8010c0e <__kernel_rem_pio2+0x25e>
 8010b48:	9b06      	ldr	r3, [sp, #24]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	9306      	str	r3, [sp, #24]
 8010b50:	4615      	mov	r5, r2
 8010b52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010b56:	4294      	cmp	r4, r2
 8010b58:	f300 8095 	bgt.w	8010c86 <__kernel_rem_pio2+0x2d6>
 8010b5c:	f1ba 0f00 	cmp.w	sl, #0
 8010b60:	dd07      	ble.n	8010b72 <__kernel_rem_pio2+0x1c2>
 8010b62:	f1ba 0f01 	cmp.w	sl, #1
 8010b66:	f000 80a2 	beq.w	8010cae <__kernel_rem_pio2+0x2fe>
 8010b6a:	f1ba 0f02 	cmp.w	sl, #2
 8010b6e:	f000 80c1 	beq.w	8010cf4 <__kernel_rem_pio2+0x344>
 8010b72:	9b02      	ldr	r3, [sp, #8]
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d14a      	bne.n	8010c0e <__kernel_rem_pio2+0x25e>
 8010b78:	4632      	mov	r2, r6
 8010b7a:	463b      	mov	r3, r7
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	4958      	ldr	r1, [pc, #352]	; (8010ce0 <__kernel_rem_pio2+0x330>)
 8010b80:	f7ef fb82 	bl	8000288 <__aeabi_dsub>
 8010b84:	4606      	mov	r6, r0
 8010b86:	460f      	mov	r7, r1
 8010b88:	2d00      	cmp	r5, #0
 8010b8a:	d040      	beq.n	8010c0e <__kernel_rem_pio2+0x25e>
 8010b8c:	4650      	mov	r0, sl
 8010b8e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010cd0 <__kernel_rem_pio2+0x320>
 8010b92:	f000 fb95 	bl	80112c0 <scalbn>
 8010b96:	4630      	mov	r0, r6
 8010b98:	4639      	mov	r1, r7
 8010b9a:	ec53 2b10 	vmov	r2, r3, d0
 8010b9e:	f7ef fb73 	bl	8000288 <__aeabi_dsub>
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	460f      	mov	r7, r1
 8010ba6:	e032      	b.n	8010c0e <__kernel_rem_pio2+0x25e>
 8010ba8:	2200      	movs	r2, #0
 8010baa:	4b4e      	ldr	r3, [pc, #312]	; (8010ce4 <__kernel_rem_pio2+0x334>)
 8010bac:	4640      	mov	r0, r8
 8010bae:	4649      	mov	r1, r9
 8010bb0:	f7ef fd22 	bl	80005f8 <__aeabi_dmul>
 8010bb4:	f7ef ffba 	bl	8000b2c <__aeabi_d2iz>
 8010bb8:	f7ef fcb4 	bl	8000524 <__aeabi_i2d>
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	4b4a      	ldr	r3, [pc, #296]	; (8010ce8 <__kernel_rem_pio2+0x338>)
 8010bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bc4:	f7ef fd18 	bl	80005f8 <__aeabi_dmul>
 8010bc8:	4602      	mov	r2, r0
 8010bca:	460b      	mov	r3, r1
 8010bcc:	4640      	mov	r0, r8
 8010bce:	4649      	mov	r1, r9
 8010bd0:	f7ef fb5a 	bl	8000288 <__aeabi_dsub>
 8010bd4:	f7ef ffaa 	bl	8000b2c <__aeabi_d2iz>
 8010bd8:	ab0e      	add	r3, sp, #56	; 0x38
 8010bda:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8010bde:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010be6:	f7ef fb51 	bl	800028c <__adddf3>
 8010bea:	3501      	adds	r5, #1
 8010bec:	4680      	mov	r8, r0
 8010bee:	4689      	mov	r9, r1
 8010bf0:	e75e      	b.n	8010ab0 <__kernel_rem_pio2+0x100>
 8010bf2:	d105      	bne.n	8010c00 <__kernel_rem_pio2+0x250>
 8010bf4:	1e63      	subs	r3, r4, #1
 8010bf6:	aa0e      	add	r2, sp, #56	; 0x38
 8010bf8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010bfc:	15c3      	asrs	r3, r0, #23
 8010bfe:	e79f      	b.n	8010b40 <__kernel_rem_pio2+0x190>
 8010c00:	2200      	movs	r2, #0
 8010c02:	4b3a      	ldr	r3, [pc, #232]	; (8010cec <__kernel_rem_pio2+0x33c>)
 8010c04:	f7ef ff7e 	bl	8000b04 <__aeabi_dcmpge>
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	d139      	bne.n	8010c80 <__kernel_rem_pio2+0x2d0>
 8010c0c:	9002      	str	r0, [sp, #8]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	2300      	movs	r3, #0
 8010c12:	4630      	mov	r0, r6
 8010c14:	4639      	mov	r1, r7
 8010c16:	f7ef ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	f000 80c7 	beq.w	8010dae <__kernel_rem_pio2+0x3fe>
 8010c20:	1e65      	subs	r5, r4, #1
 8010c22:	462b      	mov	r3, r5
 8010c24:	2200      	movs	r2, #0
 8010c26:	9904      	ldr	r1, [sp, #16]
 8010c28:	428b      	cmp	r3, r1
 8010c2a:	da6a      	bge.n	8010d02 <__kernel_rem_pio2+0x352>
 8010c2c:	2a00      	cmp	r2, #0
 8010c2e:	f000 8088 	beq.w	8010d42 <__kernel_rem_pio2+0x392>
 8010c32:	ab0e      	add	r3, sp, #56	; 0x38
 8010c34:	f1aa 0a18 	sub.w	sl, sl, #24
 8010c38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f000 80b4 	beq.w	8010daa <__kernel_rem_pio2+0x3fa>
 8010c42:	4650      	mov	r0, sl
 8010c44:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8010cd0 <__kernel_rem_pio2+0x320>
 8010c48:	f000 fb3a 	bl	80112c0 <scalbn>
 8010c4c:	00ec      	lsls	r4, r5, #3
 8010c4e:	ab72      	add	r3, sp, #456	; 0x1c8
 8010c50:	191e      	adds	r6, r3, r4
 8010c52:	ec59 8b10 	vmov	r8, r9, d0
 8010c56:	f106 0a08 	add.w	sl, r6, #8
 8010c5a:	462f      	mov	r7, r5
 8010c5c:	2f00      	cmp	r7, #0
 8010c5e:	f280 80df 	bge.w	8010e20 <__kernel_rem_pio2+0x470>
 8010c62:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8010cc8 <__kernel_rem_pio2+0x318>
 8010c66:	f04f 0a00 	mov.w	sl, #0
 8010c6a:	eba5 030a 	sub.w	r3, r5, sl
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	f2c0 810a 	blt.w	8010e88 <__kernel_rem_pio2+0x4d8>
 8010c74:	f8df b078 	ldr.w	fp, [pc, #120]	; 8010cf0 <__kernel_rem_pio2+0x340>
 8010c78:	ec59 8b18 	vmov	r8, r9, d8
 8010c7c:	2700      	movs	r7, #0
 8010c7e:	e0f5      	b.n	8010e6c <__kernel_rem_pio2+0x4bc>
 8010c80:	2302      	movs	r3, #2
 8010c82:	9302      	str	r3, [sp, #8]
 8010c84:	e760      	b.n	8010b48 <__kernel_rem_pio2+0x198>
 8010c86:	ab0e      	add	r3, sp, #56	; 0x38
 8010c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c8c:	b94d      	cbnz	r5, 8010ca2 <__kernel_rem_pio2+0x2f2>
 8010c8e:	b12b      	cbz	r3, 8010c9c <__kernel_rem_pio2+0x2ec>
 8010c90:	a80e      	add	r0, sp, #56	; 0x38
 8010c92:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010c96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	3201      	adds	r2, #1
 8010c9e:	461d      	mov	r5, r3
 8010ca0:	e759      	b.n	8010b56 <__kernel_rem_pio2+0x1a6>
 8010ca2:	a80e      	add	r0, sp, #56	; 0x38
 8010ca4:	1acb      	subs	r3, r1, r3
 8010ca6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8010caa:	462b      	mov	r3, r5
 8010cac:	e7f6      	b.n	8010c9c <__kernel_rem_pio2+0x2ec>
 8010cae:	1e62      	subs	r2, r4, #1
 8010cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8010cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010cba:	a90e      	add	r1, sp, #56	; 0x38
 8010cbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010cc0:	e757      	b.n	8010b72 <__kernel_rem_pio2+0x1c2>
 8010cc2:	bf00      	nop
 8010cc4:	f3af 8000 	nop.w
	...
 8010cd4:	3ff00000 	.word	0x3ff00000
 8010cd8:	08011db0 	.word	0x08011db0
 8010cdc:	40200000 	.word	0x40200000
 8010ce0:	3ff00000 	.word	0x3ff00000
 8010ce4:	3e700000 	.word	0x3e700000
 8010ce8:	41700000 	.word	0x41700000
 8010cec:	3fe00000 	.word	0x3fe00000
 8010cf0:	08011d70 	.word	0x08011d70
 8010cf4:	1e62      	subs	r2, r4, #1
 8010cf6:	ab0e      	add	r3, sp, #56	; 0x38
 8010cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010d00:	e7db      	b.n	8010cba <__kernel_rem_pio2+0x30a>
 8010d02:	a90e      	add	r1, sp, #56	; 0x38
 8010d04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010d08:	3b01      	subs	r3, #1
 8010d0a:	430a      	orrs	r2, r1
 8010d0c:	e78b      	b.n	8010c26 <__kernel_rem_pio2+0x276>
 8010d0e:	3301      	adds	r3, #1
 8010d10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010d14:	2900      	cmp	r1, #0
 8010d16:	d0fa      	beq.n	8010d0e <__kernel_rem_pio2+0x35e>
 8010d18:	9a08      	ldr	r2, [sp, #32]
 8010d1a:	4422      	add	r2, r4
 8010d1c:	00d2      	lsls	r2, r2, #3
 8010d1e:	a922      	add	r1, sp, #136	; 0x88
 8010d20:	18e3      	adds	r3, r4, r3
 8010d22:	9206      	str	r2, [sp, #24]
 8010d24:	440a      	add	r2, r1
 8010d26:	9302      	str	r3, [sp, #8]
 8010d28:	f10b 0108 	add.w	r1, fp, #8
 8010d2c:	f102 0308 	add.w	r3, r2, #8
 8010d30:	1c66      	adds	r6, r4, #1
 8010d32:	910a      	str	r1, [sp, #40]	; 0x28
 8010d34:	2500      	movs	r5, #0
 8010d36:	930d      	str	r3, [sp, #52]	; 0x34
 8010d38:	9b02      	ldr	r3, [sp, #8]
 8010d3a:	42b3      	cmp	r3, r6
 8010d3c:	da04      	bge.n	8010d48 <__kernel_rem_pio2+0x398>
 8010d3e:	461c      	mov	r4, r3
 8010d40:	e6a6      	b.n	8010a90 <__kernel_rem_pio2+0xe0>
 8010d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d44:	2301      	movs	r3, #1
 8010d46:	e7e3      	b.n	8010d10 <__kernel_rem_pio2+0x360>
 8010d48:	9b06      	ldr	r3, [sp, #24]
 8010d4a:	18ef      	adds	r7, r5, r3
 8010d4c:	ab22      	add	r3, sp, #136	; 0x88
 8010d4e:	441f      	add	r7, r3
 8010d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010d56:	f7ef fbe5 	bl	8000524 <__aeabi_i2d>
 8010d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d5c:	461c      	mov	r4, r3
 8010d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d60:	e9c7 0100 	strd	r0, r1, [r7]
 8010d64:	eb03 0b05 	add.w	fp, r3, r5
 8010d68:	2700      	movs	r7, #0
 8010d6a:	f04f 0800 	mov.w	r8, #0
 8010d6e:	f04f 0900 	mov.w	r9, #0
 8010d72:	9b07      	ldr	r3, [sp, #28]
 8010d74:	429f      	cmp	r7, r3
 8010d76:	dd08      	ble.n	8010d8a <__kernel_rem_pio2+0x3da>
 8010d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d7a:	aa72      	add	r2, sp, #456	; 0x1c8
 8010d7c:	18eb      	adds	r3, r5, r3
 8010d7e:	4413      	add	r3, r2
 8010d80:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8010d84:	3601      	adds	r6, #1
 8010d86:	3508      	adds	r5, #8
 8010d88:	e7d6      	b.n	8010d38 <__kernel_rem_pio2+0x388>
 8010d8a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010d8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010d92:	f7ef fc31 	bl	80005f8 <__aeabi_dmul>
 8010d96:	4602      	mov	r2, r0
 8010d98:	460b      	mov	r3, r1
 8010d9a:	4640      	mov	r0, r8
 8010d9c:	4649      	mov	r1, r9
 8010d9e:	f7ef fa75 	bl	800028c <__adddf3>
 8010da2:	3701      	adds	r7, #1
 8010da4:	4680      	mov	r8, r0
 8010da6:	4689      	mov	r9, r1
 8010da8:	e7e3      	b.n	8010d72 <__kernel_rem_pio2+0x3c2>
 8010daa:	3d01      	subs	r5, #1
 8010dac:	e741      	b.n	8010c32 <__kernel_rem_pio2+0x282>
 8010dae:	f1ca 0000 	rsb	r0, sl, #0
 8010db2:	ec47 6b10 	vmov	d0, r6, r7
 8010db6:	f000 fa83 	bl	80112c0 <scalbn>
 8010dba:	ec57 6b10 	vmov	r6, r7, d0
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	4b99      	ldr	r3, [pc, #612]	; (8011028 <__kernel_rem_pio2+0x678>)
 8010dc2:	ee10 0a10 	vmov	r0, s0
 8010dc6:	4639      	mov	r1, r7
 8010dc8:	f7ef fe9c 	bl	8000b04 <__aeabi_dcmpge>
 8010dcc:	b1f8      	cbz	r0, 8010e0e <__kernel_rem_pio2+0x45e>
 8010dce:	2200      	movs	r2, #0
 8010dd0:	4b96      	ldr	r3, [pc, #600]	; (801102c <__kernel_rem_pio2+0x67c>)
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	f7ef fc0f 	bl	80005f8 <__aeabi_dmul>
 8010dda:	f7ef fea7 	bl	8000b2c <__aeabi_d2iz>
 8010dde:	4680      	mov	r8, r0
 8010de0:	f7ef fba0 	bl	8000524 <__aeabi_i2d>
 8010de4:	2200      	movs	r2, #0
 8010de6:	4b90      	ldr	r3, [pc, #576]	; (8011028 <__kernel_rem_pio2+0x678>)
 8010de8:	f7ef fc06 	bl	80005f8 <__aeabi_dmul>
 8010dec:	460b      	mov	r3, r1
 8010dee:	4602      	mov	r2, r0
 8010df0:	4639      	mov	r1, r7
 8010df2:	4630      	mov	r0, r6
 8010df4:	f7ef fa48 	bl	8000288 <__aeabi_dsub>
 8010df8:	f7ef fe98 	bl	8000b2c <__aeabi_d2iz>
 8010dfc:	1c65      	adds	r5, r4, #1
 8010dfe:	ab0e      	add	r3, sp, #56	; 0x38
 8010e00:	f10a 0a18 	add.w	sl, sl, #24
 8010e04:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e08:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010e0c:	e719      	b.n	8010c42 <__kernel_rem_pio2+0x292>
 8010e0e:	4630      	mov	r0, r6
 8010e10:	4639      	mov	r1, r7
 8010e12:	f7ef fe8b 	bl	8000b2c <__aeabi_d2iz>
 8010e16:	ab0e      	add	r3, sp, #56	; 0x38
 8010e18:	4625      	mov	r5, r4
 8010e1a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e1e:	e710      	b.n	8010c42 <__kernel_rem_pio2+0x292>
 8010e20:	ab0e      	add	r3, sp, #56	; 0x38
 8010e22:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010e26:	f7ef fb7d 	bl	8000524 <__aeabi_i2d>
 8010e2a:	4642      	mov	r2, r8
 8010e2c:	464b      	mov	r3, r9
 8010e2e:	f7ef fbe3 	bl	80005f8 <__aeabi_dmul>
 8010e32:	2200      	movs	r2, #0
 8010e34:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010e38:	4b7c      	ldr	r3, [pc, #496]	; (801102c <__kernel_rem_pio2+0x67c>)
 8010e3a:	4640      	mov	r0, r8
 8010e3c:	4649      	mov	r1, r9
 8010e3e:	f7ef fbdb 	bl	80005f8 <__aeabi_dmul>
 8010e42:	3f01      	subs	r7, #1
 8010e44:	4680      	mov	r8, r0
 8010e46:	4689      	mov	r9, r1
 8010e48:	e708      	b.n	8010c5c <__kernel_rem_pio2+0x2ac>
 8010e4a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8010e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e52:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8010e56:	f7ef fbcf 	bl	80005f8 <__aeabi_dmul>
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	4640      	mov	r0, r8
 8010e60:	4649      	mov	r1, r9
 8010e62:	f7ef fa13 	bl	800028c <__adddf3>
 8010e66:	3701      	adds	r7, #1
 8010e68:	4680      	mov	r8, r0
 8010e6a:	4689      	mov	r9, r1
 8010e6c:	9b04      	ldr	r3, [sp, #16]
 8010e6e:	429f      	cmp	r7, r3
 8010e70:	dc01      	bgt.n	8010e76 <__kernel_rem_pio2+0x4c6>
 8010e72:	45ba      	cmp	sl, r7
 8010e74:	dae9      	bge.n	8010e4a <__kernel_rem_pio2+0x49a>
 8010e76:	ab4a      	add	r3, sp, #296	; 0x128
 8010e78:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010e7c:	e9c3 8900 	strd	r8, r9, [r3]
 8010e80:	f10a 0a01 	add.w	sl, sl, #1
 8010e84:	3e08      	subs	r6, #8
 8010e86:	e6f0      	b.n	8010c6a <__kernel_rem_pio2+0x2ba>
 8010e88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010e8a:	2b03      	cmp	r3, #3
 8010e8c:	d85b      	bhi.n	8010f46 <__kernel_rem_pio2+0x596>
 8010e8e:	e8df f003 	tbb	[pc, r3]
 8010e92:	264a      	.short	0x264a
 8010e94:	0226      	.short	0x0226
 8010e96:	ab9a      	add	r3, sp, #616	; 0x268
 8010e98:	441c      	add	r4, r3
 8010e9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010e9e:	46a2      	mov	sl, r4
 8010ea0:	46ab      	mov	fp, r5
 8010ea2:	f1bb 0f00 	cmp.w	fp, #0
 8010ea6:	dc6c      	bgt.n	8010f82 <__kernel_rem_pio2+0x5d2>
 8010ea8:	46a2      	mov	sl, r4
 8010eaa:	46ab      	mov	fp, r5
 8010eac:	f1bb 0f01 	cmp.w	fp, #1
 8010eb0:	f300 8086 	bgt.w	8010fc0 <__kernel_rem_pio2+0x610>
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	2d01      	cmp	r5, #1
 8010eba:	f300 80a0 	bgt.w	8010ffe <__kernel_rem_pio2+0x64e>
 8010ebe:	9b02      	ldr	r3, [sp, #8]
 8010ec0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010ec4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	f040 809e 	bne.w	801100a <__kernel_rem_pio2+0x65a>
 8010ece:	9b01      	ldr	r3, [sp, #4]
 8010ed0:	e9c3 7800 	strd	r7, r8, [r3]
 8010ed4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010ed8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010edc:	e033      	b.n	8010f46 <__kernel_rem_pio2+0x596>
 8010ede:	3408      	adds	r4, #8
 8010ee0:	ab4a      	add	r3, sp, #296	; 0x128
 8010ee2:	441c      	add	r4, r3
 8010ee4:	462e      	mov	r6, r5
 8010ee6:	2000      	movs	r0, #0
 8010ee8:	2100      	movs	r1, #0
 8010eea:	2e00      	cmp	r6, #0
 8010eec:	da3a      	bge.n	8010f64 <__kernel_rem_pio2+0x5b4>
 8010eee:	9b02      	ldr	r3, [sp, #8]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d03d      	beq.n	8010f70 <__kernel_rem_pio2+0x5c0>
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010efa:	9c01      	ldr	r4, [sp, #4]
 8010efc:	e9c4 2300 	strd	r2, r3, [r4]
 8010f00:	4602      	mov	r2, r0
 8010f02:	460b      	mov	r3, r1
 8010f04:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010f08:	f7ef f9be 	bl	8000288 <__aeabi_dsub>
 8010f0c:	ae4c      	add	r6, sp, #304	; 0x130
 8010f0e:	2401      	movs	r4, #1
 8010f10:	42a5      	cmp	r5, r4
 8010f12:	da30      	bge.n	8010f76 <__kernel_rem_pio2+0x5c6>
 8010f14:	9b02      	ldr	r3, [sp, #8]
 8010f16:	b113      	cbz	r3, 8010f1e <__kernel_rem_pio2+0x56e>
 8010f18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	9b01      	ldr	r3, [sp, #4]
 8010f20:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010f24:	e00f      	b.n	8010f46 <__kernel_rem_pio2+0x596>
 8010f26:	ab9a      	add	r3, sp, #616	; 0x268
 8010f28:	441c      	add	r4, r3
 8010f2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010f2e:	2000      	movs	r0, #0
 8010f30:	2100      	movs	r1, #0
 8010f32:	2d00      	cmp	r5, #0
 8010f34:	da10      	bge.n	8010f58 <__kernel_rem_pio2+0x5a8>
 8010f36:	9b02      	ldr	r3, [sp, #8]
 8010f38:	b113      	cbz	r3, 8010f40 <__kernel_rem_pio2+0x590>
 8010f3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f3e:	4619      	mov	r1, r3
 8010f40:	9b01      	ldr	r3, [sp, #4]
 8010f42:	e9c3 0100 	strd	r0, r1, [r3]
 8010f46:	9b06      	ldr	r3, [sp, #24]
 8010f48:	f003 0007 	and.w	r0, r3, #7
 8010f4c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010f50:	ecbd 8b02 	vpop	{d8}
 8010f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f58:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010f5c:	f7ef f996 	bl	800028c <__adddf3>
 8010f60:	3d01      	subs	r5, #1
 8010f62:	e7e6      	b.n	8010f32 <__kernel_rem_pio2+0x582>
 8010f64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010f68:	f7ef f990 	bl	800028c <__adddf3>
 8010f6c:	3e01      	subs	r6, #1
 8010f6e:	e7bc      	b.n	8010eea <__kernel_rem_pio2+0x53a>
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	e7c1      	b.n	8010efa <__kernel_rem_pio2+0x54a>
 8010f76:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010f7a:	f7ef f987 	bl	800028c <__adddf3>
 8010f7e:	3401      	adds	r4, #1
 8010f80:	e7c6      	b.n	8010f10 <__kernel_rem_pio2+0x560>
 8010f82:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8010f86:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010f8a:	4640      	mov	r0, r8
 8010f8c:	ec53 2b17 	vmov	r2, r3, d7
 8010f90:	4649      	mov	r1, r9
 8010f92:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010f96:	f7ef f979 	bl	800028c <__adddf3>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	460f      	mov	r7, r1
 8010fa2:	4640      	mov	r0, r8
 8010fa4:	4649      	mov	r1, r9
 8010fa6:	f7ef f96f 	bl	8000288 <__aeabi_dsub>
 8010faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fae:	f7ef f96d 	bl	800028c <__adddf3>
 8010fb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010fb6:	e9ca 0100 	strd	r0, r1, [sl]
 8010fba:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8010fbe:	e770      	b.n	8010ea2 <__kernel_rem_pio2+0x4f2>
 8010fc0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8010fc4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010fc8:	4630      	mov	r0, r6
 8010fca:	ec53 2b17 	vmov	r2, r3, d7
 8010fce:	4639      	mov	r1, r7
 8010fd0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010fd4:	f7ef f95a 	bl	800028c <__adddf3>
 8010fd8:	4602      	mov	r2, r0
 8010fda:	460b      	mov	r3, r1
 8010fdc:	4680      	mov	r8, r0
 8010fde:	4689      	mov	r9, r1
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	4639      	mov	r1, r7
 8010fe4:	f7ef f950 	bl	8000288 <__aeabi_dsub>
 8010fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fec:	f7ef f94e 	bl	800028c <__adddf3>
 8010ff0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010ff4:	e9ca 0100 	strd	r0, r1, [sl]
 8010ff8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8010ffc:	e756      	b.n	8010eac <__kernel_rem_pio2+0x4fc>
 8010ffe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011002:	f7ef f943 	bl	800028c <__adddf3>
 8011006:	3d01      	subs	r5, #1
 8011008:	e756      	b.n	8010eb8 <__kernel_rem_pio2+0x508>
 801100a:	9b01      	ldr	r3, [sp, #4]
 801100c:	9a01      	ldr	r2, [sp, #4]
 801100e:	601f      	str	r7, [r3, #0]
 8011010:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011014:	605c      	str	r4, [r3, #4]
 8011016:	609d      	str	r5, [r3, #8]
 8011018:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801101c:	60d3      	str	r3, [r2, #12]
 801101e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011022:	6110      	str	r0, [r2, #16]
 8011024:	6153      	str	r3, [r2, #20]
 8011026:	e78e      	b.n	8010f46 <__kernel_rem_pio2+0x596>
 8011028:	41700000 	.word	0x41700000
 801102c:	3e700000 	.word	0x3e700000

08011030 <__kernel_sin>:
 8011030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011034:	ec55 4b10 	vmov	r4, r5, d0
 8011038:	b085      	sub	sp, #20
 801103a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801103e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011042:	ed8d 1b00 	vstr	d1, [sp]
 8011046:	9002      	str	r0, [sp, #8]
 8011048:	da06      	bge.n	8011058 <__kernel_sin+0x28>
 801104a:	ee10 0a10 	vmov	r0, s0
 801104e:	4629      	mov	r1, r5
 8011050:	f7ef fd6c 	bl	8000b2c <__aeabi_d2iz>
 8011054:	2800      	cmp	r0, #0
 8011056:	d051      	beq.n	80110fc <__kernel_sin+0xcc>
 8011058:	4622      	mov	r2, r4
 801105a:	462b      	mov	r3, r5
 801105c:	4620      	mov	r0, r4
 801105e:	4629      	mov	r1, r5
 8011060:	f7ef faca 	bl	80005f8 <__aeabi_dmul>
 8011064:	4682      	mov	sl, r0
 8011066:	468b      	mov	fp, r1
 8011068:	4602      	mov	r2, r0
 801106a:	460b      	mov	r3, r1
 801106c:	4620      	mov	r0, r4
 801106e:	4629      	mov	r1, r5
 8011070:	f7ef fac2 	bl	80005f8 <__aeabi_dmul>
 8011074:	a341      	add	r3, pc, #260	; (adr r3, 801117c <__kernel_sin+0x14c>)
 8011076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801107a:	4680      	mov	r8, r0
 801107c:	4689      	mov	r9, r1
 801107e:	4650      	mov	r0, sl
 8011080:	4659      	mov	r1, fp
 8011082:	f7ef fab9 	bl	80005f8 <__aeabi_dmul>
 8011086:	a33f      	add	r3, pc, #252	; (adr r3, 8011184 <__kernel_sin+0x154>)
 8011088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108c:	f7ef f8fc 	bl	8000288 <__aeabi_dsub>
 8011090:	4652      	mov	r2, sl
 8011092:	465b      	mov	r3, fp
 8011094:	f7ef fab0 	bl	80005f8 <__aeabi_dmul>
 8011098:	a33c      	add	r3, pc, #240	; (adr r3, 801118c <__kernel_sin+0x15c>)
 801109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109e:	f7ef f8f5 	bl	800028c <__adddf3>
 80110a2:	4652      	mov	r2, sl
 80110a4:	465b      	mov	r3, fp
 80110a6:	f7ef faa7 	bl	80005f8 <__aeabi_dmul>
 80110aa:	a33a      	add	r3, pc, #232	; (adr r3, 8011194 <__kernel_sin+0x164>)
 80110ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b0:	f7ef f8ea 	bl	8000288 <__aeabi_dsub>
 80110b4:	4652      	mov	r2, sl
 80110b6:	465b      	mov	r3, fp
 80110b8:	f7ef fa9e 	bl	80005f8 <__aeabi_dmul>
 80110bc:	a337      	add	r3, pc, #220	; (adr r3, 801119c <__kernel_sin+0x16c>)
 80110be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c2:	f7ef f8e3 	bl	800028c <__adddf3>
 80110c6:	9b02      	ldr	r3, [sp, #8]
 80110c8:	4606      	mov	r6, r0
 80110ca:	460f      	mov	r7, r1
 80110cc:	b9db      	cbnz	r3, 8011106 <__kernel_sin+0xd6>
 80110ce:	4602      	mov	r2, r0
 80110d0:	460b      	mov	r3, r1
 80110d2:	4650      	mov	r0, sl
 80110d4:	4659      	mov	r1, fp
 80110d6:	f7ef fa8f 	bl	80005f8 <__aeabi_dmul>
 80110da:	a325      	add	r3, pc, #148	; (adr r3, 8011170 <__kernel_sin+0x140>)
 80110dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e0:	f7ef f8d2 	bl	8000288 <__aeabi_dsub>
 80110e4:	4642      	mov	r2, r8
 80110e6:	464b      	mov	r3, r9
 80110e8:	f7ef fa86 	bl	80005f8 <__aeabi_dmul>
 80110ec:	4602      	mov	r2, r0
 80110ee:	460b      	mov	r3, r1
 80110f0:	4620      	mov	r0, r4
 80110f2:	4629      	mov	r1, r5
 80110f4:	f7ef f8ca 	bl	800028c <__adddf3>
 80110f8:	4604      	mov	r4, r0
 80110fa:	460d      	mov	r5, r1
 80110fc:	ec45 4b10 	vmov	d0, r4, r5
 8011100:	b005      	add	sp, #20
 8011102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011106:	2200      	movs	r2, #0
 8011108:	4b1b      	ldr	r3, [pc, #108]	; (8011178 <__kernel_sin+0x148>)
 801110a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801110e:	f7ef fa73 	bl	80005f8 <__aeabi_dmul>
 8011112:	4632      	mov	r2, r6
 8011114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011118:	463b      	mov	r3, r7
 801111a:	4640      	mov	r0, r8
 801111c:	4649      	mov	r1, r9
 801111e:	f7ef fa6b 	bl	80005f8 <__aeabi_dmul>
 8011122:	4602      	mov	r2, r0
 8011124:	460b      	mov	r3, r1
 8011126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801112a:	f7ef f8ad 	bl	8000288 <__aeabi_dsub>
 801112e:	4652      	mov	r2, sl
 8011130:	465b      	mov	r3, fp
 8011132:	f7ef fa61 	bl	80005f8 <__aeabi_dmul>
 8011136:	e9dd 2300 	ldrd	r2, r3, [sp]
 801113a:	f7ef f8a5 	bl	8000288 <__aeabi_dsub>
 801113e:	a30c      	add	r3, pc, #48	; (adr r3, 8011170 <__kernel_sin+0x140>)
 8011140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011144:	4606      	mov	r6, r0
 8011146:	460f      	mov	r7, r1
 8011148:	4640      	mov	r0, r8
 801114a:	4649      	mov	r1, r9
 801114c:	f7ef fa54 	bl	80005f8 <__aeabi_dmul>
 8011150:	4602      	mov	r2, r0
 8011152:	460b      	mov	r3, r1
 8011154:	4630      	mov	r0, r6
 8011156:	4639      	mov	r1, r7
 8011158:	f7ef f898 	bl	800028c <__adddf3>
 801115c:	4602      	mov	r2, r0
 801115e:	460b      	mov	r3, r1
 8011160:	4620      	mov	r0, r4
 8011162:	4629      	mov	r1, r5
 8011164:	f7ef f890 	bl	8000288 <__aeabi_dsub>
 8011168:	e7c6      	b.n	80110f8 <__kernel_sin+0xc8>
 801116a:	bf00      	nop
 801116c:	f3af 8000 	nop.w
 8011170:	55555549 	.word	0x55555549
 8011174:	3fc55555 	.word	0x3fc55555
 8011178:	3fe00000 	.word	0x3fe00000
 801117c:	5acfd57c 	.word	0x5acfd57c
 8011180:	3de5d93a 	.word	0x3de5d93a
 8011184:	8a2b9ceb 	.word	0x8a2b9ceb
 8011188:	3e5ae5e6 	.word	0x3e5ae5e6
 801118c:	57b1fe7d 	.word	0x57b1fe7d
 8011190:	3ec71de3 	.word	0x3ec71de3
 8011194:	19c161d5 	.word	0x19c161d5
 8011198:	3f2a01a0 	.word	0x3f2a01a0
 801119c:	1110f8a6 	.word	0x1110f8a6
 80111a0:	3f811111 	.word	0x3f811111

080111a4 <fabs>:
 80111a4:	ec51 0b10 	vmov	r0, r1, d0
 80111a8:	ee10 2a10 	vmov	r2, s0
 80111ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111b0:	ec43 2b10 	vmov	d0, r2, r3
 80111b4:	4770      	bx	lr
	...

080111b8 <floor>:
 80111b8:	ec51 0b10 	vmov	r0, r1, d0
 80111bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80111c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80111c8:	2e13      	cmp	r6, #19
 80111ca:	460c      	mov	r4, r1
 80111cc:	ee10 5a10 	vmov	r5, s0
 80111d0:	4680      	mov	r8, r0
 80111d2:	dc34      	bgt.n	801123e <floor+0x86>
 80111d4:	2e00      	cmp	r6, #0
 80111d6:	da16      	bge.n	8011206 <floor+0x4e>
 80111d8:	a335      	add	r3, pc, #212	; (adr r3, 80112b0 <floor+0xf8>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	f7ef f855 	bl	800028c <__adddf3>
 80111e2:	2200      	movs	r2, #0
 80111e4:	2300      	movs	r3, #0
 80111e6:	f7ef fc97 	bl	8000b18 <__aeabi_dcmpgt>
 80111ea:	b148      	cbz	r0, 8011200 <floor+0x48>
 80111ec:	2c00      	cmp	r4, #0
 80111ee:	da59      	bge.n	80112a4 <floor+0xec>
 80111f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80111f4:	4a30      	ldr	r2, [pc, #192]	; (80112b8 <floor+0x100>)
 80111f6:	432b      	orrs	r3, r5
 80111f8:	2500      	movs	r5, #0
 80111fa:	42ab      	cmp	r3, r5
 80111fc:	bf18      	it	ne
 80111fe:	4614      	movne	r4, r2
 8011200:	4621      	mov	r1, r4
 8011202:	4628      	mov	r0, r5
 8011204:	e025      	b.n	8011252 <floor+0x9a>
 8011206:	4f2d      	ldr	r7, [pc, #180]	; (80112bc <floor+0x104>)
 8011208:	4137      	asrs	r7, r6
 801120a:	ea01 0307 	and.w	r3, r1, r7
 801120e:	4303      	orrs	r3, r0
 8011210:	d01f      	beq.n	8011252 <floor+0x9a>
 8011212:	a327      	add	r3, pc, #156	; (adr r3, 80112b0 <floor+0xf8>)
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	f7ef f838 	bl	800028c <__adddf3>
 801121c:	2200      	movs	r2, #0
 801121e:	2300      	movs	r3, #0
 8011220:	f7ef fc7a 	bl	8000b18 <__aeabi_dcmpgt>
 8011224:	2800      	cmp	r0, #0
 8011226:	d0eb      	beq.n	8011200 <floor+0x48>
 8011228:	2c00      	cmp	r4, #0
 801122a:	bfbe      	ittt	lt
 801122c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011230:	fa43 f606 	asrlt.w	r6, r3, r6
 8011234:	19a4      	addlt	r4, r4, r6
 8011236:	ea24 0407 	bic.w	r4, r4, r7
 801123a:	2500      	movs	r5, #0
 801123c:	e7e0      	b.n	8011200 <floor+0x48>
 801123e:	2e33      	cmp	r6, #51	; 0x33
 8011240:	dd0b      	ble.n	801125a <floor+0xa2>
 8011242:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011246:	d104      	bne.n	8011252 <floor+0x9a>
 8011248:	ee10 2a10 	vmov	r2, s0
 801124c:	460b      	mov	r3, r1
 801124e:	f7ef f81d 	bl	800028c <__adddf3>
 8011252:	ec41 0b10 	vmov	d0, r0, r1
 8011256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801125a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801125e:	f04f 33ff 	mov.w	r3, #4294967295
 8011262:	fa23 f707 	lsr.w	r7, r3, r7
 8011266:	4207      	tst	r7, r0
 8011268:	d0f3      	beq.n	8011252 <floor+0x9a>
 801126a:	a311      	add	r3, pc, #68	; (adr r3, 80112b0 <floor+0xf8>)
 801126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011270:	f7ef f80c 	bl	800028c <__adddf3>
 8011274:	2200      	movs	r2, #0
 8011276:	2300      	movs	r3, #0
 8011278:	f7ef fc4e 	bl	8000b18 <__aeabi_dcmpgt>
 801127c:	2800      	cmp	r0, #0
 801127e:	d0bf      	beq.n	8011200 <floor+0x48>
 8011280:	2c00      	cmp	r4, #0
 8011282:	da02      	bge.n	801128a <floor+0xd2>
 8011284:	2e14      	cmp	r6, #20
 8011286:	d103      	bne.n	8011290 <floor+0xd8>
 8011288:	3401      	adds	r4, #1
 801128a:	ea25 0507 	bic.w	r5, r5, r7
 801128e:	e7b7      	b.n	8011200 <floor+0x48>
 8011290:	2301      	movs	r3, #1
 8011292:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011296:	fa03 f606 	lsl.w	r6, r3, r6
 801129a:	4435      	add	r5, r6
 801129c:	4545      	cmp	r5, r8
 801129e:	bf38      	it	cc
 80112a0:	18e4      	addcc	r4, r4, r3
 80112a2:	e7f2      	b.n	801128a <floor+0xd2>
 80112a4:	2500      	movs	r5, #0
 80112a6:	462c      	mov	r4, r5
 80112a8:	e7aa      	b.n	8011200 <floor+0x48>
 80112aa:	bf00      	nop
 80112ac:	f3af 8000 	nop.w
 80112b0:	8800759c 	.word	0x8800759c
 80112b4:	7e37e43c 	.word	0x7e37e43c
 80112b8:	bff00000 	.word	0xbff00000
 80112bc:	000fffff 	.word	0x000fffff

080112c0 <scalbn>:
 80112c0:	b570      	push	{r4, r5, r6, lr}
 80112c2:	ec55 4b10 	vmov	r4, r5, d0
 80112c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80112ca:	4606      	mov	r6, r0
 80112cc:	462b      	mov	r3, r5
 80112ce:	b9aa      	cbnz	r2, 80112fc <scalbn+0x3c>
 80112d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80112d4:	4323      	orrs	r3, r4
 80112d6:	d03b      	beq.n	8011350 <scalbn+0x90>
 80112d8:	4b31      	ldr	r3, [pc, #196]	; (80113a0 <scalbn+0xe0>)
 80112da:	4629      	mov	r1, r5
 80112dc:	2200      	movs	r2, #0
 80112de:	ee10 0a10 	vmov	r0, s0
 80112e2:	f7ef f989 	bl	80005f8 <__aeabi_dmul>
 80112e6:	4b2f      	ldr	r3, [pc, #188]	; (80113a4 <scalbn+0xe4>)
 80112e8:	429e      	cmp	r6, r3
 80112ea:	4604      	mov	r4, r0
 80112ec:	460d      	mov	r5, r1
 80112ee:	da12      	bge.n	8011316 <scalbn+0x56>
 80112f0:	a327      	add	r3, pc, #156	; (adr r3, 8011390 <scalbn+0xd0>)
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	f7ef f97f 	bl	80005f8 <__aeabi_dmul>
 80112fa:	e009      	b.n	8011310 <scalbn+0x50>
 80112fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011300:	428a      	cmp	r2, r1
 8011302:	d10c      	bne.n	801131e <scalbn+0x5e>
 8011304:	ee10 2a10 	vmov	r2, s0
 8011308:	4620      	mov	r0, r4
 801130a:	4629      	mov	r1, r5
 801130c:	f7ee ffbe 	bl	800028c <__adddf3>
 8011310:	4604      	mov	r4, r0
 8011312:	460d      	mov	r5, r1
 8011314:	e01c      	b.n	8011350 <scalbn+0x90>
 8011316:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801131a:	460b      	mov	r3, r1
 801131c:	3a36      	subs	r2, #54	; 0x36
 801131e:	4432      	add	r2, r6
 8011320:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011324:	428a      	cmp	r2, r1
 8011326:	dd0b      	ble.n	8011340 <scalbn+0x80>
 8011328:	ec45 4b11 	vmov	d1, r4, r5
 801132c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011398 <scalbn+0xd8>
 8011330:	f000 f83c 	bl	80113ac <copysign>
 8011334:	a318      	add	r3, pc, #96	; (adr r3, 8011398 <scalbn+0xd8>)
 8011336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801133a:	ec51 0b10 	vmov	r0, r1, d0
 801133e:	e7da      	b.n	80112f6 <scalbn+0x36>
 8011340:	2a00      	cmp	r2, #0
 8011342:	dd08      	ble.n	8011356 <scalbn+0x96>
 8011344:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011348:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801134c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011350:	ec45 4b10 	vmov	d0, r4, r5
 8011354:	bd70      	pop	{r4, r5, r6, pc}
 8011356:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801135a:	da0d      	bge.n	8011378 <scalbn+0xb8>
 801135c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011360:	429e      	cmp	r6, r3
 8011362:	ec45 4b11 	vmov	d1, r4, r5
 8011366:	dce1      	bgt.n	801132c <scalbn+0x6c>
 8011368:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011390 <scalbn+0xd0>
 801136c:	f000 f81e 	bl	80113ac <copysign>
 8011370:	a307      	add	r3, pc, #28	; (adr r3, 8011390 <scalbn+0xd0>)
 8011372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011376:	e7e0      	b.n	801133a <scalbn+0x7a>
 8011378:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801137c:	3236      	adds	r2, #54	; 0x36
 801137e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011382:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011386:	4620      	mov	r0, r4
 8011388:	4629      	mov	r1, r5
 801138a:	2200      	movs	r2, #0
 801138c:	4b06      	ldr	r3, [pc, #24]	; (80113a8 <scalbn+0xe8>)
 801138e:	e7b2      	b.n	80112f6 <scalbn+0x36>
 8011390:	c2f8f359 	.word	0xc2f8f359
 8011394:	01a56e1f 	.word	0x01a56e1f
 8011398:	8800759c 	.word	0x8800759c
 801139c:	7e37e43c 	.word	0x7e37e43c
 80113a0:	43500000 	.word	0x43500000
 80113a4:	ffff3cb0 	.word	0xffff3cb0
 80113a8:	3c900000 	.word	0x3c900000

080113ac <copysign>:
 80113ac:	ec51 0b10 	vmov	r0, r1, d0
 80113b0:	ee11 0a90 	vmov	r0, s3
 80113b4:	ee10 2a10 	vmov	r2, s0
 80113b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80113bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80113c0:	ea41 0300 	orr.w	r3, r1, r0
 80113c4:	ec43 2b10 	vmov	d0, r2, r3
 80113c8:	4770      	bx	lr
	...

080113cc <_init>:
 80113cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ce:	bf00      	nop
 80113d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113d2:	bc08      	pop	{r3}
 80113d4:	469e      	mov	lr, r3
 80113d6:	4770      	bx	lr

080113d8 <_fini>:
 80113d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113da:	bf00      	nop
 80113dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113de:	bc08      	pop	{r3}
 80113e0:	469e      	mov	lr, r3
 80113e2:	4770      	bx	lr
