
monofon_USB_sk6812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2cc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800e468  0800e468  0001e468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7a8  0800e7a8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7a8  0800e7a8  0001e7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7b0  0800e7b0  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7b0  0800e7b0  0001e7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7b4  0800e7b4  0001e7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800e7b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001688  200001fc  0800e9b4  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00009004  20001884  0800e9b4  00021884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025170  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fdd  00000000  00000000  0004539c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001980  00000000  00000000  0004a380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001728  00000000  00000000  0004bd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d76f  00000000  00000000  0004d428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a0a4  00000000  00000000  0006ab97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b3cb  00000000  00000000  00084c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006db8  00000000  00000000  00120084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001fc 	.word	0x200001fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e44c 	.word	0x0800e44c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000200 	.word	0x20000200
 80001d4:	0800e44c 	.word	0x0800e44c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b972 	b.w	8000e70 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	4688      	mov	r8, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14b      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4615      	mov	r5, r2
 8000bb6:	d967      	bls.n	8000c88 <__udivmoddi4+0xe4>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b14a      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bbe:	f1c2 0720 	rsb	r7, r2, #32
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bca:	4095      	lsls	r5, r2
 8000bcc:	ea47 0803 	orr.w	r8, r7, r3
 8000bd0:	4094      	lsls	r4, r2
 8000bd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd6:	0c23      	lsrs	r3, r4, #16
 8000bd8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bdc:	fa1f fc85 	uxth.w	ip, r5
 8000be0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x60>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bf6:	f080 811b 	bcs.w	8000e30 <__udivmoddi4+0x28c>
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	f240 8118 	bls.w	8000e30 <__udivmoddi4+0x28c>
 8000c00:	3f02      	subs	r7, #2
 8000c02:	442b      	add	r3, r5
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c14:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c18:	45a4      	cmp	ip, r4
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x8c>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c22:	f080 8107 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	f240 8104 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	442c      	add	r4, r5
 8000c30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c34:	eba4 040c 	sub.w	r4, r4, ip
 8000c38:	2700      	movs	r7, #0
 8000c3a:	b11e      	cbz	r6, 8000c44 <__udivmoddi4+0xa0>
 8000c3c:	40d4      	lsrs	r4, r2
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e9c6 4300 	strd	r4, r3, [r6]
 8000c44:	4639      	mov	r1, r7
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0xbe>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80eb 	beq.w	8000e2a <__udivmoddi4+0x286>
 8000c54:	2700      	movs	r7, #0
 8000c56:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f783 	clz	r7, r3
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d147      	bne.n	8000cfa <__udivmoddi4+0x156>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xd0>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80fa 	bhi.w	8000e68 <__udivmoddi4+0x2c4>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d0e0      	beq.n	8000c44 <__udivmoddi4+0xa0>
 8000c82:	e9c6 4800 	strd	r4, r8, [r6]
 8000c86:	e7dd      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000c88:	b902      	cbnz	r2, 8000c8c <__udivmoddi4+0xe8>
 8000c8a:	deff      	udf	#255	; 0xff
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	f040 808f 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c96:	1b49      	subs	r1, r1, r5
 8000c98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9c:	fa1f f885 	uxth.w	r8, r5
 8000ca0:	2701      	movs	r7, #1
 8000ca2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ca6:	0c23      	lsrs	r3, r4, #16
 8000ca8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb8:	18eb      	adds	r3, r5, r3
 8000cba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2bc>
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	1a59      	subs	r1, r3, r1
 8000cca:	b2a3      	uxth	r3, r4
 8000ccc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd8:	fb08 f800 	mul.w	r8, r8, r0
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x14c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x14a>
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	f200 80b6 	bhi.w	8000e5a <__udivmoddi4+0x2b6>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	eba4 0408 	sub.w	r4, r4, r8
 8000cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf8:	e79f      	b.n	8000c3a <__udivmoddi4+0x96>
 8000cfa:	f1c7 0c20 	rsb	ip, r7, #32
 8000cfe:	40bb      	lsls	r3, r7
 8000d00:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d04:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d08:	fa01 f407 	lsl.w	r4, r1, r7
 8000d0c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d10:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d14:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d18:	4325      	orrs	r5, r4
 8000d1a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d1e:	0c2c      	lsrs	r4, r5, #16
 8000d20:	fb08 3319 	mls	r3, r8, r9, r3
 8000d24:	fa1f fa8e 	uxth.w	sl, lr
 8000d28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d2c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d30:	429c      	cmp	r4, r3
 8000d32:	fa02 f207 	lsl.w	r2, r2, r7
 8000d36:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d44:	f080 8087 	bcs.w	8000e56 <__udivmoddi4+0x2b2>
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	f240 8084 	bls.w	8000e56 <__udivmoddi4+0x2b2>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4473      	add	r3, lr
 8000d54:	1b1b      	subs	r3, r3, r4
 8000d56:	b2ad      	uxth	r5, r5
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d64:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d68:	45a2      	cmp	sl, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d74:	d26b      	bcs.n	8000e4e <__udivmoddi4+0x2aa>
 8000d76:	45a2      	cmp	sl, r4
 8000d78:	d969      	bls.n	8000e4e <__udivmoddi4+0x2aa>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4474      	add	r4, lr
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	fba0 8902 	umull	r8, r9, r0, r2
 8000d86:	eba4 040a 	sub.w	r4, r4, sl
 8000d8a:	454c      	cmp	r4, r9
 8000d8c:	46c2      	mov	sl, r8
 8000d8e:	464b      	mov	r3, r9
 8000d90:	d354      	bcc.n	8000e3c <__udivmoddi4+0x298>
 8000d92:	d051      	beq.n	8000e38 <__udivmoddi4+0x294>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d069      	beq.n	8000e6c <__udivmoddi4+0x2c8>
 8000d98:	ebb1 050a 	subs.w	r5, r1, sl
 8000d9c:	eb64 0403 	sbc.w	r4, r4, r3
 8000da0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da4:	40fd      	lsrs	r5, r7
 8000da6:	40fc      	lsrs	r4, r7
 8000da8:	ea4c 0505 	orr.w	r5, ip, r5
 8000dac:	e9c6 5400 	strd	r5, r4, [r6]
 8000db0:	2700      	movs	r7, #0
 8000db2:	e747      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dbc:	4095      	lsls	r5, r2
 8000dbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dca:	4338      	orrs	r0, r7
 8000dcc:	0c01      	lsrs	r1, r0, #16
 8000dce:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd2:	fa1f f885 	uxth.w	r8, r5
 8000dd6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dde:	fb07 f308 	mul.w	r3, r7, r8
 8000de2:	428b      	cmp	r3, r1
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x256>
 8000dea:	1869      	adds	r1, r5, r1
 8000dec:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df0:	d22f      	bcs.n	8000e52 <__udivmoddi4+0x2ae>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d92d      	bls.n	8000e52 <__udivmoddi4+0x2ae>
 8000df6:	3f02      	subs	r7, #2
 8000df8:	4429      	add	r1, r5
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	b281      	uxth	r1, r0
 8000dfe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e02:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb00 f308 	mul.w	r3, r0, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x27e>
 8000e12:	1869      	adds	r1, r5, r1
 8000e14:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e18:	d217      	bcs.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d915      	bls.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4429      	add	r1, r5
 8000e22:	1ac9      	subs	r1, r1, r3
 8000e24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e28:	e73b      	b.n	8000ca2 <__udivmoddi4+0xfe>
 8000e2a:	4637      	mov	r7, r6
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	e709      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000e30:	4607      	mov	r7, r0
 8000e32:	e6e7      	b.n	8000c04 <__udivmoddi4+0x60>
 8000e34:	4618      	mov	r0, r3
 8000e36:	e6fb      	b.n	8000c30 <__udivmoddi4+0x8c>
 8000e38:	4541      	cmp	r1, r8
 8000e3a:	d2ab      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e3c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e40:	eb69 020e 	sbc.w	r2, r9, lr
 8000e44:	3801      	subs	r0, #1
 8000e46:	4613      	mov	r3, r2
 8000e48:	e7a4      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4a:	4660      	mov	r0, ip
 8000e4c:	e7e9      	b.n	8000e22 <__udivmoddi4+0x27e>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	e795      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e52:	4667      	mov	r7, ip
 8000e54:	e7d1      	b.n	8000dfa <__udivmoddi4+0x256>
 8000e56:	4681      	mov	r9, r0
 8000e58:	e77c      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	442c      	add	r4, r5
 8000e5e:	e747      	b.n	8000cf0 <__udivmoddi4+0x14c>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	442b      	add	r3, r5
 8000e66:	e72f      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e68:	4638      	mov	r0, r7
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xda>
 8000e6c:	4637      	mov	r7, r6
 8000e6e:	e6e9      	b.n	8000c44 <__udivmoddi4+0xa0>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 fd19 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f00b f8a8 	bl	800bffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fd31 	bl	800193e <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 fcf9 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000128 	.word	0x20000128
 8000f10:	20000004 	.word	0x20000004
 8000f14:	20000000 	.word	0x20000000

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000004 	.word	0x20000004
 8000f3c:	2000080c 	.word	0x2000080c

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000080c 	.word	0x2000080c

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_Delay+0x40>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e033      	b.n	800101a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d109      	bne.n	8000fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f00b f846 	bl	800c04c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fe2:	f023 0302 	bic.w	r3, r3, #2
 8000fe6:	f043 0202 	orr.w	r2, r3, #2
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 faa4 	bl	800153c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f023 0303 	bic.w	r3, r3, #3
 8001002:	f043 0201 	orr.w	r2, r3, #1
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
 800100a:	e001      	b.n	8001010 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001036:	2b01      	cmp	r3, #1
 8001038:	d101      	bne.n	800103e <HAL_ADC_Start+0x1a>
 800103a:	2302      	movs	r3, #2
 800103c:	e08a      	b.n	8001154 <HAL_ADC_Start+0x130>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b01      	cmp	r3, #1
 8001052:	d018      	beq.n	8001086 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0201 	orr.w	r2, r2, #1
 8001062:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001064:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <HAL_ADC_Start+0x13c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a3e      	ldr	r2, [pc, #248]	; (8001164 <HAL_ADC_Start+0x140>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	0c9a      	lsrs	r2, r3, #18
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001078:	e002      	b.n	8001080 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3b01      	subs	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f9      	bne.n	800107a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b01      	cmp	r3, #1
 8001092:	d15e      	bne.n	8001152 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010d2:	d106      	bne.n	80010e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	f023 0206 	bic.w	r2, r3, #6
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	645a      	str	r2, [r3, #68]	; 0x44
 80010e0:	e002      	b.n	80010e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_ADC_Start+0x144>)
 80010f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10f      	bne.n	800112a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d11c      	bne.n	8001152 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	e013      	b.n	8001152 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_ADC_Start+0x148>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d10e      	bne.n	8001152 <HAL_ADC_Start+0x12e>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d107      	bne.n	8001152 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001150:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	20000128 	.word	0x20000128
 8001164:	431bde83 	.word	0x431bde83
 8001168:	40012300 	.word	0x40012300
 800116c:	40012000 	.word	0x40012000

08001170 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Stop+0x16>
 8001182:	2302      	movs	r3, #2
 8001184:	e021      	b.n	80011ca <HAL_ADC_Stop+0x5a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d109      	bne.n	80011c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f2:	d113      	bne.n	800121c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001202:	d10b      	bne.n	800121c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f043 0220 	orr.w	r2, r3, #32
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e05c      	b.n	80012d6 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800121c:	f7ff fe90 	bl	8000f40 <HAL_GetTick>
 8001220:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001222:	e01a      	b.n	800125a <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122a:	d016      	beq.n	800125a <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_ADC_PollForConversion+0x6c>
 8001232:	f7ff fe85 	bl	8000f40 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d20b      	bcs.n	800125a <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f043 0204 	orr.w	r2, r3, #4
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e03d      	b.n	80012d6 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b02      	cmp	r3, #2
 8001266:	d1dd      	bne.n	8001224 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f06f 0212 	mvn.w	r2, #18
 8001270:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d123      	bne.n	80012d4 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11f      	bne.n	80012d4 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d111      	bne.n	80012d4 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d105      	bne.n	80012d4 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1c>
 8001310:	2302      	movs	r3, #2
 8001312:	e105      	b.n	8001520 <HAL_ADC_ConfigChannel+0x228>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d925      	bls.n	8001370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68d9      	ldr	r1, [r3, #12]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	3b1e      	subs	r3, #30
 800133a:	2207      	movs	r2, #7
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43da      	mvns	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	400a      	ands	r2, r1
 8001348:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68d9      	ldr	r1, [r3, #12]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	4603      	mov	r3, r0
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4403      	add	r3, r0
 8001362:	3b1e      	subs	r3, #30
 8001364:	409a      	lsls	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e022      	b.n	80013b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	2207      	movs	r2, #7
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6919      	ldr	r1, [r3, #16]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4403      	add	r3, r0
 80013ac:	409a      	lsls	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d824      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b05      	subs	r3, #5
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b05      	subs	r3, #5
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
 8001406:	e04c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d824      	bhi.n	800145a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b23      	subs	r3, #35	; 0x23
 8001422:	221f      	movs	r2, #31
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43da      	mvns	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	400a      	ands	r2, r1
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b23      	subs	r3, #35	; 0x23
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
 8001458:	e023      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b41      	subs	r3, #65	; 0x41
 800146c:	221f      	movs	r2, #31
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b41      	subs	r3, #65	; 0x41
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_ADC_ConfigChannel+0x234>)
 80014a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a21      	ldr	r2, [pc, #132]	; (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d123      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d003      	beq.n	80014de <HAL_ADC_ConfigChannel+0x1e6>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d11b      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d111      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_ADC_ConfigChannel+0x23c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_ADC_ConfigChannel+0x240>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	0c9a      	lsrs	r2, r3, #18
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001508:	e002      	b.n	8001510 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40012300 	.word	0x40012300
 8001530:	40012000 	.word	0x40012000
 8001534:	20000128 	.word	0x20000128
 8001538:	431bde83 	.word	0x431bde83

0800153c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001544:	4b79      	ldr	r3, [pc, #484]	; (800172c <ADC_Init+0x1f0>)
 8001546:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	021a      	lsls	r2, r3, #8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	4a58      	ldr	r2, [pc, #352]	; (8001730 <ADC_Init+0x1f4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6899      	ldr	r1, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	e00f      	b.n	800163a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001638:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0202 	bic.w	r2, r2, #2
 8001648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e1b      	ldrb	r3, [r3, #24]
 8001654:	005a      	lsls	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001676:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	3b01      	subs	r3, #1
 8001694:	035a      	lsls	r2, r3, #13
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	e007      	b.n	80016b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	051a      	lsls	r2, r3, #20
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f2:	025a      	lsls	r2, r3, #9
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	029a      	lsls	r2, r3, #10
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40012300 	.word	0x40012300
 8001730:	0f000001 	.word	0x0f000001

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f7ff ff8e 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff29 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff3e 	bl	800177c <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff8e 	bl	8001828 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff31 	bl	8001798 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff faec 	bl	8000f40 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e099      	b.n	8001aa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001994:	e00f      	b.n	80019b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001996:	f7ff fad3 	bl	8000f40 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d908      	bls.n	80019b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e078      	b.n	8001aa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e8      	bne.n	8001996 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_DMA_Init+0x158>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d107      	bne.n	8001a20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f023 0307 	bic.w	r3, r3, #7
 8001a36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d117      	bne.n	8001a7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fadf 	bl	8002020 <DMA_CheckFifoParam>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a76:	2301      	movs	r3, #1
 8001a78:	e016      	b.n	8001aa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fa96 	bl	8001fb4 <DMA_CalcBaseAndBitshift>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	223f      	movs	r2, #63	; 0x3f
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	f010803f 	.word	0xf010803f

08001ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_DMA_Start_IT+0x26>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e040      	b.n	8001b5c <HAL_DMA_Start_IT+0xa8>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d12f      	bne.n	8001b4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2202      	movs	r2, #2
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 fa28 	bl	8001f58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	223f      	movs	r2, #63	; 0x3f
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0216 	orr.w	r2, r2, #22
 8001b22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0208 	orr.w	r2, r2, #8
 8001b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e005      	b.n	8001b5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
 8001b58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b72:	f7ff f9e5 	bl	8000f40 <HAL_GetTick>
 8001b76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d008      	beq.n	8001b96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e052      	b.n	8001c3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0216 	bic.w	r2, r2, #22
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d103      	bne.n	8001bc6 <HAL_DMA_Abort+0x62>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0208 	bic.w	r2, r2, #8
 8001bd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be6:	e013      	b.n	8001c10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be8:	f7ff f9aa 	bl	8000f40 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d90c      	bls.n	8001c10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2203      	movs	r2, #3
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e015      	b.n	8001c3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1e4      	bne.n	8001be8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	223f      	movs	r2, #63	; 0x3f
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c50:	4b92      	ldr	r3, [pc, #584]	; (8001e9c <HAL_DMA_IRQHandler+0x258>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a92      	ldr	r2, [pc, #584]	; (8001ea0 <HAL_DMA_IRQHandler+0x25c>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0a9b      	lsrs	r3, r3, #10
 8001c5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2208      	movs	r2, #8
 8001c70:	409a      	lsls	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d01a      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0204 	bic.w	r2, r2, #4
 8001c96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d012      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	f043 0202 	orr.w	r2, r3, #2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	2204      	movs	r2, #4
 8001cec:	409a      	lsls	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d012      	beq.n	8001d1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	2204      	movs	r2, #4
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	f043 0204 	orr.w	r2, r3, #4
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	2210      	movs	r2, #16
 8001d22:	409a      	lsls	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d043      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d03c      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2210      	movs	r2, #16
 8001d40:	409a      	lsls	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d018      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d108      	bne.n	8001d74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d024      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
 8001d72:	e01f      	b.n	8001db4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
 8001d84:	e016      	b.n	8001db4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0208 	bic.w	r2, r2, #8
 8001da2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	2220      	movs	r2, #32
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 808e 	beq.w	8001ee2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8086 	beq.w	8001ee2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2220      	movs	r2, #32
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d136      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0216 	bic.w	r2, r2, #22
 8001dfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <HAL_DMA_IRQHandler+0x1da>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0208 	bic.w	r2, r2, #8
 8001e2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	223f      	movs	r2, #63	; 0x3f
 8001e34:	409a      	lsls	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d07d      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
        }
        return;
 8001e5a:	e078      	b.n	8001f4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d01c      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d108      	bne.n	8001e8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d030      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
 8001e88:	e02b      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d027      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
 8001e9a:	e022      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
 8001e9c:	20000128 	.word	0x20000128
 8001ea0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0210 	bic.w	r2, r2, #16
 8001ec0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d032      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d022      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2205      	movs	r2, #5
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d307      	bcc.n	8001f2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f2      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x2ca>
 8001f28:	e000      	b.n	8001f2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f2a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
 8001f4c:	e000      	b.n	8001f50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f4e:	bf00      	nop
    }
  }
}
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop

08001f58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d108      	bne.n	8001f98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f96:	e007      	b.n	8001fa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	60da      	str	r2, [r3, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	3b10      	subs	r3, #16
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <DMA_CalcBaseAndBitshift+0x64>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <DMA_CalcBaseAndBitshift+0x68>)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d909      	bls.n	8001ff6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fea:	f023 0303 	bic.w	r3, r3, #3
 8001fee:	1d1a      	adds	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff4:	e007      	b.n	8002006 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	aaaaaaab 	.word	0xaaaaaaab
 800201c:	0800e4a4 	.word	0x0800e4a4

08002020 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11f      	bne.n	800207a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d855      	bhi.n	80020ec <DMA_CheckFifoParam+0xcc>
 8002040:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <DMA_CheckFifoParam+0x28>)
 8002042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002046:	bf00      	nop
 8002048:	08002059 	.word	0x08002059
 800204c:	0800206b 	.word	0x0800206b
 8002050:	08002059 	.word	0x08002059
 8002054:	080020ed 	.word	0x080020ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d045      	beq.n	80020f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002068:	e042      	b.n	80020f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002072:	d13f      	bne.n	80020f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002078:	e03c      	b.n	80020f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002082:	d121      	bne.n	80020c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d836      	bhi.n	80020f8 <DMA_CheckFifoParam+0xd8>
 800208a:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <DMA_CheckFifoParam+0x70>)
 800208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002090:	080020a1 	.word	0x080020a1
 8002094:	080020a7 	.word	0x080020a7
 8002098:	080020a1 	.word	0x080020a1
 800209c:	080020b9 	.word	0x080020b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
      break;
 80020a4:	e02f      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d024      	beq.n	80020fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b6:	e021      	b.n	80020fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020c0:	d11e      	bne.n	8002100 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020c6:	e01b      	b.n	8002100 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d902      	bls.n	80020d4 <DMA_CheckFifoParam+0xb4>
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d003      	beq.n	80020da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020d2:	e018      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      break;
 80020d8:	e015      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00e      	beq.n	8002104 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
      break;
 80020ea:	e00b      	b.n	8002104 <DMA_CheckFifoParam+0xe4>
      break;
 80020ec:	bf00      	nop
 80020ee:	e00a      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
      break;
 80020f0:	bf00      	nop
 80020f2:	e008      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
      break;
 80020f4:	bf00      	nop
 80020f6:	e006      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
      break;
 80020f8:	bf00      	nop
 80020fa:	e004      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
      break;
 80020fc:	bf00      	nop
 80020fe:	e002      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
      break;   
 8002100:	bf00      	nop
 8002102:	e000      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
      break;
 8002104:	bf00      	nop
    }
  } 
  
  return status; 
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e159      	b.n	80023e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	f040 8148 	bne.w	80023de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d00b      	beq.n	800216e <HAL_GPIO_Init+0x5a>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d007      	beq.n	800216e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002162:	2b11      	cmp	r3, #17
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b12      	cmp	r3, #18
 800216c:	d130      	bne.n	80021d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 0201 	and.w	r2, r3, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0xfc>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b12      	cmp	r3, #18
 800220e:	d123      	bne.n	8002258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a2 	beq.w	80023de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b56      	ldr	r3, [pc, #344]	; (80023f8 <HAL_GPIO_Init+0x2e4>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a55      	ldr	r2, [pc, #340]	; (80023f8 <HAL_GPIO_Init+0x2e4>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_GPIO_Init+0x2e4>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b6:	4a51      	ldr	r2, [pc, #324]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a48      	ldr	r2, [pc, #288]	; (8002400 <HAL_GPIO_Init+0x2ec>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x202>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a47      	ldr	r2, [pc, #284]	; (8002404 <HAL_GPIO_Init+0x2f0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x1fe>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a46      	ldr	r2, [pc, #280]	; (8002408 <HAL_GPIO_Init+0x2f4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x1fa>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a45      	ldr	r2, [pc, #276]	; (800240c <HAL_GPIO_Init+0x2f8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x1f6>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a44      	ldr	r2, [pc, #272]	; (8002410 <HAL_GPIO_Init+0x2fc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x1f2>
 8002302:	2304      	movs	r3, #4
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002306:	2307      	movs	r3, #7
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4934      	ldr	r1, [pc, #208]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002336:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_GPIO_Init+0x300>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235a:	4a2e      	ldr	r2, [pc, #184]	; (8002414 <HAL_GPIO_Init+0x300>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_GPIO_Init+0x300>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002384:	4a23      	ldr	r2, [pc, #140]	; (8002414 <HAL_GPIO_Init+0x300>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_GPIO_Init+0x300>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a19      	ldr	r2, [pc, #100]	; (8002414 <HAL_GPIO_Init+0x300>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_GPIO_Init+0x300>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <HAL_GPIO_Init+0x300>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f aea2 	bls.w	8002130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	3724      	adds	r7, #36	; 0x24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40013800 	.word	0x40013800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020400 	.word	0x40020400
 8002408:	40020800 	.word	0x40020800
 800240c:	40020c00 	.word	0x40020c00
 8002410:	40021000 	.word	0x40021000
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e001      	b.n	800243a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e128      	b.n	80026ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a90      	ldr	r2, [pc, #576]	; (80026b4 <HAL_I2S_Init+0x26c>)
 8002472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f009 fe2d 	bl	800c0d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002490:	f023 030f 	bic.w	r3, r3, #15
 8002494:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2202      	movs	r2, #2
 800249c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d060      	beq.n	8002568 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80024ae:	2310      	movs	r3, #16
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e001      	b.n	80024b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d802      	bhi.n	80024c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f002 fe26 	bl	8005118 <HAL_RCCEx_GetPeriphCLKFreq>
 80024cc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d6:	d125      	bne.n	8002524 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d010      	beq.n	8002502 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	461a      	mov	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	3305      	adds	r3, #5
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	e01f      	b.n	8002542 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	fbb2 f2f3 	udiv	r2, r2, r3
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	3305      	adds	r3, #5
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e00e      	b.n	8002542 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	fbb2 f2f3 	udiv	r2, r2, r3
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	3305      	adds	r3, #5
 8002540:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4a5c      	ldr	r2, [pc, #368]	; (80026b8 <HAL_I2S_Init+0x270>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e003      	b.n	8002570 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002568:	2302      	movs	r3, #2
 800256a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d902      	bls.n	800257c <HAL_I2S_Init+0x134>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	2bff      	cmp	r3, #255	; 0xff
 800257a:	d907      	bls.n	800258c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f043 0210 	orr.w	r2, r3, #16
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e08f      	b.n	80026ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	ea42 0103 	orr.w	r1, r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	430a      	orrs	r2, r1
 800259e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025aa:	f023 030f 	bic.w	r3, r3, #15
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6851      	ldr	r1, [r2, #4]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	4311      	orrs	r1, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68d2      	ldr	r2, [r2, #12]
 80025bc:	4311      	orrs	r1, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6992      	ldr	r2, [r2, #24]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d161      	bne.n	800269c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a38      	ldr	r2, [pc, #224]	; (80026bc <HAL_I2S_Init+0x274>)
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a37      	ldr	r2, [pc, #220]	; (80026c0 <HAL_I2S_Init+0x278>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_I2S_Init+0x1a4>
 80025e8:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_I2S_Init+0x27c>)
 80025ea:	e001      	b.n	80025f0 <HAL_I2S_Init+0x1a8>
 80025ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4932      	ldr	r1, [pc, #200]	; (80026c0 <HAL_I2S_Init+0x278>)
 80025f8:	428a      	cmp	r2, r1
 80025fa:	d101      	bne.n	8002600 <HAL_I2S_Init+0x1b8>
 80025fc:	4a31      	ldr	r2, [pc, #196]	; (80026c4 <HAL_I2S_Init+0x27c>)
 80025fe:	e001      	b.n	8002604 <HAL_I2S_Init+0x1bc>
 8002600:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002604:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002608:	f023 030f 	bic.w	r3, r3, #15
 800260c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <HAL_I2S_Init+0x278>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_I2S_Init+0x1d4>
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_I2S_Init+0x27c>)
 800261a:	e001      	b.n	8002620 <HAL_I2S_Init+0x1d8>
 800261c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002620:	2202      	movs	r2, #2
 8002622:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <HAL_I2S_Init+0x278>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_I2S_Init+0x1ea>
 800262e:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_I2S_Init+0x27c>)
 8002630:	e001      	b.n	8002636 <HAL_I2S_Init+0x1ee>
 8002632:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002642:	d003      	beq.n	800264c <HAL_I2S_Init+0x204>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800264c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e001      	b.n	8002658 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	b299      	uxth	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800266e:	4303      	orrs	r3, r0
 8002670:	b29b      	uxth	r3, r3
 8002672:	430b      	orrs	r3, r1
 8002674:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002676:	4313      	orrs	r3, r2
 8002678:	b29a      	uxth	r2, r3
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	4313      	orrs	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002684:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <HAL_I2S_Init+0x278>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_I2S_Init+0x24c>
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_I2S_Init+0x27c>)
 8002692:	e001      	b.n	8002698 <HAL_I2S_Init+0x250>
 8002694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002698:	897a      	ldrh	r2, [r7, #10]
 800269a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	08002d71 	.word	0x08002d71
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	08002ef9 	.word	0x08002ef9
 80026c0:	40003800 	.word	0x40003800
 80026c4:	40003400 	.word	0x40003400

080026c8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_I2S_Transmit_DMA+0x1a>
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e08e      	b.n	8002804 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_I2S_Transmit_DMA+0x2e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e086      	b.n	8002804 <HAL_I2S_Transmit_DMA+0x13c>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d005      	beq.n	8002716 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	e076      	b.n	8002804 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2203      	movs	r2, #3
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d002      	beq.n	8002742 <HAL_I2S_Transmit_DMA+0x7a>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d10a      	bne.n	8002758 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002756:	e005      	b.n	8002764 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88fa      	ldrh	r2, [r7, #6]
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	88fa      	ldrh	r2, [r7, #6]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	4a28      	ldr	r2, [pc, #160]	; (800280c <HAL_I2S_Transmit_DMA+0x144>)
 800276a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_I2S_Transmit_DMA+0x148>)
 8002772:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	4a26      	ldr	r2, [pc, #152]	; (8002814 <HAL_I2S_Transmit_DMA+0x14c>)
 800277a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002784:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800278c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002794:	f7ff f98e 	bl	8001ab4 <HAL_DMA_Start_IT>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00f      	beq.n	80027be <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f043 0208 	orr.w	r2, r3, #8
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e022      	b.n	8002804 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027da:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0202 	orr.w	r2, r2, #2
 80027f8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08002c4f 	.word	0x08002c4f
 8002810:	08002c0d 	.word	0x08002c0d
 8002814:	08002c6b 	.word	0x08002c6b

08002818 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282c:	d004      	beq.n	8002838 <HAL_I2S_DMAStop+0x20>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 80d1 	bne.w	80029da <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00f      	beq.n	8002860 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f98d 	bl	8001b64 <HAL_DMA_Abort>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f043 0208 	orr.w	r2, r3, #8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002860:	2364      	movs	r3, #100	; 0x64
 8002862:	2201      	movs	r2, #1
 8002864:	2102      	movs	r1, #2
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fb0c 	bl	8002e84 <I2S_WaitFlagStateUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f043 0201 	orr.w	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800288a:	2364      	movs	r3, #100	; 0x64
 800288c:	2200      	movs	r2, #0
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 faf7 	bl	8002e84 <I2S_WaitFlagStateUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0202 	bic.w	r2, r2, #2
 80028e0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	f040 8165 	bne.w	8002bba <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00f      	beq.n	8002918 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff f931 	bl	8001b64 <HAL_DMA_Abort>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0208 	orr.w	r2, r3, #8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a8a      	ldr	r2, [pc, #552]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_I2S_DMAStop+0x10e>
 8002922:	4b8a      	ldr	r3, [pc, #552]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002924:	e001      	b.n	800292a <HAL_I2S_DMAStop+0x112>
 8002926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4985      	ldr	r1, [pc, #532]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002932:	428b      	cmp	r3, r1
 8002934:	d101      	bne.n	800293a <HAL_I2S_DMAStop+0x122>
 8002936:	4b85      	ldr	r3, [pc, #532]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002938:	e001      	b.n	800293e <HAL_I2S_DMAStop+0x126>
 800293a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800293e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002942:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a7e      	ldr	r2, [pc, #504]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_I2S_DMAStop+0x13e>
 8002952:	4b7e      	ldr	r3, [pc, #504]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002954:	e001      	b.n	800295a <HAL_I2S_DMAStop+0x142>
 8002956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a79      	ldr	r2, [pc, #484]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_I2S_DMAStop+0x154>
 8002968:	4b78      	ldr	r3, [pc, #480]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 800296a:	e001      	b.n	8002970 <HAL_I2S_DMAStop+0x158>
 800296c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a73      	ldr	r2, [pc, #460]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_I2S_DMAStop+0x16c>
 8002980:	4b72      	ldr	r3, [pc, #456]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002982:	e001      	b.n	8002988 <HAL_I2S_DMAStop+0x170>
 8002984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	496e      	ldr	r1, [pc, #440]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002990:	428b      	cmp	r3, r1
 8002992:	d101      	bne.n	8002998 <HAL_I2S_DMAStop+0x180>
 8002994:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002996:	e001      	b.n	800299c <HAL_I2S_DMAStop+0x184>
 8002998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80029c2:	e0fa      	b.n	8002bba <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a5f      	ldr	r2, [pc, #380]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_I2S_DMAStop+0x1ba>
 80029ce:	4b5f      	ldr	r3, [pc, #380]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 80029d0:	e001      	b.n	80029d6 <HAL_I2S_DMAStop+0x1be>
 80029d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80029d8:	e0ef      	b.n	8002bba <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029e2:	d005      	beq.n	80029f0 <HAL_I2S_DMAStop+0x1d8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ec:	f040 80e5 	bne.w	8002bba <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00f      	beq.n	8002a18 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f8b1 	bl	8001b64 <HAL_DMA_Abort>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f043 0208 	orr.w	r2, r3, #8
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	f040 809a 	bne.w	8002b5a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00f      	beq.n	8002a4e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f896 	bl	8001b64 <HAL_DMA_Abort>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f043 0208 	orr.w	r2, r3, #8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002a4e:	f7fe fa77 	bl	8000f40 <HAL_GetTick>
 8002a52:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002a54:	e012      	b.n	8002a7c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002a56:	f7fe fa73 	bl	8000f40 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	; 0x64
 8002a62:	d90b      	bls.n	8002a7c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a31      	ldr	r2, [pc, #196]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_I2S_DMAStop+0x272>
 8002a86:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002a88:	e001      	b.n	8002a8e <HAL_I2S_DMAStop+0x276>
 8002a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d1de      	bne.n	8002a56 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002a98:	e012      	b.n	8002ac0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002a9a:	f7fe fa51 	bl	8000f40 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b64      	cmp	r3, #100	; 0x64
 8002aa6:	d90b      	bls.n	8002ac0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_I2S_DMAStop+0x2b6>
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002acc:	e001      	b.n	8002ad2 <HAL_I2S_DMAStop+0x2ba>
 8002ace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d0de      	beq.n	8002a9a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_I2S_DMAStop+0x2d2>
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002ae8:	e001      	b.n	8002aee <HAL_I2S_DMAStop+0x2d6>
 8002aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4914      	ldr	r1, [pc, #80]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002af6:	428b      	cmp	r3, r1
 8002af8:	d101      	bne.n	8002afe <HAL_I2S_DMAStop+0x2e6>
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002afc:	e001      	b.n	8002b02 <HAL_I2S_DMAStop+0x2ea>
 8002afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <HAL_I2S_DMAStop+0x302>
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002b18:	e001      	b.n	8002b1e <HAL_I2S_DMAStop+0x306>
 8002b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2S_DMAStop+0x31a>
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002b30:	e001      	b.n	8002b36 <HAL_I2S_DMAStop+0x31e>
 8002b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4902      	ldr	r1, [pc, #8]	; (8002b48 <HAL_I2S_DMAStop+0x330>)
 8002b3e:	428b      	cmp	r3, r1
 8002b40:	d106      	bne.n	8002b50 <HAL_I2S_DMAStop+0x338>
 8002b42:	4b02      	ldr	r3, [pc, #8]	; (8002b4c <HAL_I2S_DMAStop+0x334>)
 8002b44:	e006      	b.n	8002b54 <HAL_I2S_DMAStop+0x33c>
 8002b46:	bf00      	nop
 8002b48:	40003800 	.word	0x40003800
 8002b4c:	40003400 	.word	0x40003400
 8002b50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b54:	f022 0202 	bic.w	r2, r2, #2
 8002b58:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b68:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b98:	d10c      	bne.n	8002bb4 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e002      	b.n	8002bba <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10e      	bne.n	8002c40 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0202 	bic.w	r2, r2, #2
 8002c30:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f009 f8cb 	bl	800bddc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f009 f8cf 	bl	800be00 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0203 	bic.w	r2, r2, #3
 8002c86:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f043 0208 	orr.w	r2, r3, #8
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ffa5 	bl	8002bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	881a      	ldrh	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	1c9a      	adds	r2, r3, #2
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10e      	bne.n	8002d0a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cfa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f009 f869 	bl	800bddc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	b292      	uxth	r2, r2
 8002d26:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	1c9a      	adds	r2, r3, #2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10e      	bne.n	8002d68 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ff3e 	bl	8002be4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d13a      	bne.n	8002e02 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d109      	bne.n	8002daa <I2S_IRQHandler+0x3a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d102      	bne.n	8002daa <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffb4 	bl	8002d12 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d126      	bne.n	8002e02 <I2S_IRQHandler+0x92>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d11f      	bne.n	8002e02 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dd0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	f043 0202 	orr.w	r2, r3, #2
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff fefb 	bl	8002bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d136      	bne.n	8002e7c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d109      	bne.n	8002e2c <I2S_IRQHandler+0xbc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d102      	bne.n	8002e2c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ff45 	bl	8002cb6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d122      	bne.n	8002e7c <I2S_IRQHandler+0x10c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d11b      	bne.n	8002e7c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e52:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f043 0204 	orr.w	r2, r3, #4
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff febe 	bl	8002bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e94:	f7fe f854 	bl	8000f40 <HAL_GetTick>
 8002e98:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002e9a:	e018      	b.n	8002ece <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d014      	beq.n	8002ece <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002ea4:	f7fe f84c 	bl	8000f40 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d902      	bls.n	8002eba <I2S_WaitFlagStateUntilTimeout+0x36>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00f      	b.n	8002eee <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1d7      	bne.n	8002e9c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4aa2      	ldr	r2, [pc, #648]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002f12:	4ba2      	ldr	r3, [pc, #648]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f14:	e001      	b.n	8002f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a9b      	ldr	r2, [pc, #620]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002f30:	4b9a      	ldr	r3, [pc, #616]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f32:	e001      	b.n	8002f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f44:	d004      	beq.n	8002f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 8099 	bne.w	8003082 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d107      	bne.n	8002f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f925 	bl	80031b4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d107      	bne.n	8002f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9c8 	bl	8003314 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d13a      	bne.n	8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d035      	beq.n	8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a7e      	ldr	r2, [pc, #504]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002fa2:	4b7e      	ldr	r3, [pc, #504]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fa4:	e001      	b.n	8002faa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4979      	ldr	r1, [pc, #484]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fb2:	428b      	cmp	r3, r1
 8002fb4:	d101      	bne.n	8002fba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002fb6:	4b79      	ldr	r3, [pc, #484]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fb8:	e001      	b.n	8002fbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fdfa 	bl	8002bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b08      	cmp	r3, #8
 800300c:	f040 80be 	bne.w	800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80b8 	beq.w	800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800302a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a59      	ldr	r2, [pc, #356]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003036:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003038:	e001      	b.n	800303e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800303a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4954      	ldr	r1, [pc, #336]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003046:	428b      	cmp	r3, r1
 8003048:	d101      	bne.n	800304e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800304a:	4b54      	ldr	r3, [pc, #336]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800304c:	e001      	b.n	8003052 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800304e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003052:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003056:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f043 0204 	orr.w	r2, r3, #4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fdbc 	bl	8002bf8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003080:	e084      	b.n	800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d107      	bne.n	800309c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8be 	bl	8003218 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f8fd 	bl	80032b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d12f      	bne.n	8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d02a      	beq.n	8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030d8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2e      	ldr	r2, [pc, #184]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80030e4:	4b2d      	ldr	r3, [pc, #180]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030e6:	e001      	b.n	80030ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80030e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4929      	ldr	r1, [pc, #164]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030f4:	428b      	cmp	r3, r1
 80030f6:	d101      	bne.n	80030fc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030fa:	e001      	b.n	8003100 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80030fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003100:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003104:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f043 0202 	orr.w	r2, r3, #2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fd6c 	bl	8002bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b08      	cmp	r3, #8
 8003128:	d131      	bne.n	800318e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d02c      	beq.n	800318e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003140:	e001      	b.n	8003146 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003142:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4912      	ldr	r1, [pc, #72]	; (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800314e:	428b      	cmp	r3, r1
 8003150:	d101      	bne.n	8003156 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003154:	e001      	b.n	800315a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800315a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800315e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800316e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	f043 0204 	orr.w	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fd37 	bl	8002bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800318a:	e000      	b.n	800318e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800318c:	bf00      	nop
}
 800318e:	bf00      	nop
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40003800 	.word	0x40003800
 800319c:	40003400 	.word	0x40003400

080031a0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	1c99      	adds	r1, r3, #2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6251      	str	r1, [r2, #36]	; 0x24
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d113      	bne.n	800320e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ffc9 	bl	80031a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c99      	adds	r1, r3, #2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6251      	str	r1, [r2, #36]	; 0x24
 800322a:	8819      	ldrh	r1, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <I2SEx_TxISR_I2SExt+0x22>
 8003236:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <I2SEx_TxISR_I2SExt+0x94>)
 8003238:	e001      	b.n	800323e <I2SEx_TxISR_I2SExt+0x26>
 800323a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800323e:	460a      	mov	r2, r1
 8003240:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d121      	bne.n	800329e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <I2SEx_TxISR_I2SExt+0x50>
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <I2SEx_TxISR_I2SExt+0x94>)
 8003266:	e001      	b.n	800326c <I2SEx_TxISR_I2SExt+0x54>
 8003268:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	490d      	ldr	r1, [pc, #52]	; (80032a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003274:	428b      	cmp	r3, r1
 8003276:	d101      	bne.n	800327c <I2SEx_TxISR_I2SExt+0x64>
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <I2SEx_TxISR_I2SExt+0x94>)
 800327a:	e001      	b.n	8003280 <I2SEx_TxISR_I2SExt+0x68>
 800327c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003280:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003284:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ff81 	bl	80031a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40003800 	.word	0x40003800
 80032ac:	40003400 	.word	0x40003400

080032b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68d8      	ldr	r0, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	1c99      	adds	r1, r3, #2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032c8:	b282      	uxth	r2, r0
 80032ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d113      	bne.n	800330c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff4a 	bl	80031a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a20      	ldr	r2, [pc, #128]	; (80033a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <I2SEx_RxISR_I2SExt+0x16>
 8003326:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003328:	e001      	b.n	800332e <I2SEx_RxISR_I2SExt+0x1a>
 800332a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332e:	68d8      	ldr	r0, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	1c99      	adds	r1, r3, #2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	62d1      	str	r1, [r2, #44]	; 0x2c
 800333a:	b282      	uxth	r2, r0
 800333c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d121      	bne.n	800339a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <I2SEx_RxISR_I2SExt+0x90>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <I2SEx_RxISR_I2SExt+0x50>
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003362:	e001      	b.n	8003368 <I2SEx_RxISR_I2SExt+0x54>
 8003364:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	490d      	ldr	r1, [pc, #52]	; (80033a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003370:	428b      	cmp	r3, r1
 8003372:	d101      	bne.n	8003378 <I2SEx_RxISR_I2SExt+0x64>
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003376:	e001      	b.n	800337c <I2SEx_RxISR_I2SExt+0x68>
 8003378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800337c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003380:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff03 	bl	80031a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40003800 	.word	0x40003800
 80033a8:	40003400 	.word	0x40003400

080033ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ae:	b08f      	sub	sp, #60	; 0x3c
 80033b0:	af0a      	add	r7, sp, #40	; 0x28
 80033b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e10f      	b.n	80035de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d106      	bne.n	80033de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f009 fa11 	bl	800c800 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2203      	movs	r2, #3
 80033e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 fef6 	bl	80081ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	687e      	ldr	r6, [r7, #4]
 800340a:	466d      	mov	r5, sp
 800340c:	f106 0410 	add.w	r4, r6, #16
 8003410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800341c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003420:	1d33      	adds	r3, r6, #4
 8003422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003424:	6838      	ldr	r0, [r7, #0]
 8003426:	f004 fdcd 	bl	8007fc4 <USB_CoreInit>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0d0      	b.n	80035de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f004 fee4 	bl	8008210 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	e04a      	b.n	80034e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	333d      	adds	r3, #61	; 0x3d
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	333c      	adds	r3, #60	; 0x3c
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	b298      	uxth	r0, r3
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3342      	adds	r3, #66	; 0x42
 800348a:	4602      	mov	r2, r0
 800348c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	333f      	adds	r3, #63	; 0x3f
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3344      	adds	r3, #68	; 0x44
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3348      	adds	r3, #72	; 0x48
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034ca:	7bfa      	ldrb	r2, [r7, #15]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3350      	adds	r3, #80	; 0x50
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	3301      	adds	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3af      	bcc.n	800344e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	e044      	b.n	800357e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	3301      	adds	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d3b5      	bcc.n	80034f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	687e      	ldr	r6, [r7, #4]
 8003590:	466d      	mov	r5, sp
 8003592:	f106 0410 	add.w	r4, r6, #16
 8003596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80035a6:	1d33      	adds	r3, r6, #4
 80035a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035aa:	6838      	ldr	r0, [r7, #0]
 80035ac:	f004 fe5a 	bl	8008264 <USB_DevInit>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00d      	b.n	80035de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f005 fe99 	bl	800930e <USB_DevDisconnect>

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_PCD_Start+0x1c>
 80035fe:	2302      	movs	r3, #2
 8003600:	e020      	b.n	8003644 <HAL_PCD_Start+0x5e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	2b01      	cmp	r3, #1
 8003610:	d109      	bne.n	8003626 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003616:	2b01      	cmp	r3, #1
 8003618:	d005      	beq.n	8003626 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f005 fe57 	bl	80092de <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f004 fdc9 	bl	80081cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b08d      	sub	sp, #52	; 0x34
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f005 fefe 	bl	8009464 <USB_GetMode>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 839d 	bne.w	8003daa <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f005 fe62 	bl	800933e <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8393 	beq.w	8003da8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f005 fe59 	bl	800933e <USB_ReadInterrupts>
 800368c:	4603      	mov	r3, r0
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b02      	cmp	r3, #2
 8003694:	d107      	bne.n	80036a6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f002 0202 	and.w	r2, r2, #2
 80036a4:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f005 fe47 	bl	800933e <USB_ReadInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d161      	bne.n	800377e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0210 	bic.w	r2, r2, #16
 80036c8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f003 020f 	and.w	r2, r3, #15
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	3304      	adds	r3, #4
 80036e8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	0c5b      	lsrs	r3, r3, #17
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d124      	bne.n	8003740 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d035      	beq.n	800376e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800370c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003710:	b29b      	uxth	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	6a38      	ldr	r0, [r7, #32]
 8003716:	f005 fcbf 	bl	8009098 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003726:	441a      	add	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	699a      	ldr	r2, [r3, #24]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003738:	441a      	add	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	619a      	str	r2, [r3, #24]
 800373e:	e016      	b.n	800376e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	0c5b      	lsrs	r3, r3, #17
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	2b06      	cmp	r3, #6
 800374a:	d110      	bne.n	800376e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003752:	2208      	movs	r2, #8
 8003754:	4619      	mov	r1, r3
 8003756:	6a38      	ldr	r0, [r7, #32]
 8003758:	f005 fc9e 	bl	8009098 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003768:	441a      	add	r2, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0210 	orr.w	r2, r2, #16
 800377c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f005 fddb 	bl	800933e <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003792:	d16e      	bne.n	8003872 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f005 fde1 	bl	8009364 <USB_ReadDevAllOutEpInterrupt>
 80037a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80037a4:	e062      	b.n	800386c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d057      	beq.n	8003860 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f005 fe06 	bl	80093cc <USB_ReadDevOutEPInterrupt>
 80037c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00c      	beq.n	80037e6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d8:	461a      	mov	r2, r3
 80037da:	2301      	movs	r3, #1
 80037dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fdb1 	bl	8004348 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00c      	beq.n	800380a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fc:	461a      	mov	r2, r3
 80037fe:	2308      	movs	r3, #8
 8003800:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 feab 	bl	8004560 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	2310      	movs	r3, #16
 8003824:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	461a      	mov	r2, r3
 800383e:	2320      	movs	r3, #32
 8003840:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003858:	461a      	mov	r2, r3
 800385a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800385e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	3301      	adds	r3, #1
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	d199      	bne.n	80037a6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f005 fd61 	bl	800933e <USB_ReadInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003886:	f040 80c0 	bne.w	8003a0a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f005 fd82 	bl	8009398 <USB_ReadDevAllInEpInterrupt>
 8003894:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800389a:	e0b2      	b.n	8003a02 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80a7 	beq.w	80039f6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f005 fda8 	bl	8009408 <USB_ReadDevInEPInterrupt>
 80038b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d057      	beq.n	8003974 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	2201      	movs	r2, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69f9      	ldr	r1, [r7, #28]
 80038e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038e4:	4013      	ands	r3, r2
 80038e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	461a      	mov	r2, r3
 80038f6:	2301      	movs	r3, #1
 80038f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d132      	bne.n	8003968 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3348      	adds	r3, #72	; 0x48
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4403      	add	r3, r0
 8003922:	3344      	adds	r3, #68	; 0x44
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4419      	add	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4403      	add	r3, r0
 8003936:	3348      	adds	r3, #72	; 0x48
 8003938:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	2b00      	cmp	r3, #0
 800393e:	d113      	bne.n	8003968 <HAL_PCD_IRQHandler+0x31c>
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	3350      	adds	r3, #80	; 0x50
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	f005 fdb0 	bl	80094c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f008 ffc7 	bl	800c902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398a:	461a      	mov	r2, r3
 800398c:	2308      	movs	r3, #8
 800398e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a6:	461a      	mov	r2, r3
 80039a8:	2310      	movs	r3, #16
 80039aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	461a      	mov	r2, r3
 80039c4:	2340      	movs	r3, #64	; 0x40
 80039c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039de:	461a      	mov	r2, r3
 80039e0:	2302      	movs	r3, #2
 80039e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80039ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fc1b 	bl	800422c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	3301      	adds	r3, #1
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f af49 	bne.w	800389c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f005 fc95 	bl	800933e <USB_ReadInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a1e:	d122      	bne.n	8003a66 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d108      	bne.n	8003a50 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a46:	2100      	movs	r1, #0
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fe27 	bl	800469c <HAL_PCDEx_LPM_Callback>
 8003a4e:	e002      	b.n	8003a56 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f008 ffcd 	bl	800c9f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f005 fc67 	bl	800933e <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7a:	d112      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d102      	bne.n	8003a92 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f008 ff89 	bl	800c9a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003aa0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f005 fc49 	bl	800933e <USB_ReadInterrupts>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab6:	f040 80c7 	bne.w	8003c48 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2110      	movs	r1, #16
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f004 fd29 	bl	800852c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ade:	e056      	b.n	8003b8e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aec:	461a      	mov	r2, r3
 8003aee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003af2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b04:	0151      	lsls	r1, r2, #5
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	440a      	add	r2, r1
 8003b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b12:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b24:	0151      	lsls	r1, r2, #5
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	440a      	add	r2, r1
 8003b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	461a      	mov	r2, r3
 8003b42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b78:	0151      	lsls	r1, r2, #5
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d3a3      	bcc.n	8003ae0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003baa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d016      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc4:	f043 030b 	orr.w	r3, r3, #11
 8003bc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bda:	f043 030b 	orr.w	r3, r3, #11
 8003bde:	6453      	str	r3, [r2, #68]	; 0x44
 8003be0:	e015      	b.n	8003c0e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bf4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003bf8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c08:	f043 030b 	orr.w	r3, r3, #11
 8003c0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c32:	461a      	mov	r2, r3
 8003c34:	f005 fc48 	bl	80094c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f005 fb76 	bl	800933e <USB_ReadInterrupts>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5c:	d124      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f005 fc0c 	bl	8009480 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f004 fcbe 	bl	80085ee <USB_GetDevSpeed>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681c      	ldr	r4, [r3, #0]
 8003c7e:	f001 f951 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8003c82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f004 f9fb 	bl	8008088 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f008 fe5d 	bl	800c952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f005 fb46 	bl	800933e <USB_ReadInterrupts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d10a      	bne.n	8003cd2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f008 fe3a 	bl	800c936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f002 0208 	and.w	r2, r2, #8
 8003cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f005 fb31 	bl	800933e <USB_ReadInterrupts>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce6:	d10f      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f008 fe9c 	bl	800ca30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f005 fb16 	bl	800933e <USB_ReadInterrupts>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1c:	d10f      	bne.n	8003d3e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f008 fe6f 	bl	800ca0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f005 fafb 	bl	800933e <USB_ReadInterrupts>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d52:	d10a      	bne.n	8003d6a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f008 fe7d 	bl	800ca54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f005 fae5 	bl	800933e <USB_ReadInterrupts>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d115      	bne.n	8003daa <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f008 fe6d 	bl	800ca70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	e000      	b.n	8003daa <HAL_PCD_IRQHandler+0x75e>
      return;
 8003da8:	bf00      	nop
    }
  }
}
 8003daa:	3734      	adds	r7, #52	; 0x34
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd90      	pop	{r4, r7, pc}

08003db0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_PCD_SetAddress+0x1a>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e013      	b.n	8003df2 <HAL_PCD_SetAddress+0x42>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 fa55 	bl	8009292 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	4608      	mov	r0, r1
 8003e04:	4611      	mov	r1, r2
 8003e06:	461a      	mov	r2, r3
 8003e08:	4603      	mov	r3, r0
 8003e0a:	70fb      	strb	r3, [r7, #3]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	803b      	strh	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	da0f      	bge.n	8003e40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 020f 	and.w	r2, r3, #15
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	3338      	adds	r3, #56	; 0x38
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	3304      	adds	r3, #4
 8003e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	705a      	strb	r2, [r3, #1]
 8003e3e:	e00f      	b.n	8003e60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	3304      	adds	r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e6c:	883a      	ldrh	r2, [r7, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	78ba      	ldrb	r2, [r7, #2]
 8003e76:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e8a:	78bb      	ldrb	r3, [r7, #2]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d102      	bne.n	8003e96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_PCD_EP_Open+0xaa>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e00e      	b.n	8003ec2 <HAL_PCD_EP_Open+0xc8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68f9      	ldr	r1, [r7, #12]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f004 fbc0 	bl	8008638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ec0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da0f      	bge.n	8003efe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	f003 020f 	and.w	r2, r3, #15
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	3338      	adds	r3, #56	; 0x38
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	705a      	strb	r2, [r3, #1]
 8003efc:	e00f      	b.n	8003f1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	f003 020f 	and.w	r2, r3, #15
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	3304      	adds	r3, #4
 8003f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_PCD_EP_Close+0x6e>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e00e      	b.n	8003f56 <HAL_PCD_EP_Close+0x8c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68f9      	ldr	r1, [r7, #12]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 fbfe 	bl	8008748 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f6e:	7afb      	ldrb	r3, [r7, #11]
 8003f70:	f003 020f 	and.w	r2, r3, #15
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	3304      	adds	r3, #4
 8003f86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2200      	movs	r2, #0
 8003f98:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa0:	7afb      	ldrb	r3, [r7, #11]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fba:	7afb      	ldrb	r3, [r7, #11]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6979      	ldr	r1, [r7, #20]
 8003fd2:	f004 fed9 	bl	8008d88 <USB_EP0StartXfer>
 8003fd6:	e008      	b.n	8003fea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6979      	ldr	r1, [r7, #20]
 8003fe6:	f004 fc8b 	bl	8008900 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	f003 020f 	and.w	r2, r3, #15
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	460b      	mov	r3, r1
 8004032:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004034:	7afb      	ldrb	r3, [r7, #11]
 8004036:	f003 020f 	and.w	r2, r3, #15
 800403a:	4613      	mov	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	3338      	adds	r3, #56	; 0x38
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2200      	movs	r2, #0
 800405c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2201      	movs	r2, #1
 8004062:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004064:	7afb      	ldrb	r3, [r7, #11]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	b2da      	uxtb	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d102      	bne.n	800407e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800407e:	7afb      	ldrb	r3, [r7, #11]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	6979      	ldr	r1, [r7, #20]
 8004096:	f004 fe77 	bl	8008d88 <USB_EP0StartXfer>
 800409a:	e008      	b.n	80040ae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	6979      	ldr	r1, [r7, #20]
 80040aa:	f004 fc29 	bl	8008900 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	f003 020f 	and.w	r2, r3, #15
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d901      	bls.n	80040d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e050      	b.n	8004178 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	da0f      	bge.n	80040fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	f003 020f 	and.w	r2, r3, #15
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	3338      	adds	r3, #56	; 0x38
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	3304      	adds	r3, #4
 80040f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	705a      	strb	r2, [r3, #1]
 80040fc:	e00d      	b.n	800411a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	b2da      	uxtb	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_PCD_EP_SetStall+0x82>
 8004136:	2302      	movs	r3, #2
 8004138:	e01e      	b.n	8004178 <HAL_PCD_EP_SetStall+0xc0>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	4618      	mov	r0, r3
 800414a:	f004 ffce 	bl	80090ea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	b2d9      	uxtb	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004168:	461a      	mov	r2, r3
 800416a:	f005 f9ad 	bl	80094c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d901      	bls.n	800419e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e042      	b.n	8004224 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800419e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da0f      	bge.n	80041c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	3338      	adds	r3, #56	; 0x38
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	3304      	adds	r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	705a      	strb	r2, [r3, #1]
 80041c4:	e00f      	b.n	80041e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 020f 	and.w	r2, r3, #15
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_PCD_EP_ClrStall+0x86>
 8004202:	2302      	movs	r3, #2
 8004204:	e00e      	b.n	8004224 <HAL_PCD_EP_ClrStall+0xa4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	4618      	mov	r0, r3
 8004216:	f004 ffd6 	bl	80091c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	3338      	adds	r3, #56	; 0x38
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4413      	add	r3, r2
 8004250:	3304      	adds	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	429a      	cmp	r2, r3
 800425e:	d901      	bls.n	8004264 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e06c      	b.n	800433e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	429a      	cmp	r2, r3
 8004278:	d902      	bls.n	8004280 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3303      	adds	r3, #3
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004288:	e02b      	b.n	80042e2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	429a      	cmp	r2, r3
 800429e:	d902      	bls.n	80042a6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3303      	adds	r3, #3
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68d9      	ldr	r1, [r3, #12]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4603      	mov	r3, r0
 80042c4:	6978      	ldr	r0, [r7, #20]
 80042c6:	f004 feb2 	bl	800902e <USB_WritePacket>

    ep->xfer_buff  += len;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	441a      	add	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	441a      	add	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d809      	bhi.n	800430c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004300:	429a      	cmp	r2, r3
 8004302:	d203      	bcs.n	800430c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1be      	bne.n	800428a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	429a      	cmp	r2, r3
 8004316:	d811      	bhi.n	800433c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	2201      	movs	r2, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	43db      	mvns	r3, r3
 8004332:	6939      	ldr	r1, [r7, #16]
 8004334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004338:	4013      	ands	r3, r2
 800433a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	333c      	adds	r3, #60	; 0x3c
 8004360:	3304      	adds	r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b01      	cmp	r3, #1
 800437c:	f040 80a0 	bne.w	80044c0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d015      	beq.n	80043b6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4a72      	ldr	r2, [pc, #456]	; (8004558 <PCD_EP_OutXfrComplete_int+0x210>)
 800438e:	4293      	cmp	r3, r2
 8004390:	f240 80dd 	bls.w	800454e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80d7 	beq.w	800454e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	461a      	mov	r2, r3
 80043ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b2:	6093      	str	r3, [r2, #8]
 80043b4:	e0cb      	b.n	800454e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043cc:	461a      	mov	r2, r3
 80043ce:	2320      	movs	r3, #32
 80043d0:	6093      	str	r3, [r2, #8]
 80043d2:	e0bc      	b.n	800454e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 80b7 	bne.w	800454e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a5d      	ldr	r2, [pc, #372]	; (8004558 <PCD_EP_OutXfrComplete_int+0x210>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d90f      	bls.n	8004408 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	461a      	mov	r2, r3
 8004400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004404:	6093      	str	r3, [r2, #8]
 8004406:	e0a2      	b.n	800454e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800441a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	0159      	lsls	r1, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	440b      	add	r3, r1
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800442e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4403      	add	r3, r0
 800443e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004442:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4403      	add	r3, r0
 8004466:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4419      	add	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4403      	add	r3, r0
 800447c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004480:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d114      	bne.n	80044b2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d108      	bne.n	80044b2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044aa:	461a      	mov	r2, r3
 80044ac:	2101      	movs	r1, #1
 80044ae:	f005 f80b 	bl	80094c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f008 fa07 	bl	800c8cc <HAL_PCD_DataOutStageCallback>
 80044be:	e046      	b.n	800454e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a26      	ldr	r2, [pc, #152]	; (800455c <PCD_EP_OutXfrComplete_int+0x214>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d124      	bne.n	8004512 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	461a      	mov	r2, r3
 80044e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e4:	6093      	str	r3, [r2, #8]
 80044e6:	e032      	b.n	800454e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	461a      	mov	r2, r3
 8004500:	2320      	movs	r3, #32
 8004502:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f008 f9de 	bl	800c8cc <HAL_PCD_DataOutStageCallback>
 8004510:	e01d      	b.n	800454e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d114      	bne.n	8004542 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d108      	bne.n	8004542 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800453a:	461a      	mov	r2, r3
 800453c:	2100      	movs	r1, #0
 800453e:	f004 ffc3 	bl	80094c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f008 f9bf 	bl	800c8cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	4f54300a 	.word	0x4f54300a
 800455c:	4f54310a 	.word	0x4f54310a

08004560 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	333c      	adds	r3, #60	; 0x3c
 8004578:	3304      	adds	r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d90e      	bls.n	80045b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ac:	461a      	mov	r2, r3
 80045ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f008 f977 	bl	800c8a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d90c      	bls.n	80045dc <PCD_EP_OutSetupPacket_int+0x7c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d108      	bne.n	80045dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045d4:	461a      	mov	r2, r3
 80045d6:	2101      	movs	r1, #1
 80045d8:	f004 ff76 	bl	80094c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	4f54300a 	.word	0x4f54300a

080045ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	70fb      	strb	r3, [r7, #3]
 80045f8:	4613      	mov	r3, r2
 80045fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800460a:	883b      	ldrh	r3, [r7, #0]
 800460c:	0419      	lsls	r1, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	430a      	orrs	r2, r1
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
 8004618:	e028      	b.n	800466c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	4413      	add	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004628:	2300      	movs	r3, #0
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	e00d      	b.n	800464a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	3340      	adds	r3, #64	; 0x40
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	3301      	adds	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	7bfa      	ldrb	r2, [r7, #15]
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	3b01      	subs	r3, #1
 8004650:	429a      	cmp	r2, r3
 8004652:	d3ec      	bcc.n	800462e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004654:	883b      	ldrh	r3, [r7, #0]
 8004656:	0418      	lsls	r0, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	3b01      	subs	r3, #1
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	4302      	orrs	r2, r0
 8004664:	3340      	adds	r3, #64	; 0x40
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e25b      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d075      	beq.n	80047be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d2:	4ba3      	ldr	r3, [pc, #652]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d00c      	beq.n	80046f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046de:	4ba0      	ldr	r3, [pc, #640]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d112      	bne.n	8004710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ea:	4b9d      	ldr	r3, [pc, #628]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f6:	d10b      	bne.n	8004710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	4b99      	ldr	r3, [pc, #612]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d05b      	beq.n	80047bc <HAL_RCC_OscConfig+0x108>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d157      	bne.n	80047bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e236      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004718:	d106      	bne.n	8004728 <HAL_RCC_OscConfig+0x74>
 800471a:	4b91      	ldr	r3, [pc, #580]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a90      	ldr	r2, [pc, #576]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e01d      	b.n	8004764 <HAL_RCC_OscConfig+0xb0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x98>
 8004732:	4b8b      	ldr	r3, [pc, #556]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a8a      	ldr	r2, [pc, #552]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b88      	ldr	r3, [pc, #544]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a87      	ldr	r2, [pc, #540]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0xb0>
 800474c:	4b84      	ldr	r3, [pc, #528]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a83      	ldr	r2, [pc, #524]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b81      	ldr	r3, [pc, #516]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a80      	ldr	r2, [pc, #512]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 800475e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fc fbe8 	bl	8000f40 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004774:	f7fc fbe4 	bl	8000f40 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e1fb      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004786:	4b76      	ldr	r3, [pc, #472]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0xc0>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fc fbd4 	bl	8000f40 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fc fbd0 	bl	8000f40 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1e7      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ae:	4b6c      	ldr	r3, [pc, #432]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0xe8>
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d063      	beq.n	8004892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ca:	4b65      	ldr	r3, [pc, #404]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d6:	4b62      	ldr	r3, [pc, #392]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d11c      	bne.n	800481c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e2:	4b5f      	ldr	r3, [pc, #380]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d116      	bne.n	800481c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ee:	4b5c      	ldr	r3, [pc, #368]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_RCC_OscConfig+0x152>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d001      	beq.n	8004806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e1bb      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004806:	4b56      	ldr	r3, [pc, #344]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4952      	ldr	r1, [pc, #328]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481a:	e03a      	b.n	8004892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d020      	beq.n	8004866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004824:	4b4f      	ldr	r3, [pc, #316]	; (8004964 <HAL_RCC_OscConfig+0x2b0>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fc fb89 	bl	8000f40 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004832:	f7fc fb85 	bl	8000f40 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e19c      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004844:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4b43      	ldr	r3, [pc, #268]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4940      	ldr	r1, [pc, #256]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]
 8004864:	e015      	b.n	8004892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004866:	4b3f      	ldr	r3, [pc, #252]	; (8004964 <HAL_RCC_OscConfig+0x2b0>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fc fb68 	bl	8000f40 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004874:	f7fc fb64 	bl	8000f40 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e17b      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	4b36      	ldr	r3, [pc, #216]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d030      	beq.n	8004900 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_RCC_OscConfig+0x2b4>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fc fb48 	bl	8000f40 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048b4:	f7fc fb44 	bl	8000f40 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e15b      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c6:	4b26      	ldr	r3, [pc, #152]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x200>
 80048d2:	e015      	b.n	8004900 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d4:	4b24      	ldr	r3, [pc, #144]	; (8004968 <HAL_RCC_OscConfig+0x2b4>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048da:	f7fc fb31 	bl	8000f40 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e2:	f7fc fb2d 	bl	8000f40 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e144      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f4:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 80048f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80a0 	beq.w	8004a4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490e:	2300      	movs	r3, #0
 8004910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004912:	4b13      	ldr	r3, [pc, #76]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10f      	bne.n	800493e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCC_OscConfig+0x2b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d121      	bne.n	800498e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <HAL_RCC_OscConfig+0x2b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a07      	ldr	r2, [pc, #28]	; (800496c <HAL_RCC_OscConfig+0x2b8>)
 8004950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004956:	f7fc faf3 	bl	8000f40 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	e011      	b.n	8004982 <HAL_RCC_OscConfig+0x2ce>
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800
 8004964:	42470000 	.word	0x42470000
 8004968:	42470e80 	.word	0x42470e80
 800496c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004970:	f7fc fae6 	bl	8000f40 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e0fd      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004982:	4b81      	ldr	r3, [pc, #516]	; (8004b88 <HAL_RCC_OscConfig+0x4d4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d106      	bne.n	80049a4 <HAL_RCC_OscConfig+0x2f0>
 8004996:	4b7d      	ldr	r3, [pc, #500]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	4a7c      	ldr	r2, [pc, #496]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	6713      	str	r3, [r2, #112]	; 0x70
 80049a2:	e01c      	b.n	80049de <HAL_RCC_OscConfig+0x32a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d10c      	bne.n	80049c6 <HAL_RCC_OscConfig+0x312>
 80049ac:	4b77      	ldr	r3, [pc, #476]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	4a76      	ldr	r2, [pc, #472]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 80049b2:	f043 0304 	orr.w	r3, r3, #4
 80049b6:	6713      	str	r3, [r2, #112]	; 0x70
 80049b8:	4b74      	ldr	r3, [pc, #464]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	4a73      	ldr	r2, [pc, #460]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70
 80049c4:	e00b      	b.n	80049de <HAL_RCC_OscConfig+0x32a>
 80049c6:	4b71      	ldr	r3, [pc, #452]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	4a70      	ldr	r2, [pc, #448]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6713      	str	r3, [r2, #112]	; 0x70
 80049d2:	4b6e      	ldr	r3, [pc, #440]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4a6d      	ldr	r2, [pc, #436]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 80049d8:	f023 0304 	bic.w	r3, r3, #4
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d015      	beq.n	8004a12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e6:	f7fc faab 	bl	8000f40 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fc faa7 	bl	8000f40 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0bc      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	4b61      	ldr	r3, [pc, #388]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0ee      	beq.n	80049ee <HAL_RCC_OscConfig+0x33a>
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a12:	f7fc fa95 	bl	8000f40 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a18:	e00a      	b.n	8004a30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7fc fa91 	bl	8000f40 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e0a6      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	4b56      	ldr	r3, [pc, #344]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ee      	bne.n	8004a1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	4b52      	ldr	r3, [pc, #328]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	4a51      	ldr	r2, [pc, #324]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8092 	beq.w	8004b7c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a58:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d05c      	beq.n	8004b1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d141      	bne.n	8004af0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6c:	4b48      	ldr	r3, [pc, #288]	; (8004b90 <HAL_RCC_OscConfig+0x4dc>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7fc fa65 	bl	8000f40 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a7a:	f7fc fa61 	bl	8000f40 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e078      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8c:	4b3f      	ldr	r3, [pc, #252]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f0      	bne.n	8004a7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	019b      	lsls	r3, r3, #6
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	061b      	lsls	r3, r3, #24
 8004abc:	4933      	ldr	r1, [pc, #204]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac2:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <HAL_RCC_OscConfig+0x4dc>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fc fa3a 	bl	8000f40 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fc fa36 	bl	8000f40 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e04d      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae2:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x41c>
 8004aee:	e045      	b.n	8004b7c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <HAL_RCC_OscConfig+0x4dc>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fc fa23 	bl	8000f40 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004afe:	f7fc fa1f 	bl	8000f40 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e036      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0x44a>
 8004b1c:	e02e      	b.n	8004b7c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e029      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b2a:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HAL_RCC_OscConfig+0x4d8>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d11c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d115      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b52:	4013      	ands	r3, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10d      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d106      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	42470060 	.word	0x42470060

08004b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0cc      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b68      	ldr	r3, [pc, #416]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d90c      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0b8      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be8:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a58      	ldr	r2, [pc, #352]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c00:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4a52      	ldr	r2, [pc, #328]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b50      	ldr	r3, [pc, #320]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	494d      	ldr	r1, [pc, #308]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d044      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d119      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d003      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c52:	4b3f      	ldr	r3, [pc, #252]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e067      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c72:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 0203 	bic.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4934      	ldr	r1, [pc, #208]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c84:	f7fc f95c 	bl	8000f40 <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8c:	f7fc f958 	bl	8000f40 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e04f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca2:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 020c 	and.w	r2, r3, #12
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d1eb      	bne.n	8004c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d20c      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e032      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4916      	ldr	r1, [pc, #88]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	490e      	ldr	r1, [pc, #56]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d1a:	f000 f821 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004d1e:	4601      	mov	r1, r0
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	4a0a      	ldr	r2, [pc, #40]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	5cd3      	ldrb	r3, [r2, r3]
 8004d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8004d32:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fc f8bc 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00
 8004d50:	40023800 	.word	0x40023800
 8004d54:	0800e4c0 	.word	0x0800e4c0
 8004d58:	20000128 	.word	0x20000128
 8004d5c:	20000000 	.word	0x20000000

08004d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	2300      	movs	r3, #0
 8004d72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d78:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d007      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x34>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d008      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 80bb 	bne.w	8004f04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d8e:	4b63      	ldr	r3, [pc, #396]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d90:	60bb      	str	r3, [r7, #8]
       break;
 8004d92:	e0ba      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d94:	4b62      	ldr	r3, [pc, #392]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d96:	60bb      	str	r3, [r7, #8]
      break;
 8004d98:	e0b7      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d9a:	4b5f      	ldr	r3, [pc, #380]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da2:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da4:	4b5c      	ldr	r3, [pc, #368]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d051      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db0:	4b59      	ldr	r3, [pc, #356]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	099b      	lsrs	r3, r3, #6
 8004db6:	f04f 0400 	mov.w	r4, #0
 8004dba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	ea03 0501 	and.w	r5, r3, r1
 8004dc6:	ea04 0602 	and.w	r6, r4, r2
 8004dca:	46ab      	mov	fp, r5
 8004dcc:	46b4      	mov	ip, r6
 8004dce:	eb1b 030b 	adds.w	r3, fp, fp
 8004dd2:	eb4c 040c 	adc.w	r4, ip, ip
 8004dd6:	469b      	mov	fp, r3
 8004dd8:	46a4      	mov	ip, r4
 8004dda:	eb1b 0b05 	adds.w	fp, fp, r5
 8004dde:	eb4c 0c06 	adc.w	ip, ip, r6
 8004de2:	f04f 0100 	mov.w	r1, #0
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8004dee:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 8004df2:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8004df6:	468b      	mov	fp, r1
 8004df8:	4694      	mov	ip, r2
 8004dfa:	ebbb 0b05 	subs.w	fp, fp, r5
 8004dfe:	eb6c 0c06 	sbc.w	ip, ip, r6
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8004e0e:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8004e12:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8004e16:	468b      	mov	fp, r1
 8004e18:	4694      	mov	ip, r2
 8004e1a:	ebbb 0b05 	subs.w	fp, fp, r5
 8004e1e:	eb6c 0c06 	sbc.w	ip, ip, r6
 8004e22:	f04f 0100 	mov.w	r1, #0
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	ea4f 32cc 	mov.w	r2, ip, lsl #15
 8004e2e:	ea42 425b 	orr.w	r2, r2, fp, lsr #17
 8004e32:	ea4f 31cb 	mov.w	r1, fp, lsl #15
 8004e36:	468b      	mov	fp, r1
 8004e38:	4694      	mov	ip, r2
 8004e3a:	4658      	mov	r0, fp
 8004e3c:	4661      	mov	r1, ip
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f04f 0400 	mov.w	r4, #0
 8004e44:	461a      	mov	r2, r3
 8004e46:	4623      	mov	r3, r4
 8004e48:	f7fb fe94 	bl	8000b74 <__aeabi_uldivmod>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	460c      	mov	r4, r1
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	e049      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e54:	4b30      	ldr	r3, [pc, #192]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	099b      	lsrs	r3, r3, #6
 8004e5a:	f04f 0400 	mov.w	r4, #0
 8004e5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	ea03 0501 	and.w	r5, r3, r1
 8004e6a:	ea04 0602 	and.w	r6, r4, r2
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4632      	mov	r2, r6
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	f04f 0400 	mov.w	r4, #0
 8004e7a:	0154      	lsls	r4, r2, #5
 8004e7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e80:	014b      	lsls	r3, r1, #5
 8004e82:	4619      	mov	r1, r3
 8004e84:	4622      	mov	r2, r4
 8004e86:	1b49      	subs	r1, r1, r5
 8004e88:	eb62 0206 	sbc.w	r2, r2, r6
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	f04f 0400 	mov.w	r4, #0
 8004e94:	0194      	lsls	r4, r2, #6
 8004e96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e9a:	018b      	lsls	r3, r1, #6
 8004e9c:	1a5b      	subs	r3, r3, r1
 8004e9e:	eb64 0402 	sbc.w	r4, r4, r2
 8004ea2:	f04f 0100 	mov.w	r1, #0
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	00e2      	lsls	r2, r4, #3
 8004eac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004eb0:	00d9      	lsls	r1, r3, #3
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	195b      	adds	r3, r3, r5
 8004eb8:	eb44 0406 	adc.w	r4, r4, r6
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	02a2      	lsls	r2, r4, #10
 8004ec6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004eca:	0299      	lsls	r1, r3, #10
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4614      	mov	r4, r2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f04f 0400 	mov.w	r4, #0
 8004eda:	461a      	mov	r2, r3
 8004edc:	4623      	mov	r3, r4
 8004ede:	f7fb fe49 	bl	8000b74 <__aeabi_uldivmod>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	60bb      	str	r3, [r7, #8]
      break;
 8004f02:	e002      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f06:	60bb      	str	r3, [r7, #8]
      break;
 8004f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	00bb8000 	.word	0x00bb8000

08004f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000128 	.word	0x20000128

08004f3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d035      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f64:	4b67      	ldr	r3, [pc, #412]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6a:	f7fb ffe9 	bl	8000f40 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f72:	f7fb ffe5 	bl	8000f40 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e0ba      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f84:	4b60      	ldr	r3, [pc, #384]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f0      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	019a      	lsls	r2, r3, #6
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	071b      	lsls	r3, r3, #28
 8004f9c:	495a      	ldr	r1, [pc, #360]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fa4:	4b57      	ldr	r3, [pc, #348]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004faa:	f7fb ffc9 	bl	8000f40 <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fb2:	f7fb ffc5 	bl	8000f40 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e09a      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fc4:	4b50      	ldr	r3, [pc, #320]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8083 	beq.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	4b49      	ldr	r3, [pc, #292]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	4a48      	ldr	r2, [pc, #288]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6413      	str	r3, [r2, #64]	; 0x40
 8004fee:	4b46      	ldr	r3, [pc, #280]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ffa:	4b44      	ldr	r3, [pc, #272]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a43      	ldr	r2, [pc, #268]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005006:	f7fb ff9b 	bl	8000f40 <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800500e:	f7fb ff97 	bl	8000f40 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e06c      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005020:	4b3a      	ldr	r3, [pc, #232]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800502c:	4b36      	ldr	r3, [pc, #216]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005034:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d02f      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	429a      	cmp	r2, r3
 8005048:	d028      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800504a:	4b2f      	ldr	r3, [pc, #188]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005054:	4b2e      	ldr	r3, [pc, #184]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005056:	2201      	movs	r2, #1
 8005058:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800505a:	4b2d      	ldr	r3, [pc, #180]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005060:	4a29      	ldr	r2, [pc, #164]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005066:	4b28      	ldr	r3, [pc, #160]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b01      	cmp	r3, #1
 8005070:	d114      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005072:	f7fb ff65 	bl	8000f40 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005078:	e00a      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fb ff61 	bl	8000f40 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	; 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e034      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ee      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a8:	d10d      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050aa:	4b17      	ldr	r3, [pc, #92]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	4912      	ldr	r1, [pc, #72]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]
 80050c4:	e005      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4a0f      	ldr	r2, [pc, #60]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050d0:	6093      	str	r3, [r2, #8]
 80050d2:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050de:	490a      	ldr	r1, [pc, #40]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	7c1a      	ldrb	r2, [r3, #16]
 80050f4:	4b07      	ldr	r3, [pc, #28]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050f6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	42470068 	.word	0x42470068
 8005108:	40023800 	.word	0x40023800
 800510c:	40007000 	.word	0x40007000
 8005110:	42470e40 	.word	0x42470e40
 8005114:	424711e0 	.word	0x424711e0

08005118 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d13d      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005136:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800513e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005146:	2b01      	cmp	r3, #1
 8005148:	d12f      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800514a:	4b1e      	ldr	r3, [pc, #120]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800514c:	617b      	str	r3, [r7, #20]
          break;
 800514e:	e02f      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005150:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800515c:	d108      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800515e:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005166:	4a17      	ldr	r2, [pc, #92]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	e007      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005170:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005178:	4a13      	ldr	r2, [pc, #76]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005180:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005186:	099b      	lsrs	r3, r3, #6
 8005188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800519a:	0f1b      	lsrs	r3, r3, #28
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a6:	617b      	str	r3, [r7, #20]
          break;
 80051a8:	e002      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
          break;
 80051ae:	bf00      	nop
        }
      }
      break;
 80051b0:	bf00      	nop
    }
  }
  return frequency;
 80051b2:	697b      	ldr	r3, [r7, #20]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40023800 	.word	0x40023800
 80051c4:	00bb8000 	.word	0x00bb8000
 80051c8:	00f42400 	.word	0x00f42400

080051cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e022      	b.n	8005224 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d105      	bne.n	80051f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f007 f82f 	bl	800c254 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2203      	movs	r2, #3
 80051fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f814 	bl	800522c <HAL_SD_InitCard>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e00a      	b.n	8005224 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800522c:	b5b0      	push	{r4, r5, r7, lr}
 800522e:	b08e      	sub	sp, #56	; 0x38
 8005230:	af04      	add	r7, sp, #16
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005234:	2300      	movs	r3, #0
 8005236:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005244:	2300      	movs	r3, #0
 8005246:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005248:	2376      	movs	r3, #118	; 0x76
 800524a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681d      	ldr	r5, [r3, #0]
 8005250:	466c      	mov	r4, sp
 8005252:	f107 0314 	add.w	r3, r7, #20
 8005256:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800525a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800525e:	f107 0308 	add.w	r3, r7, #8
 8005262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005264:	4628      	mov	r0, r5
 8005266:	f002 f949 	bl	80074fc <SDIO_Init>
 800526a:	4603      	mov	r3, r0
 800526c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e031      	b.n	80052e0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800527c:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <HAL_SD_InitCard+0xbc>)
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f002 f981 	bl	800758e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800528c:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <HAL_SD_InitCard+0xbc>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 ff00 	bl	8006098 <SD_PowerON>
 8005298:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00b      	beq.n	80052b8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e013      	b.n	80052e0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fe1f 	bl	8005efc <SD_InitCard>
 80052be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3728      	adds	r7, #40	; 0x28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bdb0      	pop	{r4, r5, r7, pc}
 80052e8:	422580a0 	.word	0x422580a0

080052ec <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b092      	sub	sp, #72	; 0x48
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80052fa:	f7fb fe21 	bl	8000f40 <HAL_GetTick>
 80052fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d107      	bne.n	800531e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e1d9      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	f040 81cc 	bne.w	80056c4 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	441a      	add	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533c:	429a      	cmp	r2, r3
 800533e:	d907      	bls.n	8005350 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e1c0      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2203      	movs	r2, #3
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2200      	movs	r2, #0
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005364:	2b01      	cmp	r3, #1
 8005366:	d002      	beq.n	800536e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	025b      	lsls	r3, r3, #9
 800536c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005376:	4618      	mov	r0, r3
 8005378:	f002 f99c 	bl	80076b4 <SDMMC_CmdBlockLength>
 800537c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800537e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00f      	beq.n	80053a4 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a9b      	ldr	r2, [pc, #620]	; (80055f8 <HAL_SD_ReadBlocks+0x30c>)
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005392:	431a      	orrs	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e196      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295
 80053a8:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	025b      	lsls	r3, r3, #9
 80053ae:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80053b0:	2390      	movs	r3, #144	; 0x90
 80053b2:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80053b4:	2302      	movs	r3, #2
 80053b6:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80053bc:	2301      	movs	r3, #1
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f107 0214 	add.w	r2, r7, #20
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f002 f946 	bl	800765c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d90a      	bls.n	80053ec <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2202      	movs	r2, #2
 80053da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053e2:	4618      	mov	r0, r3
 80053e4:	f002 f9aa 	bl	800773c <SDMMC_CmdReadMultiBlock>
 80053e8:	6478      	str	r0, [r7, #68]	; 0x44
 80053ea:	e009      	b.n	8005400 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053f8:	4618      	mov	r0, r3
 80053fa:	f002 f97d 	bl	80076f8 <SDMMC_CmdReadSingleBlock>
 80053fe:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005402:	2b00      	cmp	r3, #0
 8005404:	d012      	beq.n	800542c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a7b      	ldr	r2, [pc, #492]	; (80055f8 <HAL_SD_ReadBlocks+0x30c>)
 800540c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e152      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005430:	e061      	b.n	80054f6 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d03c      	beq.n	80054ba <HAL_SD_ReadBlocks+0x1ce>
 8005440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d039      	beq.n	80054ba <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005446:	2300      	movs	r3, #0
 8005448:	643b      	str	r3, [r7, #64]	; 0x40
 800544a:	e033      	b.n	80054b4 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f002 f87e 	bl	8007552 <SDIO_ReadFIFO>
 8005456:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	b2da      	uxtb	r2, r3
 800545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	3301      	adds	r3, #1
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005468:	3b01      	subs	r3, #1
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	b2da      	uxtb	r2, r3
 8005472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005474:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	3301      	adds	r3, #1
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800547c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547e:	3b01      	subs	r3, #1
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	b2da      	uxtb	r2, r3
 8005488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	3301      	adds	r3, #1
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005494:	3b01      	subs	r3, #1
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	0e1b      	lsrs	r3, r3, #24
 800549c:	b2da      	uxtb	r2, r3
 800549e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80054a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a4:	3301      	adds	r3, #1
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054aa:	3b01      	subs	r3, #1
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80054ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b0:	3301      	adds	r3, #1
 80054b2:	643b      	str	r3, [r7, #64]	; 0x40
 80054b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b6:	2b07      	cmp	r3, #7
 80054b8:	d9c8      	bls.n	800544c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80054ba:	f7fb fd41 	bl	8000f40 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d902      	bls.n	80054d0 <HAL_SD_ReadBlocks+0x1e4>
 80054ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d112      	bne.n	80054f6 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a48      	ldr	r2, [pc, #288]	; (80055f8 <HAL_SD_ReadBlocks+0x30c>)
 80054d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0ed      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fc:	f240 332a 	movw	r3, #810	; 0x32a
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d095      	beq.n	8005432 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d022      	beq.n	800555a <HAL_SD_ReadBlocks+0x26e>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d91f      	bls.n	800555a <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	2b03      	cmp	r3, #3
 8005520:	d01b      	beq.n	800555a <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f002 f96e 	bl	8007808 <SDMMC_CmdStopTransfer>
 800552c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800552e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005530:	2b00      	cmp	r3, #0
 8005532:	d012      	beq.n	800555a <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2f      	ldr	r2, [pc, #188]	; (80055f8 <HAL_SD_ReadBlocks+0x30c>)
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005542:	431a      	orrs	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0bb      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a22      	ldr	r2, [pc, #136]	; (80055f8 <HAL_SD_ReadBlocks+0x30c>)
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	f043 0208 	orr.w	r2, r3, #8
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e0a1      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d012      	beq.n	80055c2 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <HAL_SD_ReadBlocks+0x30c>)
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	f043 0202 	orr.w	r2, r3, #2
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e087      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d064      	beq.n	800569a <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <HAL_SD_ReadBlocks+0x30c>)
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	f043 0220 	orr.w	r2, r3, #32
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e06d      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
 80055f6:	bf00      	nop
 80055f8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f001 ffa6 	bl	8007552 <SDIO_ReadFIFO>
 8005606:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	b2da      	uxtb	r2, r3
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	3301      	adds	r3, #1
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005618:	3b01      	subs	r3, #1
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	b2da      	uxtb	r2, r3
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	3301      	adds	r3, #1
 800562a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562e:	3b01      	subs	r3, #1
 8005630:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	b2da      	uxtb	r2, r3
 8005638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563e:	3301      	adds	r3, #1
 8005640:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005644:	3b01      	subs	r3, #1
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564a:	0e1b      	lsrs	r3, r3, #24
 800564c:	b2da      	uxtb	r2, r3
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	3301      	adds	r3, #1
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	3b01      	subs	r3, #1
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800565e:	f7fb fc6f 	bl	8000f40 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800566a:	429a      	cmp	r2, r3
 800566c:	d902      	bls.n	8005674 <HAL_SD_ReadBlocks+0x388>
 800566e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005670:	2b00      	cmp	r3, #0
 8005672:	d112      	bne.n	800569a <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a18      	ldr	r2, [pc, #96]	; (80056dc <HAL_SD_ReadBlocks+0x3f0>)
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e01b      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_SD_ReadBlocks+0x3c2>
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1a6      	bne.n	80055fc <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e006      	b.n	80056d2 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3748      	adds	r7, #72	; 0x48
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	004005ff 	.word	0x004005ff

080056e0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b092      	sub	sp, #72	; 0x48
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80056ee:	f7fb fc27 	bl	8000f40 <HAL_GetTick>
 80056f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d107      	bne.n	8005712 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e184      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	f040 8177 	bne.w	8005a0e <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005730:	429a      	cmp	r2, r3
 8005732:	d907      	bls.n	8005744 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e16b      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2203      	movs	r2, #3
 8005748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2200      	movs	r2, #0
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005758:	2b01      	cmp	r3, #1
 800575a:	d002      	beq.n	8005762 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	025b      	lsls	r3, r3, #9
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800576a:	4618      	mov	r0, r3
 800576c:	f001 ffa2 	bl	80076b4 <SDMMC_CmdBlockLength>
 8005770:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00f      	beq.n	8005798 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a9d      	ldr	r2, [pc, #628]	; (80059f4 <HAL_SD_WriteBlocks+0x314>)
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005786:	431a      	orrs	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e141      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005798:	f04f 33ff 	mov.w	r3, #4294967295
 800579c:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	025b      	lsls	r3, r3, #9
 80057a2:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80057a4:	2390      	movs	r3, #144	; 0x90
 80057a6:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80057a8:	2300      	movs	r3, #0
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f107 0218 	add.w	r2, r7, #24
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 ff4c 	bl	800765c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d90a      	bls.n	80057e0 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 fff4 	bl	80077c4 <SDMMC_CmdWriteMultiBlock>
 80057dc:	6478      	str	r0, [r7, #68]	; 0x44
 80057de:	e009      	b.n	80057f4 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2210      	movs	r2, #16
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 ffc7 	bl	8007780 <SDMMC_CmdWriteSingleBlock>
 80057f2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80057f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d012      	beq.n	8005820 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a7d      	ldr	r2, [pc, #500]	; (80059f4 <HAL_SD_WriteBlocks+0x314>)
 8005800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005808:	431a      	orrs	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0fd      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005824:	e065      	b.n	80058f2 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d040      	beq.n	80058b6 <HAL_SD_WriteBlocks+0x1d6>
 8005834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d03d      	beq.n	80058b6 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800583a:	2300      	movs	r3, #0
 800583c:	643b      	str	r3, [r7, #64]	; 0x40
 800583e:	e037      	b.n	80058b0 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	3301      	adds	r3, #1
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800584c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584e:	3b01      	subs	r3, #1
 8005850:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	021a      	lsls	r2, r3, #8
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800585e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005860:	3301      	adds	r3, #1
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005866:	3b01      	subs	r3, #1
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	041a      	lsls	r2, r3, #16
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	3301      	adds	r3, #1
 800587a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800587c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587e:	3b01      	subs	r3, #1
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	061a      	lsls	r2, r3, #24
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800588e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005890:	3301      	adds	r3, #1
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005896:	3b01      	subs	r3, #1
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f107 0214 	add.w	r2, r7, #20
 80058a2:	4611      	mov	r1, r2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 fe61 	bl	800756c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80058aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ac:	3301      	adds	r3, #1
 80058ae:	643b      	str	r3, [r7, #64]	; 0x40
 80058b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b2:	2b07      	cmp	r3, #7
 80058b4:	d9c4      	bls.n	8005840 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80058b6:	f7fb fb43 	bl	8000f40 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d902      	bls.n	80058cc <HAL_SD_WriteBlocks+0x1ec>
 80058c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d112      	bne.n	80058f2 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a48      	ldr	r2, [pc, #288]	; (80059f4 <HAL_SD_WriteBlocks+0x314>)
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058da:	431a      	orrs	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e094      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f8:	f240 331a 	movw	r3, #794	; 0x31a
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d091      	beq.n	8005826 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d022      	beq.n	8005956 <HAL_SD_WriteBlocks+0x276>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d91f      	bls.n	8005956 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591a:	2b03      	cmp	r3, #3
 800591c:	d01b      	beq.n	8005956 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f001 ff70 	bl	8007808 <SDMMC_CmdStopTransfer>
 8005928:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800592a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592c:	2b00      	cmp	r3, #0
 800592e:	d012      	beq.n	8005956 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a2f      	ldr	r2, [pc, #188]	; (80059f4 <HAL_SD_WriteBlocks+0x314>)
 8005936:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800593c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800593e:	431a      	orrs	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e062      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d012      	beq.n	800598a <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a22      	ldr	r2, [pc, #136]	; (80059f4 <HAL_SD_WriteBlocks+0x314>)
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	f043 0208 	orr.w	r2, r3, #8
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e048      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d012      	beq.n	80059be <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <HAL_SD_WriteBlocks+0x314>)
 800599e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	f043 0202 	orr.w	r2, r3, #2
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e02e      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d015      	beq.n	80059f8 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <HAL_SD_WriteBlocks+0x314>)
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	f043 0210 	orr.w	r2, r3, #16
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e014      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
 80059f2:	bf00      	nop
 80059f4:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e006      	b.n	8005a1c <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
  }
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3748      	adds	r7, #72	; 0x48
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a32:	0f9b      	lsrs	r3, r3, #30
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a3e:	0e9b      	lsrs	r3, r3, #26
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a50:	0e1b      	lsrs	r3, r3, #24
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a62:	0c1b      	lsrs	r3, r3, #16
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a84:	0d1b      	lsrs	r3, r3, #20
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a90:	0c1b      	lsrs	r3, r3, #16
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa2:	0bdb      	lsrs	r3, r3, #15
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab4:	0b9b      	lsrs	r3, r3, #14
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac6:	0b5b      	lsrs	r3, r3, #13
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad8:	0b1b      	lsrs	r3, r3, #12
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d163      	bne.n	8005bbc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af8:	009a      	lsls	r2, r3, #2
 8005afa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005afe:	4013      	ands	r3, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b04:	0f92      	lsrs	r2, r2, #30
 8005b06:	431a      	orrs	r2, r3
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b10:	0edb      	lsrs	r3, r3, #27
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b22:	0e1b      	lsrs	r3, r3, #24
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b34:	0d5b      	lsrs	r3, r3, #21
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b46:	0c9b      	lsrs	r3, r3, #18
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b58:	0bdb      	lsrs	r3, r3, #15
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	7e1b      	ldrb	r3, [r3, #24]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	3302      	adds	r3, #2
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005b86:	fb02 f203 	mul.w	r2, r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	7a1b      	ldrb	r3, [r3, #8]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	2201      	movs	r2, #1
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005ba8:	0a52      	lsrs	r2, r2, #9
 8005baa:	fb02 f203 	mul.w	r2, r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb8:	661a      	str	r2, [r3, #96]	; 0x60
 8005bba:	e031      	b.n	8005c20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d11d      	bne.n	8005c00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc8:	041b      	lsls	r3, r3, #16
 8005bca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd2:	0c1b      	lsrs	r3, r3, #16
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	3301      	adds	r3, #1
 8005be0:	029a      	lsls	r2, r3, #10
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	661a      	str	r2, [r3, #96]	; 0x60
 8005bfe:	e00f      	b.n	8005c20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a58      	ldr	r2, [pc, #352]	; (8005d68 <HAL_SD_GetCardCSD+0x344>)
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e09d      	b.n	8005d5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c24:	0b9b      	lsrs	r3, r3, #14
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c36:	09db      	lsrs	r3, r3, #7
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c58:	0fdb      	lsrs	r3, r3, #31
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	0f5b      	lsrs	r3, r3, #29
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c76:	0e9b      	lsrs	r3, r3, #26
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	0d9b      	lsrs	r3, r3, #22
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	0d5b      	lsrs	r3, r3, #21
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	0c1b      	lsrs	r3, r3, #16
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cca:	0bdb      	lsrs	r3, r3, #15
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	0b9b      	lsrs	r3, r3, #14
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	0b5b      	lsrs	r3, r3, #13
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	0b1b      	lsrs	r3, r3, #12
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	0a9b      	lsrs	r3, r3, #10
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	004005ff 	.word	0x004005ff

08005d6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005dc4:	b5b0      	push	{r4, r5, r7, lr}
 8005dc6:	b08e      	sub	sp, #56	; 0x38
 8005dc8:	af04      	add	r7, sp, #16
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d02e      	beq.n	8005e3c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	d106      	bne.n	8005df4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
 8005df2:	e029      	b.n	8005e48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d10a      	bne.n	8005e12 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fa01 	bl	8006204 <SD_WideBus_Enable>
 8005e02:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38
 8005e10:	e01a      	b.n	8005e48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fa3e 	bl	800629a <SD_WideBus_Disable>
 8005e1e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e2c:	e00c      	b.n	8005e48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
 8005e3a:	e005      	b.n	8005e48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005e56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e024      	b.n	8005eae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681d      	ldr	r5, [r3, #0]
 8005e8a:	466c      	mov	r4, sp
 8005e8c:	f107 0318 	add.w	r3, r7, #24
 8005e90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e98:	f107 030c 	add.w	r3, r7, #12
 8005e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f001 fb2c 	bl	80074fc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	004005ff 	.word	0x004005ff

08005ebc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ec8:	f107 030c 	add.w	r3, r7, #12
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f970 	bl	80061b4 <SD_SendStatus>
 8005ed4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	0a5b      	lsrs	r3, r3, #9
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005ef2:	693b      	ldr	r3, [r7, #16]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005efc:	b5b0      	push	{r4, r5, r7, lr}
 8005efe:	b094      	sub	sp, #80	; 0x50
 8005f00:	af04      	add	r7, sp, #16
 8005f02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005f04:	2301      	movs	r3, #1
 8005f06:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 fb4d 	bl	80075ac <SDIO_GetPowerState>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f1c:	e0b7      	b.n	800608e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d02f      	beq.n	8005f86 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fd76 	bl	8007a1c <SDMMC_CmdSendCID>
 8005f30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <SD_InitCard+0x40>
    {
      return errorstate;
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3a:	e0a8      	b.n	800608e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fb77 	bl	8007636 <SDIO_GetResponse>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2104      	movs	r1, #4
 8005f54:	4618      	mov	r0, r3
 8005f56:	f001 fb6e 	bl	8007636 <SDIO_GetResponse>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2108      	movs	r1, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 fb65 	bl	8007636 <SDIO_GetResponse>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	210c      	movs	r1, #12
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 fb5c 	bl	8007636 <SDIO_GetResponse>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d00d      	beq.n	8005faa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f107 020e 	add.w	r2, r7, #14
 8005f96:	4611      	mov	r1, r2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 fd7c 	bl	8007a96 <SDMMC_CmdSetRelAdd>
 8005f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <SD_InitCard+0xae>
    {
      return errorstate;
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa8:	e071      	b.n	800608e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d036      	beq.n	8006020 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005fb2:	89fb      	ldrh	r3, [r7, #14]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f001 fd46 	bl	8007a58 <SDMMC_CmdSendCSD>
 8005fcc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd6:	e05a      	b.n	800608e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fb29 	bl	8007636 <SDIO_GetResponse>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2104      	movs	r1, #4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fb20 	bl	8007636 <SDIO_GetResponse>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2108      	movs	r1, #8
 8006002:	4618      	mov	r0, r3
 8006004:	f001 fb17 	bl	8007636 <SDIO_GetResponse>
 8006008:	4602      	mov	r2, r0
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	210c      	movs	r1, #12
 8006014:	4618      	mov	r0, r3
 8006016:	f001 fb0e 	bl	8007636 <SDIO_GetResponse>
 800601a:	4602      	mov	r2, r0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2104      	movs	r1, #4
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fb05 	bl	8007636 <SDIO_GetResponse>
 800602c:	4603      	mov	r3, r0
 800602e:	0d1a      	lsrs	r2, r3, #20
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006034:	f107 0310 	add.w	r3, r7, #16
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff fcf2 	bl	8005a24 <HAL_SD_GetCardCSD>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006046:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800604a:	e020      	b.n	800608e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6819      	ldr	r1, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006054:	041b      	lsls	r3, r3, #16
 8006056:	f04f 0400 	mov.w	r4, #0
 800605a:	461a      	mov	r2, r3
 800605c:	4623      	mov	r3, r4
 800605e:	4608      	mov	r0, r1
 8006060:	f001 fbf4 	bl	800784c <SDMMC_CmdSelDesel>
 8006064:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <SD_InitCard+0x174>
  {
    return errorstate;
 800606c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606e:	e00e      	b.n	800608e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681d      	ldr	r5, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	466c      	mov	r4, sp
 8006078:	f103 0210 	add.w	r2, r3, #16
 800607c:	ca07      	ldmia	r2, {r0, r1, r2}
 800607e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006082:	3304      	adds	r3, #4
 8006084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006086:	4628      	mov	r0, r5
 8006088:	f001 fa38 	bl	80074fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3740      	adds	r7, #64	; 0x40
 8006092:	46bd      	mov	sp, r7
 8006094:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006098 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	2300      	movs	r3, #0
 80060aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fbee 	bl	8007892 <SDMMC_CmdGoIdleState>
 80060b6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	e072      	b.n	80061a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 fc01 	bl	80078ce <SDMMC_CmdOperCond>
 80060cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00d      	beq.n	80060f0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fbd7 	bl	8007892 <SDMMC_CmdGoIdleState>
 80060e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	e05b      	b.n	80061a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d137      	bne.n	800616e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fc01 	bl	800790c <SDMMC_CmdAppCommand>
 800610a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d02d      	beq.n	800616e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006112:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006116:	e047      	b.n	80061a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2100      	movs	r1, #0
 800611e:	4618      	mov	r0, r3
 8006120:	f001 fbf4 	bl	800790c <SDMMC_CmdAppCommand>
 8006124:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <SD_PowerON+0x98>
    {
      return errorstate;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	e03b      	b.n	80061a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	491e      	ldr	r1, [pc, #120]	; (80061b0 <SD_PowerON+0x118>)
 8006136:	4618      	mov	r0, r3
 8006138:	f001 fc0a 	bl	8007950 <SDMMC_CmdAppOperCommand>
 800613c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006144:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006148:	e02e      	b.n	80061a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2100      	movs	r1, #0
 8006150:	4618      	mov	r0, r3
 8006152:	f001 fa70 	bl	8007636 <SDIO_GetResponse>
 8006156:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	0fdb      	lsrs	r3, r3, #31
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <SD_PowerON+0xcc>
 8006160:	2301      	movs	r3, #1
 8006162:	e000      	b.n	8006166 <SD_PowerON+0xce>
 8006164:	2300      	movs	r3, #0
 8006166:	613b      	str	r3, [r7, #16]

    count++;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	3301      	adds	r3, #1
 800616c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006174:	4293      	cmp	r3, r2
 8006176:	d802      	bhi.n	800617e <SD_PowerON+0xe6>
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0cc      	beq.n	8006118 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006184:	4293      	cmp	r3, r2
 8006186:	d902      	bls.n	800618e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800618c:	e00c      	b.n	80061a8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	645a      	str	r2, [r3, #68]	; 0x44
 800619e:	e002      	b.n	80061a6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	c1100000 	.word	0xc1100000

080061b4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80061c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061c8:	e018      	b.n	80061fc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f001 fc7e 	bl	8007ad8 <SDMMC_CmdSendStatus>
 80061dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	e009      	b.n	80061fc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 fa21 	bl	8007636 <SDIO_GetResponse>
 80061f4:	4602      	mov	r2, r0
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	2300      	movs	r3, #0
 8006212:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f001 fa0b 	bl	8007636 <SDIO_GetResponse>
 8006220:	4603      	mov	r3, r0
 8006222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800622a:	d102      	bne.n	8006232 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800622c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006230:	e02f      	b.n	8006292 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006232:	f107 030c 	add.w	r3, r7, #12
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f879 	bl	8006330 <SD_FindSCR>
 800623e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	e023      	b.n	8006292 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01c      	beq.n	800628e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625c:	041b      	lsls	r3, r3, #16
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f001 fb53 	bl	800790c <SDMMC_CmdAppCommand>
 8006266:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	e00f      	b.n	8006292 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2102      	movs	r1, #2
 8006278:	4618      	mov	r0, r3
 800627a:	f001 fb8c 	bl	8007996 <SDMMC_CmdBusWidth>
 800627e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	e003      	b.n	8006292 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800628a:	2300      	movs	r3, #0
 800628c:	e001      	b.n	8006292 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800628e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b086      	sub	sp, #24
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	2300      	movs	r3, #0
 80062a8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f9c0 	bl	8007636 <SDIO_GetResponse>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062c0:	d102      	bne.n	80062c8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80062c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062c6:	e02f      	b.n	8006328 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80062c8:	f107 030c 	add.w	r3, r7, #12
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f82e 	bl	8006330 <SD_FindSCR>
 80062d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	e023      	b.n	8006328 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01c      	beq.n	8006324 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f001 fb08 	bl	800790c <SDMMC_CmdAppCommand>
 80062fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	e00f      	b.n	8006328 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fb41 	bl	8007996 <SDMMC_CmdBusWidth>
 8006314:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	e003      	b.n	8006328 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006320:	2300      	movs	r3, #0
 8006322:	e001      	b.n	8006328 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006324:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006330:	b590      	push	{r4, r7, lr}
 8006332:	b08f      	sub	sp, #60	; 0x3c
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800633a:	f7fa fe01 	bl	8000f40 <HAL_GetTick>
 800633e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006344:	2300      	movs	r3, #0
 8006346:	60bb      	str	r3, [r7, #8]
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2108      	movs	r1, #8
 8006356:	4618      	mov	r0, r3
 8006358:	f001 f9ac 	bl	80076b4 <SDMMC_CmdBlockLength>
 800635c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	e0a9      	b.n	80064bc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f001 fac9 	bl	800790c <SDMMC_CmdAppCommand>
 800637a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	e09a      	b.n	80064bc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006386:	f04f 33ff 	mov.w	r3, #4294967295
 800638a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800638c:	2308      	movs	r3, #8
 800638e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006390:	2330      	movs	r3, #48	; 0x30
 8006392:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006394:	2302      	movs	r3, #2
 8006396:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006398:	2300      	movs	r3, #0
 800639a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800639c:	2301      	movs	r3, #1
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f107 0210 	add.w	r2, r7, #16
 80063a8:	4611      	mov	r1, r2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 f956 	bl	800765c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fb10 	bl	80079da <SDMMC_CmdSendSCR>
 80063ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d022      	beq.n	8006408 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	e07a      	b.n	80064bc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00e      	beq.n	80063f2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6819      	ldr	r1, [r3, #0]
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	f107 0208 	add.w	r2, r7, #8
 80063e0:	18d4      	adds	r4, r2, r3
 80063e2:	4608      	mov	r0, r1
 80063e4:	f001 f8b5 	bl	8007552 <SDIO_ReadFIFO>
 80063e8:	4603      	mov	r3, r0
 80063ea:	6023      	str	r3, [r4, #0]
      index++;
 80063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ee:	3301      	adds	r3, #1
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80063f2:	f7fa fda5 	bl	8000f40 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d102      	bne.n	8006408 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006402:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006406:	e059      	b.n	80064bc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800640e:	f240 432a 	movw	r3, #1066	; 0x42a
 8006412:	4013      	ands	r3, r2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0d6      	beq.n	80063c6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2208      	movs	r2, #8
 800642c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800642e:	2308      	movs	r3, #8
 8006430:	e044      	b.n	80064bc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2202      	movs	r2, #2
 8006446:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006448:	2302      	movs	r3, #2
 800644a:	e037      	b.n	80064bc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2220      	movs	r2, #32
 8006460:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006462:	2320      	movs	r3, #32
 8006464:	e02a      	b.n	80064bc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f240 523a 	movw	r2, #1338	; 0x53a
 800646e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	061a      	lsls	r2, r3, #24
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800647c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	0a1b      	lsrs	r3, r3, #8
 8006482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006486:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	0e1b      	lsrs	r3, r3, #24
 800648c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	601a      	str	r2, [r3, #0]
    scr++;
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	3304      	adds	r3, #4
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	061a      	lsls	r2, r3, #24
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	0a1b      	lsrs	r3, r3, #8
 80064aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80064ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	0e1b      	lsrs	r3, r3, #24
 80064b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	373c      	adds	r7, #60	; 0x3c
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd90      	pop	{r4, r7, pc}

080064c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e01d      	b.n	8006512 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f005 ff1a 	bl	800c324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f000 fcac 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0201 	orr.w	r2, r2, #1
 8006530:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b06      	cmp	r3, #6
 8006542:	d007      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e01d      	b.n	80065b0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f005 fef3 	bl	800c374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f000 fc5d 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d101      	bne.n	80065d6 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80065d2:	2302      	movs	r3, #2
 80065d4:	e0e9      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d10b      	bne.n	80065fa <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <HAL_TIM_PWM_Start_DMA+0x3a>
 80065e8:	887b      	ldrh	r3, [r7, #2]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e0db      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2202      	movs	r2, #2
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	f200 80ad 	bhi.w	800675c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <HAL_TIM_PWM_Start_DMA+0x50>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	0800663d 	.word	0x0800663d
 800660c:	0800675d 	.word	0x0800675d
 8006610:	0800675d 	.word	0x0800675d
 8006614:	0800675d 	.word	0x0800675d
 8006618:	08006685 	.word	0x08006685
 800661c:	0800675d 	.word	0x0800675d
 8006620:	0800675d 	.word	0x0800675d
 8006624:	0800675d 	.word	0x0800675d
 8006628:	080066cd 	.word	0x080066cd
 800662c:	0800675d 	.word	0x0800675d
 8006630:	0800675d 	.word	0x0800675d
 8006634:	0800675d 	.word	0x0800675d
 8006638:	08006715 	.word	0x08006715
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	4a5c      	ldr	r2, [pc, #368]	; (80067b4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8006642:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	4a5b      	ldr	r2, [pc, #364]	; (80067b8 <HAL_TIM_PWM_Start_DMA+0x200>)
 800664a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	4a5a      	ldr	r2, [pc, #360]	; (80067bc <HAL_TIM_PWM_Start_DMA+0x204>)
 8006652:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3334      	adds	r3, #52	; 0x34
 8006660:	461a      	mov	r2, r3
 8006662:	887b      	ldrh	r3, [r7, #2]
 8006664:	f7fb fa26 	bl	8001ab4 <HAL_DMA_Start_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e09b      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006680:	60da      	str	r2, [r3, #12]
      break;
 8006682:	e06c      	b.n	800675e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	4a4a      	ldr	r2, [pc, #296]	; (80067b4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800668a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	4a49      	ldr	r2, [pc, #292]	; (80067b8 <HAL_TIM_PWM_Start_DMA+0x200>)
 8006692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	4a48      	ldr	r2, [pc, #288]	; (80067bc <HAL_TIM_PWM_Start_DMA+0x204>)
 800669a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3338      	adds	r3, #56	; 0x38
 80066a8:	461a      	mov	r2, r3
 80066aa:	887b      	ldrh	r3, [r7, #2]
 80066ac:	f7fb fa02 	bl	8001ab4 <HAL_DMA_Start_IT>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e077      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066c8:	60da      	str	r2, [r3, #12]
      break;
 80066ca:	e048      	b.n	800675e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	4a38      	ldr	r2, [pc, #224]	; (80067b4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80066d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	4a37      	ldr	r2, [pc, #220]	; (80067b8 <HAL_TIM_PWM_Start_DMA+0x200>)
 80066da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	4a36      	ldr	r2, [pc, #216]	; (80067bc <HAL_TIM_PWM_Start_DMA+0x204>)
 80066e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	333c      	adds	r3, #60	; 0x3c
 80066f0:	461a      	mov	r2, r3
 80066f2:	887b      	ldrh	r3, [r7, #2]
 80066f4:	f7fb f9de 	bl	8001ab4 <HAL_DMA_Start_IT>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e053      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006710:	60da      	str	r2, [r3, #12]
      break;
 8006712:	e024      	b.n	800675e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800671a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006720:	4a25      	ldr	r2, [pc, #148]	; (80067b8 <HAL_TIM_PWM_Start_DMA+0x200>)
 8006722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	4a24      	ldr	r2, [pc, #144]	; (80067bc <HAL_TIM_PWM_Start_DMA+0x204>)
 800672a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3340      	adds	r3, #64	; 0x40
 8006738:	461a      	mov	r2, r3
 800673a:	887b      	ldrh	r3, [r7, #2]
 800673c:	f7fb f9ba 	bl	8001ab4 <HAL_DMA_Start_IT>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e02f      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006758:	60da      	str	r2, [r3, #12]
      break;
 800675a:	e000      	b.n	800675e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800675c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2201      	movs	r2, #1
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fe20 	bl	80073ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a13      	ldr	r2, [pc, #76]	; (80067c0 <HAL_TIM_PWM_Start_DMA+0x208>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d107      	bne.n	8006786 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006784:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b06      	cmp	r3, #6
 8006796:	d007      	beq.n	80067a8 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	08006d7f 	.word	0x08006d7f
 80067b8:	08006def 	.word	0x08006def
 80067bc:	08006d5b 	.word	0x08006d5b
 80067c0:	40010000 	.word	0x40010000

080067c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d122      	bne.n	8006820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d11b      	bne.n	8006820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0202 	mvn.w	r2, #2
 80067f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa75 	bl	8006cf6 <HAL_TIM_IC_CaptureCallback>
 800680c:	e005      	b.n	800681a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa67 	bl	8006ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa78 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0304 	and.w	r3, r3, #4
 800682a:	2b04      	cmp	r3, #4
 800682c:	d122      	bne.n	8006874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b04      	cmp	r3, #4
 800683a:	d11b      	bne.n	8006874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0204 	mvn.w	r2, #4
 8006844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa4b 	bl	8006cf6 <HAL_TIM_IC_CaptureCallback>
 8006860:	e005      	b.n	800686e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa3d 	bl	8006ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fa4e 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b08      	cmp	r3, #8
 8006880:	d122      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b08      	cmp	r3, #8
 800688e:	d11b      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f06f 0208 	mvn.w	r2, #8
 8006898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2204      	movs	r2, #4
 800689e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa21 	bl	8006cf6 <HAL_TIM_IC_CaptureCallback>
 80068b4:	e005      	b.n	80068c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa13 	bl	8006ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fa24 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	2b10      	cmp	r3, #16
 80068d4:	d122      	bne.n	800691c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d11b      	bne.n	800691c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0210 	mvn.w	r2, #16
 80068ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2208      	movs	r2, #8
 80068f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f9f7 	bl	8006cf6 <HAL_TIM_IC_CaptureCallback>
 8006908:	e005      	b.n	8006916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f9e9 	bl	8006ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9fa 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b01      	cmp	r3, #1
 8006928:	d10e      	bne.n	8006948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b01      	cmp	r3, #1
 8006936:	d107      	bne.n	8006948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0201 	mvn.w	r2, #1
 8006940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9c3 	bl	8006cce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006952:	2b80      	cmp	r3, #128	; 0x80
 8006954:	d10e      	bne.n	8006974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006960:	2b80      	cmp	r3, #128	; 0x80
 8006962:	d107      	bne.n	8006974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800696c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fdba 	bl	80074e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d10e      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	d107      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f9c9 	bl	8006d32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d10e      	bne.n	80069cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d107      	bne.n	80069cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0220 	mvn.w	r2, #32
 80069c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fd84 	bl	80074d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069cc:	bf00      	nop
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80069ea:	2302      	movs	r3, #2
 80069ec:	e0b4      	b.n	8006b58 <HAL_TIM_PWM_ConfigChannel+0x184>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b0c      	cmp	r3, #12
 8006a02:	f200 809f 	bhi.w	8006b44 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a41 	.word	0x08006a41
 8006a10:	08006b45 	.word	0x08006b45
 8006a14:	08006b45 	.word	0x08006b45
 8006a18:	08006b45 	.word	0x08006b45
 8006a1c:	08006a81 	.word	0x08006a81
 8006a20:	08006b45 	.word	0x08006b45
 8006a24:	08006b45 	.word	0x08006b45
 8006a28:	08006b45 	.word	0x08006b45
 8006a2c:	08006ac3 	.word	0x08006ac3
 8006a30:	08006b45 	.word	0x08006b45
 8006a34:	08006b45 	.word	0x08006b45
 8006a38:	08006b45 	.word	0x08006b45
 8006a3c:	08006b03 	.word	0x08006b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fa8a 	bl	8006f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0208 	orr.w	r2, r2, #8
 8006a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0204 	bic.w	r2, r2, #4
 8006a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6999      	ldr	r1, [r3, #24]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	619a      	str	r2, [r3, #24]
      break;
 8006a7e:	e062      	b.n	8006b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fad0 	bl	800702c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6999      	ldr	r1, [r3, #24]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	021a      	lsls	r2, r3, #8
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	619a      	str	r2, [r3, #24]
      break;
 8006ac0:	e041      	b.n	8006b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fb1b 	bl	8007104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0208 	orr.w	r2, r2, #8
 8006adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0204 	bic.w	r2, r2, #4
 8006aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69d9      	ldr	r1, [r3, #28]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	61da      	str	r2, [r3, #28]
      break;
 8006b00:	e021      	b.n	8006b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fb65 	bl	80071d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69d9      	ldr	r1, [r3, #28]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	021a      	lsls	r2, r3, #8
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	61da      	str	r2, [r3, #28]
      break;
 8006b42:	e000      	b.n	8006b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006b44:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_TIM_ConfigClockSource+0x18>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e0a6      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x166>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d067      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x120>
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d80b      	bhi.n	8006bcc <HAL_TIM_ConfigClockSource+0x6c>
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d073      	beq.n	8006ca0 <HAL_TIM_ConfigClockSource+0x140>
 8006bb8:	2b10      	cmp	r3, #16
 8006bba:	d802      	bhi.n	8006bc2 <HAL_TIM_ConfigClockSource+0x62>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d06f      	beq.n	8006ca0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006bc0:	e078      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d06c      	beq.n	8006ca0 <HAL_TIM_ConfigClockSource+0x140>
 8006bc6:	2b30      	cmp	r3, #48	; 0x30
 8006bc8:	d06a      	beq.n	8006ca0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006bca:	e073      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bcc:	2b70      	cmp	r3, #112	; 0x70
 8006bce:	d00d      	beq.n	8006bec <HAL_TIM_ConfigClockSource+0x8c>
 8006bd0:	2b70      	cmp	r3, #112	; 0x70
 8006bd2:	d804      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x7e>
 8006bd4:	2b50      	cmp	r3, #80	; 0x50
 8006bd6:	d033      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0xe0>
 8006bd8:	2b60      	cmp	r3, #96	; 0x60
 8006bda:	d041      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006bdc:	e06a      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be2:	d066      	beq.n	8006cb2 <HAL_TIM_ConfigClockSource+0x152>
 8006be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be8:	d017      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006bea:	e063      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	6899      	ldr	r1, [r3, #8]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f000 fbb6 	bl	800736c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	609a      	str	r2, [r3, #8]
      break;
 8006c18:	e04c      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6899      	ldr	r1, [r3, #8]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f000 fb9f 	bl	800736c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c3c:	609a      	str	r2, [r3, #8]
      break;
 8006c3e:	e039      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f000 fb13 	bl	8007278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2150      	movs	r1, #80	; 0x50
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fb6c 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8006c5e:	e029      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6859      	ldr	r1, [r3, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f000 fb32 	bl	80072d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2160      	movs	r1, #96	; 0x60
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fb5c 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8006c7e:	e019      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	6859      	ldr	r1, [r3, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f000 faf3 	bl	8007278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2140      	movs	r1, #64	; 0x40
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fb4c 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8006c9e:	e009      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f000 fb43 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8006cb0:	e000      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff ffe8 	bl	8006d46 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d103      	bne.n	8006da6 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	771a      	strb	r2, [r3, #28]
 8006da4:	e019      	b.n	8006dda <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d103      	bne.n	8006db8 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2202      	movs	r2, #2
 8006db4:	771a      	strb	r2, [r3, #28]
 8006db6:	e010      	b.n	8006dda <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d103      	bne.n	8006dca <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	771a      	strb	r2, [r3, #28]
 8006dc8:	e007      	b.n	8006dda <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d102      	bne.n	8006dda <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff ff95 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	771a      	strb	r2, [r3, #28]
}
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d103      	bne.n	8006e16 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	771a      	strb	r2, [r3, #28]
 8006e14:	e019      	b.n	8006e4a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d103      	bne.n	8006e28 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2202      	movs	r2, #2
 8006e24:	771a      	strb	r2, [r3, #28]
 8006e26:	e010      	b.n	8006e4a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d103      	bne.n	8006e3a <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2204      	movs	r2, #4
 8006e36:	771a      	strb	r2, [r3, #28]
 8006e38:	e007      	b.n	8006e4a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d102      	bne.n	8006e4a <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2208      	movs	r2, #8
 8006e48:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7ff ff67 	bl	8006d1e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	771a      	strb	r2, [r3, #28]
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a34      	ldr	r2, [pc, #208]	; (8006f44 <TIM_Base_SetConfig+0xe4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00f      	beq.n	8006e98 <TIM_Base_SetConfig+0x38>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7e:	d00b      	beq.n	8006e98 <TIM_Base_SetConfig+0x38>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a31      	ldr	r2, [pc, #196]	; (8006f48 <TIM_Base_SetConfig+0xe8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_Base_SetConfig+0x38>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a30      	ldr	r2, [pc, #192]	; (8006f4c <TIM_Base_SetConfig+0xec>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_Base_SetConfig+0x38>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a2f      	ldr	r2, [pc, #188]	; (8006f50 <TIM_Base_SetConfig+0xf0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d108      	bne.n	8006eaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a25      	ldr	r2, [pc, #148]	; (8006f44 <TIM_Base_SetConfig+0xe4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01b      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb8:	d017      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a22      	ldr	r2, [pc, #136]	; (8006f48 <TIM_Base_SetConfig+0xe8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a21      	ldr	r2, [pc, #132]	; (8006f4c <TIM_Base_SetConfig+0xec>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a20      	ldr	r2, [pc, #128]	; (8006f50 <TIM_Base_SetConfig+0xf0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1f      	ldr	r2, [pc, #124]	; (8006f54 <TIM_Base_SetConfig+0xf4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <TIM_Base_SetConfig+0xf8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <TIM_Base_SetConfig+0xfc>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d108      	bne.n	8006efc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a08      	ldr	r2, [pc, #32]	; (8006f44 <TIM_Base_SetConfig+0xe4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d103      	bne.n	8006f30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	615a      	str	r2, [r3, #20]
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40000c00 	.word	0x40000c00
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40014400 	.word	0x40014400
 8006f5c:	40014800 	.word	0x40014800

08006f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f023 0201 	bic.w	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0303 	bic.w	r3, r3, #3
 8006f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f023 0302 	bic.w	r3, r3, #2
 8006fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <TIM_OC1_SetConfig+0xc8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d10c      	bne.n	8006fd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f023 0308 	bic.w	r3, r3, #8
 8006fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f023 0304 	bic.w	r3, r3, #4
 8006fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a13      	ldr	r2, [pc, #76]	; (8007028 <TIM_OC1_SetConfig+0xc8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d111      	bne.n	8007002 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	621a      	str	r2, [r3, #32]
}
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	40010000 	.word	0x40010000

0800702c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f023 0210 	bic.w	r2, r3, #16
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f023 0320 	bic.w	r3, r3, #32
 8007076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <TIM_OC2_SetConfig+0xd4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d10d      	bne.n	80070a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a15      	ldr	r2, [pc, #84]	; (8007100 <TIM_OC2_SetConfig+0xd4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d113      	bne.n	80070d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40010000 	.word	0x40010000

08007104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800714c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <TIM_OC3_SetConfig+0xd0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d10d      	bne.n	800717e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	021b      	lsls	r3, r3, #8
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	4313      	orrs	r3, r2
 8007174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800717c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a14      	ldr	r2, [pc, #80]	; (80071d4 <TIM_OC3_SetConfig+0xd0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d113      	bne.n	80071ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800718c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	621a      	str	r2, [r3, #32]
}
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	40010000 	.word	0x40010000

080071d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	031b      	lsls	r3, r3, #12
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a10      	ldr	r2, [pc, #64]	; (8007274 <TIM_OC4_SetConfig+0x9c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d109      	bne.n	800724c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800723e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	019b      	lsls	r3, r3, #6
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40010000 	.word	0x40010000

08007278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f023 0201 	bic.w	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f023 030a 	bic.w	r3, r3, #10
 80072b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	621a      	str	r2, [r3, #32]
}
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b087      	sub	sp, #28
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	f023 0210 	bic.w	r2, r3, #16
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	031b      	lsls	r3, r3, #12
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	f043 0307 	orr.w	r3, r3, #7
 8007358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	609a      	str	r2, [r3, #8]
}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	021a      	lsls	r2, r3, #8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	431a      	orrs	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	bf00      	nop
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2201      	movs	r2, #1
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	43db      	mvns	r3, r3
 80073ce:	401a      	ands	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a1a      	ldr	r2, [r3, #32]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	fa01 f303 	lsl.w	r3, r1, r3
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800740c:	2302      	movs	r3, #2
 800740e:	e050      	b.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a1c      	ldr	r2, [pc, #112]	; (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d018      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745c:	d013      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d00e      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a16      	ldr	r2, [pc, #88]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d009      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a15      	ldr	r2, [pc, #84]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d004      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a13      	ldr	r2, [pc, #76]	; (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d10c      	bne.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800748c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	4313      	orrs	r3, r2
 8007496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40010000 	.word	0x40010000
 80074c4:	40000400 	.word	0x40000400
 80074c8:	40000800 	.word	0x40000800
 80074cc:	40000c00 	.word	0x40000c00
 80074d0:	40014000 	.word	0x40014000

080074d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80074fc:	b084      	sub	sp, #16
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	f107 001c 	add.w	r0, r7, #28
 800750a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007512:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007514:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007516:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800751a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800751e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007522:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007526:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007536:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	b004      	add	sp, #16
 8007550:	4770      	bx	lr

08007552 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2203      	movs	r2, #3
 800759a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800759c:	2002      	movs	r0, #2
 800759e:	f7f9 fcdb 	bl	8000f58 <HAL_Delay>
  
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0303 	and.w	r3, r3, #3
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80075e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80075ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80075f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007602:	f023 030f 	bic.w	r3, r3, #15
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	b2db      	uxtb	r3, r3
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3314      	adds	r3, #20
 8007644:	461a      	mov	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	4413      	add	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
}  
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007682:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007688:	431a      	orrs	r2, r3
                       Data->DPSM);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800768e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0

}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80076c2:	2310      	movs	r3, #16
 80076c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076c6:	2340      	movs	r3, #64	; 0x40
 80076c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076d4:	f107 0308 	add.w	r3, r7, #8
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff ff74 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80076e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e4:	2110      	movs	r1, #16
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa40 	bl	8007b6c <SDMMC_GetCmdResp1>
 80076ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ee:	69fb      	ldr	r3, [r7, #28]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007706:	2311      	movs	r3, #17
 8007708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800770a:	2340      	movs	r3, #64	; 0x40
 800770c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007716:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007718:	f107 0308 	add.w	r3, r7, #8
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff ff52 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007724:	f241 3288 	movw	r2, #5000	; 0x1388
 8007728:	2111      	movs	r1, #17
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa1e 	bl	8007b6c <SDMMC_GetCmdResp1>
 8007730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007732:	69fb      	ldr	r3, [r7, #28]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3720      	adds	r7, #32
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800774a:	2312      	movs	r3, #18
 800774c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800775a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800775c:	f107 0308 	add.w	r3, r7, #8
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff ff30 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007768:	f241 3288 	movw	r2, #5000	; 0x1388
 800776c:	2112      	movs	r1, #18
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9fc 	bl	8007b6c <SDMMC_GetCmdResp1>
 8007774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007776:	69fb      	ldr	r3, [r7, #28]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3720      	adds	r7, #32
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800778e:	2318      	movs	r3, #24
 8007790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007792:	2340      	movs	r3, #64	; 0x40
 8007794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800779a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800779e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077a0:	f107 0308 	add.w	r3, r7, #8
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff ff0e 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80077ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b0:	2118      	movs	r1, #24
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9da 	bl	8007b6c <SDMMC_GetCmdResp1>
 80077b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ba:	69fb      	ldr	r3, [r7, #28]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80077d2:	2319      	movs	r3, #25
 80077d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077d6:	2340      	movs	r3, #64	; 0x40
 80077d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077e4:	f107 0308 	add.w	r3, r7, #8
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff feec 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80077f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f4:	2119      	movs	r1, #25
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9b8 	bl	8007b6c <SDMMC_GetCmdResp1>
 80077fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077fe:	69fb      	ldr	r3, [r7, #28]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007814:	230c      	movs	r3, #12
 8007816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007818:	2340      	movs	r3, #64	; 0x40
 800781a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007824:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007826:	f107 0308 	add.w	r3, r7, #8
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff fecb 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007832:	4a05      	ldr	r2, [pc, #20]	; (8007848 <SDMMC_CmdStopTransfer+0x40>)
 8007834:	210c      	movs	r1, #12
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f998 	bl	8007b6c <SDMMC_GetCmdResp1>
 800783c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800783e:	69fb      	ldr	r3, [r7, #28]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3720      	adds	r7, #32
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	05f5e100 	.word	0x05f5e100

0800784c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	; 0x28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800785c:	2307      	movs	r3, #7
 800785e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007860:	2340      	movs	r3, #64	; 0x40
 8007862:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007864:	2300      	movs	r3, #0
 8007866:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800786c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800786e:	f107 0310 	add.w	r3, r7, #16
 8007872:	4619      	mov	r1, r3
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff fea7 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800787a:	f241 3288 	movw	r2, #5000	; 0x1388
 800787e:	2107      	movs	r1, #7
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f973 	bl	8007b6c <SDMMC_GetCmdResp1>
 8007886:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800788a:	4618      	mov	r0, r3
 800788c:	3728      	adds	r7, #40	; 0x28
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b088      	sub	sp, #32
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80078a2:	2300      	movs	r3, #0
 80078a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078a6:	2300      	movs	r3, #0
 80078a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fe86 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f92d 	bl	8007b1c <SDMMC_GetCmdError>
 80078c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078c4:	69fb      	ldr	r3, [r7, #28]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3720      	adds	r7, #32
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b088      	sub	sp, #32
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80078d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80078da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80078dc:	2308      	movs	r3, #8
 80078de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078e0:	2340      	movs	r3, #64	; 0x40
 80078e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078e4:	2300      	movs	r3, #0
 80078e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078ee:	f107 0308 	add.w	r3, r7, #8
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff fe67 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb16 	bl	8007f2c <SDMMC_GetCmdResp7>
 8007900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007902:	69fb      	ldr	r3, [r7, #28]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3720      	adds	r7, #32
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800791a:	2337      	movs	r3, #55	; 0x37
 800791c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800791e:	2340      	movs	r3, #64	; 0x40
 8007920:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007922:	2300      	movs	r3, #0
 8007924:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800792a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800792c:	f107 0308 	add.w	r3, r7, #8
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff fe48 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007938:	f241 3288 	movw	r2, #5000	; 0x1388
 800793c:	2137      	movs	r1, #55	; 0x37
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f914 	bl	8007b6c <SDMMC_GetCmdResp1>
 8007944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007946:	69fb      	ldr	r3, [r7, #28]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007966:	2329      	movs	r3, #41	; 0x29
 8007968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800796a:	2340      	movs	r3, #64	; 0x40
 800796c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007976:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007978:	f107 0308 	add.w	r3, r7, #8
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff fe22 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa23 	bl	8007dd0 <SDMMC_GetCmdResp3>
 800798a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800798c:	69fb      	ldr	r3, [r7, #28]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3720      	adds	r7, #32
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b088      	sub	sp, #32
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80079a4:	2306      	movs	r3, #6
 80079a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079a8:	2340      	movs	r3, #64	; 0x40
 80079aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079b6:	f107 0308 	add.w	r3, r7, #8
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff fe03 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80079c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c6:	2106      	movs	r1, #6
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f8cf 	bl	8007b6c <SDMMC_GetCmdResp1>
 80079ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079d0:	69fb      	ldr	r3, [r7, #28]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b088      	sub	sp, #32
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80079e6:	2333      	movs	r3, #51	; 0x33
 80079e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079ea:	2340      	movs	r3, #64	; 0x40
 80079ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079f8:	f107 0308 	add.w	r3, r7, #8
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fde2 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a08:	2133      	movs	r1, #51	; 0x33
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f8ae 	bl	8007b6c <SDMMC_GetCmdResp1>
 8007a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a12:	69fb      	ldr	r3, [r7, #28]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3720      	adds	r7, #32
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a28:	2302      	movs	r3, #2
 8007a2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a2c:	23c0      	movs	r3, #192	; 0xc0
 8007a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a3a:	f107 0308 	add.w	r3, r7, #8
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff fdc1 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f97c 	bl	8007d44 <SDMMC_GetCmdResp2>
 8007a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a4e:	69fb      	ldr	r3, [r7, #28]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007a66:	2309      	movs	r3, #9
 8007a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a6a:	23c0      	movs	r3, #192	; 0xc0
 8007a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a78:	f107 0308 	add.w	r3, r7, #8
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff fda2 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f95d 	bl	8007d44 <SDMMC_GetCmdResp2>
 8007a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3720      	adds	r7, #32
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b088      	sub	sp, #32
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007aa8:	2340      	movs	r3, #64	; 0x40
 8007aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ab6:	f107 0308 	add.w	r3, r7, #8
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fd83 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	2103      	movs	r1, #3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f9bc 	bl	8007e44 <SDMMC_GetCmdResp6>
 8007acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ace:	69fb      	ldr	r3, [r7, #28]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3720      	adds	r7, #32
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007ae6:	230d      	movs	r3, #13
 8007ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007aea:	2340      	movs	r3, #64	; 0x40
 8007aec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aee:	2300      	movs	r3, #0
 8007af0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007af6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007af8:	f107 0308 	add.w	r3, r7, #8
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fd62 	bl	80075c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b08:	210d      	movs	r1, #13
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f82e 	bl	8007b6c <SDMMC_GetCmdResp1>
 8007b10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b12:	69fb      	ldr	r3, [r7, #28]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3720      	adds	r7, #32
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007b1c:	b490      	push	{r4, r7}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b24:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <SDMMC_GetCmdError+0x48>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a0f      	ldr	r2, [pc, #60]	; (8007b68 <SDMMC_GetCmdError+0x4c>)
 8007b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2e:	0a5b      	lsrs	r3, r3, #9
 8007b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007b38:	4623      	mov	r3, r4
 8007b3a:	1e5c      	subs	r4, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b44:	e009      	b.n	8007b5a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f2      	beq.n	8007b38 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	22c5      	movs	r2, #197	; 0xc5
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc90      	pop	{r4, r7}
 8007b62:	4770      	bx	lr
 8007b64:	20000128 	.word	0x20000128
 8007b68:	10624dd3 	.word	0x10624dd3

08007b6c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007b6c:	b590      	push	{r4, r7, lr}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	460b      	mov	r3, r1
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b7a:	4b6f      	ldr	r3, [pc, #444]	; (8007d38 <SDMMC_GetCmdResp1+0x1cc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a6f      	ldr	r2, [pc, #444]	; (8007d3c <SDMMC_GetCmdResp1+0x1d0>)
 8007b80:	fba2 2303 	umull	r2, r3, r2, r3
 8007b84:	0a5b      	lsrs	r3, r3, #9
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	1e5c      	subs	r4, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d102      	bne.n	8007b9a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b98:	e0c9      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0f0      	beq.n	8007b8c <SDMMC_GetCmdResp1+0x20>
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1eb      	bne.n	8007b8c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d004      	beq.n	8007bca <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	e0b1      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e0a6      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	22c5      	movs	r2, #197	; 0xc5
 8007be4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7ff fd18 	bl	800761c <SDIO_GetCommandResponse>
 8007bec:	4603      	mov	r3, r0
 8007bee:	461a      	mov	r2, r3
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d001      	beq.n	8007bfa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e099      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff fd1a 	bl	8007636 <SDIO_GetResponse>
 8007c02:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4b4e      	ldr	r3, [pc, #312]	; (8007d40 <SDMMC_GetCmdResp1+0x1d4>)
 8007c08:	4013      	ands	r3, r2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e08d      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	da02      	bge.n	8007c1e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c1c:	e087      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	e080      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c36:	2380      	movs	r3, #128	; 0x80
 8007c38:	e079      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c48:	e071      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c58:	e069      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c68:	e061      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c78:	e059      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c88:	e051      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c98:	e049      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ca8:	e041      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb8:	e039      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007cc8:	e031      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007cd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007cd8:	e029      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007ce4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ce8:	e021      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007cf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007cf8:	e019      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d08:	e011      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d18:	e009      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d28:	e001      	b.n	8007d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd90      	pop	{r4, r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000128 	.word	0x20000128
 8007d3c:	10624dd3 	.word	0x10624dd3
 8007d40:	fdffe008 	.word	0xfdffe008

08007d44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007d44:	b490      	push	{r4, r7}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d4c:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <SDMMC_GetCmdResp2+0x84>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a1e      	ldr	r2, [pc, #120]	; (8007dcc <SDMMC_GetCmdResp2+0x88>)
 8007d52:	fba2 2303 	umull	r2, r3, r2, r3
 8007d56:	0a5b      	lsrs	r3, r3, #9
 8007d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d60:	4623      	mov	r3, r4
 8007d62:	1e5c      	subs	r4, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d6c:	e026      	b.n	8007dbc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d72:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0f0      	beq.n	8007d60 <SDMMC_GetCmdResp2+0x1c>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1eb      	bne.n	8007d60 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d004      	beq.n	8007d9e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2204      	movs	r2, #4
 8007d98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d9a:	2304      	movs	r3, #4
 8007d9c:	e00e      	b.n	8007dbc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e003      	b.n	8007dbc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	22c5      	movs	r2, #197	; 0xc5
 8007db8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc90      	pop	{r4, r7}
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20000128 	.word	0x20000128
 8007dcc:	10624dd3 	.word	0x10624dd3

08007dd0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007dd0:	b490      	push	{r4, r7}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dd8:	4b18      	ldr	r3, [pc, #96]	; (8007e3c <SDMMC_GetCmdResp3+0x6c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a18      	ldr	r2, [pc, #96]	; (8007e40 <SDMMC_GetCmdResp3+0x70>)
 8007dde:	fba2 2303 	umull	r2, r3, r2, r3
 8007de2:	0a5b      	lsrs	r3, r3, #9
 8007de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007dec:	4623      	mov	r3, r4
 8007dee:	1e5c      	subs	r4, r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007df4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007df8:	e01b      	b.n	8007e32 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0f0      	beq.n	8007dec <SDMMC_GetCmdResp3+0x1c>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1eb      	bne.n	8007dec <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2204      	movs	r2, #4
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e26:	2304      	movs	r3, #4
 8007e28:	e003      	b.n	8007e32 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	22c5      	movs	r2, #197	; 0xc5
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc90      	pop	{r4, r7}
 8007e3a:	4770      	bx	lr
 8007e3c:	20000128 	.word	0x20000128
 8007e40:	10624dd3 	.word	0x10624dd3

08007e44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007e44:	b590      	push	{r4, r7, lr}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	607a      	str	r2, [r7, #4]
 8007e50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e52:	4b34      	ldr	r3, [pc, #208]	; (8007f24 <SDMMC_GetCmdResp6+0xe0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a34      	ldr	r2, [pc, #208]	; (8007f28 <SDMMC_GetCmdResp6+0xe4>)
 8007e58:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5c:	0a5b      	lsrs	r3, r3, #9
 8007e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e62:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e66:	4623      	mov	r3, r4
 8007e68:	1e5c      	subs	r4, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e72:	e052      	b.n	8007f1a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e78:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0f0      	beq.n	8007e66 <SDMMC_GetCmdResp6+0x22>
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1eb      	bne.n	8007e66 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	f003 0304 	and.w	r3, r3, #4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	e03a      	b.n	8007f1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e02f      	b.n	8007f1a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fbae 	bl	800761c <SDIO_GetCommandResponse>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d001      	beq.n	8007ece <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e025      	b.n	8007f1a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	22c5      	movs	r2, #197	; 0xc5
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7ff fbad 	bl	8007636 <SDIO_GetResponse>
 8007edc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	0c1b      	lsrs	r3, r3, #16
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e011      	b.n	8007f1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f04:	e009      	b.n	8007f1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f14:	e001      	b.n	8007f1a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd90      	pop	{r4, r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000128 	.word	0x20000128
 8007f28:	10624dd3 	.word	0x10624dd3

08007f2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007f2c:	b490      	push	{r4, r7}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f34:	4b21      	ldr	r3, [pc, #132]	; (8007fbc <SDMMC_GetCmdResp7+0x90>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <SDMMC_GetCmdResp7+0x94>)
 8007f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3e:	0a5b      	lsrs	r3, r3, #9
 8007f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007f48:	4623      	mov	r3, r4
 8007f4a:	1e5c      	subs	r4, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f54:	e02c      	b.n	8007fb0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0f0      	beq.n	8007f48 <SDMMC_GetCmdResp7+0x1c>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1eb      	bne.n	8007f48 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d004      	beq.n	8007f86 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2204      	movs	r2, #4
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f82:	2304      	movs	r3, #4
 8007f84:	e014      	b.n	8007fb0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d004      	beq.n	8007f9c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e009      	b.n	8007fb0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2240      	movs	r2, #64	; 0x40
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007fae:	2300      	movs	r3, #0
  
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc90      	pop	{r4, r7}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	20000128 	.word	0x20000128
 8007fc0:	10624dd3 	.word	0x10624dd3

08007fc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	f107 001c 	add.w	r0, r7, #28
 8007fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d122      	bne.n	8008022 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008006:	2b01      	cmp	r3, #1
 8008008:	d105      	bne.n	8008016 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fab4 	bl	8009584 <USB_CoreReset>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]
 8008020:	e01a      	b.n	8008058 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 faa8 	bl	8009584 <USB_CoreReset>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	639a      	str	r2, [r3, #56]	; 0x38
 800804a:	e005      	b.n	8008058 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	2b01      	cmp	r3, #1
 800805c:	d10b      	bne.n	8008076 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f043 0206 	orr.w	r2, r3, #6
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f043 0220 	orr.w	r2, r3, #32
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008076:	7bfb      	ldrb	r3, [r7, #15]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008082:	b004      	add	sp, #16
 8008084:	4770      	bx	lr
	...

08008088 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d165      	bne.n	8008168 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4a41      	ldr	r2, [pc, #260]	; (80081a4 <USB_SetTurnaroundTime+0x11c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d906      	bls.n	80080b2 <USB_SetTurnaroundTime+0x2a>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4a40      	ldr	r2, [pc, #256]	; (80081a8 <USB_SetTurnaroundTime+0x120>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d802      	bhi.n	80080b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80080ac:	230f      	movs	r3, #15
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e062      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	4a3c      	ldr	r2, [pc, #240]	; (80081a8 <USB_SetTurnaroundTime+0x120>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d906      	bls.n	80080c8 <USB_SetTurnaroundTime+0x40>
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4a3b      	ldr	r2, [pc, #236]	; (80081ac <USB_SetTurnaroundTime+0x124>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d802      	bhi.n	80080c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80080c2:	230e      	movs	r3, #14
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	e057      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	4a38      	ldr	r2, [pc, #224]	; (80081ac <USB_SetTurnaroundTime+0x124>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d906      	bls.n	80080de <USB_SetTurnaroundTime+0x56>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4a37      	ldr	r2, [pc, #220]	; (80081b0 <USB_SetTurnaroundTime+0x128>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d802      	bhi.n	80080de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080d8:	230d      	movs	r3, #13
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	e04c      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	4a33      	ldr	r2, [pc, #204]	; (80081b0 <USB_SetTurnaroundTime+0x128>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d906      	bls.n	80080f4 <USB_SetTurnaroundTime+0x6c>
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	4a32      	ldr	r2, [pc, #200]	; (80081b4 <USB_SetTurnaroundTime+0x12c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d802      	bhi.n	80080f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080ee:	230c      	movs	r3, #12
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	e041      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4a2f      	ldr	r2, [pc, #188]	; (80081b4 <USB_SetTurnaroundTime+0x12c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d906      	bls.n	800810a <USB_SetTurnaroundTime+0x82>
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4a2e      	ldr	r2, [pc, #184]	; (80081b8 <USB_SetTurnaroundTime+0x130>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d802      	bhi.n	800810a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008104:	230b      	movs	r3, #11
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e036      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	4a2a      	ldr	r2, [pc, #168]	; (80081b8 <USB_SetTurnaroundTime+0x130>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d906      	bls.n	8008120 <USB_SetTurnaroundTime+0x98>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4a29      	ldr	r2, [pc, #164]	; (80081bc <USB_SetTurnaroundTime+0x134>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d802      	bhi.n	8008120 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800811a:	230a      	movs	r3, #10
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	e02b      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4a26      	ldr	r2, [pc, #152]	; (80081bc <USB_SetTurnaroundTime+0x134>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d906      	bls.n	8008136 <USB_SetTurnaroundTime+0xae>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	4a25      	ldr	r2, [pc, #148]	; (80081c0 <USB_SetTurnaroundTime+0x138>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d802      	bhi.n	8008136 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008130:	2309      	movs	r3, #9
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e020      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	4a21      	ldr	r2, [pc, #132]	; (80081c0 <USB_SetTurnaroundTime+0x138>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d906      	bls.n	800814c <USB_SetTurnaroundTime+0xc4>
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	4a20      	ldr	r2, [pc, #128]	; (80081c4 <USB_SetTurnaroundTime+0x13c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d802      	bhi.n	800814c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008146:	2308      	movs	r3, #8
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e015      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4a1d      	ldr	r2, [pc, #116]	; (80081c4 <USB_SetTurnaroundTime+0x13c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d906      	bls.n	8008162 <USB_SetTurnaroundTime+0xda>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4a1c      	ldr	r2, [pc, #112]	; (80081c8 <USB_SetTurnaroundTime+0x140>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d802      	bhi.n	8008162 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800815c:	2307      	movs	r3, #7
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	e00a      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008162:	2306      	movs	r3, #6
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e007      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800816e:	2309      	movs	r3, #9
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	e001      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008174:	2309      	movs	r3, #9
 8008176:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	029b      	lsls	r3, r3, #10
 800818c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008190:	431a      	orrs	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	00d8acbf 	.word	0x00d8acbf
 80081a8:	00e4e1bf 	.word	0x00e4e1bf
 80081ac:	00f423ff 	.word	0x00f423ff
 80081b0:	0106737f 	.word	0x0106737f
 80081b4:	011a499f 	.word	0x011a499f
 80081b8:	01312cff 	.word	0x01312cff
 80081bc:	014ca43f 	.word	0x014ca43f
 80081c0:	016e35ff 	.word	0x016e35ff
 80081c4:	01a6ab1f 	.word	0x01a6ab1f
 80081c8:	01e847ff 	.word	0x01e847ff

080081cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f043 0201 	orr.w	r2, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d106      	bne.n	800823c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	e00b      	b.n	8008254 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60da      	str	r2, [r3, #12]
 800824e:	e001      	b.n	8008254 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e003      	b.n	800825c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008254:	2032      	movs	r0, #50	; 0x32
 8008256:	f7f8 fe7f 	bl	8000f58 <HAL_Delay>

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008264:	b084      	sub	sp, #16
 8008266:	b580      	push	{r7, lr}
 8008268:	b086      	sub	sp, #24
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800827e:	2300      	movs	r3, #0
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	e009      	b.n	8008298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	3340      	adds	r3, #64	; 0x40
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	2200      	movs	r2, #0
 8008290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	3301      	adds	r3, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b0e      	cmp	r3, #14
 800829c:	d9f2      	bls.n	8008284 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800829e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d11c      	bne.n	80082de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082b2:	f043 0302 	orr.w	r3, r3, #2
 80082b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	639a      	str	r2, [r3, #56]	; 0x38
 80082dc:	e00b      	b.n	80082f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082fc:	461a      	mov	r2, r3
 80082fe:	2300      	movs	r3, #0
 8008300:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008308:	4619      	mov	r1, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008310:	461a      	mov	r2, r3
 8008312:	680b      	ldr	r3, [r1, #0]
 8008314:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	2b01      	cmp	r3, #1
 800831a:	d10c      	bne.n	8008336 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d104      	bne.n	800832c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008322:	2100      	movs	r1, #0
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f949 	bl	80085bc <USB_SetDevSpeed>
 800832a:	e008      	b.n	800833e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800832c:	2101      	movs	r1, #1
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f944 	bl	80085bc <USB_SetDevSpeed>
 8008334:	e003      	b.n	800833e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008336:	2103      	movs	r1, #3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f93f 	bl	80085bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800833e:	2110      	movs	r1, #16
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f8f3 	bl	800852c <USB_FlushTxFifo>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f911 	bl	8008578 <USB_FlushRxFifo>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008366:	461a      	mov	r2, r3
 8008368:	2300      	movs	r3, #0
 800836a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008372:	461a      	mov	r2, r3
 8008374:	2300      	movs	r3, #0
 8008376:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837e:	461a      	mov	r2, r3
 8008380:	2300      	movs	r3, #0
 8008382:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008384:	2300      	movs	r3, #0
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	e043      	b.n	8008412 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800839c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083a0:	d118      	bne.n	80083d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b4:	461a      	mov	r2, r3
 80083b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	e013      	b.n	80083e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ca:	461a      	mov	r2, r3
 80083cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	e008      	b.n	80083e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e0:	461a      	mov	r2, r3
 80083e2:	2300      	movs	r3, #0
 80083e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f2:	461a      	mov	r2, r3
 80083f4:	2300      	movs	r3, #0
 80083f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	461a      	mov	r2, r3
 8008406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800840a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	3301      	adds	r3, #1
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	429a      	cmp	r2, r3
 8008418:	d3b7      	bcc.n	800838a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800841a:	2300      	movs	r3, #0
 800841c:	613b      	str	r3, [r7, #16]
 800841e:	e043      	b.n	80084a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008436:	d118      	bne.n	800846a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844a:	461a      	mov	r2, r3
 800844c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e013      	b.n	800847c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008460:	461a      	mov	r2, r3
 8008462:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	e008      	b.n	800847c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008476:	461a      	mov	r2, r3
 8008478:	2300      	movs	r3, #0
 800847a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008488:	461a      	mov	r2, r3
 800848a:	2300      	movs	r3, #0
 800848c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849a:	461a      	mov	r2, r3
 800849c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	3301      	adds	r3, #1
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d3b7      	bcc.n	8008420 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80084d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d105      	bne.n	80084e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f043 0210 	orr.w	r2, r3, #16
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699a      	ldr	r2, [r3, #24]
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <USB_DevInit+0x2c4>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f043 0208 	orr.w	r2, r3, #8
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008504:	2b01      	cmp	r3, #1
 8008506:	d107      	bne.n	8008518 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008510:	f043 0304 	orr.w	r3, r3, #4
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008518:	7dfb      	ldrb	r3, [r7, #23]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008524:	b004      	add	sp, #16
 8008526:	4770      	bx	lr
 8008528:	803c3800 	.word	0x803c3800

0800852c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	019b      	lsls	r3, r3, #6
 800853e:	f043 0220 	orr.w	r2, r3, #32
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3301      	adds	r3, #1
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4a09      	ldr	r2, [pc, #36]	; (8008574 <USB_FlushTxFifo+0x48>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d901      	bls.n	8008558 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e006      	b.n	8008566 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b20      	cmp	r3, #32
 8008562:	d0f0      	beq.n	8008546 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	00030d40 	.word	0x00030d40

08008578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2210      	movs	r2, #16
 8008588:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3301      	adds	r3, #1
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a09      	ldr	r2, [pc, #36]	; (80085b8 <USB_FlushRxFifo+0x40>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d901      	bls.n	800859c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e006      	b.n	80085aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	f003 0310 	and.w	r3, r3, #16
 80085a4:	2b10      	cmp	r3, #16
 80085a6:	d0f0      	beq.n	800858a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	00030d40 	.word	0x00030d40

080085bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085dc:	4313      	orrs	r3, r2
 80085de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b087      	sub	sp, #28
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f003 0306 	and.w	r3, r3, #6
 8008606:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800860e:	2300      	movs	r3, #0
 8008610:	75fb      	strb	r3, [r7, #23]
 8008612:	e00a      	b.n	800862a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b02      	cmp	r3, #2
 8008618:	d002      	beq.n	8008620 <USB_GetDevSpeed+0x32>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b06      	cmp	r3, #6
 800861e:	d102      	bne.n	8008626 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008620:	2302      	movs	r3, #2
 8008622:	75fb      	strb	r3, [r7, #23]
 8008624:	e001      	b.n	800862a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008626:	230f      	movs	r3, #15
 8008628:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
}
 800862c:	4618      	mov	r0, r3
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d13a      	bne.n	80086ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	2101      	movs	r1, #1
 8008666:	fa01 f303 	lsl.w	r3, r1, r3
 800866a:	b29b      	uxth	r3, r3
 800866c:	68f9      	ldr	r1, [r7, #12]
 800866e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008672:	4313      	orrs	r3, r2
 8008674:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d155      	bne.n	8008738 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	78db      	ldrb	r3, [r3, #3]
 80086a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	059b      	lsls	r3, r3, #22
 80086ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086b0:	4313      	orrs	r3, r2
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	0151      	lsls	r1, r2, #5
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	440a      	add	r2, r1
 80086ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	e036      	b.n	8008738 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d0:	69da      	ldr	r2, [r3, #28]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	f003 030f 	and.w	r3, r3, #15
 80086da:	2101      	movs	r1, #1
 80086dc:	fa01 f303 	lsl.w	r3, r1, r3
 80086e0:	041b      	lsls	r3, r3, #16
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e8:	4313      	orrs	r3, r2
 80086ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d11a      	bne.n	8008738 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	78db      	ldrb	r3, [r3, #3]
 800871c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800871e:	430b      	orrs	r3, r1
 8008720:	4313      	orrs	r3, r2
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	440a      	add	r2, r1
 800872a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800872e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008736:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d161      	bne.n	8008828 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800877a:	d11f      	bne.n	80087bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800879a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	2101      	movs	r1, #1
 80087ce:	fa01 f303 	lsl.w	r3, r1, r3
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	43db      	mvns	r3, r3
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087dc:	4013      	ands	r3, r2
 80087de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e6:	69da      	ldr	r2, [r3, #28]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	2101      	movs	r1, #1
 80087f2:	fa01 f303 	lsl.w	r3, r1, r3
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	43db      	mvns	r3, r3
 80087fa:	68f9      	ldr	r1, [r7, #12]
 80087fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008800:	4013      	ands	r3, r2
 8008802:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	0159      	lsls	r1, r3, #5
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	440b      	add	r3, r1
 800881a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881e:	4619      	mov	r1, r3
 8008820:	4b35      	ldr	r3, [pc, #212]	; (80088f8 <USB_DeactivateEndpoint+0x1b0>)
 8008822:	4013      	ands	r3, r2
 8008824:	600b      	str	r3, [r1, #0]
 8008826:	e060      	b.n	80088ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800883a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800883e:	d11f      	bne.n	8008880 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	440a      	add	r2, r1
 8008856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800885a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800885e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	440a      	add	r2, r1
 8008876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800887a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800887e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	f003 030f 	and.w	r3, r3, #15
 8008890:	2101      	movs	r1, #1
 8008892:	fa01 f303 	lsl.w	r3, r1, r3
 8008896:	041b      	lsls	r3, r3, #16
 8008898:	43db      	mvns	r3, r3
 800889a:	68f9      	ldr	r1, [r7, #12]
 800889c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088a0:	4013      	ands	r3, r2
 80088a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088aa:	69da      	ldr	r2, [r3, #28]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	f003 030f 	and.w	r3, r3, #15
 80088b4:	2101      	movs	r1, #1
 80088b6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	43db      	mvns	r3, r3
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088c4:	4013      	ands	r3, r2
 80088c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	0159      	lsls	r1, r3, #5
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	440b      	add	r3, r1
 80088de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e2:	4619      	mov	r1, r3
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <USB_DeactivateEndpoint+0x1b4>)
 80088e6:	4013      	ands	r3, r2
 80088e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	ec337800 	.word	0xec337800
 80088fc:	eff37800 	.word	0xeff37800

08008900 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	4613      	mov	r3, r2
 800890c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	2b01      	cmp	r3, #1
 800891e:	f040 815c 	bne.w	8008bda <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d132      	bne.n	8008990 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	440a      	add	r2, r1
 8008940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800894c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800896c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	440a      	add	r2, r1
 8008984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008988:	0cdb      	lsrs	r3, r3, #19
 800898a:	04db      	lsls	r3, r3, #19
 800898c:	6113      	str	r3, [r2, #16]
 800898e:	e074      	b.n	8008a7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	0151      	lsls	r1, r2, #5
 80089a2:	69fa      	ldr	r2, [r7, #28]
 80089a4:	440a      	add	r2, r1
 80089a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089aa:	0cdb      	lsrs	r3, r3, #19
 80089ac:	04db      	lsls	r3, r3, #19
 80089ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e0:	691a      	ldr	r2, [r3, #16]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6959      	ldr	r1, [r3, #20]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	440b      	add	r3, r1
 80089ec:	1e59      	subs	r1, r3, #1
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80089f6:	04d9      	lsls	r1, r3, #19
 80089f8:	4b9d      	ldr	r3, [pc, #628]	; (8008c70 <USB_EPStartXfer+0x370>)
 80089fa:	400b      	ands	r3, r1
 80089fc:	69b9      	ldr	r1, [r7, #24]
 80089fe:	0148      	lsls	r0, r1, #5
 8008a00:	69f9      	ldr	r1, [r7, #28]
 8008a02:	4401      	add	r1, r0
 8008a04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a18:	691a      	ldr	r2, [r3, #16]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a22:	69b9      	ldr	r1, [r7, #24]
 8008a24:	0148      	lsls	r0, r1, #5
 8008a26:	69f9      	ldr	r1, [r7, #28]
 8008a28:	4401      	add	r1, r0
 8008a2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	78db      	ldrb	r3, [r3, #3]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d11f      	bne.n	8008a7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d14b      	bne.n	8008b18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a94:	461a      	mov	r2, r3
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	78db      	ldrb	r3, [r3, #3]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d128      	bne.n	8008af6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d110      	bne.n	8008ad6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	0151      	lsls	r1, r2, #5
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	440a      	add	r2, r1
 8008aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	e00f      	b.n	8008af6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	0151      	lsls	r1, r2, #5
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	440a      	add	r2, r1
 8008aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	0151      	lsls	r1, r2, #5
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	440a      	add	r2, r1
 8008b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e12f      	b.n	8008d78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	78db      	ldrb	r3, [r3, #3]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d015      	beq.n	8008b6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8117 	beq.w	8008d78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	f003 030f 	and.w	r3, r3, #15
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b60:	69f9      	ldr	r1, [r7, #28]
 8008b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b66:	4313      	orrs	r3, r2
 8008b68:	634b      	str	r3, [r1, #52]	; 0x34
 8008b6a:	e105      	b.n	8008d78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d110      	bne.n	8008b9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	e00f      	b.n	8008bbe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	0151      	lsls	r1, r2, #5
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	440a      	add	r2, r1
 8008bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bbc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	68d9      	ldr	r1, [r3, #12]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	781a      	ldrb	r2, [r3, #0]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	b298      	uxth	r0, r3
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 fa2b 	bl	800902e <USB_WritePacket>
 8008bd8:	e0ce      	b.n	8008d78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	0151      	lsls	r1, r2, #5
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	440a      	add	r2, r1
 8008bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf4:	0cdb      	lsrs	r3, r3, #19
 8008bf6:	04db      	lsls	r3, r3, #19
 8008bf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	015a      	lsls	r2, r3, #5
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	0151      	lsls	r1, r2, #5
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	440a      	add	r2, r1
 8008c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d126      	bne.n	8008c74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c32:	691a      	ldr	r2, [r3, #16]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c3c:	69b9      	ldr	r1, [r7, #24]
 8008c3e:	0148      	lsls	r0, r1, #5
 8008c40:	69f9      	ldr	r1, [r7, #28]
 8008c42:	4401      	add	r1, r0
 8008c44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	0151      	lsls	r1, r2, #5
 8008c5e:	69fa      	ldr	r2, [r7, #28]
 8008c60:	440a      	add	r2, r1
 8008c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c6a:	6113      	str	r3, [r2, #16]
 8008c6c:	e036      	b.n	8008cdc <USB_EPStartXfer+0x3dc>
 8008c6e:	bf00      	nop
 8008c70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	695a      	ldr	r2, [r3, #20]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	1e5a      	subs	r2, r3, #1
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c96:	691a      	ldr	r2, [r3, #16]
 8008c98:	8afb      	ldrh	r3, [r7, #22]
 8008c9a:	04d9      	lsls	r1, r3, #19
 8008c9c:	4b39      	ldr	r3, [pc, #228]	; (8008d84 <USB_EPStartXfer+0x484>)
 8008c9e:	400b      	ands	r3, r1
 8008ca0:	69b9      	ldr	r1, [r7, #24]
 8008ca2:	0148      	lsls	r0, r1, #5
 8008ca4:	69f9      	ldr	r1, [r7, #28]
 8008ca6:	4401      	add	r1, r0
 8008ca8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cac:	4313      	orrs	r3, r2
 8008cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbc:	691a      	ldr	r2, [r3, #16]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	8af9      	ldrh	r1, [r7, #22]
 8008cc4:	fb01 f303 	mul.w	r3, r1, r3
 8008cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ccc:	69b9      	ldr	r1, [r7, #24]
 8008cce:	0148      	lsls	r0, r1, #5
 8008cd0:	69f9      	ldr	r1, [r7, #28]
 8008cd2:	4401      	add	r1, r0
 8008cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d10d      	bne.n	8008cfe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d009      	beq.n	8008cfe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	68d9      	ldr	r1, [r3, #12]
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfa:	460a      	mov	r2, r1
 8008cfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	78db      	ldrb	r3, [r3, #3]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d128      	bne.n	8008d58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d110      	bne.n	8008d38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	0151      	lsls	r1, r2, #5
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	440a      	add	r2, r1
 8008d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	e00f      	b.n	8008d58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	0151      	lsls	r1, r2, #5
 8008d4a:	69fa      	ldr	r2, [r7, #28]
 8008d4c:	440a      	add	r2, r1
 8008d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	0151      	lsls	r1, r2, #5
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	440a      	add	r2, r1
 8008d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3720      	adds	r7, #32
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	1ff80000 	.word	0x1ff80000

08008d88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4613      	mov	r3, r2
 8008d94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	f040 80cd 	bne.w	8008f44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d132      	bne.n	8008e18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	0151      	lsls	r1, r2, #5
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	440a      	add	r2, r1
 8008dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008dd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	0151      	lsls	r1, r2, #5
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	0151      	lsls	r1, r2, #5
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	440a      	add	r2, r1
 8008e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e10:	0cdb      	lsrs	r3, r3, #19
 8008e12:	04db      	lsls	r3, r3, #19
 8008e14:	6113      	str	r3, [r2, #16]
 8008e16:	e04e      	b.n	8008eb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	0151      	lsls	r1, r2, #5
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	440a      	add	r2, r1
 8008e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e32:	0cdb      	lsrs	r3, r3, #19
 8008e34:	04db      	lsls	r3, r3, #19
 8008e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	0151      	lsls	r1, r2, #5
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	695a      	ldr	r2, [r3, #20]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d903      	bls.n	8008e70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	689a      	ldr	r2, [r3, #8]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	0151      	lsls	r1, r2, #5
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	440a      	add	r2, r1
 8008e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	691a      	ldr	r2, [r3, #16]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ea6:	6939      	ldr	r1, [r7, #16]
 8008ea8:	0148      	lsls	r0, r1, #5
 8008eaa:	6979      	ldr	r1, [r7, #20]
 8008eac:	4401      	add	r1, r0
 8008eae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d11e      	bne.n	8008efa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d009      	beq.n	8008ed8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	0151      	lsls	r1, r2, #5
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	440a      	add	r2, r1
 8008eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	e092      	b.n	8009020 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	0151      	lsls	r1, r2, #5
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	440a      	add	r2, r1
 8008f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d07e      	beq.n	8009020 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	f003 030f 	and.w	r3, r3, #15
 8008f32:	2101      	movs	r1, #1
 8008f34:	fa01 f303 	lsl.w	r3, r1, r3
 8008f38:	6979      	ldr	r1, [r7, #20]
 8008f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	634b      	str	r3, [r1, #52]	; 0x34
 8008f42:	e06d      	b.n	8009020 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	0151      	lsls	r1, r2, #5
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	440a      	add	r2, r1
 8008f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f5e:	0cdb      	lsrs	r3, r3, #19
 8008f60:	04db      	lsls	r3, r3, #19
 8008f62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	0151      	lsls	r1, r2, #5
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	440a      	add	r2, r1
 8008f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	0151      	lsls	r1, r2, #5
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	440a      	add	r2, r1
 8008fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc4:	691a      	ldr	r2, [r3, #16]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fce:	6939      	ldr	r1, [r7, #16]
 8008fd0:	0148      	lsls	r0, r1, #5
 8008fd2:	6979      	ldr	r1, [r7, #20]
 8008fd4:	4401      	add	r1, r0
 8008fd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d10d      	bne.n	8009000 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d009      	beq.n	8009000 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	68d9      	ldr	r1, [r3, #12]
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffc:	460a      	mov	r2, r1
 8008ffe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	0151      	lsls	r1, r2, #5
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	440a      	add	r2, r1
 8009016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800901a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800901e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800902e:	b480      	push	{r7}
 8009030:	b089      	sub	sp, #36	; 0x24
 8009032:	af00      	add	r7, sp, #0
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	4611      	mov	r1, r2
 800903a:	461a      	mov	r2, r3
 800903c:	460b      	mov	r3, r1
 800903e:	71fb      	strb	r3, [r7, #7]
 8009040:	4613      	mov	r3, r2
 8009042:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800904c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009050:	2b00      	cmp	r3, #0
 8009052:	d11a      	bne.n	800908a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009054:	88bb      	ldrh	r3, [r7, #4]
 8009056:	3303      	adds	r3, #3
 8009058:	089b      	lsrs	r3, r3, #2
 800905a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800905c:	2300      	movs	r3, #0
 800905e:	61bb      	str	r3, [r7, #24]
 8009060:	e00f      	b.n	8009082 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	031a      	lsls	r2, r3, #12
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	4413      	add	r3, r2
 800906a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906e:	461a      	mov	r2, r3
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	3304      	adds	r3, #4
 800907a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	3301      	adds	r3, #1
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	429a      	cmp	r2, r3
 8009088:	d3eb      	bcc.n	8009062 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3724      	adds	r7, #36	; 0x24
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009098:	b480      	push	{r7}
 800909a:	b089      	sub	sp, #36	; 0x24
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	4613      	mov	r3, r2
 80090a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	3303      	adds	r3, #3
 80090b2:	089b      	lsrs	r3, r3, #2
 80090b4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80090b6:	2300      	movs	r3, #0
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	e00b      	b.n	80090d4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	3304      	adds	r3, #4
 80090cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	3301      	adds	r3, #1
 80090d2:	61bb      	str	r3, [r7, #24]
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d3ef      	bcc.n	80090bc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80090dc:	69fb      	ldr	r3, [r7, #28]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3724      	adds	r7, #36	; 0x24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b085      	sub	sp, #20
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	785b      	ldrb	r3, [r3, #1]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d12c      	bne.n	8009160 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	db12      	blt.n	800913e <USB_EPSetStall+0x54>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00f      	beq.n	800913e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	440a      	add	r2, r1
 8009134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009138:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800913c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	0151      	lsls	r1, r2, #5
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	440a      	add	r2, r1
 8009154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	e02b      	b.n	80091b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	db12      	blt.n	8009198 <USB_EPSetStall+0xae>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00f      	beq.n	8009198 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009192:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009196:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	0151      	lsls	r1, r2, #5
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	440a      	add	r2, r1
 80091ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b085      	sub	sp, #20
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d128      	bne.n	8009234 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	0151      	lsls	r1, r2, #5
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	440a      	add	r2, r1
 80091f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009200:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	78db      	ldrb	r3, [r3, #3]
 8009206:	2b03      	cmp	r3, #3
 8009208:	d003      	beq.n	8009212 <USB_EPClearStall+0x4c>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	78db      	ldrb	r3, [r3, #3]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d138      	bne.n	8009284 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	440a      	add	r2, r1
 8009228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800922c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	e027      	b.n	8009284 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	0151      	lsls	r1, r2, #5
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	440a      	add	r2, r1
 800924a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800924e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009252:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	78db      	ldrb	r3, [r3, #3]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d003      	beq.n	8009264 <USB_EPClearStall+0x9e>
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	78db      	ldrb	r3, [r3, #3]
 8009260:	2b02      	cmp	r3, #2
 8009262:	d10f      	bne.n	8009284 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	0151      	lsls	r1, r2, #5
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	440a      	add	r2, r1
 800927a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009282:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	460b      	mov	r3, r1
 800929c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80092b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092cc:	4313      	orrs	r3, r2
 80092ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092f8:	f023 0302 	bic.w	r3, r3, #2
 80092fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80092fe:	2003      	movs	r0, #3
 8009300:	f7f7 fe2a 	bl	8000f58 <HAL_Delay>

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009328:	f043 0302 	orr.w	r3, r3, #2
 800932c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800932e:	2003      	movs	r0, #3
 8009330:	f7f7 fe12 	bl	8000f58 <HAL_Delay>

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800933e:	b480      	push	{r7}
 8009340:	b085      	sub	sp, #20
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	4013      	ands	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009356:	68fb      	ldr	r3, [r7, #12]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	4013      	ands	r3, r2
 8009386:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	0c1b      	lsrs	r3, r3, #16
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	4013      	ands	r3, r2
 80093ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	b29b      	uxth	r3, r3
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	4013      	ands	r3, r2
 80093f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093fa:	68bb      	ldr	r3, [r7, #8]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800942c:	78fb      	ldrb	r3, [r7, #3]
 800942e:	f003 030f 	and.w	r3, r3, #15
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	fa22 f303 	lsr.w	r3, r2, r3
 8009438:	01db      	lsls	r3, r3, #7
 800943a:	b2db      	uxtb	r3, r3
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4313      	orrs	r3, r2
 8009440:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009442:	78fb      	ldrb	r3, [r7, #3]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	4013      	ands	r3, r2
 8009454:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009456:	68bb      	ldr	r3, [r7, #8]
}
 8009458:	4618      	mov	r0, r3
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	f003 0301 	and.w	r3, r3, #1
}
 8009474:	4618      	mov	r0, r3
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800949a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800949e:	f023 0307 	bic.w	r3, r3, #7
 80094a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
	...

080094c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	460b      	mov	r3, r1
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	333c      	adds	r3, #60	; 0x3c
 80094de:	3304      	adds	r3, #4
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	4a26      	ldr	r2, [pc, #152]	; (8009580 <USB_EP0_OutStart+0xb8>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d90a      	bls.n	8009502 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094fc:	d101      	bne.n	8009502 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e037      	b.n	8009572 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009508:	461a      	mov	r2, r3
 800950a:	2300      	movs	r3, #0
 800950c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800951c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009530:	f043 0318 	orr.w	r3, r3, #24
 8009534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009544:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009548:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800954a:	7afb      	ldrb	r3, [r7, #11]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d10f      	bne.n	8009570 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009556:	461a      	mov	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800956a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800956e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	4f54300a 	.word	0x4f54300a

08009584 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3301      	adds	r3, #1
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4a13      	ldr	r2, [pc, #76]	; (80095e8 <USB_CoreReset+0x64>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d901      	bls.n	80095a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e01b      	b.n	80095da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	daf2      	bge.n	8009590 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f043 0201 	orr.w	r2, r3, #1
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3301      	adds	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4a09      	ldr	r2, [pc, #36]	; (80095e8 <USB_CoreReset+0x64>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d901      	bls.n	80095cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e006      	b.n	80095da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d0f0      	beq.n	80095ba <USB_CoreReset+0x36>

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	00030d40 	.word	0x00030d40

080095ec <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
	USBD_HID_Init(pdev, cfgidx);
 80095f8:	78fb      	ldrb	r3, [r7, #3]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fbab 	bl	8009d58 <USBD_HID_Init>
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8009602:	f643 4050 	movw	r0, #15440	; 0x3c50
 8009606:	f003 fe3d 	bl	800d284 <malloc>
 800960a:	4603      	mov	r3, r0
 800960c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d105      	bne.n	8009620 <USBD_AUDIO_Init+0x34>
  {
    pdev->pClassData = NULL;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800961c:	2302      	movs	r3, #2
 800961e:	e04b      	b.n	80096b8 <USBD_AUDIO_Init+0xcc>
  }

  pdev->pClassData = (void *)haudio;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	7c1b      	ldrb	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d104      	bne.n	800963a <USBD_AUDIO_Init+0x4e>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8009638:	e003      	b.n	8009642 <USBD_AUDIO_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8009642:	23c0      	movs	r3, #192	; 0xc0
 8009644:	2201      	movs	r2, #1
 8009646:	2101      	movs	r1, #1
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f003 fa86 	bl	800cb5a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009662:	3304      	adds	r3, #4
 8009664:	2203      	movs	r2, #3
 8009666:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800966e:	3308      	adds	r3, #8
 8009670:	2200      	movs	r2, #0
 8009672:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800967a:	3306      	adds	r3, #6
 800967c:	2200      	movs	r2, #0
 800967e:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009686:	3305      	adds	r3, #5
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2200      	movs	r2, #0
 8009696:	2146      	movs	r1, #70	; 0x46
 8009698:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800969c:	4798      	blx	r3
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USBD_AUDIO_Init+0xbc>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e007      	b.n	80096b8 <USBD_AUDIO_Init+0xcc>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	1d1a      	adds	r2, r3, #4
 80096ac:	23c0      	movs	r3, #192	; 0xc0
 80096ae:	2101      	movs	r1, #1
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f003 fb41 	bl	800cd38 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_HID_DeInit(pdev, cfgidx);
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fb75 	bl	8009dc0 <USBD_HID_DeInit>
  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 80096d6:	2101      	movs	r1, #1
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f003 fa64 	bl	800cba6 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00f      	beq.n	8009718 <USBD_AUDIO_DeInit+0x58>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2000      	movs	r0, #0
 8009702:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800970a:	4618      	mov	r0, r3
 800970c:	f003 fdc2 	bl	800d294 <free>
    pdev->pClassData = NULL;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
	if (req->wIndex==2)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	889b      	ldrh	r3, [r3, #4]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d105      	bne.n	8009742 <USBD_AUDIO_Setup+0x1e>
	{
		return USBD_HID_Setup(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fb65 	bl	8009e08 <USBD_HID_Setup>
 800973e:	4603      	mov	r3, r0
 8009740:	e0b6      	b.n	80098b0 <USBD_AUDIO_Setup+0x18c>
	}
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009750:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01a      	beq.n	8009794 <USBD_AUDIO_Setup+0x70>
 800975e:	2b20      	cmp	r3, #32
 8009760:	f040 809e 	bne.w	80098a0 <USBD_AUDIO_Setup+0x17c>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	785b      	ldrb	r3, [r3, #1]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d006      	beq.n	800977a <USBD_AUDIO_Setup+0x56>
 800976c:	2b81      	cmp	r3, #129	; 0x81
 800976e:	d109      	bne.n	8009784 <USBD_AUDIO_Setup+0x60>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fa76 	bl	8009c64 <AUDIO_REQ_GetCurrent>
      break;
 8009778:	e00b      	b.n	8009792 <USBD_AUDIO_Setup+0x6e>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fa91 	bl	8009ca4 <AUDIO_REQ_SetCurrent>
      break;
 8009782:	e006      	b.n	8009792 <USBD_AUDIO_Setup+0x6e>

    default:
      USBD_CtlError(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f001 fc86 	bl	800b098 <USBD_CtlError>
      ret = USBD_FAIL;
 800978c:	2303      	movs	r3, #3
 800978e:	75fb      	strb	r3, [r7, #23]
      break;
 8009790:	bf00      	nop
    }
    break;
 8009792:	e08c      	b.n	80098ae <USBD_AUDIO_Setup+0x18a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	785b      	ldrb	r3, [r3, #1]
 8009798:	2b0b      	cmp	r3, #11
 800979a:	d876      	bhi.n	800988a <USBD_AUDIO_Setup+0x166>
 800979c:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <USBD_AUDIO_Setup+0x80>)
 800979e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a2:	bf00      	nop
 80097a4:	080097d5 	.word	0x080097d5
 80097a8:	08009899 	.word	0x08009899
 80097ac:	0800988b 	.word	0x0800988b
 80097b0:	0800988b 	.word	0x0800988b
 80097b4:	0800988b 	.word	0x0800988b
 80097b8:	0800988b 	.word	0x0800988b
 80097bc:	080097fd 	.word	0x080097fd
 80097c0:	0800988b 	.word	0x0800988b
 80097c4:	0800988b 	.word	0x0800988b
 80097c8:	0800988b 	.word	0x0800988b
 80097cc:	08009827 	.word	0x08009827
 80097d0:	0800984d 	.word	0x0800984d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d107      	bne.n	80097ee <USBD_AUDIO_Setup+0xca>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097de:	f107 0308 	add.w	r3, r7, #8
 80097e2:	2202      	movs	r2, #2
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 fcc7 	bl	800b17a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80097ec:	e057      	b.n	800989e <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 fc51 	bl	800b098 <USBD_CtlError>
        ret = USBD_FAIL;
 80097f6:	2303      	movs	r3, #3
 80097f8:	75fb      	strb	r3, [r7, #23]
      break;
 80097fa:	e050      	b.n	800989e <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	885b      	ldrh	r3, [r3, #2]
 8009800:	0a1b      	lsrs	r3, r3, #8
 8009802:	b29b      	uxth	r3, r3
 8009804:	2b21      	cmp	r3, #33	; 0x21
 8009806:	d149      	bne.n	800989c <USBD_AUDIO_Setup+0x178>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 8009808:	4b2b      	ldr	r3, [pc, #172]	; (80098b8 <USBD_AUDIO_Setup+0x194>)
 800980a:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	88db      	ldrh	r3, [r3, #6]
 8009810:	2b09      	cmp	r3, #9
 8009812:	bf28      	it	cs
 8009814:	2309      	movcs	r3, #9
 8009816:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009818:	897b      	ldrh	r3, [r7, #10]
 800981a:	461a      	mov	r2, r3
 800981c:	68f9      	ldr	r1, [r7, #12]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 fcab 	bl	800b17a <USBD_CtlSendData>
      }
      break;
 8009824:	e03a      	b.n	800989c <USBD_AUDIO_Setup+0x178>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982c:	2b03      	cmp	r3, #3
 800982e:	d106      	bne.n	800983e <USBD_AUDIO_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	2201      	movs	r2, #1
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 fc9f 	bl	800b17a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800983c:	e02f      	b.n	800989e <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 fc29 	bl	800b098 <USBD_CtlError>
        ret = USBD_FAIL;
 8009846:	2303      	movs	r3, #3
 8009848:	75fb      	strb	r3, [r7, #23]
      break;
 800984a:	e028      	b.n	800989e <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009852:	2b03      	cmp	r3, #3
 8009854:	d112      	bne.n	800987c <USBD_AUDIO_Setup+0x158>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	885b      	ldrh	r3, [r3, #2]
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b03      	cmp	r3, #3
 800985e:	d806      	bhi.n	800986e <USBD_AUDIO_Setup+0x14a>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	885b      	ldrh	r3, [r3, #2]
 8009864:	b2db      	uxtb	r3, r3
 8009866:	461a      	mov	r2, r3
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800986c:	e017      	b.n	800989e <USBD_AUDIO_Setup+0x17a>
          USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 fc11 	bl	800b098 <USBD_CtlError>
          ret = USBD_FAIL;
 8009876:	2303      	movs	r3, #3
 8009878:	75fb      	strb	r3, [r7, #23]
      break;
 800987a:	e010      	b.n	800989e <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 fc0a 	bl	800b098 <USBD_CtlError>
        ret = USBD_FAIL;
 8009884:	2303      	movs	r3, #3
 8009886:	75fb      	strb	r3, [r7, #23]
      break;
 8009888:	e009      	b.n	800989e <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f001 fc03 	bl	800b098 <USBD_CtlError>
      ret = USBD_FAIL;
 8009892:	2303      	movs	r3, #3
 8009894:	75fb      	strb	r3, [r7, #23]
      break;
 8009896:	e002      	b.n	800989e <USBD_AUDIO_Setup+0x17a>
      break;
 8009898:	bf00      	nop
 800989a:	e008      	b.n	80098ae <USBD_AUDIO_Setup+0x18a>
      break;
 800989c:	bf00      	nop
    }
    break;
 800989e:	e006      	b.n	80098ae <USBD_AUDIO_Setup+0x18a>
  default:
    USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f001 fbf8 	bl	800b098 <USBD_CtlError>
    ret = USBD_FAIL;
 80098a8:	2303      	movs	r3, #3
 80098aa:	75fb      	strb	r3, [r7, #23]
    break;
 80098ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20000052 	.word	0x20000052

080098bc <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2297      	movs	r2, #151	; 0x97
 80098c8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 80098ca:	4b03      	ldr	r3, [pc, #12]	; (80098d8 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	20000040 	.word	0x20000040

080098dc <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
//  UNUSED(pdev);
//  UNUSED(epnum);
	USBD_HID_DataIn(pdev, epnum);
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fbab 	bl	800a048 <USBD_HID_DataIn>
  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800990a:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009912:	330a      	adds	r3, #10
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d11d      	bne.n	8009956 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8009920:	330c      	adds	r3, #12
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b02      	cmp	r3, #2
 8009926:	d116      	bne.n	8009956 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800992e:	691a      	ldr	r2, [r3, #16]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009936:	330b      	adds	r3, #11
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	4618      	mov	r0, r3
 800993c:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009944:	330a      	adds	r3, #10
 8009946:	2200      	movs	r2, #0
 8009948:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8009950:	330b      	adds	r3, #11
 8009952:	2200      	movs	r2, #0
 8009954:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <USBD_AUDIO_Sync>:
  * @param  pdev: device instance
  * @retval status
  */
extern int packetReceived;
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 8009998:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800999c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80b1 	beq.w	8009b0c <USBD_AUDIO_Sync+0x180>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099b0:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80099b8:	3304      	adds	r3, #4
 80099ba:	78fa      	ldrb	r2, [r7, #3]
 80099bc:	701a      	strb	r2, [r3, #0]

  if (haudio->rd_enable == 1U)
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80099c4:	3305      	adds	r3, #5
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d11b      	bne.n	8009a04 <USBD_AUDIO_Sync+0x78>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80099d2:	3306      	adds	r3, #6
 80099d4:	881a      	ldrh	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	4413      	add	r3, r2
 80099dc:	b29a      	uxth	r2, r3
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80099e4:	3306      	adds	r3, #6
 80099e6:	801a      	strh	r2, [r3, #0]

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80099ee:	3306      	adds	r3, #6
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80099f6:	d105      	bne.n	8009a04 <USBD_AUDIO_Sync+0x78>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80099fe:	3306      	adds	r3, #6
 8009a00:	2200      	movs	r2, #0
 8009a02:	801a      	strh	r2, [r3, #0]
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a0a:	3306      	adds	r3, #6
 8009a0c:	881a      	ldrh	r2, [r3, #0]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a14:	3308      	adds	r3, #8
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d93c      	bls.n	8009a96 <USBD_AUDIO_Sync+0x10a>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a22:	3306      	adds	r3, #6
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a2e:	3308      	adds	r3, #8
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	2bbf      	cmp	r3, #191	; 0xbf
 8009a36:	dc03      	bgt.n	8009a40 <USBD_AUDIO_Sync+0xb4>
    {
      BufferSize += 4U;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	e04e      	b.n	8009ade <USBD_AUDIO_Sync+0x152>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a46:	3306      	adds	r3, #6
 8009a48:	881b      	ldrh	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a52:	3308      	adds	r3, #8
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8009a5c:	dd3f      	ble.n	8009ade <USBD_AUDIO_Sync+0x152>
      {
       // BufferSize -= 4U;
    	  haudio->alt_setting = 0U;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
    	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	2203      	movs	r2, #3
 8009a6e:	701a      	strb	r2, [r3, #0]
    	  haudio->wr_ptr = 0U;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a76:	3308      	adds	r3, #8
 8009a78:	2200      	movs	r2, #0
 8009a7a:	801a      	strh	r2, [r3, #0]
    	  haudio->rd_ptr = 0U;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a82:	3306      	adds	r3, #6
 8009a84:	2200      	movs	r2, #0
 8009a86:	801a      	strh	r2, [r3, #0]
    	  haudio->rd_enable = 0U;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a8e:	3305      	adds	r3, #5
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]
 8009a94:	e023      	b.n	8009ade <USBD_AUDIO_Sync+0x152>
            }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009a9c:	3308      	adds	r3, #8
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009aa8:	3306      	adds	r3, #6
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2bbf      	cmp	r3, #191	; 0xbf
 8009ab0:	dc03      	bgt.n	8009aba <USBD_AUDIO_Sync+0x12e>
    {
       BufferSize -= 4U;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3b04      	subs	r3, #4
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	e011      	b.n	8009ade <USBD_AUDIO_Sync+0x152>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009acc:	3306      	adds	r3, #6
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8009ad6:	dd02      	ble.n	8009ade <USBD_AUDIO_Sync+0x152>
      {
         BufferSize += 4U;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3304      	adds	r3, #4
 8009adc:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d110      	bne.n	8009b0e <USBD_AUDIO_Sync+0x182>
  {
	  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	1d10      	adds	r0, r2, #4
 8009af8:	2202      	movs	r2, #2
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	4798      	blx	r3
                                                         BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009b04:	3304      	adds	r3, #4
 8009b06:	2200      	movs	r2, #0
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	e000      	b.n	8009b0e <USBD_AUDIO_Sync+0x182>
    return;
 8009b0c:	bf00      	nop
  }
}
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	460b      	mov	r3, r1
 8009b38:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b48:	b590      	push	{r4, r7, lr}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b5a:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d179      	bne.n	8009c56 <USBD_AUDIO_DataOut+0x10e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8009b62:	78fb      	ldrb	r3, [r7, #3]
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f003 f907 	bl	800cd7a <USBD_LL_GetRxDataSize>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b76:	695c      	ldr	r4, [r3, #20]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009b7e:	3308      	adds	r3, #8
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	4413      	add	r3, r2
 8009b88:	3304      	adds	r3, #4
 8009b8a:	8979      	ldrh	r1, [r7, #10]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	4618      	mov	r0, r3
 8009b90:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009b98:	3308      	adds	r3, #8
 8009b9a:	881a      	ldrh	r2, [r3, #0]
 8009b9c:	897b      	ldrh	r3, [r7, #10]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009ba8:	3308      	adds	r3, #8
 8009baa:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8009bba:	d129      	bne.n	8009c10 <USBD_AUDIO_DataOut+0xc8>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	801a      	strh	r2, [r3, #0]
      if (playing==0)
 8009bc8:	4b25      	ldr	r3, [pc, #148]	; (8009c60 <USBD_AUDIO_DataOut+0x118>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d108      	bne.n	8009be2 <USBD_AUDIO_DataOut+0x9a>
    	  {
    	  playing=1;
 8009bd0:	4b23      	ldr	r3, [pc, #140]	; (8009c60 <USBD_AUDIO_DataOut+0x118>)
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]
    	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009bdc:	3304      	adds	r3, #4
 8009bde:	2203      	movs	r2, #3
 8009be0:	701a      	strb	r2, [r3, #0]
    	  }
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009be8:	3304      	adds	r3, #4
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d10f      	bne.n	8009c10 <USBD_AUDIO_DataOut+0xc8>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	1d10      	adds	r0, r2, #4
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8009c02:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009c16:	3305      	adds	r3, #5
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10d      	bne.n	8009c3a <USBD_AUDIO_DataOut+0xf2>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009c24:	3308      	adds	r3, #8
 8009c26:	881b      	ldrh	r3, [r3, #0]
 8009c28:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8009c2c:	d105      	bne.n	8009c3a <USBD_AUDIO_DataOut+0xf2>
      {
        haudio->rd_enable = 1U;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009c34:	3305      	adds	r3, #5
 8009c36:	2201      	movs	r2, #1
 8009c38:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009c40:	3308      	adds	r3, #8
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4413      	add	r3, r2
 8009c4a:	1d1a      	adds	r2, r3, #4
 8009c4c:	23c0      	movs	r3, #192	; 0xc0
 8009c4e:	2101      	movs	r1, #1
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f003 f871 	bl	800cd38 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd90      	pop	{r4, r7, pc}
 8009c60:	20000240 	.word	0x20000240

08009c64 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c74:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009c7c:	330b      	adds	r3, #11
 8009c7e:	2240      	movs	r2, #64	; 0x40
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f003 fb0e 	bl	800d2a4 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009c8e:	330b      	adds	r3, #11
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	88d2      	ldrh	r2, [r2, #6]
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 fa6f 	bl	800b17a <USBD_CtlSendData>
}
 8009c9c:	bf00      	nop
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cb4:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	88db      	ldrh	r3, [r3, #6]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d021      	beq.n	8009d02 <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009cc4:	330b      	adds	r3, #11
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	88d2      	ldrh	r2, [r2, #6]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 fa80 	bl	800b1d2 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009cd8:	330a      	adds	r3, #10
 8009cda:	2201      	movs	r2, #1
 8009cdc:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	88db      	ldrh	r3, [r3, #6]
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8009cea:	330b      	adds	r3, #11
 8009cec:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	889b      	ldrh	r3, [r3, #4]
 8009cf2:	0a1b      	lsrs	r3, r3, #8
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8009cfe:	330c      	adds	r3, #12
 8009d00:	701a      	strb	r2, [r3, #0]
  }
}
 8009d02:	bf00      	nop
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	220a      	movs	r2, #10
 8009d18:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8009d1a:	4b03      	ldr	r3, [pc, #12]	; (8009d28 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	200000d8 	.word	0x200000d8

08009d2c <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e004      	b.n	8009d4a <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
	...

08009d58 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009d64:	2010      	movs	r0, #16
 8009d66:	f003 fa8d 	bl	800d284 <malloc>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d104      	bne.n	8009d7e <USBD_HID_Init+0x26>
  {
    classData = NULL;
 8009d74:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <USBD_HID_Init+0x64>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
    return (uint8_t)USBD_EMEM;
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	e01a      	b.n	8009db4 <USBD_HID_Init+0x5c>
  }

  classData = (void *)hhid;
 8009d7e:	4a0f      	ldr	r2, [pc, #60]	; (8009dbc <USBD_HID_Init+0x64>)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6013      	str	r3, [r2, #0]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7c1b      	ldrb	r3, [r3, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d103      	bne.n	8009d94 <USBD_HID_Init+0x3c>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2207      	movs	r2, #7
 8009d90:	875a      	strh	r2, [r3, #58]	; 0x3a
 8009d92:	e002      	b.n	8009d9a <USBD_HID_Init+0x42>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	220a      	movs	r2, #10
 8009d98:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009d9a:	2304      	movs	r3, #4
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	2181      	movs	r1, #129	; 0x81
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f002 feda 	bl	800cb5a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20000810 	.word	0x20000810

08009dc0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8009dcc:	2181      	movs	r1, #129	; 0x81
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f002 fee9 	bl	800cba6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (classData != NULL)
 8009de0:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <USBD_HID_DeInit+0x44>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d007      	beq.n	8009df8 <USBD_HID_DeInit+0x38>
  {
    (void)USBD_free(classData);
 8009de8:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <USBD_HID_DeInit+0x44>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f003 fa51 	bl	800d294 <free>
    classData = NULL;
 8009df2:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <USBD_HID_DeInit+0x44>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
  }

  return (uint8_t)USBD_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20000810 	.word	0x20000810

08009e08 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)classData;
 8009e12:	4b78      	ldr	r3, [pc, #480]	; (8009ff4 <USBD_HID_Setup+0x1ec>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d046      	beq.n	8009eba <USBD_HID_Setup+0xb2>
 8009e2c:	2b20      	cmp	r3, #32
 8009e2e:	f040 80d5 	bne.w	8009fdc <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	785b      	ldrb	r3, [r3, #1]
 8009e36:	3b02      	subs	r3, #2
 8009e38:	2b09      	cmp	r3, #9
 8009e3a:	d836      	bhi.n	8009eaa <USBD_HID_Setup+0xa2>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <USBD_HID_Setup+0x3c>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e9b 	.word	0x08009e9b
 8009e48:	08009e7b 	.word	0x08009e7b
 8009e4c:	08009eab 	.word	0x08009eab
 8009e50:	08009eab 	.word	0x08009eab
 8009e54:	08009eab 	.word	0x08009eab
 8009e58:	08009eab 	.word	0x08009eab
 8009e5c:	08009eab 	.word	0x08009eab
 8009e60:	08009eab 	.word	0x08009eab
 8009e64:	08009e89 	.word	0x08009e89
 8009e68:	08009e6d 	.word	0x08009e6d
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	885b      	ldrh	r3, [r3, #2]
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	461a      	mov	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	601a      	str	r2, [r3, #0]
      break;
 8009e78:	e01e      	b.n	8009eb8 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 f97a 	bl	800b17a <USBD_CtlSendData>
      break;
 8009e86:	e017      	b.n	8009eb8 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	885b      	ldrh	r3, [r3, #2]
 8009e8c:	0a1b      	lsrs	r3, r3, #8
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	605a      	str	r2, [r3, #4]
      break;
 8009e98:	e00e      	b.n	8009eb8 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 f969 	bl	800b17a <USBD_CtlSendData>
      break;
 8009ea8:	e006      	b.n	8009eb8 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 f8f3 	bl	800b098 <USBD_CtlError>
      ret = USBD_FAIL;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb6:	bf00      	nop
    }
    break;
 8009eb8:	e097      	b.n	8009fea <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	785b      	ldrb	r3, [r3, #1]
 8009ebe:	2b0b      	cmp	r3, #11
 8009ec0:	f200 8083 	bhi.w	8009fca <USBD_HID_Setup+0x1c2>
 8009ec4:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <USBD_HID_Setup+0xc4>)
 8009ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eca:	bf00      	nop
 8009ecc:	08009efd 	.word	0x08009efd
 8009ed0:	08009fd9 	.word	0x08009fd9
 8009ed4:	08009fcb 	.word	0x08009fcb
 8009ed8:	08009fcb 	.word	0x08009fcb
 8009edc:	08009fcb 	.word	0x08009fcb
 8009ee0:	08009fcb 	.word	0x08009fcb
 8009ee4:	08009f25 	.word	0x08009f25
 8009ee8:	08009fcb 	.word	0x08009fcb
 8009eec:	08009fcb 	.word	0x08009fcb
 8009ef0:	08009fcb 	.word	0x08009fcb
 8009ef4:	08009f7d 	.word	0x08009f7d
 8009ef8:	08009fa5 	.word	0x08009fa5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	d107      	bne.n	8009f16 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f06:	f107 030a 	add.w	r3, r7, #10
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 f933 	bl	800b17a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009f14:	e061      	b.n	8009fda <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f001 f8bd 	bl	800b098 <USBD_CtlError>
        ret = USBD_FAIL;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	75fb      	strb	r3, [r7, #23]
      break;
 8009f22:	e05a      	b.n	8009fda <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	885b      	ldrh	r3, [r3, #2]
 8009f28:	0a1b      	lsrs	r3, r3, #8
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b22      	cmp	r3, #34	; 0x22
 8009f2e:	d108      	bne.n	8009f42 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	88db      	ldrh	r3, [r3, #6]
 8009f34:	2b2c      	cmp	r3, #44	; 0x2c
 8009f36:	bf28      	it	cs
 8009f38:	232c      	movcs	r3, #44	; 0x2c
 8009f3a:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8009f3c:	4b2e      	ldr	r3, [pc, #184]	; (8009ff8 <USBD_HID_Setup+0x1f0>)
 8009f3e:	613b      	str	r3, [r7, #16]
 8009f40:	e015      	b.n	8009f6e <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	885b      	ldrh	r3, [r3, #2]
 8009f46:	0a1b      	lsrs	r3, r3, #8
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	2b21      	cmp	r3, #33	; 0x21
 8009f4c:	d108      	bne.n	8009f60 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8009f4e:	4b2b      	ldr	r3, [pc, #172]	; (8009ffc <USBD_HID_Setup+0x1f4>)
 8009f50:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	88db      	ldrh	r3, [r3, #6]
 8009f56:	2b09      	cmp	r3, #9
 8009f58:	bf28      	it	cs
 8009f5a:	2309      	movcs	r3, #9
 8009f5c:	82bb      	strh	r3, [r7, #20]
 8009f5e:	e006      	b.n	8009f6e <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f001 f898 	bl	800b098 <USBD_CtlError>
        ret = USBD_FAIL;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	75fb      	strb	r3, [r7, #23]
        break;
 8009f6c:	e035      	b.n	8009fda <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f6e:	8abb      	ldrh	r3, [r7, #20]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6939      	ldr	r1, [r7, #16]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 f900 	bl	800b17a <USBD_CtlSendData>
      break;
 8009f7a:	e02e      	b.n	8009fda <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d107      	bne.n	8009f96 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3308      	adds	r3, #8
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 f8f3 	bl	800b17a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009f94:	e021      	b.n	8009fda <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 f87d 	bl	800b098 <USBD_CtlError>
        ret = USBD_FAIL;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa2:	e01a      	b.n	8009fda <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d106      	bne.n	8009fbc <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	885b      	ldrh	r3, [r3, #2]
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009fba:	e00e      	b.n	8009fda <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 f86a 	bl	800b098 <USBD_CtlError>
        ret = USBD_FAIL;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc8:	e007      	b.n	8009fda <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 f863 	bl	800b098 <USBD_CtlError>
      ret = USBD_FAIL;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd6:	e000      	b.n	8009fda <USBD_HID_Setup+0x1d2>
      break;
 8009fd8:	bf00      	nop
    }
    break;
 8009fda:	e006      	b.n	8009fea <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 f85a 	bl	800b098 <USBD_CtlError>
    ret = USBD_FAIL;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	75fb      	strb	r3, [r7, #23]
    break;
 8009fe8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	20000810 	.word	0x20000810
 8009ff8:	200000f0 	.word	0x200000f0
 8009ffc:	200000e4 	.word	0x200000e4

0800a000 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	4613      	mov	r3, r2
 800a00c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)classData;
 800a00e:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <USBD_HID_SendReport+0x44>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d10c      	bne.n	800a038 <USBD_HID_SendReport+0x38>
  {
    if (hhid->state == HID_IDLE)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	7b1b      	ldrb	r3, [r3, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d108      	bne.n	800a038 <USBD_HID_SendReport+0x38>
    {
      hhid->state = HID_BUSY;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2201      	movs	r2, #1
 800a02a:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800a02c:	88fb      	ldrh	r3, [r7, #6]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	2181      	movs	r1, #129	; 0x81
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f002 fe5f 	bl	800ccf6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	20000810 	.word	0x20000810

0800a048 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)classData)->state = HID_IDLE;
 800a054:	4b05      	ldr	r3, [pc, #20]	; (800a06c <USBD_HID_DataIn+0x24>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2200      	movs	r2, #0
 800a05a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	20000810 	.word	0x20000810

0800a070 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	4613      	mov	r3, r2
 800a07c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a084:	2303      	movs	r3, #3
 800a086:	e025      	b.n	800a0d4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	79fa      	ldrb	r2, [r7, #7]
 800a0c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f002 fcdf 	bl	800ca8c <USBD_LL_Init>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e010      	b.n	800a116 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a104:	f107 020e 	add.w	r2, r7, #14
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
 800a10c:	4602      	mov	r2, r0
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f002 fcfc 	bl	800cb24 <USBD_LL_Start>
 800a12c:	4603      	mov	r3, r0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a136:	b480      	push	{r7}
 800a138:	b083      	sub	sp, #12
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a158:	2303      	movs	r3, #3
 800a15a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a162:	2b00      	cmp	r3, #0
 800a164:	d009      	beq.n	800a17a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	78fa      	ldrb	r2, [r7, #3]
 800a170:	4611      	mov	r1, r2
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3
 800a176:	4603      	mov	r3, r0
 800a178:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a196:	2b00      	cmp	r3, #0
 800a198:	d007      	beq.n	800a1aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	78fa      	ldrb	r2, [r7, #3]
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	4798      	blx	r3
  }

  return USBD_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 ff2c 	bl	800b024 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a1da:	461a      	mov	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1e8:	f003 031f 	and.w	r3, r3, #31
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d00e      	beq.n	800a20e <USBD_LL_SetupStage+0x5a>
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d302      	bcc.n	800a1fa <USBD_LL_SetupStage+0x46>
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d014      	beq.n	800a222 <USBD_LL_SetupStage+0x6e>
 800a1f8:	e01d      	b.n	800a236 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a200:	4619      	mov	r1, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fa18 	bl	800a638 <USBD_StdDevReq>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]
      break;
 800a20c:	e020      	b.n	800a250 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fa7c 	bl	800a714 <USBD_StdItfReq>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]
      break;
 800a220:	e016      	b.n	800a250 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fab8 	bl	800a7a0 <USBD_StdEPReq>
 800a230:	4603      	mov	r3, r0
 800a232:	73fb      	strb	r3, [r7, #15]
      break;
 800a234:	e00c      	b.n	800a250 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a23c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a240:	b2db      	uxtb	r3, r3
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f002 fccd 	bl	800cbe4 <USBD_LL_StallEP>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73fb      	strb	r3, [r7, #15]
      break;
 800a24e:	bf00      	nop
  }

  return ret;
 800a250:	7bfb      	ldrb	r3, [r7, #15]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b086      	sub	sp, #24
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	460b      	mov	r3, r1
 800a264:	607a      	str	r2, [r7, #4]
 800a266:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a268:	7afb      	ldrb	r3, [r7, #11]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d137      	bne.n	800a2de <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a274:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	d14a      	bne.n	800a316 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	689a      	ldr	r2, [r3, #8]
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d913      	bls.n	800a2b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	689a      	ldr	r2, [r3, #8]
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	1ad2      	subs	r2, r2, r3
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	68da      	ldr	r2, [r3, #12]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	bf28      	it	cs
 800a2a6:	4613      	movcs	r3, r2
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 ffad 	bl	800b20c <USBD_CtlContinueRx>
 800a2b2:	e030      	b.n	800a316 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00a      	beq.n	800a2d6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d105      	bne.n	800a2d6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 ffa9 	bl	800b22e <USBD_CtlSendStatus>
 800a2dc:	e01b      	b.n	800a316 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d013      	beq.n	800a312 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d10e      	bne.n	800a312 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	7afa      	ldrb	r2, [r7, #11]
 800a2fe:	4611      	mov	r1, r2
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	4798      	blx	r3
 800a304:	4603      	mov	r3, r0
 800a306:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a30e:	7dfb      	ldrb	r3, [r7, #23]
 800a310:	e002      	b.n	800a318 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a312:	2303      	movs	r3, #3
 800a314:	e000      	b.n	800a318 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	460b      	mov	r3, r1
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d16a      	bne.n	800a40a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3314      	adds	r3, #20
 800a338:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a340:	2b02      	cmp	r3, #2
 800a342:	d155      	bne.n	800a3f0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d914      	bls.n	800a37a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	1ad2      	subs	r2, r2, r3
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	461a      	mov	r2, r3
 800a364:	6879      	ldr	r1, [r7, #4]
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f000 ff22 	bl	800b1b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a36c:	2300      	movs	r3, #0
 800a36e:	2200      	movs	r2, #0
 800a370:	2100      	movs	r1, #0
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f002 fce0 	bl	800cd38 <USBD_LL_PrepareReceive>
 800a378:	e03a      	b.n	800a3f0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	68da      	ldr	r2, [r3, #12]
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	429a      	cmp	r2, r3
 800a384:	d11c      	bne.n	800a3c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a38e:	429a      	cmp	r2, r3
 800a390:	d316      	bcc.n	800a3c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d20f      	bcs.n	800a3c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 ff03 	bl	800b1b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f002 fcbd 	bl	800cd38 <USBD_LL_PrepareReceive>
 800a3be:	e017      	b.n	800a3f0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00a      	beq.n	800a3e2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d105      	bne.n	800a3e2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3e2:	2180      	movs	r1, #128	; 0x80
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f002 fbfd 	bl	800cbe4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 ff32 	bl	800b254 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d123      	bne.n	800a442 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f7ff fe9b 	bl	800a136 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a408:	e01b      	b.n	800a442 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d013      	beq.n	800a43e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d10e      	bne.n	800a43e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	7afa      	ldrb	r2, [r7, #11]
 800a42a:	4611      	mov	r1, r2
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	4798      	blx	r3
 800a430:	4603      	mov	r3, r0
 800a432:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a434:	7dfb      	ldrb	r3, [r7, #23]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	e002      	b.n	800a444 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a43e:	2303      	movs	r3, #3
 800a440:	e000      	b.n	800a444 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3718      	adds	r7, #24
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d009      	beq.n	800a490 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6852      	ldr	r2, [r2, #4]
 800a488:	b2d2      	uxtb	r2, r2
 800a48a:	4611      	mov	r1, r2
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a490:	2340      	movs	r3, #64	; 0x40
 800a492:	2200      	movs	r2, #0
 800a494:	2100      	movs	r1, #0
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f002 fb5f 	bl	800cb5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2240      	movs	r2, #64	; 0x40
 800a4a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4ac:	2340      	movs	r3, #64	; 0x40
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2180      	movs	r1, #128	; 0x80
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f002 fb51 	bl	800cb5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2240      	movs	r2, #64	; 0x40
 800a4c2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	78fa      	ldrb	r2, [r7, #3]
 800a4de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b083      	sub	sp, #12
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2204      	movs	r2, #4
 800a506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a526:	2b04      	cmp	r3, #4
 800a528:	d105      	bne.n	800a536 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a552:	2b03      	cmp	r3, #3
 800a554:	d10b      	bne.n	800a56e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d005      	beq.n	800a56e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d009      	beq.n	800a5f0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	6852      	ldr	r2, [r2, #4]
 800a5e8:	b2d2      	uxtb	r2, r2
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
  }

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b087      	sub	sp, #28
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	3301      	adds	r3, #1
 800a610:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a618:	8a3b      	ldrh	r3, [r7, #16]
 800a61a:	021b      	lsls	r3, r3, #8
 800a61c:	b21a      	sxth	r2, r3
 800a61e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a622:	4313      	orrs	r3, r2
 800a624:	b21b      	sxth	r3, r3
 800a626:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a628:	89fb      	ldrh	r3, [r7, #14]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
	...

0800a638 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a64e:	2b20      	cmp	r3, #32
 800a650:	d004      	beq.n	800a65c <USBD_StdDevReq+0x24>
 800a652:	2b40      	cmp	r3, #64	; 0x40
 800a654:	d002      	beq.n	800a65c <USBD_StdDevReq+0x24>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <USBD_StdDevReq+0x38>
 800a65a:	e050      	b.n	800a6fe <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]
    break;
 800a66e:	e04b      	b.n	800a708 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	785b      	ldrb	r3, [r3, #1]
 800a674:	2b09      	cmp	r3, #9
 800a676:	d83c      	bhi.n	800a6f2 <USBD_StdDevReq+0xba>
 800a678:	a201      	add	r2, pc, #4	; (adr r2, 800a680 <USBD_StdDevReq+0x48>)
 800a67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67e:	bf00      	nop
 800a680:	0800a6d5 	.word	0x0800a6d5
 800a684:	0800a6e9 	.word	0x0800a6e9
 800a688:	0800a6f3 	.word	0x0800a6f3
 800a68c:	0800a6df 	.word	0x0800a6df
 800a690:	0800a6f3 	.word	0x0800a6f3
 800a694:	0800a6b3 	.word	0x0800a6b3
 800a698:	0800a6a9 	.word	0x0800a6a9
 800a69c:	0800a6f3 	.word	0x0800a6f3
 800a6a0:	0800a6cb 	.word	0x0800a6cb
 800a6a4:	0800a6bd 	.word	0x0800a6bd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f9ce 	bl	800aa4c <USBD_GetDescriptor>
      break;
 800a6b0:	e024      	b.n	800a6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fb33 	bl	800ad20 <USBD_SetAddress>
      break;
 800a6ba:	e01f      	b.n	800a6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fb70 	bl	800ada4 <USBD_SetConfig>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c8:	e018      	b.n	800a6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fc0d 	bl	800aeec <USBD_GetConfig>
      break;
 800a6d2:	e013      	b.n	800a6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fc3c 	bl	800af54 <USBD_GetStatus>
      break;
 800a6dc:	e00e      	b.n	800a6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fc6a 	bl	800afba <USBD_SetFeature>
      break;
 800a6e6:	e009      	b.n	800a6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fc79 	bl	800afe2 <USBD_ClrFeature>
      break;
 800a6f0:	e004      	b.n	800a6fc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fccf 	bl	800b098 <USBD_CtlError>
      break;
 800a6fa:	bf00      	nop
    }
    break;
 800a6fc:	e004      	b.n	800a708 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fcc9 	bl	800b098 <USBD_CtlError>
    break;
 800a706:	bf00      	nop
  }

  return ret;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop

0800a714 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	d003      	beq.n	800a736 <USBD_StdItfReq+0x22>
 800a72e:	2b40      	cmp	r3, #64	; 0x40
 800a730:	d001      	beq.n	800a736 <USBD_StdItfReq+0x22>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d12a      	bne.n	800a78c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a73c:	3b01      	subs	r3, #1
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d81d      	bhi.n	800a77e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	889b      	ldrh	r3, [r3, #4]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b03      	cmp	r3, #3
 800a74a:	d813      	bhi.n	800a774 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	4798      	blx	r3
 800a75a:	4603      	mov	r3, r0
 800a75c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	88db      	ldrh	r3, [r3, #6]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d110      	bne.n	800a788 <USBD_StdItfReq+0x74>
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10d      	bne.n	800a788 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fd5e 	bl	800b22e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a772:	e009      	b.n	800a788 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fc8e 	bl	800b098 <USBD_CtlError>
      break;
 800a77c:	e004      	b.n	800a788 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fc89 	bl	800b098 <USBD_CtlError>
      break;
 800a786:	e000      	b.n	800a78a <USBD_StdItfReq+0x76>
      break;
 800a788:	bf00      	nop
    }
    break;
 800a78a:	e004      	b.n	800a796 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fc82 	bl	800b098 <USBD_CtlError>
    break;
 800a794:	bf00      	nop
  }

  return ret;
 800a796:	7bfb      	ldrb	r3, [r7, #15]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	889b      	ldrh	r3, [r3, #4]
 800a7b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7bc:	2b20      	cmp	r3, #32
 800a7be:	d004      	beq.n	800a7ca <USBD_StdEPReq+0x2a>
 800a7c0:	2b40      	cmp	r3, #64	; 0x40
 800a7c2:	d002      	beq.n	800a7ca <USBD_StdEPReq+0x2a>
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00a      	beq.n	800a7de <USBD_StdEPReq+0x3e>
 800a7c8:	e135      	b.n	800aa36 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73fb      	strb	r3, [r7, #15]
    break;
 800a7dc:	e130      	b.n	800aa40 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	785b      	ldrb	r3, [r3, #1]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d03e      	beq.n	800a864 <USBD_StdEPReq+0xc4>
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d002      	beq.n	800a7f0 <USBD_StdEPReq+0x50>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d077      	beq.n	800a8de <USBD_StdEPReq+0x13e>
 800a7ee:	e11c      	b.n	800aa2a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d002      	beq.n	800a800 <USBD_StdEPReq+0x60>
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d015      	beq.n	800a82a <USBD_StdEPReq+0x8a>
 800a7fe:	e02b      	b.n	800a858 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a800:	7bbb      	ldrb	r3, [r7, #14]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00c      	beq.n	800a820 <USBD_StdEPReq+0x80>
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	2b80      	cmp	r3, #128	; 0x80
 800a80a:	d009      	beq.n	800a820 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f002 f9e7 	bl	800cbe4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a816:	2180      	movs	r1, #128	; 0x80
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f002 f9e3 	bl	800cbe4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a81e:	e020      	b.n	800a862 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fc38 	bl	800b098 <USBD_CtlError>
        break;
 800a828:	e01b      	b.n	800a862 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	885b      	ldrh	r3, [r3, #2]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10e      	bne.n	800a850 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00b      	beq.n	800a850 <USBD_StdEPReq+0xb0>
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	2b80      	cmp	r3, #128	; 0x80
 800a83c:	d008      	beq.n	800a850 <USBD_StdEPReq+0xb0>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	88db      	ldrh	r3, [r3, #6]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d104      	bne.n	800a850 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a846:	7bbb      	ldrb	r3, [r7, #14]
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f002 f9ca 	bl	800cbe4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fcec 	bl	800b22e <USBD_CtlSendStatus>

        break;
 800a856:	e004      	b.n	800a862 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fc1c 	bl	800b098 <USBD_CtlError>
        break;
 800a860:	bf00      	nop
      }
      break;
 800a862:	e0e7      	b.n	800aa34 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d002      	beq.n	800a874 <USBD_StdEPReq+0xd4>
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d015      	beq.n	800a89e <USBD_StdEPReq+0xfe>
 800a872:	e02d      	b.n	800a8d0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00c      	beq.n	800a894 <USBD_StdEPReq+0xf4>
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	2b80      	cmp	r3, #128	; 0x80
 800a87e:	d009      	beq.n	800a894 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f002 f9ad 	bl	800cbe4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a88a:	2180      	movs	r1, #128	; 0x80
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f002 f9a9 	bl	800cbe4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a892:	e023      	b.n	800a8dc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fbfe 	bl	800b098 <USBD_CtlError>
        break;
 800a89c:	e01e      	b.n	800a8dc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	885b      	ldrh	r3, [r3, #2]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d119      	bne.n	800a8da <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
 800a8a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f002 f9b4 	bl	800cc22 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fcb7 	bl	800b22e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	4798      	blx	r3
        }
        break;
 800a8ce:	e004      	b.n	800a8da <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fbe0 	bl	800b098 <USBD_CtlError>
        break;
 800a8d8:	e000      	b.n	800a8dc <USBD_StdEPReq+0x13c>
        break;
 800a8da:	bf00      	nop
      }
      break;
 800a8dc:	e0aa      	b.n	800aa34 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d002      	beq.n	800a8ee <USBD_StdEPReq+0x14e>
 800a8e8:	2b03      	cmp	r3, #3
 800a8ea:	d032      	beq.n	800a952 <USBD_StdEPReq+0x1b2>
 800a8ec:	e097      	b.n	800aa1e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d007      	beq.n	800a904 <USBD_StdEPReq+0x164>
 800a8f4:	7bbb      	ldrb	r3, [r7, #14]
 800a8f6:	2b80      	cmp	r3, #128	; 0x80
 800a8f8:	d004      	beq.n	800a904 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fbcb 	bl	800b098 <USBD_CtlError>
          break;
 800a902:	e091      	b.n	800aa28 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	da0b      	bge.n	800a924 <USBD_StdEPReq+0x184>
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	3310      	adds	r3, #16
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	4413      	add	r3, r2
 800a920:	3304      	adds	r3, #4
 800a922:	e00b      	b.n	800a93c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a924:	7bbb      	ldrb	r3, [r7, #14]
 800a926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a92a:	4613      	mov	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	4413      	add	r3, r2
 800a93a:	3304      	adds	r3, #4
 800a93c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2202      	movs	r2, #2
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fc15 	bl	800b17a <USBD_CtlSendData>
        break;
 800a950:	e06a      	b.n	800aa28 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a956:	2b00      	cmp	r3, #0
 800a958:	da11      	bge.n	800a97e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a95a:	7bbb      	ldrb	r3, [r7, #14]
 800a95c:	f003 020f 	and.w	r2, r3, #15
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	4613      	mov	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	440b      	add	r3, r1
 800a96c:	3324      	adds	r3, #36	; 0x24
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d117      	bne.n	800a9a4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fb8e 	bl	800b098 <USBD_CtlError>
            break;
 800a97c:	e054      	b.n	800aa28 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	f003 020f 	and.w	r2, r3, #15
 800a984:	6879      	ldr	r1, [r7, #4]
 800a986:	4613      	mov	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	440b      	add	r3, r1
 800a990:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a994:	881b      	ldrh	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d104      	bne.n	800a9a4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fb7b 	bl	800b098 <USBD_CtlError>
            break;
 800a9a2:	e041      	b.n	800aa28 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	da0b      	bge.n	800a9c4 <USBD_StdEPReq+0x224>
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	3310      	adds	r3, #16
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	4413      	add	r3, r2
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	e00b      	b.n	800a9dc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	4413      	add	r3, r2
 800a9da:	3304      	adds	r3, #4
 800a9dc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <USBD_StdEPReq+0x24a>
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	2b80      	cmp	r3, #128	; 0x80
 800a9e8:	d103      	bne.n	800a9f2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	e00e      	b.n	800aa10 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f002 f932 	bl	800cc60 <USBD_LL_IsStallEP>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2201      	movs	r2, #1
 800aa06:	601a      	str	r2, [r3, #0]
 800aa08:	e002      	b.n	800aa10 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	2202      	movs	r2, #2
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fbaf 	bl	800b17a <USBD_CtlSendData>
          break;
 800aa1c:	e004      	b.n	800aa28 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fb39 	bl	800b098 <USBD_CtlError>
        break;
 800aa26:	bf00      	nop
      }
      break;
 800aa28:	e004      	b.n	800aa34 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fb33 	bl	800b098 <USBD_CtlError>
      break;
 800aa32:	bf00      	nop
    }
    break;
 800aa34:	e004      	b.n	800aa40 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fb2d 	bl	800b098 <USBD_CtlError>
    break;
 800aa3e:	bf00      	nop
  }

  return ret;
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	885b      	ldrh	r3, [r3, #2]
 800aa66:	0a1b      	lsrs	r3, r3, #8
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	2b06      	cmp	r3, #6
 800aa6e:	f200 8128 	bhi.w	800acc2 <USBD_GetDescriptor+0x276>
 800aa72:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <USBD_GetDescriptor+0x2c>)
 800aa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa78:	0800aa95 	.word	0x0800aa95
 800aa7c:	0800aaad 	.word	0x0800aaad
 800aa80:	0800aaed 	.word	0x0800aaed
 800aa84:	0800acc3 	.word	0x0800acc3
 800aa88:	0800acc3 	.word	0x0800acc3
 800aa8c:	0800ac63 	.word	0x0800ac63
 800aa90:	0800ac8f 	.word	0x0800ac8f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	7c12      	ldrb	r2, [r2, #16]
 800aaa0:	f107 0108 	add.w	r1, r7, #8
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	4798      	blx	r3
 800aaa8:	60f8      	str	r0, [r7, #12]
    break;
 800aaaa:	e112      	b.n	800acd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	7c1b      	ldrb	r3, [r3, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10d      	bne.n	800aad0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aabc:	f107 0208 	add.w	r2, r7, #8
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	2202      	movs	r2, #2
 800aacc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800aace:	e100      	b.n	800acd2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	f107 0208 	add.w	r2, r7, #8
 800aadc:	4610      	mov	r0, r2
 800aade:	4798      	blx	r3
 800aae0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	3301      	adds	r3, #1
 800aae6:	2202      	movs	r2, #2
 800aae8:	701a      	strb	r2, [r3, #0]
    break;
 800aaea:	e0f2      	b.n	800acd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	885b      	ldrh	r3, [r3, #2]
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b05      	cmp	r3, #5
 800aaf4:	f200 80ac 	bhi.w	800ac50 <USBD_GetDescriptor+0x204>
 800aaf8:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <USBD_GetDescriptor+0xb4>)
 800aafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafe:	bf00      	nop
 800ab00:	0800ab19 	.word	0x0800ab19
 800ab04:	0800ab4d 	.word	0x0800ab4d
 800ab08:	0800ab81 	.word	0x0800ab81
 800ab0c:	0800abb5 	.word	0x0800abb5
 800ab10:	0800abe9 	.word	0x0800abe9
 800ab14:	0800ac1d 	.word	0x0800ac1d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	7c12      	ldrb	r2, [r2, #16]
 800ab30:	f107 0108 	add.w	r1, r7, #8
 800ab34:	4610      	mov	r0, r2
 800ab36:	4798      	blx	r3
 800ab38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab3a:	e091      	b.n	800ac60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 faaa 	bl	800b098 <USBD_CtlError>
        err++;
 800ab44:	7afb      	ldrb	r3, [r7, #11]
 800ab46:	3301      	adds	r3, #1
 800ab48:	72fb      	strb	r3, [r7, #11]
      break;
 800ab4a:	e089      	b.n	800ac60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00b      	beq.n	800ab70 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	7c12      	ldrb	r2, [r2, #16]
 800ab64:	f107 0108 	add.w	r1, r7, #8
 800ab68:	4610      	mov	r0, r2
 800ab6a:	4798      	blx	r3
 800ab6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab6e:	e077      	b.n	800ac60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fa90 	bl	800b098 <USBD_CtlError>
        err++;
 800ab78:	7afb      	ldrb	r3, [r7, #11]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	72fb      	strb	r3, [r7, #11]
      break;
 800ab7e:	e06f      	b.n	800ac60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	7c12      	ldrb	r2, [r2, #16]
 800ab98:	f107 0108 	add.w	r1, r7, #8
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
 800aba0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aba2:	e05d      	b.n	800ac60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fa76 	bl	800b098 <USBD_CtlError>
        err++;
 800abac:	7afb      	ldrb	r3, [r7, #11]
 800abae:	3301      	adds	r3, #1
 800abb0:	72fb      	strb	r3, [r7, #11]
      break;
 800abb2:	e055      	b.n	800ac60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00b      	beq.n	800abd8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	7c12      	ldrb	r2, [r2, #16]
 800abcc:	f107 0108 	add.w	r1, r7, #8
 800abd0:	4610      	mov	r0, r2
 800abd2:	4798      	blx	r3
 800abd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abd6:	e043      	b.n	800ac60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fa5c 	bl	800b098 <USBD_CtlError>
        err++;
 800abe0:	7afb      	ldrb	r3, [r7, #11]
 800abe2:	3301      	adds	r3, #1
 800abe4:	72fb      	strb	r3, [r7, #11]
      break;
 800abe6:	e03b      	b.n	800ac60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abee:	695b      	ldr	r3, [r3, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00b      	beq.n	800ac0c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	7c12      	ldrb	r2, [r2, #16]
 800ac00:	f107 0108 	add.w	r1, r7, #8
 800ac04:	4610      	mov	r0, r2
 800ac06:	4798      	blx	r3
 800ac08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac0a:	e029      	b.n	800ac60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fa42 	bl	800b098 <USBD_CtlError>
        err++;
 800ac14:	7afb      	ldrb	r3, [r7, #11]
 800ac16:	3301      	adds	r3, #1
 800ac18:	72fb      	strb	r3, [r7, #11]
      break;
 800ac1a:	e021      	b.n	800ac60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00b      	beq.n	800ac40 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	7c12      	ldrb	r2, [r2, #16]
 800ac34:	f107 0108 	add.w	r1, r7, #8
 800ac38:	4610      	mov	r0, r2
 800ac3a:	4798      	blx	r3
 800ac3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac3e:	e00f      	b.n	800ac60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fa28 	bl	800b098 <USBD_CtlError>
        err++;
 800ac48:	7afb      	ldrb	r3, [r7, #11]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	72fb      	strb	r3, [r7, #11]
      break;
 800ac4e:	e007      	b.n	800ac60 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fa20 	bl	800b098 <USBD_CtlError>
      err++;
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ac5e:	bf00      	nop
    }
    break;
 800ac60:	e037      	b.n	800acd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	7c1b      	ldrb	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d109      	bne.n	800ac7e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac72:	f107 0208 	add.w	r2, r7, #8
 800ac76:	4610      	mov	r0, r2
 800ac78:	4798      	blx	r3
 800ac7a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ac7c:	e029      	b.n	800acd2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fa09 	bl	800b098 <USBD_CtlError>
      err++;
 800ac86:	7afb      	ldrb	r3, [r7, #11]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	72fb      	strb	r3, [r7, #11]
    break;
 800ac8c:	e021      	b.n	800acd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	7c1b      	ldrb	r3, [r3, #16]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10d      	bne.n	800acb2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9e:	f107 0208 	add.w	r2, r7, #8
 800aca2:	4610      	mov	r0, r2
 800aca4:	4798      	blx	r3
 800aca6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3301      	adds	r3, #1
 800acac:	2207      	movs	r2, #7
 800acae:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800acb0:	e00f      	b.n	800acd2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f9ef 	bl	800b098 <USBD_CtlError>
      err++;
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	3301      	adds	r3, #1
 800acbe:	72fb      	strb	r3, [r7, #11]
    break;
 800acc0:	e007      	b.n	800acd2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f9e7 	bl	800b098 <USBD_CtlError>
    err++;
 800acca:	7afb      	ldrb	r3, [r7, #11]
 800accc:	3301      	adds	r3, #1
 800acce:	72fb      	strb	r3, [r7, #11]
    break;
 800acd0:	bf00      	nop
  }

  if (err != 0U)
 800acd2:	7afb      	ldrb	r3, [r7, #11]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d11e      	bne.n	800ad16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	88db      	ldrh	r3, [r3, #6]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d016      	beq.n	800ad0e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800ace0:	893b      	ldrh	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00e      	beq.n	800ad04 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	88da      	ldrh	r2, [r3, #6]
 800acea:	893b      	ldrh	r3, [r7, #8]
 800acec:	4293      	cmp	r3, r2
 800acee:	bf28      	it	cs
 800acf0:	4613      	movcs	r3, r2
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800acf6:	893b      	ldrh	r3, [r7, #8]
 800acf8:	461a      	mov	r2, r3
 800acfa:	68f9      	ldr	r1, [r7, #12]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fa3c 	bl	800b17a <USBD_CtlSendData>
 800ad02:	e009      	b.n	800ad18 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f9c6 	bl	800b098 <USBD_CtlError>
 800ad0c:	e004      	b.n	800ad18 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fa8d 	bl	800b22e <USBD_CtlSendStatus>
 800ad14:	e000      	b.n	800ad18 <USBD_GetDescriptor+0x2cc>
    return;
 800ad16:	bf00      	nop
    }
  }
}
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop

0800ad20 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	889b      	ldrh	r3, [r3, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d130      	bne.n	800ad94 <USBD_SetAddress+0x74>
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	88db      	ldrh	r3, [r3, #6]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d12c      	bne.n	800ad94 <USBD_SetAddress+0x74>
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	885b      	ldrh	r3, [r3, #2]
 800ad3e:	2b7f      	cmp	r3, #127	; 0x7f
 800ad40:	d828      	bhi.n	800ad94 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	885b      	ldrh	r3, [r3, #2]
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d104      	bne.n	800ad62 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f99c 	bl	800b098 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad60:	e01c      	b.n	800ad9c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	7bfa      	ldrb	r2, [r7, #15]
 800ad66:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f001 ffa2 	bl	800ccb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fa5a 	bl	800b22e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d004      	beq.n	800ad8a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2202      	movs	r2, #2
 800ad84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad88:	e008      	b.n	800ad9c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad92:	e003      	b.n	800ad9c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f97e 	bl	800b098 <USBD_CtlError>
  }
}
 800ad9c:	bf00      	nop
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	885b      	ldrh	r3, [r3, #2]
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	4b4b      	ldr	r3, [pc, #300]	; (800aee8 <USBD_SetConfig+0x144>)
 800adba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800adbc:	4b4a      	ldr	r3, [pc, #296]	; (800aee8 <USBD_SetConfig+0x144>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d905      	bls.n	800add0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f966 	bl	800b098 <USBD_CtlError>
    return USBD_FAIL;
 800adcc:	2303      	movs	r3, #3
 800adce:	e087      	b.n	800aee0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add6:	2b02      	cmp	r3, #2
 800add8:	d002      	beq.n	800ade0 <USBD_SetConfig+0x3c>
 800adda:	2b03      	cmp	r3, #3
 800addc:	d025      	beq.n	800ae2a <USBD_SetConfig+0x86>
 800adde:	e071      	b.n	800aec4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ade0:	4b41      	ldr	r3, [pc, #260]	; (800aee8 <USBD_SetConfig+0x144>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d01c      	beq.n	800ae22 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ade8:	4b3f      	ldr	r3, [pc, #252]	; (800aee8 <USBD_SetConfig+0x144>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	461a      	mov	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800adf2:	4b3d      	ldr	r3, [pc, #244]	; (800aee8 <USBD_SetConfig+0x144>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	4619      	mov	r1, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff f9a7 	bl	800a14c <USBD_SetClassConfig>
 800adfe:	4603      	mov	r3, r0
 800ae00:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f944 	bl	800b098 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ae10:	e065      	b.n	800aede <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa0b 	bl	800b22e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ae20:	e05d      	b.n	800aede <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa03 	bl	800b22e <USBD_CtlSendStatus>
    break;
 800ae28:	e059      	b.n	800aede <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ae2a:	4b2f      	ldr	r3, [pc, #188]	; (800aee8 <USBD_SetConfig+0x144>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d112      	bne.n	800ae58 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2202      	movs	r2, #2
 800ae36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ae3a:	4b2b      	ldr	r3, [pc, #172]	; (800aee8 <USBD_SetConfig+0x144>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae44:	4b28      	ldr	r3, [pc, #160]	; (800aee8 <USBD_SetConfig+0x144>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff f99a 	bl	800a184 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f9ec 	bl	800b22e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ae56:	e042      	b.n	800aede <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ae58:	4b23      	ldr	r3, [pc, #140]	; (800aee8 <USBD_SetConfig+0x144>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d02a      	beq.n	800aebc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff f988 	bl	800a184 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ae74:	4b1c      	ldr	r3, [pc, #112]	; (800aee8 <USBD_SetConfig+0x144>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae7e:	4b1a      	ldr	r3, [pc, #104]	; (800aee8 <USBD_SetConfig+0x144>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff f961 	bl	800a14c <USBD_SetClassConfig>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00f      	beq.n	800aeb4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f8fe 	bl	800b098 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff f96d 	bl	800a184 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2202      	movs	r2, #2
 800aeae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800aeb2:	e014      	b.n	800aede <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f9ba 	bl	800b22e <USBD_CtlSendStatus>
    break;
 800aeba:	e010      	b.n	800aede <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f9b6 	bl	800b22e <USBD_CtlSendStatus>
    break;
 800aec2:	e00c      	b.n	800aede <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f8e6 	bl	800b098 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aecc:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <USBD_SetConfig+0x144>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7ff f956 	bl	800a184 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800aed8:	2303      	movs	r3, #3
 800aeda:	73fb      	strb	r3, [r7, #15]
    break;
 800aedc:	bf00      	nop
  }

  return ret;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20000218 	.word	0x20000218

0800aeec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	88db      	ldrh	r3, [r3, #6]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d004      	beq.n	800af08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f8c9 	bl	800b098 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800af06:	e021      	b.n	800af4c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af0e:	2b01      	cmp	r3, #1
 800af10:	db17      	blt.n	800af42 <USBD_GetConfig+0x56>
 800af12:	2b02      	cmp	r3, #2
 800af14:	dd02      	ble.n	800af1c <USBD_GetConfig+0x30>
 800af16:	2b03      	cmp	r3, #3
 800af18:	d00b      	beq.n	800af32 <USBD_GetConfig+0x46>
 800af1a:	e012      	b.n	800af42 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3308      	adds	r3, #8
 800af26:	2201      	movs	r2, #1
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f925 	bl	800b17a <USBD_CtlSendData>
      break;
 800af30:	e00c      	b.n	800af4c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3304      	adds	r3, #4
 800af36:	2201      	movs	r2, #1
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f91d 	bl	800b17a <USBD_CtlSendData>
      break;
 800af40:	e004      	b.n	800af4c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f8a7 	bl	800b098 <USBD_CtlError>
      break;
 800af4a:	bf00      	nop
}
 800af4c:	bf00      	nop
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af64:	3b01      	subs	r3, #1
 800af66:	2b02      	cmp	r3, #2
 800af68:	d81e      	bhi.n	800afa8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	88db      	ldrh	r3, [r3, #6]
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d004      	beq.n	800af7c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f88f 	bl	800b098 <USBD_CtlError>
      break;
 800af7a:	e01a      	b.n	800afb2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	f043 0202 	orr.w	r2, r3, #2
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	330c      	adds	r3, #12
 800af9c:	2202      	movs	r2, #2
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f8ea 	bl	800b17a <USBD_CtlSendData>
    break;
 800afa6:	e004      	b.n	800afb2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f874 	bl	800b098 <USBD_CtlError>
    break;
 800afb0:	bf00      	nop
  }
}
 800afb2:	bf00      	nop
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	885b      	ldrh	r3, [r3, #2]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d106      	bne.n	800afda <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f92a 	bl	800b22e <USBD_CtlSendStatus>
  }
}
 800afda:	bf00      	nop
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b082      	sub	sp, #8
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff2:	3b01      	subs	r3, #1
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d80b      	bhi.n	800b010 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	885b      	ldrh	r3, [r3, #2]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d10c      	bne.n	800b01a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f910 	bl	800b22e <USBD_CtlSendStatus>
      }
      break;
 800b00e:	e004      	b.n	800b01a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f840 	bl	800b098 <USBD_CtlError>
      break;
 800b018:	e000      	b.n	800b01c <USBD_ClrFeature+0x3a>
      break;
 800b01a:	bf00      	nop
  }
}
 800b01c:	bf00      	nop
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	781a      	ldrb	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	3301      	adds	r3, #1
 800b03e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	781a      	ldrb	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	3301      	adds	r3, #1
 800b04c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7ff fad3 	bl	800a5fa <SWAPBYTE>
 800b054:	4603      	mov	r3, r0
 800b056:	461a      	mov	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3301      	adds	r3, #1
 800b060:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3301      	adds	r3, #1
 800b066:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f7ff fac6 	bl	800a5fa <SWAPBYTE>
 800b06e:	4603      	mov	r3, r0
 800b070:	461a      	mov	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3301      	adds	r3, #1
 800b07a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	3301      	adds	r3, #1
 800b080:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f7ff fab9 	bl	800a5fa <SWAPBYTE>
 800b088:	4603      	mov	r3, r0
 800b08a:	461a      	mov	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	80da      	strh	r2, [r3, #6]
}
 800b090:	bf00      	nop
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0a2:	2180      	movs	r1, #128	; 0x80
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 fd9d 	bl	800cbe4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 fd99 	bl	800cbe4 <USBD_LL_StallEP>
}
 800b0b2:	bf00      	nop
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b086      	sub	sp, #24
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d036      	beq.n	800b13e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0d4:	6938      	ldr	r0, [r7, #16]
 800b0d6:	f000 f836 	bl	800b146 <USBD_GetLen>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	3301      	adds	r3, #1
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	7812      	ldrb	r2, [r2, #0]
 800b0f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	4413      	add	r3, r2
 800b100:	2203      	movs	r2, #3
 800b102:	701a      	strb	r2, [r3, #0]
  idx++;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	3301      	adds	r3, #1
 800b108:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b10a:	e013      	b.n	800b134 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	4413      	add	r3, r2
 800b112:	693a      	ldr	r2, [r7, #16]
 800b114:	7812      	ldrb	r2, [r2, #0]
 800b116:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	3301      	adds	r3, #1
 800b11c:	613b      	str	r3, [r7, #16]
    idx++;
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
 800b120:	3301      	adds	r3, #1
 800b122:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	4413      	add	r3, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
 800b130:	3301      	adds	r3, #1
 800b132:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1e7      	bne.n	800b10c <USBD_GetString+0x52>
 800b13c:	e000      	b.n	800b140 <USBD_GetString+0x86>
    return;
 800b13e:	bf00      	nop
  }
}
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b146:	b480      	push	{r7}
 800b148:	b085      	sub	sp, #20
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b14e:	2300      	movs	r3, #0
 800b150:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b156:	e005      	b.n	800b164 <USBD_GetLen+0x1e>
  {
    len++;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
 800b15a:	3301      	adds	r3, #1
 800b15c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	3301      	adds	r3, #1
 800b162:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1f5      	bne.n	800b158 <USBD_GetLen+0x12>
  }

  return len;
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b084      	sub	sp, #16
 800b17e:	af00      	add	r7, sp, #0
 800b180:	60f8      	str	r0, [r7, #12]
 800b182:	60b9      	str	r1, [r7, #8]
 800b184:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2202      	movs	r2, #2
 800b18a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	2100      	movs	r1, #0
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f001 fda8 	bl	800ccf6 <USBD_LL_Transmit>

  return USBD_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f001 fd97 	bl	800ccf6 <USBD_LL_Transmit>

  return USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2203      	movs	r2, #3
 800b1e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f001 fd9b 	bl	800cd38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	2100      	movs	r1, #0
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f001 fd8a 	bl	800cd38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b082      	sub	sp, #8
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2204      	movs	r2, #4
 800b23a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b23e:	2300      	movs	r3, #0
 800b240:	2200      	movs	r2, #0
 800b242:	2100      	movs	r1, #0
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f001 fd56 	bl	800ccf6 <USBD_LL_Transmit>

  return USBD_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2205      	movs	r2, #5
 800b260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b264:	2300      	movs	r3, #0
 800b266:	2200      	movs	r2, #0
 800b268:	2100      	movs	r1, #0
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 fd64 	bl	800cd38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	4613      	mov	r3, r2
 800b288:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b28a:	2301      	movs	r3, #1
 800b28c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b292:	4b1f      	ldr	r3, [pc, #124]	; (800b310 <FATFS_LinkDriverEx+0x94>)
 800b294:	7a5b      	ldrb	r3, [r3, #9]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d131      	bne.n	800b300 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b29c:	4b1c      	ldr	r3, [pc, #112]	; (800b310 <FATFS_LinkDriverEx+0x94>)
 800b29e:	7a5b      	ldrb	r3, [r3, #9]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	4b1a      	ldr	r3, [pc, #104]	; (800b310 <FATFS_LinkDriverEx+0x94>)
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b2aa:	4b19      	ldr	r3, [pc, #100]	; (800b310 <FATFS_LinkDriverEx+0x94>)
 800b2ac:	7a5b      	ldrb	r3, [r3, #9]
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	4a17      	ldr	r2, [pc, #92]	; (800b310 <FATFS_LinkDriverEx+0x94>)
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b2ba:	4b15      	ldr	r3, [pc, #84]	; (800b310 <FATFS_LinkDriverEx+0x94>)
 800b2bc:	7a5b      	ldrb	r3, [r3, #9]
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	4b13      	ldr	r3, [pc, #76]	; (800b310 <FATFS_LinkDriverEx+0x94>)
 800b2c4:	4413      	add	r3, r2
 800b2c6:	79fa      	ldrb	r2, [r7, #7]
 800b2c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b2ca:	4b11      	ldr	r3, [pc, #68]	; (800b310 <FATFS_LinkDriverEx+0x94>)
 800b2cc:	7a5b      	ldrb	r3, [r3, #9]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	b2d1      	uxtb	r1, r2
 800b2d4:	4a0e      	ldr	r2, [pc, #56]	; (800b310 <FATFS_LinkDriverEx+0x94>)
 800b2d6:	7251      	strb	r1, [r2, #9]
 800b2d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b2da:	7dbb      	ldrb	r3, [r7, #22]
 800b2dc:	3330      	adds	r3, #48	; 0x30
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	223a      	movs	r2, #58	; 0x3a
 800b2ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	3302      	adds	r3, #2
 800b2f0:	222f      	movs	r2, #47	; 0x2f
 800b2f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	3303      	adds	r3, #3
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b300:	7dfb      	ldrb	r3, [r7, #23]
}
 800b302:	4618      	mov	r0, r3
 800b304:	371c      	adds	r7, #28
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	2000021c 	.word	0x2000021c

0800b314 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b31e:	2200      	movs	r2, #0
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff ffaa 	bl	800b27c <FATFS_LinkDriverEx>
 800b328:	4603      	mov	r3, r0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <AudioPlay_Play>:
 */
#include "audioplay.h"
extern I2S_HandleTypeDef hi2s2;

uint8_t AudioPlay_Play(uint16_t *pBuffer, uint32_t Size)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
	uint8_t ret=AUDIO_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]

		if(HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pBuffer,
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b348:	d203      	bcs.n	800b352 <AudioPlay_Play+0x1e>
									DMA_MAX(Size/AUDIODATA_SIZE))!=HAL_OK)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	085b      	lsrs	r3, r3, #1
		if(HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pBuffer,
 800b34e:	b29b      	uxth	r3, r3
 800b350:	e001      	b.n	800b356 <AudioPlay_Play+0x22>
 800b352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b356:	461a      	mov	r2, r3
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	4806      	ldr	r0, [pc, #24]	; (800b374 <AudioPlay_Play+0x40>)
 800b35c:	f7f7 f9b4 	bl	80026c8 <HAL_I2S_Transmit_DMA>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <AudioPlay_Play+0x36>
		{
			ret=AUDIO_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	73fb      	strb	r3, [r7, #15]
		}
	return ret;
 800b36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	20000f60 	.word	0x20000f60

0800b378 <AudioPlay_Stop>:
uint8_t AudioPlay_Stop()
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
	uint8_t ret=AUDIO_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	71fb      	strb	r3, [r7, #7]

		if(HAL_I2S_DMAStop(&hi2s2)!=HAL_OK)
 800b382:	4806      	ldr	r0, [pc, #24]	; (800b39c <AudioPlay_Stop+0x24>)
 800b384:	f7f7 fa48 	bl	8002818 <HAL_I2S_DMAStop>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <AudioPlay_Stop+0x1a>
		{
			ret=AUDIO_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	71fb      	strb	r3, [r7, #7]
		}

	return ret;
 800b392:	79fb      	ldrb	r3, [r7, #7]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	20000f60 	.word	0x20000f60

0800b3a0 <AudioPlay_ChangeBuffer>:

void AudioPlay_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	807b      	strh	r3, [r7, #2]
		if (val>3 || val<-3)
		{
			val=val;
		}
	}*/
	HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pData,Size);
 800b3ac:	887b      	ldrh	r3, [r7, #2]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	6879      	ldr	r1, [r7, #4]
 800b3b2:	4803      	ldr	r0, [pc, #12]	; (800b3c0 <AudioPlay_ChangeBuffer+0x20>)
 800b3b4:	f7f7 f988 	bl	80026c8 <HAL_I2S_Transmit_DMA>
}
 800b3b8:	bf00      	nop
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20000f60 	.word	0x20000f60

0800b3c4 <AudioPlay_HalfTransfer_CallBack>:

void AudioPlay_HalfTransfer_CallBack(void)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
	HalfTransfer_CallBack_FS();
 800b3c8:	f001 fa10 	bl	800c7ec <HalfTransfer_CallBack_FS>
}
 800b3cc:	bf00      	nop
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <AudioPlay_TransferComplete_CallBack>:
//------------------------------------------------------
void AudioPlay_TransferComplete_CallBack(void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
	TransferComplete_CallBack_FS();
 800b3d4:	f001 fa00 	bl	800c7d8 <TransferComplete_CallBack_FS>
}
 800b3d8:	bf00      	nop
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b3e6:	f000 f879 	bl	800b4dc <BSP_SD_IsDetected>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d001      	beq.n	800b3f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e012      	b.n	800b41a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b3f4:	480b      	ldr	r0, [pc, #44]	; (800b424 <BSP_SD_Init+0x48>)
 800b3f6:	f7f9 fee9 	bl	80051cc <HAL_SD_Init>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b3fe:	79fb      	ldrb	r3, [r7, #7]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d109      	bne.n	800b418 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b408:	4806      	ldr	r0, [pc, #24]	; (800b424 <BSP_SD_Init+0x48>)
 800b40a:	f7fa fcdb 	bl	8005dc4 <HAL_SD_ConfigWideBusOperation>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b418:	79fb      	ldrb	r3, [r7, #7]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	20000e1c 	.word	0x20000e1c

0800b428 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	68f9      	ldr	r1, [r7, #12]
 800b444:	4806      	ldr	r0, [pc, #24]	; (800b460 <BSP_SD_ReadBlocks+0x38>)
 800b446:	f7f9 ff51 	bl	80052ec <HAL_SD_ReadBlocks>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20000e1c 	.word	0x20000e1c

0800b464 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b088      	sub	sp, #32
 800b468:	af02      	add	r7, sp, #8
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	4806      	ldr	r0, [pc, #24]	; (800b49c <BSP_SD_WriteBlocks+0x38>)
 800b482:	f7fa f92d 	bl	80056e0 <HAL_SD_WriteBlocks>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d001      	beq.n	800b490 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b490:	7dfb      	ldrb	r3, [r7, #23]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	20000e1c 	.word	0x20000e1c

0800b4a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b4a4:	4805      	ldr	r0, [pc, #20]	; (800b4bc <BSP_SD_GetCardState+0x1c>)
 800b4a6:	f7fa fd09 	bl	8005ebc <HAL_SD_GetCardState>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b04      	cmp	r3, #4
 800b4ae:	bf14      	ite	ne
 800b4b0:	2301      	movne	r3, #1
 800b4b2:	2300      	moveq	r3, #0
 800b4b4:	b2db      	uxtb	r3, r3
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000e1c 	.word	0x20000e1c

0800b4c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	4803      	ldr	r0, [pc, #12]	; (800b4d8 <BSP_SD_GetCardInfo+0x18>)
 800b4cc:	f7fa fc4e 	bl	8005d6c <HAL_SD_GetCardInfo>
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	20000e1c 	.word	0x20000e1c

0800b4dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b4e6:	f000 f81d 	bl	800b524 <BSP_PlatformIsDetected>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b4f4:	79fb      	ldrb	r3, [r7, #7]
 800b4f6:	b2db      	uxtb	r3, r3
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b504:	4904      	ldr	r1, [pc, #16]	; (800b518 <MX_FATFS_Init+0x18>)
 800b506:	4805      	ldr	r0, [pc, #20]	; (800b51c <MX_FATFS_Init+0x1c>)
 800b508:	f7ff ff04 	bl	800b314 <FATFS_LinkDriver>
 800b50c:	4603      	mov	r3, r0
 800b50e:	461a      	mov	r2, r3
 800b510:	4b03      	ldr	r3, [pc, #12]	; (800b520 <MX_FATFS_Init+0x20>)
 800b512:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b514:	bf00      	nop
 800b516:	bd80      	pop	{r7, pc}
 800b518:	20000818 	.word	0x20000818
 800b51c:	0800e4ac 	.word	0x0800e4ac
 800b520:	20000814 	.word	0x20000814

0800b524 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b52a:	2301      	movs	r3, #1
 800b52c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b52e:	2180      	movs	r1, #128	; 0x80
 800b530:	4806      	ldr	r0, [pc, #24]	; (800b54c <BSP_PlatformIsDetected+0x28>)
 800b532:	f7f6 ff71 	bl	8002418 <HAL_GPIO_ReadPin>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b53c:	2300      	movs	r3, #0
 800b53e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b540:	79fb      	ldrb	r3, [r7, #7]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	40020800 	.word	0x40020800

0800b550 <hid_send_stop>:
 0x09, 0xb0,                    //   USAGE (Play)
 0x09, 0xe2,                    //   USAGE (Mute)
 0x09, 0xe9,                    //   USAGE (Volume Up)
 0x09, 0xea,                    //   USAGE (Volume Down)
 */
static void hid_send_stop() {
 800b550:	b580      	push	{r7, lr}
 800b552:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0;
 800b554:	4b10      	ldr	r3, [pc, #64]	; (800b598 <hid_send_stop+0x48>)
 800b556:	2200      	movs	r2, #0
 800b558:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800b55a:	4b0f      	ldr	r3, [pc, #60]	; (800b598 <hid_send_stop+0x48>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 22;
 800b560:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <hid_send_stop+0x48>)
 800b562:	2216      	movs	r2, #22
 800b564:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[1]=0x00;
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800b566:	2208      	movs	r2, #8
 800b568:	490b      	ldr	r1, [pc, #44]	; (800b598 <hid_send_stop+0x48>)
 800b56a:	480c      	ldr	r0, [pc, #48]	; (800b59c <hid_send_stop+0x4c>)
 800b56c:	f7fe fd48 	bl	800a000 <USBD_HID_SendReport>
	HAL_Delay(20);
 800b570:	2014      	movs	r0, #20
 800b572:	f7f5 fcf1 	bl	8000f58 <HAL_Delay>

	HID_Buffer[0] = 0;
 800b576:	4b08      	ldr	r3, [pc, #32]	; (800b598 <hid_send_stop+0x48>)
 800b578:	2200      	movs	r2, #0
 800b57a:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800b57c:	4b06      	ldr	r3, [pc, #24]	; (800b598 <hid_send_stop+0x48>)
 800b57e:	2200      	movs	r2, #0
 800b580:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 0;
 800b582:	4b05      	ldr	r3, [pc, #20]	; (800b598 <hid_send_stop+0x48>)
 800b584:	2200      	movs	r2, #0
 800b586:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800b588:	2208      	movs	r2, #8
 800b58a:	4903      	ldr	r1, [pc, #12]	; (800b598 <hid_send_stop+0x48>)
 800b58c:	4803      	ldr	r0, [pc, #12]	; (800b59c <hid_send_stop+0x4c>)
 800b58e:	f7fe fd37 	bl	800a000 <USBD_HID_SendReport>
}
 800b592:	bf00      	nop
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20000cc8 	.word	0x20000cc8
 800b59c:	20000fa8 	.word	0x20000fa8

0800b5a0 <hid_send_start>:
static void hid_send_start() {
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0;
 800b5a4:	4b10      	ldr	r3, [pc, #64]	; (800b5e8 <hid_send_start+0x48>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800b5aa:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <hid_send_start+0x48>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 19;
 800b5b0:	4b0d      	ldr	r3, [pc, #52]	; (800b5e8 <hid_send_start+0x48>)
 800b5b2:	2213      	movs	r2, #19
 800b5b4:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800b5b6:	2208      	movs	r2, #8
 800b5b8:	490b      	ldr	r1, [pc, #44]	; (800b5e8 <hid_send_start+0x48>)
 800b5ba:	480c      	ldr	r0, [pc, #48]	; (800b5ec <hid_send_start+0x4c>)
 800b5bc:	f7fe fd20 	bl	800a000 <USBD_HID_SendReport>
	HAL_Delay(20);
 800b5c0:	2014      	movs	r0, #20
 800b5c2:	f7f5 fcc9 	bl	8000f58 <HAL_Delay>

	HID_Buffer[0] = 0;
 800b5c6:	4b08      	ldr	r3, [pc, #32]	; (800b5e8 <hid_send_start+0x48>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800b5cc:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <hid_send_start+0x48>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 0;
 800b5d2:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <hid_send_start+0x48>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800b5d8:	2208      	movs	r2, #8
 800b5da:	4903      	ldr	r1, [pc, #12]	; (800b5e8 <hid_send_start+0x48>)
 800b5dc:	4803      	ldr	r0, [pc, #12]	; (800b5ec <hid_send_start+0x4c>)
 800b5de:	f7fe fd0f 	bl	800a000 <USBD_HID_SendReport>
}
 800b5e2:	bf00      	nop
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20000cc8 	.word	0x20000cc8
 800b5ec:	20000fa8 	.word	0x20000fa8

0800b5f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b5f0:	b5b0      	push	{r4, r5, r7, lr}
 800b5f2:	b08a      	sub	sp, #40	; 0x28
 800b5f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b5f6:	f7f5 fc3d 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b5fa:	f000 f997 	bl	800b92c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b5fe:	f000 fb87 	bl	800bd10 <MX_GPIO_Init>
  MX_DMA_Init();
 800b602:	f000 fb5d 	bl	800bcc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800b606:	f001 f811 	bl	800c62c <MX_USB_DEVICE_Init>
  MX_I2S2_Init();
 800b60a:	f000 fa63 	bl	800bad4 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 800b60e:	f000 fa8f 	bl	800bb30 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800b612:	f7ff ff75 	bl	800b500 <MX_FATFS_Init>
  MX_TIM1_Init();
 800b616:	f000 faab 	bl	800bb70 <MX_TIM1_Init>
  MX_TIM3_Init();
 800b61a:	f000 faf9 	bl	800bc10 <MX_TIM3_Init>
  MX_ADC1_Init();
 800b61e:	f000 fa07 	bl	800ba30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim1);
 800b622:	48b7      	ldr	r0, [pc, #732]	; (800b900 <main+0x310>)
 800b624:	f7fa ff79 	bl	800651a <HAL_TIM_Base_Start_IT>

	//init led

	ws2812_init();
 800b628:	f001 fcf4 	bl	800d014 <ws2812_init>
	for (int t = 0; t < LED_COUNT; t++) {
 800b62c:	2300      	movs	r3, #0
 800b62e:	627b      	str	r3, [r7, #36]	; 0x24
 800b630:	e02a      	b.n	800b688 <main+0x98>
			float val = sin((float) (6.28 / LED_COUNT) * (float) t);
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b63c:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 800b904 <main+0x314>
 800b640:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b644:	ee17 0a90 	vmov	r0, s15
 800b648:	f7f4 ff2a 	bl	80004a0 <__aeabi_f2d>
 800b64c:	4603      	mov	r3, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	ec44 3b10 	vmov	d0, r3, r4
 800b654:	f001 fee8 	bl	800d428 <sin>
 800b658:	ec54 3b10 	vmov	r3, r4, d0
 800b65c:	4618      	mov	r0, r3
 800b65e:	4621      	mov	r1, r4
 800b660:	f7f5 fa38 	bl	8000ad4 <__aeabi_d2f>
 800b664:	4603      	mov	r3, r0
 800b666:	613b      	str	r3, [r7, #16]
			if (val > 0) {
 800b668:	edd7 7a04 	vldr	s15, [r7, #16]
 800b66c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b674:	dd05      	ble.n	800b682 <main+0x92>
				front[t] = val;
 800b676:	4aa4      	ldr	r2, [pc, #656]	; (800b908 <main+0x318>)
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	4413      	add	r3, r2
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	601a      	str	r2, [r3, #0]
	for (int t = 0; t < LED_COUNT; t++) {
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	3301      	adds	r3, #1
 800b686:	627b      	str	r3, [r7, #36]	; 0x24
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	2b17      	cmp	r3, #23
 800b68c:	ddd1      	ble.n	800b632 <main+0x42>
			}
		}

		RgbColor RGB;
		RGB.r=0;
 800b68e:	2300      	movs	r3, #0
 800b690:	733b      	strb	r3, [r7, #12]
		RGB.g=0;
 800b692:	2300      	movs	r3, #0
 800b694:	737b      	strb	r3, [r7, #13]
		RGB.b=MAX_BRIGHT;
 800b696:	23c8      	movs	r3, #200	; 0xc8
 800b698:	73bb      	strb	r3, [r7, #14]
		HsvColor HSV;
		HSV.h = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	723b      	strb	r3, [r7, #8]
		HSV.s = 255;
 800b69e:	23ff      	movs	r3, #255	; 0xff
 800b6a0:	727b      	strb	r3, [r7, #9]
		HSV.v = MAX_BRIGHT;
 800b6a2:	23c8      	movs	r3, #200	; 0xc8
 800b6a4:	72bb      	strb	r3, [r7, #10]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(5);
 800b6a6:	2005      	movs	r0, #5
 800b6a8:	f7f5 fc56 	bl	8000f58 <HAL_Delay>

	  		HAL_ADC_Start(&hadc1);
 800b6ac:	4897      	ldr	r0, [pc, #604]	; (800b90c <main+0x31c>)
 800b6ae:	f7f5 fcb9 	bl	8001024 <HAL_ADC_Start>
	  		HAL_ADC_PollForConversion(&hadc1, 1000);
 800b6b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b6b6:	4895      	ldr	r0, [pc, #596]	; (800b90c <main+0x31c>)
 800b6b8:	f7f5 fd8d 	bl	80011d6 <HAL_ADC_PollForConversion>
	  		adcResult = HAL_ADC_GetValue(&hadc1);
 800b6bc:	4893      	ldr	r0, [pc, #588]	; (800b90c <main+0x31c>)
 800b6be:	f7f5 fe0e 	bl	80012de <HAL_ADC_GetValue>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	4b92      	ldr	r3, [pc, #584]	; (800b910 <main+0x320>)
 800b6c6:	601a      	str	r2, [r3, #0]
	  		HAL_ADC_Stop(&hadc1);
 800b6c8:	4890      	ldr	r0, [pc, #576]	; (800b90c <main+0x31c>)
 800b6ca:	f7f5 fd51 	bl	8001170 <HAL_ADC_Stop>

	  		//________CALC_MAGNITUDE_________________________
	  		a = 0.99 * a + 0.01 * adcResult;
 800b6ce:	4b91      	ldr	r3, [pc, #580]	; (800b914 <main+0x324>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7f4 fee4 	bl	80004a0 <__aeabi_f2d>
 800b6d8:	a381      	add	r3, pc, #516	; (adr r3, 800b8e0 <main+0x2f0>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 ff37 	bl	8000550 <__aeabi_dmul>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	4625      	mov	r5, r4
 800b6e8:	461c      	mov	r4, r3
 800b6ea:	4b89      	ldr	r3, [pc, #548]	; (800b910 <main+0x320>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7f4 feb4 	bl	800045c <__aeabi_ui2d>
 800b6f4:	a37c      	add	r3, pc, #496	; (adr r3, 800b8e8 <main+0x2f8>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f7f4 ff29 	bl	8000550 <__aeabi_dmul>
 800b6fe:	4602      	mov	r2, r0
 800b700:	460b      	mov	r3, r1
 800b702:	4620      	mov	r0, r4
 800b704:	4629      	mov	r1, r5
 800b706:	f7f4 fd6d 	bl	80001e4 <__adddf3>
 800b70a:	4603      	mov	r3, r0
 800b70c:	460c      	mov	r4, r1
 800b70e:	4618      	mov	r0, r3
 800b710:	4621      	mov	r1, r4
 800b712:	f7f5 f9df 	bl	8000ad4 <__aeabi_d2f>
 800b716:	4602      	mov	r2, r0
 800b718:	4b7e      	ldr	r3, [pc, #504]	; (800b914 <main+0x324>)
 800b71a:	601a      	str	r2, [r3, #0]
	  		b = 0.9 * b + 0.1 * adcResult;
 800b71c:	4b7e      	ldr	r3, [pc, #504]	; (800b918 <main+0x328>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4618      	mov	r0, r3
 800b722:	f7f4 febd 	bl	80004a0 <__aeabi_f2d>
 800b726:	a372      	add	r3, pc, #456	; (adr r3, 800b8f0 <main+0x300>)
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f7f4 ff10 	bl	8000550 <__aeabi_dmul>
 800b730:	4603      	mov	r3, r0
 800b732:	460c      	mov	r4, r1
 800b734:	4625      	mov	r5, r4
 800b736:	461c      	mov	r4, r3
 800b738:	4b75      	ldr	r3, [pc, #468]	; (800b910 <main+0x320>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7f4 fe8d 	bl	800045c <__aeabi_ui2d>
 800b742:	a36d      	add	r3, pc, #436	; (adr r3, 800b8f8 <main+0x308>)
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	f7f4 ff02 	bl	8000550 <__aeabi_dmul>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	4620      	mov	r0, r4
 800b752:	4629      	mov	r1, r5
 800b754:	f7f4 fd46 	bl	80001e4 <__adddf3>
 800b758:	4603      	mov	r3, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	4618      	mov	r0, r3
 800b75e:	4621      	mov	r1, r4
 800b760:	f7f5 f9b8 	bl	8000ad4 <__aeabi_d2f>
 800b764:	4602      	mov	r2, r0
 800b766:	4b6c      	ldr	r3, [pc, #432]	; (800b918 <main+0x328>)
 800b768:	601a      	str	r2, [r3, #0]
	  		d = a - b;
 800b76a:	4b6a      	ldr	r3, [pc, #424]	; (800b914 <main+0x324>)
 800b76c:	ed93 7a00 	vldr	s14, [r3]
 800b770:	4b69      	ldr	r3, [pc, #420]	; (800b918 <main+0x328>)
 800b772:	edd3 7a00 	vldr	s15, [r3]
 800b776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b77a:	4b68      	ldr	r3, [pc, #416]	; (800b91c <main+0x32c>)
 800b77c:	edc3 7a00 	vstr	s15, [r3]
	  		if (d > MAG_VAL) {
 800b780:	4b66      	ldr	r3, [pc, #408]	; (800b91c <main+0x32c>)
 800b782:	edd3 7a00 	vldr	s15, [r3]
 800b786:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b78a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b792:	dd03      	ble.n	800b79c <main+0x1ac>
	  			phoneUp = 0;
 800b794:	4b62      	ldr	r3, [pc, #392]	; (800b920 <main+0x330>)
 800b796:	2200      	movs	r2, #0
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	e00c      	b.n	800b7b6 <main+0x1c6>
	  		} else if (d < -MAG_VAL) {
 800b79c:	4b5f      	ldr	r3, [pc, #380]	; (800b91c <main+0x32c>)
 800b79e:	edd3 7a00 	vldr	s15, [r3]
 800b7a2:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800b7a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ae:	d502      	bpl.n	800b7b6 <main+0x1c6>
	  			phoneUp = 1;
 800b7b0:	4b5b      	ldr	r3, [pc, #364]	; (800b920 <main+0x330>)
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	601a      	str	r2, [r3, #0]
	  			phoneUp = 1;
	  		}
	  		*/

	  		//___________________HID_Sender____________
	  		if (phoneUp != phoneUp_) {
 800b7b6:	4b5a      	ldr	r3, [pc, #360]	; (800b920 <main+0x330>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	4b5a      	ldr	r3, [pc, #360]	; (800b924 <main+0x334>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d008      	beq.n	800b7d4 <main+0x1e4>
	  			if (phoneUp) {
 800b7c2:	4b57      	ldr	r3, [pc, #348]	; (800b920 <main+0x330>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d002      	beq.n	800b7d0 <main+0x1e0>
	  				hid_send_start();
 800b7ca:	f7ff fee9 	bl	800b5a0 <hid_send_start>
 800b7ce:	e001      	b.n	800b7d4 <main+0x1e4>

	  			} else {
	  				hid_send_stop();
 800b7d0:	f7ff febe 	bl	800b550 <hid_send_stop>

	  			}
	  		}
	  		phoneUp_ = phoneUp;
 800b7d4:	4b52      	ldr	r3, [pc, #328]	; (800b920 <main+0x330>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a52      	ldr	r2, [pc, #328]	; (800b924 <main+0x334>)
 800b7da:	6013      	str	r3, [r2, #0]




	  		if (ledRefresh) {
 800b7dc:	4b52      	ldr	r3, [pc, #328]	; (800b928 <main+0x338>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f43f af60 	beq.w	800b6a6 <main+0xb6>
	  			}
	  			RGB = HsvToRgb(HSV);
	  			*/


	  			ledRefresh=0;
 800b7e6:	4b50      	ldr	r3, [pc, #320]	; (800b928 <main+0x338>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	601a      	str	r2, [r3, #0]
	  			if (phoneUp) {
 800b7ec:	4b4c      	ldr	r3, [pc, #304]	; (800b920 <main+0x330>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d062      	beq.n	800b8ba <main+0x2ca>
	  				for (int i = 0; i < LED_COUNT; i++) {
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	623b      	str	r3, [r7, #32]
 800b7f8:	e03f      	b.n	800b87a <main+0x28a>
	  					ws2812_setPixel_gammaCorrection(RGB.r * front[i],
 800b7fa:	7b3b      	ldrb	r3, [r7, #12]
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b804:	4a40      	ldr	r2, [pc, #256]	; (800b908 <main+0x318>)
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	edd3 7a00 	vldr	s15, [r3]
 800b810:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b818:	edc7 7a01 	vstr	s15, [r7, #4]
 800b81c:	793b      	ldrb	r3, [r7, #4]
 800b81e:	b2d8      	uxtb	r0, r3
	  							RGB.g * front[i], RGB.b * front[i], i);
 800b820:	7b7b      	ldrb	r3, [r7, #13]
 800b822:	ee07 3a90 	vmov	s15, r3
 800b826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b82a:	4a37      	ldr	r2, [pc, #220]	; (800b908 <main+0x318>)
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4413      	add	r3, r2
 800b832:	edd3 7a00 	vldr	s15, [r3]
 800b836:	ee67 7a27 	vmul.f32	s15, s14, s15
	  					ws2812_setPixel_gammaCorrection(RGB.r * front[i],
 800b83a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b83e:	edc7 7a01 	vstr	s15, [r7, #4]
 800b842:	793b      	ldrb	r3, [r7, #4]
 800b844:	b2d9      	uxtb	r1, r3
	  							RGB.g * front[i], RGB.b * front[i], i);
 800b846:	7bbb      	ldrb	r3, [r7, #14]
 800b848:	ee07 3a90 	vmov	s15, r3
 800b84c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b850:	4a2d      	ldr	r2, [pc, #180]	; (800b908 <main+0x318>)
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	edd3 7a00 	vldr	s15, [r3]
 800b85c:	ee67 7a27 	vmul.f32	s15, s14, s15
	  					ws2812_setPixel_gammaCorrection(RGB.r * front[i],
 800b860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b864:	edc7 7a01 	vstr	s15, [r7, #4]
 800b868:	793b      	ldrb	r3, [r7, #4]
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	b29b      	uxth	r3, r3
 800b870:	f001 fbea 	bl	800d048 <ws2812_setPixel_gammaCorrection>
	  				for (int i = 0; i < LED_COUNT; i++) {
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	3301      	adds	r3, #1
 800b878:	623b      	str	r3, [r7, #32]
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	2b17      	cmp	r3, #23
 800b87e:	ddbc      	ble.n	800b7fa <main+0x20a>
	  					//ws2812_pixel_rgb_to_buf_dma(RGB.r * front[i], RGB.g * front[i],RGB.b * front[i], i);
	  				}
	  				ws2812_light();
 800b880:	f001 fc9c 	bl	800d1bc <ws2812_light>
	  				//HAL_Delay(40);

	  				//shift front
	  				float tmp = front[0];
 800b884:	4b20      	ldr	r3, [pc, #128]	; (800b908 <main+0x318>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	617b      	str	r3, [r7, #20]
	  				for (int t = 0; t < (LED_COUNT - 1); t++) {
 800b88a:	2300      	movs	r3, #0
 800b88c:	61fb      	str	r3, [r7, #28]
 800b88e:	e00d      	b.n	800b8ac <main+0x2bc>
	  					front[t] = front[t + 1];
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	3301      	adds	r3, #1
 800b894:	4a1c      	ldr	r2, [pc, #112]	; (800b908 <main+0x318>)
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	491a      	ldr	r1, [pc, #104]	; (800b908 <main+0x318>)
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	440b      	add	r3, r1
 800b8a4:	601a      	str	r2, [r3, #0]
	  				for (int t = 0; t < (LED_COUNT - 1); t++) {
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	61fb      	str	r3, [r7, #28]
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	2b16      	cmp	r3, #22
 800b8b0:	ddee      	ble.n	800b890 <main+0x2a0>
	  				}
	  				front[LED_COUNT - 1] = tmp;
 800b8b2:	4a15      	ldr	r2, [pc, #84]	; (800b908 <main+0x318>)
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	65d3      	str	r3, [r2, #92]	; 0x5c
 800b8b8:	e6f5      	b.n	800b6a6 <main+0xb6>
	  			} else {
	  				for (int i = 0; i < LED_COUNT; i++) {
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	61bb      	str	r3, [r7, #24]
 800b8be:	e009      	b.n	800b8d4 <main+0x2e4>
	  					ws2812_setPixel_gammaCorrection(RGB.r, RGB.g, RGB.b, i);
 800b8c0:	7b38      	ldrb	r0, [r7, #12]
 800b8c2:	7b79      	ldrb	r1, [r7, #13]
 800b8c4:	7bba      	ldrb	r2, [r7, #14]
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	f001 fbbd 	bl	800d048 <ws2812_setPixel_gammaCorrection>
	  				for (int i = 0; i < LED_COUNT; i++) {
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	61bb      	str	r3, [r7, #24]
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	2b17      	cmp	r3, #23
 800b8d8:	ddf2      	ble.n	800b8c0 <main+0x2d0>
	  					//ws2812_pixel_rgb_to_buf_dma(RGB.r, RGB.g ,RGB.b , i);
	  				}
	  				ws2812_light();
 800b8da:	f001 fc6f 	bl	800d1bc <ws2812_light>
	  HAL_Delay(5);
 800b8de:	e6e2      	b.n	800b6a6 <main+0xb6>
 800b8e0:	7ae147ae 	.word	0x7ae147ae
 800b8e4:	3fefae14 	.word	0x3fefae14
 800b8e8:	47ae147b 	.word	0x47ae147b
 800b8ec:	3f847ae1 	.word	0x3f847ae1
 800b8f0:	cccccccd 	.word	0xcccccccd
 800b8f4:	3feccccc 	.word	0x3feccccc
 800b8f8:	9999999a 	.word	0x9999999a
 800b8fc:	3fb99999 	.word	0x3fb99999
 800b900:	20000ddc 	.word	0x20000ddc
 800b904:	3e85f92c 	.word	0x3e85f92c
 800b908:	20000cd0 	.word	0x20000cd0
 800b90c:	20000d34 	.word	0x20000d34
 800b910:	20000d30 	.word	0x20000d30
 800b914:	2000022c 	.word	0x2000022c
 800b918:	20000230 	.word	0x20000230
 800b91c:	20000234 	.word	0x20000234
 800b920:	20000228 	.word	0x20000228
 800b924:	20000120 	.word	0x20000120
 800b928:	2000011c 	.word	0x2000011c

0800b92c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b098      	sub	sp, #96	; 0x60
 800b930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b936:	2230      	movs	r2, #48	; 0x30
 800b938:	2100      	movs	r1, #0
 800b93a:	4618      	mov	r0, r3
 800b93c:	f001 fcb2 	bl	800d2a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b940:	f107 031c 	add.w	r3, r7, #28
 800b944:	2200      	movs	r2, #0
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	605a      	str	r2, [r3, #4]
 800b94a:	609a      	str	r2, [r3, #8]
 800b94c:	60da      	str	r2, [r3, #12]
 800b94e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b950:	f107 0308 	add.w	r3, r7, #8
 800b954:	2200      	movs	r2, #0
 800b956:	601a      	str	r2, [r3, #0]
 800b958:	605a      	str	r2, [r3, #4]
 800b95a:	609a      	str	r2, [r3, #8]
 800b95c:	60da      	str	r2, [r3, #12]
 800b95e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b960:	2300      	movs	r3, #0
 800b962:	607b      	str	r3, [r7, #4]
 800b964:	4b30      	ldr	r3, [pc, #192]	; (800ba28 <SystemClock_Config+0xfc>)
 800b966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b968:	4a2f      	ldr	r2, [pc, #188]	; (800ba28 <SystemClock_Config+0xfc>)
 800b96a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b96e:	6413      	str	r3, [r2, #64]	; 0x40
 800b970:	4b2d      	ldr	r3, [pc, #180]	; (800ba28 <SystemClock_Config+0xfc>)
 800b972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b978:	607b      	str	r3, [r7, #4]
 800b97a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800b97c:	2300      	movs	r3, #0
 800b97e:	603b      	str	r3, [r7, #0]
 800b980:	4b2a      	ldr	r3, [pc, #168]	; (800ba2c <SystemClock_Config+0x100>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b988:	4a28      	ldr	r2, [pc, #160]	; (800ba2c <SystemClock_Config+0x100>)
 800b98a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	4b26      	ldr	r3, [pc, #152]	; (800ba2c <SystemClock_Config+0x100>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b998:	603b      	str	r3, [r7, #0]
 800b99a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b99c:	2301      	movs	r3, #1
 800b99e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b9a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b9a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b9aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800b9b0:	2308      	movs	r3, #8
 800b9b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800b9b4:	23fa      	movs	r3, #250	; 0xfa
 800b9b6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800b9b8:	2306      	movs	r3, #6
 800b9ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800b9bc:	2308      	movs	r3, #8
 800b9be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b9c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7f8 fe75 	bl	80046b4 <HAL_RCC_OscConfig>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800b9d0:	f000 fa28 	bl	800be24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b9d4:	230f      	movs	r3, #15
 800b9d6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b9d8:	2302      	movs	r3, #2
 800b9da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b9e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b9ea:	f107 031c 	add.w	r3, r7, #28
 800b9ee:	2102      	movs	r1, #2
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7f9 f8cf 	bl	8004b94 <HAL_RCC_ClockConfig>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800b9fc:	f000 fa12 	bl	800be24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800ba00:	2301      	movs	r3, #1
 800ba02:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800ba04:	23c0      	movs	r3, #192	; 0xc0
 800ba06:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ba0c:	f107 0308 	add.w	r3, r7, #8
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7f9 fa93 	bl	8004f3c <HAL_RCCEx_PeriphCLKConfig>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800ba1c:	f000 fa02 	bl	800be24 <Error_Handler>
  }
}
 800ba20:	bf00      	nop
 800ba22:	3760      	adds	r7, #96	; 0x60
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	40023800 	.word	0x40023800
 800ba2c:	40007000 	.word	0x40007000

0800ba30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ba36:	463b      	mov	r3, r7
 800ba38:	2200      	movs	r2, #0
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	605a      	str	r2, [r3, #4]
 800ba3e:	609a      	str	r2, [r3, #8]
 800ba40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ba42:	4b21      	ldr	r3, [pc, #132]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba44:	4a21      	ldr	r2, [pc, #132]	; (800bacc <MX_ADC1_Init+0x9c>)
 800ba46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800ba48:	4b1f      	ldr	r3, [pc, #124]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ba4e:	4b1e      	ldr	r3, [pc, #120]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800ba54:	4b1c      	ldr	r3, [pc, #112]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ba5a:	4b1b      	ldr	r3, [pc, #108]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ba60:	4b19      	ldr	r3, [pc, #100]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ba68:	4b17      	ldr	r3, [pc, #92]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ba6e:	4b16      	ldr	r3, [pc, #88]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba70:	4a17      	ldr	r2, [pc, #92]	; (800bad0 <MX_ADC1_Init+0xa0>)
 800ba72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ba74:	4b14      	ldr	r3, [pc, #80]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800ba7a:	4b13      	ldr	r3, [pc, #76]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800ba80:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ba88:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ba8e:	480e      	ldr	r0, [pc, #56]	; (800bac8 <MX_ADC1_Init+0x98>)
 800ba90:	f7f5 fa84 	bl	8000f9c <HAL_ADC_Init>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800ba9a:	f000 f9c3 	bl	800be24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800baa2:	2301      	movs	r3, #1
 800baa4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800baaa:	463b      	mov	r3, r7
 800baac:	4619      	mov	r1, r3
 800baae:	4806      	ldr	r0, [pc, #24]	; (800bac8 <MX_ADC1_Init+0x98>)
 800bab0:	f7f5 fc22 	bl	80012f8 <HAL_ADC_ConfigChannel>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800baba:	f000 f9b3 	bl	800be24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800babe:	bf00      	nop
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20000d34 	.word	0x20000d34
 800bacc:	40012000 	.word	0x40012000
 800bad0:	0f000001 	.word	0x0f000001

0800bad4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800bad8:	4b13      	ldr	r3, [pc, #76]	; (800bb28 <MX_I2S2_Init+0x54>)
 800bada:	4a14      	ldr	r2, [pc, #80]	; (800bb2c <MX_I2S2_Init+0x58>)
 800badc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800bade:	4b12      	ldr	r3, [pc, #72]	; (800bb28 <MX_I2S2_Init+0x54>)
 800bae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bae4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800bae6:	4b10      	ldr	r3, [pc, #64]	; (800bb28 <MX_I2S2_Init+0x54>)
 800bae8:	2200      	movs	r2, #0
 800baea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800baec:	4b0e      	ldr	r3, [pc, #56]	; (800bb28 <MX_I2S2_Init+0x54>)
 800baee:	2200      	movs	r2, #0
 800baf0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800baf2:	4b0d      	ldr	r3, [pc, #52]	; (800bb28 <MX_I2S2_Init+0x54>)
 800baf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baf8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800bafa:	4b0b      	ldr	r3, [pc, #44]	; (800bb28 <MX_I2S2_Init+0x54>)
 800bafc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800bb00:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800bb02:	4b09      	ldr	r3, [pc, #36]	; (800bb28 <MX_I2S2_Init+0x54>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800bb08:	4b07      	ldr	r3, [pc, #28]	; (800bb28 <MX_I2S2_Init+0x54>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800bb0e:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <MX_I2S2_Init+0x54>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800bb14:	4804      	ldr	r0, [pc, #16]	; (800bb28 <MX_I2S2_Init+0x54>)
 800bb16:	f7f6 fc97 	bl	8002448 <HAL_I2S_Init>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800bb20:	f000 f980 	bl	800be24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800bb24:	bf00      	nop
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	20000f60 	.word	0x20000f60
 800bb2c:	40003800 	.word	0x40003800

0800bb30 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800bb30:	b480      	push	{r7}
 800bb32:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800bb34:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <MX_SDIO_SD_Init+0x38>)
 800bb36:	4a0d      	ldr	r2, [pc, #52]	; (800bb6c <MX_SDIO_SD_Init+0x3c>)
 800bb38:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800bb3a:	4b0b      	ldr	r3, [pc, #44]	; (800bb68 <MX_SDIO_SD_Init+0x38>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800bb40:	4b09      	ldr	r3, [pc, #36]	; (800bb68 <MX_SDIO_SD_Init+0x38>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800bb46:	4b08      	ldr	r3, [pc, #32]	; (800bb68 <MX_SDIO_SD_Init+0x38>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800bb4c:	4b06      	ldr	r3, [pc, #24]	; (800bb68 <MX_SDIO_SD_Init+0x38>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800bb52:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <MX_SDIO_SD_Init+0x38>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800bb58:	4b03      	ldr	r3, [pc, #12]	; (800bb68 <MX_SDIO_SD_Init+0x38>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800bb5e:	bf00      	nop
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	20000e1c 	.word	0x20000e1c
 800bb6c:	40012c00 	.word	0x40012c00

0800bb70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bb76:	f107 0308 	add.w	r3, r7, #8
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	605a      	str	r2, [r3, #4]
 800bb80:	609a      	str	r2, [r3, #8]
 800bb82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bb84:	463b      	mov	r3, r7
 800bb86:	2200      	movs	r2, #0
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800bb8c:	4b1e      	ldr	r3, [pc, #120]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bb8e:	4a1f      	ldr	r2, [pc, #124]	; (800bc0c <MX_TIM1_Init+0x9c>)
 800bb90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000;
 800bb92:	4b1d      	ldr	r3, [pc, #116]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bb94:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800bb98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bb9a:	4b1b      	ldr	r3, [pc, #108]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30;
 800bba0:	4b19      	ldr	r3, [pc, #100]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bba2:	221e      	movs	r2, #30
 800bba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bba6:	4b18      	ldr	r3, [pc, #96]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800bbac:	4b16      	ldr	r3, [pc, #88]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bbb2:	4b15      	ldr	r3, [pc, #84]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800bbb8:	4813      	ldr	r0, [pc, #76]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bbba:	f7fa fc83 	bl	80064c4 <HAL_TIM_Base_Init>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800bbc4:	f000 f92e 	bl	800be24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bbc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800bbce:	f107 0308 	add.w	r3, r7, #8
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	480c      	ldr	r0, [pc, #48]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bbd6:	f7fa ffc3 	bl	8006b60 <HAL_TIM_ConfigClockSource>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800bbe0:	f000 f920 	bl	800be24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800bbec:	463b      	mov	r3, r7
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4805      	ldr	r0, [pc, #20]	; (800bc08 <MX_TIM1_Init+0x98>)
 800bbf2:	f7fb fc01 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800bbfc:	f000 f912 	bl	800be24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800bc00:	bf00      	nop
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	20000ddc 	.word	0x20000ddc
 800bc0c:	40010000 	.word	0x40010000

0800bc10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08a      	sub	sp, #40	; 0x28
 800bc14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bc16:	f107 0320 	add.w	r3, r7, #32
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bc20:	1d3b      	adds	r3, r7, #4
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	605a      	str	r2, [r3, #4]
 800bc28:	609a      	str	r2, [r3, #8]
 800bc2a:	60da      	str	r2, [r3, #12]
 800bc2c:	611a      	str	r2, [r3, #16]
 800bc2e:	615a      	str	r2, [r3, #20]
 800bc30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800bc32:	4b21      	ldr	r3, [pc, #132]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bc34:	4a21      	ldr	r2, [pc, #132]	; (800bcbc <MX_TIM3_Init+0xac>)
 800bc36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800bc38:	4b1f      	ldr	r3, [pc, #124]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bc3e:	4b1e      	ldr	r3, [pc, #120]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 80;
 800bc44:	4b1c      	ldr	r3, [pc, #112]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bc46:	2250      	movs	r2, #80	; 0x50
 800bc48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bc4a:	4b1b      	ldr	r3, [pc, #108]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bc50:	4b19      	ldr	r3, [pc, #100]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bc52:	2200      	movs	r2, #0
 800bc54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800bc56:	4818      	ldr	r0, [pc, #96]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bc58:	f7fa fc83 	bl	8006562 <HAL_TIM_PWM_Init>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800bc62:	f000 f8df 	bl	800be24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bc66:	2300      	movs	r3, #0
 800bc68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800bc6e:	f107 0320 	add.w	r3, r7, #32
 800bc72:	4619      	mov	r1, r3
 800bc74:	4810      	ldr	r0, [pc, #64]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bc76:	f7fb fbbf 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d001      	beq.n	800bc84 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800bc80:	f000 f8d0 	bl	800be24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bc84:	2360      	movs	r3, #96	; 0x60
 800bc86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bc94:	1d3b      	adds	r3, r7, #4
 800bc96:	2204      	movs	r2, #4
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4807      	ldr	r0, [pc, #28]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bc9c:	f7fa fe9a 	bl	80069d4 <HAL_TIM_PWM_ConfigChannel>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800bca6:	f000 f8bd 	bl	800be24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800bcaa:	4803      	ldr	r0, [pc, #12]	; (800bcb8 <MX_TIM3_Init+0xa8>)
 800bcac:	f000 fbb6 	bl	800c41c <HAL_TIM_MspPostInit>

}
 800bcb0:	bf00      	nop
 800bcb2:	3728      	adds	r7, #40	; 0x28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	20000c88 	.word	0x20000c88
 800bcbc:	40000400 	.word	0x40000400

0800bcc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	607b      	str	r3, [r7, #4]
 800bcca:	4b10      	ldr	r3, [pc, #64]	; (800bd0c <MX_DMA_Init+0x4c>)
 800bccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcce:	4a0f      	ldr	r2, [pc, #60]	; (800bd0c <MX_DMA_Init+0x4c>)
 800bcd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bcd4:	6313      	str	r3, [r2, #48]	; 0x30
 800bcd6:	4b0d      	ldr	r3, [pc, #52]	; (800bd0c <MX_DMA_Init+0x4c>)
 800bcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bcde:	607b      	str	r3, [r7, #4]
 800bce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800bce2:	2200      	movs	r2, #0
 800bce4:	2100      	movs	r1, #0
 800bce6:	200f      	movs	r0, #15
 800bce8:	f7f5 fdff 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800bcec:	200f      	movs	r0, #15
 800bcee:	f7f5 fe18 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	2010      	movs	r0, #16
 800bcf8:	f7f5 fdf7 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800bcfc:	2010      	movs	r0, #16
 800bcfe:	f7f5 fe10 	bl	8001922 <HAL_NVIC_EnableIRQ>

}
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	40023800 	.word	0x40023800

0800bd10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b08a      	sub	sp, #40	; 0x28
 800bd14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd16:	f107 0314 	add.w	r3, r7, #20
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	605a      	str	r2, [r3, #4]
 800bd20:	609a      	str	r2, [r3, #8]
 800bd22:	60da      	str	r2, [r3, #12]
 800bd24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bd26:	2300      	movs	r3, #0
 800bd28:	613b      	str	r3, [r7, #16]
 800bd2a:	4b2a      	ldr	r3, [pc, #168]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2e:	4a29      	ldr	r2, [pc, #164]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd34:	6313      	str	r3, [r2, #48]	; 0x30
 800bd36:	4b27      	ldr	r3, [pc, #156]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd3e:	613b      	str	r3, [r7, #16]
 800bd40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd42:	2300      	movs	r3, #0
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	4b23      	ldr	r3, [pc, #140]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4a:	4a22      	ldr	r2, [pc, #136]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd4c:	f043 0304 	orr.w	r3, r3, #4
 800bd50:	6313      	str	r3, [r2, #48]	; 0x30
 800bd52:	4b20      	ldr	r3, [pc, #128]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd56:	f003 0304 	and.w	r3, r3, #4
 800bd5a:	60fb      	str	r3, [r7, #12]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd5e:	2300      	movs	r3, #0
 800bd60:	60bb      	str	r3, [r7, #8]
 800bd62:	4b1c      	ldr	r3, [pc, #112]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd66:	4a1b      	ldr	r2, [pc, #108]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd68:	f043 0301 	orr.w	r3, r3, #1
 800bd6c:	6313      	str	r3, [r2, #48]	; 0x30
 800bd6e:	4b19      	ldr	r3, [pc, #100]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd72:	f003 0301 	and.w	r3, r3, #1
 800bd76:	60bb      	str	r3, [r7, #8]
 800bd78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	607b      	str	r3, [r7, #4]
 800bd7e:	4b15      	ldr	r3, [pc, #84]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd82:	4a14      	ldr	r2, [pc, #80]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd84:	f043 0302 	orr.w	r3, r3, #2
 800bd88:	6313      	str	r3, [r2, #48]	; 0x30
 800bd8a:	4b12      	ldr	r3, [pc, #72]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8e:	f003 0302 	and.w	r3, r3, #2
 800bd92:	607b      	str	r3, [r7, #4]
 800bd94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bd96:	2300      	movs	r3, #0
 800bd98:	603b      	str	r3, [r7, #0]
 800bd9a:	4b0e      	ldr	r3, [pc, #56]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9e:	4a0d      	ldr	r2, [pc, #52]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bda0:	f043 0308 	orr.w	r3, r3, #8
 800bda4:	6313      	str	r3, [r2, #48]	; 0x30
 800bda6:	4b0b      	ldr	r3, [pc, #44]	; (800bdd4 <MX_GPIO_Init+0xc4>)
 800bda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdaa:	f003 0308 	and.w	r3, r3, #8
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CardDet_Pin */
  GPIO_InitStruct.Pin = CardDet_Pin;
 800bdb2:	2380      	movs	r3, #128	; 0x80
 800bdb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CardDet_GPIO_Port, &GPIO_InitStruct);
 800bdbe:	f107 0314 	add.w	r3, r7, #20
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	4804      	ldr	r0, [pc, #16]	; (800bdd8 <MX_GPIO_Init+0xc8>)
 800bdc6:	f7f6 f9a5 	bl	8002114 <HAL_GPIO_Init>

}
 800bdca:	bf00      	nop
 800bdcc:	3728      	adds	r7, #40	; 0x28
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	40023800 	.word	0x40023800
 800bdd8:	40020800 	.word	0x40020800

0800bddc <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s2) {
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	if (hi2s2->Instance == I2S2) {
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a04      	ldr	r2, [pc, #16]	; (800bdfc <HAL_I2S_TxCpltCallback+0x20>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d101      	bne.n	800bdf2 <HAL_I2S_TxCpltCallback+0x16>
		AudioPlay_TransferComplete_CallBack();
 800bdee:	f7ff faef 	bl	800b3d0 <AudioPlay_TransferComplete_CallBack>
	}
}
 800bdf2:	bf00      	nop
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40003800 	.word	0x40003800

0800be00 <HAL_I2S_TxHalfCpltCallback>:
//---------------------------------------------------------
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s2) {
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
	if (hi2s2->Instance == I2S2) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a04      	ldr	r2, [pc, #16]	; (800be20 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d101      	bne.n	800be16 <HAL_I2S_TxHalfCpltCallback+0x16>
		AudioPlay_HalfTransfer_CallBack();
 800be12:	f7ff fad7 	bl	800b3c4 <AudioPlay_HalfTransfer_CallBack>
	}
}
 800be16:	bf00      	nop
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	40003800 	.word	0x40003800

0800be24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800be24:	b480      	push	{r7}
 800be26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800be28:	bf00      	nop
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
	...

0800be34 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be3e:	4b0b      	ldr	r3, [pc, #44]	; (800be6c <SD_CheckStatus+0x38>)
 800be40:	2201      	movs	r2, #1
 800be42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800be44:	f7ff fb2c 	bl	800b4a0 <BSP_SD_GetCardState>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d107      	bne.n	800be5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800be4e:	4b07      	ldr	r3, [pc, #28]	; (800be6c <SD_CheckStatus+0x38>)
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	b2db      	uxtb	r3, r3
 800be54:	f023 0301 	bic.w	r3, r3, #1
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	4b04      	ldr	r3, [pc, #16]	; (800be6c <SD_CheckStatus+0x38>)
 800be5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800be5e:	4b03      	ldr	r3, [pc, #12]	; (800be6c <SD_CheckStatus+0x38>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	b2db      	uxtb	r3, r3
}
 800be64:	4618      	mov	r0, r3
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	20000124 	.word	0x20000124

0800be70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800be7a:	4b0b      	ldr	r3, [pc, #44]	; (800bea8 <SD_initialize+0x38>)
 800be7c:	2201      	movs	r2, #1
 800be7e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800be80:	f7ff faac 	bl	800b3dc <BSP_SD_Init>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d107      	bne.n	800be9a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff ffd1 	bl	800be34 <SD_CheckStatus>
 800be92:	4603      	mov	r3, r0
 800be94:	461a      	mov	r2, r3
 800be96:	4b04      	ldr	r3, [pc, #16]	; (800bea8 <SD_initialize+0x38>)
 800be98:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800be9a:	4b03      	ldr	r3, [pc, #12]	; (800bea8 <SD_initialize+0x38>)
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	b2db      	uxtb	r3, r3
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	20000124 	.word	0x20000124

0800beac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800beb6:	79fb      	ldrb	r3, [r7, #7]
 800beb8:	4618      	mov	r0, r3
 800beba:	f7ff ffbb 	bl	800be34 <SD_CheckStatus>
 800bebe:	4603      	mov	r3, r0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	607a      	str	r2, [r7, #4]
 800bed2:	603b      	str	r3, [r7, #0]
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bed8:	2301      	movs	r3, #1
 800beda:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bedc:	f04f 33ff 	mov.w	r3, #4294967295
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	6879      	ldr	r1, [r7, #4]
 800bee4:	68b8      	ldr	r0, [r7, #8]
 800bee6:	f7ff fa9f 	bl	800b428 <BSP_SD_ReadBlocks>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d107      	bne.n	800bf00 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bef0:	bf00      	nop
 800bef2:	f7ff fad5 	bl	800b4a0 <BSP_SD_GetCardState>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1fa      	bne.n	800bef2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3718      	adds	r7, #24
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b086      	sub	sp, #24
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	603b      	str	r3, [r7, #0]
 800bf16:	4603      	mov	r3, r0
 800bf18:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf22:	683a      	ldr	r2, [r7, #0]
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	68b8      	ldr	r0, [r7, #8]
 800bf28:	f7ff fa9c 	bl	800b464 <BSP_SD_WriteBlocks>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d107      	bne.n	800bf42 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bf32:	bf00      	nop
 800bf34:	f7ff fab4 	bl	800b4a0 <BSP_SD_GetCardState>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1fa      	bne.n	800bf34 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08c      	sub	sp, #48	; 0x30
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	4603      	mov	r3, r0
 800bf54:	603a      	str	r2, [r7, #0]
 800bf56:	71fb      	strb	r3, [r7, #7]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bf62:	4b25      	ldr	r3, [pc, #148]	; (800bff8 <SD_ioctl+0xac>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d001      	beq.n	800bf74 <SD_ioctl+0x28>
 800bf70:	2303      	movs	r3, #3
 800bf72:	e03c      	b.n	800bfee <SD_ioctl+0xa2>

  switch (cmd)
 800bf74:	79bb      	ldrb	r3, [r7, #6]
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d834      	bhi.n	800bfe4 <SD_ioctl+0x98>
 800bf7a:	a201      	add	r2, pc, #4	; (adr r2, 800bf80 <SD_ioctl+0x34>)
 800bf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf80:	0800bf91 	.word	0x0800bf91
 800bf84:	0800bf99 	.word	0x0800bf99
 800bf88:	0800bfb1 	.word	0x0800bfb1
 800bf8c:	0800bfcb 	.word	0x0800bfcb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bf96:	e028      	b.n	800bfea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bf98:	f107 030c 	add.w	r3, r7, #12
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7ff fa8f 	bl	800b4c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bfa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bfae:	e01c      	b.n	800bfea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bfb0:	f107 030c 	add.w	r3, r7, #12
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7ff fa83 	bl	800b4c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bfc8:	e00f      	b.n	800bfea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bfca:	f107 030c 	add.w	r3, r7, #12
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7ff fa76 	bl	800b4c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	0a5a      	lsrs	r2, r3, #9
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bfe2:	e002      	b.n	800bfea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bfe4:	2304      	movs	r3, #4
 800bfe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bfea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3730      	adds	r7, #48	; 0x30
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20000124 	.word	0x20000124

0800bffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c002:	2300      	movs	r3, #0
 800c004:	607b      	str	r3, [r7, #4]
 800c006:	4b10      	ldr	r3, [pc, #64]	; (800c048 <HAL_MspInit+0x4c>)
 800c008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c00a:	4a0f      	ldr	r2, [pc, #60]	; (800c048 <HAL_MspInit+0x4c>)
 800c00c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c010:	6453      	str	r3, [r2, #68]	; 0x44
 800c012:	4b0d      	ldr	r3, [pc, #52]	; (800c048 <HAL_MspInit+0x4c>)
 800c014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c01a:	607b      	str	r3, [r7, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c01e:	2300      	movs	r3, #0
 800c020:	603b      	str	r3, [r7, #0]
 800c022:	4b09      	ldr	r3, [pc, #36]	; (800c048 <HAL_MspInit+0x4c>)
 800c024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c026:	4a08      	ldr	r2, [pc, #32]	; (800c048 <HAL_MspInit+0x4c>)
 800c028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c02c:	6413      	str	r3, [r2, #64]	; 0x40
 800c02e:	4b06      	ldr	r3, [pc, #24]	; (800c048 <HAL_MspInit+0x4c>)
 800c030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c036:	603b      	str	r3, [r7, #0]
 800c038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c03a:	bf00      	nop
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	40023800 	.word	0x40023800

0800c04c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08a      	sub	sp, #40	; 0x28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c054:	f107 0314 	add.w	r3, r7, #20
 800c058:	2200      	movs	r2, #0
 800c05a:	601a      	str	r2, [r3, #0]
 800c05c:	605a      	str	r2, [r3, #4]
 800c05e:	609a      	str	r2, [r3, #8]
 800c060:	60da      	str	r2, [r3, #12]
 800c062:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a17      	ldr	r2, [pc, #92]	; (800c0c8 <HAL_ADC_MspInit+0x7c>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d127      	bne.n	800c0be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c06e:	2300      	movs	r3, #0
 800c070:	613b      	str	r3, [r7, #16]
 800c072:	4b16      	ldr	r3, [pc, #88]	; (800c0cc <HAL_ADC_MspInit+0x80>)
 800c074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c076:	4a15      	ldr	r2, [pc, #84]	; (800c0cc <HAL_ADC_MspInit+0x80>)
 800c078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c07c:	6453      	str	r3, [r2, #68]	; 0x44
 800c07e:	4b13      	ldr	r3, [pc, #76]	; (800c0cc <HAL_ADC_MspInit+0x80>)
 800c080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c086:	613b      	str	r3, [r7, #16]
 800c088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c08a:	2300      	movs	r3, #0
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <HAL_ADC_MspInit+0x80>)
 800c090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c092:	4a0e      	ldr	r2, [pc, #56]	; (800c0cc <HAL_ADC_MspInit+0x80>)
 800c094:	f043 0301 	orr.w	r3, r3, #1
 800c098:	6313      	str	r3, [r2, #48]	; 0x30
 800c09a:	4b0c      	ldr	r3, [pc, #48]	; (800c0cc <HAL_ADC_MspInit+0x80>)
 800c09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 800c0a6:	2308      	movs	r3, #8
 800c0a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 800c0b2:	f107 0314 	add.w	r3, r7, #20
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4805      	ldr	r0, [pc, #20]	; (800c0d0 <HAL_ADC_MspInit+0x84>)
 800c0ba:	f7f6 f82b 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c0be:	bf00      	nop
 800c0c0:	3728      	adds	r7, #40	; 0x28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	40012000 	.word	0x40012000
 800c0cc:	40023800 	.word	0x40023800
 800c0d0:	40020000 	.word	0x40020000

0800c0d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b08a      	sub	sp, #40	; 0x28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0dc:	f107 0314 	add.w	r3, r7, #20
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	601a      	str	r2, [r3, #0]
 800c0e4:	605a      	str	r2, [r3, #4]
 800c0e6:	609a      	str	r2, [r3, #8]
 800c0e8:	60da      	str	r2, [r3, #12]
 800c0ea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a52      	ldr	r2, [pc, #328]	; (800c23c <HAL_I2S_MspInit+0x168>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	f040 809d 	bne.w	800c232 <HAL_I2S_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	613b      	str	r3, [r7, #16]
 800c0fc:	4b50      	ldr	r3, [pc, #320]	; (800c240 <HAL_I2S_MspInit+0x16c>)
 800c0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c100:	4a4f      	ldr	r2, [pc, #316]	; (800c240 <HAL_I2S_MspInit+0x16c>)
 800c102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c106:	6413      	str	r3, [r2, #64]	; 0x40
 800c108:	4b4d      	ldr	r3, [pc, #308]	; (800c240 <HAL_I2S_MspInit+0x16c>)
 800c10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c10c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c114:	2300      	movs	r3, #0
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	4b49      	ldr	r3, [pc, #292]	; (800c240 <HAL_I2S_MspInit+0x16c>)
 800c11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11c:	4a48      	ldr	r2, [pc, #288]	; (800c240 <HAL_I2S_MspInit+0x16c>)
 800c11e:	f043 0304 	orr.w	r3, r3, #4
 800c122:	6313      	str	r3, [r2, #48]	; 0x30
 800c124:	4b46      	ldr	r3, [pc, #280]	; (800c240 <HAL_I2S_MspInit+0x16c>)
 800c126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c128:	f003 0304 	and.w	r3, r3, #4
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c130:	2300      	movs	r3, #0
 800c132:	60bb      	str	r3, [r7, #8]
 800c134:	4b42      	ldr	r3, [pc, #264]	; (800c240 <HAL_I2S_MspInit+0x16c>)
 800c136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c138:	4a41      	ldr	r2, [pc, #260]	; (800c240 <HAL_I2S_MspInit+0x16c>)
 800c13a:	f043 0302 	orr.w	r3, r3, #2
 800c13e:	6313      	str	r3, [r2, #48]	; 0x30
 800c140:	4b3f      	ldr	r3, [pc, #252]	; (800c240 <HAL_I2S_MspInit+0x16c>)
 800c142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c144:	f003 0302 	and.w	r3, r3, #2
 800c148:	60bb      	str	r3, [r7, #8]
 800c14a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c14c:	2308      	movs	r3, #8
 800c14e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c150:	2302      	movs	r3, #2
 800c152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c154:	2300      	movs	r3, #0
 800c156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c158:	2300      	movs	r3, #0
 800c15a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c15c:	2305      	movs	r3, #5
 800c15e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c160:	f107 0314 	add.w	r3, r7, #20
 800c164:	4619      	mov	r1, r3
 800c166:	4837      	ldr	r0, [pc, #220]	; (800c244 <HAL_I2S_MspInit+0x170>)
 800c168:	f7f5 ffd4 	bl	8002114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800c16c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c172:	2302      	movs	r3, #2
 800c174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c176:	2300      	movs	r3, #0
 800c178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c17a:	2300      	movs	r3, #0
 800c17c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c17e:	2305      	movs	r3, #5
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c182:	f107 0314 	add.w	r3, r7, #20
 800c186:	4619      	mov	r1, r3
 800c188:	482f      	ldr	r0, [pc, #188]	; (800c248 <HAL_I2S_MspInit+0x174>)
 800c18a:	f7f5 ffc3 	bl	8002114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800c18e:	2340      	movs	r3, #64	; 0x40
 800c190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c192:	2302      	movs	r3, #2
 800c194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c196:	2300      	movs	r3, #0
 800c198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c19a:	2301      	movs	r3, #1
 800c19c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c19e:	2305      	movs	r3, #5
 800c1a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c1a2:	f107 0314 	add.w	r3, r7, #20
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4826      	ldr	r0, [pc, #152]	; (800c244 <HAL_I2S_MspInit+0x170>)
 800c1aa:	f7f5 ffb3 	bl	8002114 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800c1ae:	4b27      	ldr	r3, [pc, #156]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1b0:	4a27      	ldr	r2, [pc, #156]	; (800c250 <HAL_I2S_MspInit+0x17c>)
 800c1b2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800c1b4:	4b25      	ldr	r3, [pc, #148]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c1ba:	4b24      	ldr	r3, [pc, #144]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1bc:	2240      	movs	r2, #64	; 0x40
 800c1be:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c1c0:	4b22      	ldr	r3, [pc, #136]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c1c6:	4b21      	ldr	r3, [pc, #132]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1cc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c1ce:	4b1f      	ldr	r3, [pc, #124]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1d4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c1d6:	4b1d      	ldr	r3, [pc, #116]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c1dc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800c1de:	4b1b      	ldr	r3, [pc, #108]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800c1e4:	4b19      	ldr	r3, [pc, #100]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c1ea:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c1ec:	4b17      	ldr	r3, [pc, #92]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1ee:	2204      	movs	r2, #4
 800c1f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800c1f2:	4b16      	ldr	r3, [pc, #88]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1f4:	2203      	movs	r2, #3
 800c1f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_INC8;
 800c1f8:	4b14      	ldr	r3, [pc, #80]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c1fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800c200:	4b12      	ldr	r3, [pc, #72]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c202:	2200      	movs	r2, #0
 800c204:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800c206:	4811      	ldr	r0, [pc, #68]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c208:	f7f5 fba6 	bl	8001958 <HAL_DMA_Init>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d001      	beq.n	800c216 <HAL_I2S_MspInit+0x142>
    {
      Error_Handler();
 800c212:	f7ff fe07 	bl	800be24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a0c      	ldr	r2, [pc, #48]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c21a:	639a      	str	r2, [r3, #56]	; 0x38
 800c21c:	4a0b      	ldr	r2, [pc, #44]	; (800c24c <HAL_I2S_MspInit+0x178>)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800c222:	2200      	movs	r2, #0
 800c224:	2100      	movs	r1, #0
 800c226:	2024      	movs	r0, #36	; 0x24
 800c228:	f7f5 fb5f 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800c22c:	2024      	movs	r0, #36	; 0x24
 800c22e:	f7f5 fb78 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800c232:	bf00      	nop
 800c234:	3728      	adds	r7, #40	; 0x28
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	40003800 	.word	0x40003800
 800c240:	40023800 	.word	0x40023800
 800c244:	40020800 	.word	0x40020800
 800c248:	40020400 	.word	0x40020400
 800c24c:	20000f00 	.word	0x20000f00
 800c250:	40026070 	.word	0x40026070

0800c254 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b08a      	sub	sp, #40	; 0x28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c25c:	f107 0314 	add.w	r3, r7, #20
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	605a      	str	r2, [r3, #4]
 800c266:	609a      	str	r2, [r3, #8]
 800c268:	60da      	str	r2, [r3, #12]
 800c26a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a28      	ldr	r2, [pc, #160]	; (800c314 <HAL_SD_MspInit+0xc0>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d14a      	bne.n	800c30c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800c276:	2300      	movs	r3, #0
 800c278:	613b      	str	r3, [r7, #16]
 800c27a:	4b27      	ldr	r3, [pc, #156]	; (800c318 <HAL_SD_MspInit+0xc4>)
 800c27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27e:	4a26      	ldr	r2, [pc, #152]	; (800c318 <HAL_SD_MspInit+0xc4>)
 800c280:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c284:	6453      	str	r3, [r2, #68]	; 0x44
 800c286:	4b24      	ldr	r3, [pc, #144]	; (800c318 <HAL_SD_MspInit+0xc4>)
 800c288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c28a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c292:	2300      	movs	r3, #0
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	4b20      	ldr	r3, [pc, #128]	; (800c318 <HAL_SD_MspInit+0xc4>)
 800c298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29a:	4a1f      	ldr	r2, [pc, #124]	; (800c318 <HAL_SD_MspInit+0xc4>)
 800c29c:	f043 0304 	orr.w	r3, r3, #4
 800c2a0:	6313      	str	r3, [r2, #48]	; 0x30
 800c2a2:	4b1d      	ldr	r3, [pc, #116]	; (800c318 <HAL_SD_MspInit+0xc4>)
 800c2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a6:	f003 0304 	and.w	r3, r3, #4
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60bb      	str	r3, [r7, #8]
 800c2b2:	4b19      	ldr	r3, [pc, #100]	; (800c318 <HAL_SD_MspInit+0xc4>)
 800c2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b6:	4a18      	ldr	r2, [pc, #96]	; (800c318 <HAL_SD_MspInit+0xc4>)
 800c2b8:	f043 0308 	orr.w	r3, r3, #8
 800c2bc:	6313      	str	r3, [r2, #48]	; 0x30
 800c2be:	4b16      	ldr	r3, [pc, #88]	; (800c318 <HAL_SD_MspInit+0xc4>)
 800c2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c2:	f003 0308 	and.w	r3, r3, #8
 800c2c6:	60bb      	str	r3, [r7, #8]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800c2ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800c2ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c2dc:	230c      	movs	r3, #12
 800c2de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c2e0:	f107 0314 	add.w	r3, r7, #20
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	480d      	ldr	r0, [pc, #52]	; (800c31c <HAL_SD_MspInit+0xc8>)
 800c2e8:	f7f5 ff14 	bl	8002114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c2ec:	2304      	movs	r3, #4
 800c2ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c2fc:	230c      	movs	r3, #12
 800c2fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c300:	f107 0314 	add.w	r3, r7, #20
 800c304:	4619      	mov	r1, r3
 800c306:	4806      	ldr	r0, [pc, #24]	; (800c320 <HAL_SD_MspInit+0xcc>)
 800c308:	f7f5 ff04 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800c30c:	bf00      	nop
 800c30e:	3728      	adds	r7, #40	; 0x28
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	40012c00 	.word	0x40012c00
 800c318:	40023800 	.word	0x40023800
 800c31c:	40020800 	.word	0x40020800
 800c320:	40020c00 	.word	0x40020c00

0800c324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a0e      	ldr	r2, [pc, #56]	; (800c36c <HAL_TIM_Base_MspInit+0x48>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d115      	bne.n	800c362 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c336:	2300      	movs	r3, #0
 800c338:	60fb      	str	r3, [r7, #12]
 800c33a:	4b0d      	ldr	r3, [pc, #52]	; (800c370 <HAL_TIM_Base_MspInit+0x4c>)
 800c33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c33e:	4a0c      	ldr	r2, [pc, #48]	; (800c370 <HAL_TIM_Base_MspInit+0x4c>)
 800c340:	f043 0301 	orr.w	r3, r3, #1
 800c344:	6453      	str	r3, [r2, #68]	; 0x44
 800c346:	4b0a      	ldr	r3, [pc, #40]	; (800c370 <HAL_TIM_Base_MspInit+0x4c>)
 800c348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c34a:	f003 0301 	and.w	r3, r3, #1
 800c34e:	60fb      	str	r3, [r7, #12]
 800c350:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800c352:	2200      	movs	r2, #0
 800c354:	2100      	movs	r1, #0
 800c356:	2019      	movs	r0, #25
 800c358:	f7f5 fac7 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c35c:	2019      	movs	r0, #25
 800c35e:	f7f5 fae0 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800c362:	bf00      	nop
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	40010000 	.word	0x40010000
 800c370:	40023800 	.word	0x40023800

0800c374 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a22      	ldr	r2, [pc, #136]	; (800c40c <HAL_TIM_PWM_MspInit+0x98>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d13d      	bne.n	800c402 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	4b21      	ldr	r3, [pc, #132]	; (800c410 <HAL_TIM_PWM_MspInit+0x9c>)
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	4a20      	ldr	r2, [pc, #128]	; (800c410 <HAL_TIM_PWM_MspInit+0x9c>)
 800c390:	f043 0302 	orr.w	r3, r3, #2
 800c394:	6413      	str	r3, [r2, #64]	; 0x40
 800c396:	4b1e      	ldr	r3, [pc, #120]	; (800c410 <HAL_TIM_PWM_MspInit+0x9c>)
 800c398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39a:	f003 0302 	and.w	r3, r3, #2
 800c39e:	60fb      	str	r3, [r7, #12]
 800c3a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800c3a2:	4b1c      	ldr	r3, [pc, #112]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3a4:	4a1c      	ldr	r2, [pc, #112]	; (800c418 <HAL_TIM_PWM_MspInit+0xa4>)
 800c3a6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800c3a8:	4b1a      	ldr	r3, [pc, #104]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3aa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800c3ae:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c3b0:	4b18      	ldr	r3, [pc, #96]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3b2:	2240      	movs	r2, #64	; 0x40
 800c3b4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c3b6:	4b17      	ldr	r3, [pc, #92]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800c3bc:	4b15      	ldr	r3, [pc, #84]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c3c2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c3c4:	4b13      	ldr	r3, [pc, #76]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3ca:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c3cc:	4b11      	ldr	r3, [pc, #68]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c3d2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800c3d4:	4b0f      	ldr	r3, [pc, #60]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800c3da:	4b0e      	ldr	r3, [pc, #56]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c3e0:	4b0c      	ldr	r3, [pc, #48]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800c3e6:	480b      	ldr	r0, [pc, #44]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3e8:	f7f5 fab6 	bl	8001958 <HAL_DMA_Init>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800c3f2:	f7ff fd17 	bl	800be24 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	4a06      	ldr	r2, [pc, #24]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3fa:	629a      	str	r2, [r3, #40]	; 0x28
 800c3fc:	4a05      	ldr	r2, [pc, #20]	; (800c414 <HAL_TIM_PWM_MspInit+0xa0>)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800c402:	bf00      	nop
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	40000400 	.word	0x40000400
 800c410:	40023800 	.word	0x40023800
 800c414:	20000d7c 	.word	0x20000d7c
 800c418:	40026088 	.word	0x40026088

0800c41c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08a      	sub	sp, #40	; 0x28
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c424:	f107 0314 	add.w	r3, r7, #20
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	605a      	str	r2, [r3, #4]
 800c42e:	609a      	str	r2, [r3, #8]
 800c430:	60da      	str	r2, [r3, #12]
 800c432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a24      	ldr	r2, [pc, #144]	; (800c4cc <HAL_TIM_MspPostInit+0xb0>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d11f      	bne.n	800c47e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c43e:	2300      	movs	r3, #0
 800c440:	613b      	str	r3, [r7, #16]
 800c442:	4b23      	ldr	r3, [pc, #140]	; (800c4d0 <HAL_TIM_MspPostInit+0xb4>)
 800c444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c446:	4a22      	ldr	r2, [pc, #136]	; (800c4d0 <HAL_TIM_MspPostInit+0xb4>)
 800c448:	f043 0302 	orr.w	r3, r3, #2
 800c44c:	6313      	str	r3, [r2, #48]	; 0x30
 800c44e:	4b20      	ldr	r3, [pc, #128]	; (800c4d0 <HAL_TIM_MspPostInit+0xb4>)
 800c450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c452:	f003 0302 	and.w	r3, r3, #2
 800c456:	613b      	str	r3, [r7, #16]
 800c458:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c45a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c45e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c460:	2302      	movs	r3, #2
 800c462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c464:	2300      	movs	r3, #0
 800c466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c468:	2300      	movs	r3, #0
 800c46a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c46c:	2301      	movs	r3, #1
 800c46e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c470:	f107 0314 	add.w	r3, r7, #20
 800c474:	4619      	mov	r1, r3
 800c476:	4817      	ldr	r0, [pc, #92]	; (800c4d4 <HAL_TIM_MspPostInit+0xb8>)
 800c478:	f7f5 fe4c 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c47c:	e022      	b.n	800c4c4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a15      	ldr	r2, [pc, #84]	; (800c4d8 <HAL_TIM_MspPostInit+0xbc>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d11d      	bne.n	800c4c4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c488:	2300      	movs	r3, #0
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <HAL_TIM_MspPostInit+0xb4>)
 800c48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c490:	4a0f      	ldr	r2, [pc, #60]	; (800c4d0 <HAL_TIM_MspPostInit+0xb4>)
 800c492:	f043 0301 	orr.w	r3, r3, #1
 800c496:	6313      	str	r3, [r2, #48]	; 0x30
 800c498:	4b0d      	ldr	r3, [pc, #52]	; (800c4d0 <HAL_TIM_MspPostInit+0xb4>)
 800c49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c49c:	f003 0301 	and.w	r3, r3, #1
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c4a4:	2380      	movs	r3, #128	; 0x80
 800c4a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4b8:	f107 0314 	add.w	r3, r7, #20
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4807      	ldr	r0, [pc, #28]	; (800c4dc <HAL_TIM_MspPostInit+0xc0>)
 800c4c0:	f7f5 fe28 	bl	8002114 <HAL_GPIO_Init>
}
 800c4c4:	bf00      	nop
 800c4c6:	3728      	adds	r7, #40	; 0x28
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	40010000 	.word	0x40010000
 800c4d0:	40023800 	.word	0x40023800
 800c4d4:	40020400 	.word	0x40020400
 800c4d8:	40000400 	.word	0x40000400
 800c4dc:	40020000 	.word	0x40020000

0800c4e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c4e4:	bf00      	nop
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c4f2:	e7fe      	b.n	800c4f2 <HardFault_Handler+0x4>

0800c4f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c4f8:	e7fe      	b.n	800c4f8 <MemManage_Handler+0x4>

0800c4fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c4fe:	e7fe      	b.n	800c4fe <BusFault_Handler+0x4>

0800c500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c500:	b480      	push	{r7}
 800c502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c504:	e7fe      	b.n	800c504 <UsageFault_Handler+0x4>

0800c506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c506:	b480      	push	{r7}
 800c508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c50a:	bf00      	nop
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c514:	b480      	push	{r7}
 800c516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c518:	bf00      	nop
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c522:	b480      	push	{r7}
 800c524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c526:	bf00      	nop
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c534:	f7f4 fcf0 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c538:	bf00      	nop
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800c540:	4802      	ldr	r0, [pc, #8]	; (800c54c <DMA1_Stream4_IRQHandler+0x10>)
 800c542:	f7f5 fb7f 	bl	8001c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800c546:	bf00      	nop
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20000f00 	.word	0x20000f00

0800c550 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800c554:	4802      	ldr	r0, [pc, #8]	; (800c560 <DMA1_Stream5_IRQHandler+0x10>)
 800c556:	f7f5 fb75 	bl	8001c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800c55a:	bf00      	nop
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	20000d7c 	.word	0x20000d7c

0800c564 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ledRefresh = 1;
 800c568:	4b03      	ldr	r3, [pc, #12]	; (800c578 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800c56a:	2201      	movs	r2, #1
 800c56c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c56e:	4803      	ldr	r0, [pc, #12]	; (800c57c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800c570:	f7fa f928 	bl	80067c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800c574:	bf00      	nop
 800c576:	bd80      	pop	{r7, pc}
 800c578:	2000011c 	.word	0x2000011c
 800c57c:	20000ddc 	.word	0x20000ddc

0800c580 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800c584:	4802      	ldr	r0, [pc, #8]	; (800c590 <SPI2_IRQHandler+0x10>)
 800c586:	f7f6 fb21 	bl	8002bcc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800c58a:	bf00      	nop
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000f60 	.word	0x20000f60

0800c594 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800c598:	4802      	ldr	r0, [pc, #8]	; (800c5a4 <OTG_FS_IRQHandler+0x10>)
 800c59a:	f7f7 f857 	bl	800364c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800c59e:	bf00      	nop
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20001278 	.word	0x20001278

0800c5a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c5b0:	4b11      	ldr	r3, [pc, #68]	; (800c5f8 <_sbrk+0x50>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d102      	bne.n	800c5be <_sbrk+0x16>
		heap_end = &end;
 800c5b8:	4b0f      	ldr	r3, [pc, #60]	; (800c5f8 <_sbrk+0x50>)
 800c5ba:	4a10      	ldr	r2, [pc, #64]	; (800c5fc <_sbrk+0x54>)
 800c5bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c5be:	4b0e      	ldr	r3, [pc, #56]	; (800c5f8 <_sbrk+0x50>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c5c4:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <_sbrk+0x50>)
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	466a      	mov	r2, sp
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d907      	bls.n	800c5e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c5d2:	f000 fe2d 	bl	800d230 <__errno>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	230c      	movs	r3, #12
 800c5da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e0:	e006      	b.n	800c5f0 <_sbrk+0x48>
	}

	heap_end += incr;
 800c5e2:	4b05      	ldr	r3, [pc, #20]	; (800c5f8 <_sbrk+0x50>)
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	4a03      	ldr	r2, [pc, #12]	; (800c5f8 <_sbrk+0x50>)
 800c5ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	20000238 	.word	0x20000238
 800c5fc:	20001888 	.word	0x20001888

0800c600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c600:	b480      	push	{r7}
 800c602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c604:	4b08      	ldr	r3, [pc, #32]	; (800c628 <SystemInit+0x28>)
 800c606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c60a:	4a07      	ldr	r2, [pc, #28]	; (800c628 <SystemInit+0x28>)
 800c60c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c614:	4b04      	ldr	r3, [pc, #16]	; (800c628 <SystemInit+0x28>)
 800c616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c61a:	609a      	str	r2, [r3, #8]
#endif
}
 800c61c:	bf00      	nop
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	e000ed00 	.word	0xe000ed00

0800c62c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c630:	2200      	movs	r2, #0
 800c632:	4912      	ldr	r1, [pc, #72]	; (800c67c <MX_USB_DEVICE_Init+0x50>)
 800c634:	4812      	ldr	r0, [pc, #72]	; (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c636:	f7fd fd1b 	bl	800a070 <USBD_Init>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c640:	f7ff fbf0 	bl	800be24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800c644:	490f      	ldr	r1, [pc, #60]	; (800c684 <MX_USB_DEVICE_Init+0x58>)
 800c646:	480e      	ldr	r0, [pc, #56]	; (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c648:	f7fd fd48 	bl	800a0dc <USBD_RegisterClass>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c652:	f7ff fbe7 	bl	800be24 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800c656:	490c      	ldr	r1, [pc, #48]	; (800c688 <MX_USB_DEVICE_Init+0x5c>)
 800c658:	4809      	ldr	r0, [pc, #36]	; (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c65a:	f7fd fb67 	bl	8009d2c <USBD_AUDIO_RegisterInterface>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c664:	f7ff fbde 	bl	800be24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c668:	4805      	ldr	r0, [pc, #20]	; (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c66a:	f7fd fd58 	bl	800a11e <USBD_Start>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c674:	f7ff fbd6 	bl	800be24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c678:	bf00      	nop
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20000148 	.word	0x20000148
 800c680:	20000fa8 	.word	0x20000fa8
 800c684:	20000008 	.word	0x20000008
 800c688:	2000012c 	.word	0x2000012c

0800c68c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, 8192);
  return (USBD_OK);
 800c698:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3714      	adds	r7, #20
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b082      	sub	sp, #8
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  AudioPlay_Stop();
 800c6ae:	f7fe fe63 	bl	800b378 <AudioPlay_Stop>
	return (USBD_OK);
 800c6b2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	//if (packetReceived>=-80)  {}//packetReceived-=80;
	packetReceived-=size;
 800c6ca:	4b25      	ldr	r3, [pc, #148]	; (800c760 <AUDIO_AudioCmd_FS+0xa4>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	4b22      	ldr	r3, [pc, #136]	; (800c760 <AUDIO_AudioCmd_FS+0xa4>)
 800c6d8:	601a      	str	r2, [r3, #0]
	if (packetReceived<-(2*7680) && playing)
 800c6da:	4b21      	ldr	r3, [pc, #132]	; (800c760 <AUDIO_AudioCmd_FS+0xa4>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f513 5f70 	cmn.w	r3, #15360	; 0x3c00
 800c6e2:	da11      	bge.n	800c708 <AUDIO_AudioCmd_FS+0x4c>
 800c6e4:	4b1f      	ldr	r3, [pc, #124]	; (800c764 <AUDIO_AudioCmd_FS+0xa8>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00d      	beq.n	800c708 <AUDIO_AudioCmd_FS+0x4c>
	{	memset(pbuf,0,AUDIO_TOTAL_BUF_SIZE);
 800c6ec:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f000 fdd6 	bl	800d2a4 <memset>
		packetReceived=0;
 800c6f8:	4b19      	ldr	r3, [pc, #100]	; (800c760 <AUDIO_AudioCmd_FS+0xa4>)
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	601a      	str	r2, [r3, #0]
		cmd=AUDIO_CMD_STOP;
 800c6fe:	2304      	movs	r3, #4
 800c700:	71fb      	strb	r3, [r7, #7]
		playing=0;
 800c702:	4b18      	ldr	r3, [pc, #96]	; (800c764 <AUDIO_AudioCmd_FS+0xa8>)
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]
	}

	//if (packetReceived<0) return (USBD_OK);;
	switch(cmd)
 800c708:	79fb      	ldrb	r3, [r7, #7]
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d011      	beq.n	800c732 <AUDIO_AudioCmd_FS+0x76>
 800c70e:	2b04      	cmp	r3, #4
 800c710:	d01e      	beq.n	800c750 <AUDIO_AudioCmd_FS+0x94>
 800c712:	2b01      	cmp	r3, #1
 800c714:	d11f      	bne.n	800c756 <AUDIO_AudioCmd_FS+0x9a>
  {
    case AUDIO_CMD_START:
    	packetReceived-=2*size;
 800c716:	4b12      	ldr	r3, [pc, #72]	; (800c760 <AUDIO_AudioCmd_FS+0xa4>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	461a      	mov	r2, r3
 800c724:	4b0e      	ldr	r3, [pc, #56]	; (800c760 <AUDIO_AudioCmd_FS+0xa4>)
 800c726:	601a      	str	r2, [r3, #0]
    	//if (packetReceived>=-80)
    	AudioPlay_Play((uint16_t*) pbuf, size);
 800c728:	68b9      	ldr	r1, [r7, #8]
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	f7fe fe02 	bl	800b334 <AudioPlay_Play>
    	//else AudioPlay_Play(nulls, size);
	break;
 800c730:	e011      	b.n	800c756 <AUDIO_AudioCmd_FS+0x9a>
    case AUDIO_CMD_PLAY:
    	packetReceived-=size;
 800c732:	4b0b      	ldr	r3, [pc, #44]	; (800c760 <AUDIO_AudioCmd_FS+0xa4>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	461a      	mov	r2, r3
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	461a      	mov	r2, r3
 800c73e:	4b08      	ldr	r3, [pc, #32]	; (800c760 <AUDIO_AudioCmd_FS+0xa4>)
 800c740:	601a      	str	r2, [r3, #0]
    	//if (packetReceived>=-80)
    	AudioPlay_ChangeBuffer((uint16_t*) pbuf, size);
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	b29b      	uxth	r3, r3
 800c746:	4619      	mov	r1, r3
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f7fe fe29 	bl	800b3a0 <AudioPlay_ChangeBuffer>
    	//else AudioPlay_ChangeBuffer(nulls, size);
    break;	
 800c74e:	e002      	b.n	800c756 <AUDIO_AudioCmd_FS+0x9a>
    case AUDIO_CMD_STOP:
    	AudioPlay_Stop();
 800c750:	f7fe fe12 	bl	800b378 <AudioPlay_Stop>
    	break;
 800c754:	bf00      	nop

  }
  //UNUSED(pbuf);
  //UNUSED(size);
 // UNUSED(cmd);
	return (USBD_OK);
 800c756:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3710      	adds	r7, #16
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	2000023c 	.word	0x2000023c
 800c764:	20000240 	.word	0x20000240

0800c768 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	4603      	mov	r3, r0
 800c770:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  //UNUSED(vol);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, vol*64);
  return (USBD_OK);
 800c772:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	4603      	mov	r3, r0
 800c788:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, 4096);
  return (USBD_OK);
 800c78a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  //UNUSED(pbuf);
  //UNUSED(size);
  UNUSED(cmd);
  packetReceived+=size;
 800c7a6:	4b07      	ldr	r3, [pc, #28]	; (800c7c4 <AUDIO_PeriodicTC_FS+0x2c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	4b04      	ldr	r3, [pc, #16]	; (800c7c4 <AUDIO_PeriodicTC_FS+0x2c>)
 800c7b4:	601a      	str	r2, [r3, #0]
  //HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) pbuf , size);
  return (USBD_OK);
 800c7b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	2000023c 	.word	0x2000023c

0800c7c8 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800c7cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
	/*if (packetReceived<=0)
			{
				packetReceived=0;
				AudioPlay_Stop();
			} else*/
	USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 800c7dc:	2102      	movs	r1, #2
 800c7de:	4802      	ldr	r0, [pc, #8]	; (800c7e8 <TransferComplete_CallBack_FS+0x10>)
 800c7e0:	f7fd f8d4 	bl	800998c <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 800c7e4:	bf00      	nop
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20000fa8 	.word	0x20000fa8

0800c7ec <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	af00      	add	r7, sp, #0
	/*if (packetReceived<=0)
			{
				packetReceived=0;
				AudioPlay_Stop();
			} else*/
	USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	4802      	ldr	r0, [pc, #8]	; (800c7fc <HalfTransfer_CallBack_FS+0x10>)
 800c7f4:	f7fd f8ca 	bl	800998c <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 800c7f8:	bf00      	nop
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20000fa8 	.word	0x20000fa8

0800c800 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b08a      	sub	sp, #40	; 0x28
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c808:	f107 0314 	add.w	r3, r7, #20
 800c80c:	2200      	movs	r2, #0
 800c80e:	601a      	str	r2, [r3, #0]
 800c810:	605a      	str	r2, [r3, #4]
 800c812:	609a      	str	r2, [r3, #8]
 800c814:	60da      	str	r2, [r3, #12]
 800c816:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c820:	d13a      	bne.n	800c898 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c822:	2300      	movs	r3, #0
 800c824:	613b      	str	r3, [r7, #16]
 800c826:	4b1e      	ldr	r3, [pc, #120]	; (800c8a0 <HAL_PCD_MspInit+0xa0>)
 800c828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82a:	4a1d      	ldr	r2, [pc, #116]	; (800c8a0 <HAL_PCD_MspInit+0xa0>)
 800c82c:	f043 0301 	orr.w	r3, r3, #1
 800c830:	6313      	str	r3, [r2, #48]	; 0x30
 800c832:	4b1b      	ldr	r3, [pc, #108]	; (800c8a0 <HAL_PCD_MspInit+0xa0>)
 800c834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	613b      	str	r3, [r7, #16]
 800c83c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c83e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c844:	2302      	movs	r3, #2
 800c846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c848:	2300      	movs	r3, #0
 800c84a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c84c:	2303      	movs	r3, #3
 800c84e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c850:	230a      	movs	r3, #10
 800c852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c854:	f107 0314 	add.w	r3, r7, #20
 800c858:	4619      	mov	r1, r3
 800c85a:	4812      	ldr	r0, [pc, #72]	; (800c8a4 <HAL_PCD_MspInit+0xa4>)
 800c85c:	f7f5 fc5a 	bl	8002114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c860:	4b0f      	ldr	r3, [pc, #60]	; (800c8a0 <HAL_PCD_MspInit+0xa0>)
 800c862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c864:	4a0e      	ldr	r2, [pc, #56]	; (800c8a0 <HAL_PCD_MspInit+0xa0>)
 800c866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c86a:	6353      	str	r3, [r2, #52]	; 0x34
 800c86c:	2300      	movs	r3, #0
 800c86e:	60fb      	str	r3, [r7, #12]
 800c870:	4b0b      	ldr	r3, [pc, #44]	; (800c8a0 <HAL_PCD_MspInit+0xa0>)
 800c872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c874:	4a0a      	ldr	r2, [pc, #40]	; (800c8a0 <HAL_PCD_MspInit+0xa0>)
 800c876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c87a:	6453      	str	r3, [r2, #68]	; 0x44
 800c87c:	4b08      	ldr	r3, [pc, #32]	; (800c8a0 <HAL_PCD_MspInit+0xa0>)
 800c87e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c884:	60fb      	str	r3, [r7, #12]
 800c886:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c888:	2200      	movs	r2, #0
 800c88a:	2100      	movs	r1, #0
 800c88c:	2043      	movs	r0, #67	; 0x43
 800c88e:	f7f5 f82c 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c892:	2043      	movs	r0, #67	; 0x43
 800c894:	f7f5 f845 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c898:	bf00      	nop
 800c89a:	3728      	adds	r7, #40	; 0x28
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	40023800 	.word	0x40023800
 800c8a4:	40020000 	.word	0x40020000

0800c8a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4610      	mov	r0, r2
 800c8c0:	f7fd fc78 	bl	800a1b4 <USBD_LL_SetupStage>
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c8de:	78fa      	ldrb	r2, [r7, #3]
 800c8e0:	6879      	ldr	r1, [r7, #4]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	1a9b      	subs	r3, r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	440b      	add	r3, r1
 800c8ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	78fb      	ldrb	r3, [r7, #3]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f7fd fcb0 	bl	800a25a <USBD_LL_DataOutStage>
}
 800c8fa:	bf00      	nop
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	460b      	mov	r3, r1
 800c90c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c914:	78fa      	ldrb	r2, [r7, #3]
 800c916:	6879      	ldr	r1, [r7, #4]
 800c918:	4613      	mov	r3, r2
 800c91a:	00db      	lsls	r3, r3, #3
 800c91c:	1a9b      	subs	r3, r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	440b      	add	r3, r1
 800c922:	3348      	adds	r3, #72	; 0x48
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	78fb      	ldrb	r3, [r7, #3]
 800c928:	4619      	mov	r1, r3
 800c92a:	f7fd fcf9 	bl	800a320 <USBD_LL_DataInStage>
}
 800c92e:	bf00      	nop
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b082      	sub	sp, #8
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c944:	4618      	mov	r0, r3
 800c946:	f7fd fdfd 	bl	800a544 <USBD_LL_SOF>
}
 800c94a:	bf00      	nop
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800c952:	b580      	push	{r7, lr}
 800c954:	b084      	sub	sp, #16
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c95a:	2301      	movs	r3, #1
 800c95c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d102      	bne.n	800c96c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c966:	2300      	movs	r3, #0
 800c968:	73fb      	strb	r3, [r7, #15]
 800c96a:	e008      	b.n	800c97e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	2b02      	cmp	r3, #2
 800c972:	d102      	bne.n	800c97a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c974:	2301      	movs	r3, #1
 800c976:	73fb      	strb	r3, [r7, #15]
 800c978:	e001      	b.n	800c97e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c97a:	f7ff fa53 	bl	800be24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c984:	7bfa      	ldrb	r2, [r7, #15]
 800c986:	4611      	mov	r1, r2
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fd fda0 	bl	800a4ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c994:	4618      	mov	r0, r3
 800c996:	f7fd fd59 	bl	800a44c <USBD_LL_Reset>
}
 800c99a:	bf00      	nop
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
	...

0800c9a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fd fd9b 	bl	800a4ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	6812      	ldr	r2, [r2, #0]
 800c9c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9ca:	f043 0301 	orr.w	r3, r3, #1
 800c9ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d005      	beq.n	800c9e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9d8:	4b04      	ldr	r3, [pc, #16]	; (800c9ec <HAL_PCD_SuspendCallback+0x48>)
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	4a03      	ldr	r2, [pc, #12]	; (800c9ec <HAL_PCD_SuspendCallback+0x48>)
 800c9de:	f043 0306 	orr.w	r3, r3, #6
 800c9e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c9e4:	bf00      	nop
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	e000ed00 	.word	0xe000ed00

0800c9f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fd fd8a 	bl	800a518 <USBD_LL_Resume>
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	460b      	mov	r3, r1
 800ca16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca1e:	78fa      	ldrb	r2, [r7, #3]
 800ca20:	4611      	mov	r1, r2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fd fdb5 	bl	800a592 <USBD_LL_IsoOUTIncomplete>
}
 800ca28:	bf00      	nop
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca42:	78fa      	ldrb	r2, [r7, #3]
 800ca44:	4611      	mov	r1, r2
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fd fd96 	bl	800a578 <USBD_LL_IsoINIncomplete>
}
 800ca4c:	bf00      	nop
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fd fda2 	bl	800a5ac <USBD_LL_DevConnected>
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fd fd9f 	bl	800a5c2 <USBD_LL_DevDisconnected>
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d13c      	bne.n	800cb16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ca9c:	4a20      	ldr	r2, [pc, #128]	; (800cb20 <USBD_LL_Init+0x94>)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a1e      	ldr	r2, [pc, #120]	; (800cb20 <USBD_LL_Init+0x94>)
 800caa8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800caac:	4b1c      	ldr	r3, [pc, #112]	; (800cb20 <USBD_LL_Init+0x94>)
 800caae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cab4:	4b1a      	ldr	r3, [pc, #104]	; (800cb20 <USBD_LL_Init+0x94>)
 800cab6:	2204      	movs	r2, #4
 800cab8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800caba:	4b19      	ldr	r3, [pc, #100]	; (800cb20 <USBD_LL_Init+0x94>)
 800cabc:	2202      	movs	r2, #2
 800cabe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cac0:	4b17      	ldr	r3, [pc, #92]	; (800cb20 <USBD_LL_Init+0x94>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cac6:	4b16      	ldr	r3, [pc, #88]	; (800cb20 <USBD_LL_Init+0x94>)
 800cac8:	2202      	movs	r2, #2
 800caca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800cacc:	4b14      	ldr	r3, [pc, #80]	; (800cb20 <USBD_LL_Init+0x94>)
 800cace:	2201      	movs	r2, #1
 800cad0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cad2:	4b13      	ldr	r3, [pc, #76]	; (800cb20 <USBD_LL_Init+0x94>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cad8:	4b11      	ldr	r3, [pc, #68]	; (800cb20 <USBD_LL_Init+0x94>)
 800cada:	2200      	movs	r2, #0
 800cadc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cade:	4b10      	ldr	r3, [pc, #64]	; (800cb20 <USBD_LL_Init+0x94>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cae4:	4b0e      	ldr	r3, [pc, #56]	; (800cb20 <USBD_LL_Init+0x94>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800caea:	480d      	ldr	r0, [pc, #52]	; (800cb20 <USBD_LL_Init+0x94>)
 800caec:	f7f6 fc5e 	bl	80033ac <HAL_PCD_Init>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d001      	beq.n	800cafa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800caf6:	f7ff f995 	bl	800be24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cafa:	2180      	movs	r1, #128	; 0x80
 800cafc:	4808      	ldr	r0, [pc, #32]	; (800cb20 <USBD_LL_Init+0x94>)
 800cafe:	f7f7 fdbc 	bl	800467a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb02:	2240      	movs	r2, #64	; 0x40
 800cb04:	2100      	movs	r1, #0
 800cb06:	4806      	ldr	r0, [pc, #24]	; (800cb20 <USBD_LL_Init+0x94>)
 800cb08:	f7f7 fd70 	bl	80045ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb0c:	2280      	movs	r2, #128	; 0x80
 800cb0e:	2101      	movs	r1, #1
 800cb10:	4803      	ldr	r0, [pc, #12]	; (800cb20 <USBD_LL_Init+0x94>)
 800cb12:	f7f7 fd6b 	bl	80045ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20001278 	.word	0x20001278

0800cb24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7f6 fd53 	bl	80035e6 <HAL_PCD_Start>
 800cb40:	4603      	mov	r3, r0
 800cb42:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 f92a 	bl	800cda0 <USBD_Get_USB_Status>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800cb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	4608      	mov	r0, r1
 800cb64:	4611      	mov	r1, r2
 800cb66:	461a      	mov	r2, r3
 800cb68:	4603      	mov	r3, r0
 800cb6a:	70fb      	strb	r3, [r7, #3]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	70bb      	strb	r3, [r7, #2]
 800cb70:	4613      	mov	r3, r2
 800cb72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb74:	2300      	movs	r3, #0
 800cb76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb82:	78bb      	ldrb	r3, [r7, #2]
 800cb84:	883a      	ldrh	r2, [r7, #0]
 800cb86:	78f9      	ldrb	r1, [r7, #3]
 800cb88:	f7f7 f937 	bl	8003dfa <HAL_PCD_EP_Open>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 f904 	bl	800cda0 <USBD_Get_USB_Status>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800cb9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b084      	sub	sp, #16
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbc0:	78fa      	ldrb	r2, [r7, #3]
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7f7 f980 	bl	8003eca <HAL_PCD_EP_Close>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 f8e5 	bl	800cda0 <USBD_Get_USB_Status>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	460b      	mov	r3, r1
 800cbee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbfe:	78fa      	ldrb	r2, [r7, #3]
 800cc00:	4611      	mov	r1, r2
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7f7 fa58 	bl	80040b8 <HAL_PCD_EP_SetStall>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 f8c6 	bl	800cda0 <USBD_Get_USB_Status>
 800cc14:	4603      	mov	r3, r0
 800cc16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800cc18:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b084      	sub	sp, #16
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc3c:	78fa      	ldrb	r2, [r7, #3]
 800cc3e:	4611      	mov	r1, r2
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7f7 fa9d 	bl	8004180 <HAL_PCD_EP_ClrStall>
 800cc46:	4603      	mov	r3, r0
 800cc48:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800cc4a:	7bfb      	ldrb	r3, [r7, #15]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f000 f8a7 	bl	800cda0 <USBD_Get_USB_Status>
 800cc52:	4603      	mov	r3, r0
 800cc54:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800cc56:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc72:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800cc74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	da0b      	bge.n	800cc94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc82:	68f9      	ldr	r1, [r7, #12]
 800cc84:	4613      	mov	r3, r2
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	1a9b      	subs	r3, r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	440b      	add	r3, r1
 800cc8e:	333e      	adds	r3, #62	; 0x3e
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	e00b      	b.n	800ccac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800cc94:	78fb      	ldrb	r3, [r7, #3]
 800cc96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc9a:	68f9      	ldr	r1, [r7, #12]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	1a9b      	subs	r3, r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	440b      	add	r3, r1
 800cca6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ccaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3714      	adds	r7, #20
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccd2:	78fa      	ldrb	r2, [r7, #3]
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7f7 f86a 	bl	8003db0 <HAL_PCD_SetAddress>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 f85c 	bl	800cda0 <USBD_Get_USB_Status>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b086      	sub	sp, #24
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	60f8      	str	r0, [r7, #12]
 800ccfe:	607a      	str	r2, [r7, #4]
 800cd00:	603b      	str	r3, [r7, #0]
 800cd02:	460b      	mov	r3, r1
 800cd04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd14:	7af9      	ldrb	r1, [r7, #11]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	f7f7 f983 	bl	8004024 <HAL_PCD_EP_Transmit>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800cd22:	7dfb      	ldrb	r3, [r7, #23]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 f83b 	bl	800cda0 <USBD_Get_USB_Status>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800cd2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3718      	adds	r7, #24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b086      	sub	sp, #24
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	607a      	str	r2, [r7, #4]
 800cd42:	603b      	str	r3, [r7, #0]
 800cd44:	460b      	mov	r3, r1
 800cd46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd56:	7af9      	ldrb	r1, [r7, #11]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	f7f7 f8ff 	bl	8003f5e <HAL_PCD_EP_Receive>
 800cd60:	4603      	mov	r3, r0
 800cd62:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800cd64:	7dfb      	ldrb	r3, [r7, #23]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 f81a 	bl	800cda0 <USBD_Get_USB_Status>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800cd70:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3718      	adds	r7, #24
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b082      	sub	sp, #8
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
 800cd82:	460b      	mov	r3, r1
 800cd84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd8c:	78fa      	ldrb	r2, [r7, #3]
 800cd8e:	4611      	mov	r1, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7f7 f92f 	bl	8003ff4 <HAL_PCD_EP_GetRxCount>
 800cd96:	4603      	mov	r3, r0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cdae:	79fb      	ldrb	r3, [r7, #7]
 800cdb0:	2b03      	cmp	r3, #3
 800cdb2:	d817      	bhi.n	800cde4 <USBD_Get_USB_Status+0x44>
 800cdb4:	a201      	add	r2, pc, #4	; (adr r2, 800cdbc <USBD_Get_USB_Status+0x1c>)
 800cdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdba:	bf00      	nop
 800cdbc:	0800cdcd 	.word	0x0800cdcd
 800cdc0:	0800cdd3 	.word	0x0800cdd3
 800cdc4:	0800cdd9 	.word	0x0800cdd9
 800cdc8:	0800cddf 	.word	0x0800cddf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd0:	e00b      	b.n	800cdea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd6:	e008      	b.n	800cdea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	73fb      	strb	r3, [r7, #15]
    break;
 800cddc:	e005      	b.n	800cdea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdde:	2303      	movs	r3, #3
 800cde0:	73fb      	strb	r3, [r7, #15]
    break;
 800cde2:	e002      	b.n	800cdea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cde4:	2303      	movs	r3, #3
 800cde6:	73fb      	strb	r3, [r7, #15]
    break;
 800cde8:	bf00      	nop
  }
  return usb_status;
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3714      	adds	r7, #20
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	6039      	str	r1, [r7, #0]
 800ce02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2212      	movs	r2, #18
 800ce08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce0a:	4b03      	ldr	r3, [pc, #12]	; (800ce18 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	20000164 	.word	0x20000164

0800ce1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	6039      	str	r1, [r7, #0]
 800ce26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	2204      	movs	r2, #4
 800ce2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce2e:	4b03      	ldr	r3, [pc, #12]	; (800ce3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	20000178 	.word	0x20000178

0800ce40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	6039      	str	r1, [r7, #0]
 800ce4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce4c:	79fb      	ldrb	r3, [r7, #7]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d105      	bne.n	800ce5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	4907      	ldr	r1, [pc, #28]	; (800ce74 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce56:	4808      	ldr	r0, [pc, #32]	; (800ce78 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce58:	f7fe f92f 	bl	800b0ba <USBD_GetString>
 800ce5c:	e004      	b.n	800ce68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	4904      	ldr	r1, [pc, #16]	; (800ce74 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce62:	4805      	ldr	r0, [pc, #20]	; (800ce78 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce64:	f7fe f929 	bl	800b0ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce68:	4b02      	ldr	r3, [pc, #8]	; (800ce74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	20001680 	.word	0x20001680
 800ce78:	0800e468 	.word	0x0800e468

0800ce7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	6039      	str	r1, [r7, #0]
 800ce86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	4904      	ldr	r1, [pc, #16]	; (800ce9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce8c:	4804      	ldr	r0, [pc, #16]	; (800cea0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce8e:	f7fe f914 	bl	800b0ba <USBD_GetString>
  return USBD_StrDesc;
 800ce92:	4b02      	ldr	r3, [pc, #8]	; (800ce9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	20001680 	.word	0x20001680
 800cea0:	0800e474 	.word	0x0800e474

0800cea4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	221a      	movs	r2, #26
 800ceb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ceb6:	f000 f843 	bl	800cf40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ceba:	4b02      	ldr	r3, [pc, #8]	; (800cec4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	2000017c 	.word	0x2000017c

0800cec8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	6039      	str	r1, [r7, #0]
 800ced2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ced4:	79fb      	ldrb	r3, [r7, #7]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d105      	bne.n	800cee6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	4907      	ldr	r1, [pc, #28]	; (800cefc <USBD_FS_ConfigStrDescriptor+0x34>)
 800cede:	4808      	ldr	r0, [pc, #32]	; (800cf00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cee0:	f7fe f8eb 	bl	800b0ba <USBD_GetString>
 800cee4:	e004      	b.n	800cef0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cee6:	683a      	ldr	r2, [r7, #0]
 800cee8:	4904      	ldr	r1, [pc, #16]	; (800cefc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ceea:	4805      	ldr	r0, [pc, #20]	; (800cf00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ceec:	f7fe f8e5 	bl	800b0ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800cef0:	4b02      	ldr	r3, [pc, #8]	; (800cefc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	20001680 	.word	0x20001680
 800cf00:	0800e484 	.word	0x0800e484

0800cf04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	6039      	str	r1, [r7, #0]
 800cf0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf10:	79fb      	ldrb	r3, [r7, #7]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d105      	bne.n	800cf22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf16:	683a      	ldr	r2, [r7, #0]
 800cf18:	4907      	ldr	r1, [pc, #28]	; (800cf38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf1a:	4808      	ldr	r0, [pc, #32]	; (800cf3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf1c:	f7fe f8cd 	bl	800b0ba <USBD_GetString>
 800cf20:	e004      	b.n	800cf2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	4904      	ldr	r1, [pc, #16]	; (800cf38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf26:	4805      	ldr	r0, [pc, #20]	; (800cf3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf28:	f7fe f8c7 	bl	800b0ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf2c:	4b02      	ldr	r3, [pc, #8]	; (800cf38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20001680 	.word	0x20001680
 800cf3c:	0800e494 	.word	0x0800e494

0800cf40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf46:	4b0f      	ldr	r3, [pc, #60]	; (800cf84 <Get_SerialNum+0x44>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf4c:	4b0e      	ldr	r3, [pc, #56]	; (800cf88 <Get_SerialNum+0x48>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf52:	4b0e      	ldr	r3, [pc, #56]	; (800cf8c <Get_SerialNum+0x4c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d009      	beq.n	800cf7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf66:	2208      	movs	r2, #8
 800cf68:	4909      	ldr	r1, [pc, #36]	; (800cf90 <Get_SerialNum+0x50>)
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f000 f814 	bl	800cf98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf70:	2204      	movs	r2, #4
 800cf72:	4908      	ldr	r1, [pc, #32]	; (800cf94 <Get_SerialNum+0x54>)
 800cf74:	68b8      	ldr	r0, [r7, #8]
 800cf76:	f000 f80f 	bl	800cf98 <IntToUnicode>
  }
}
 800cf7a:	bf00      	nop
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	1fff7a10 	.word	0x1fff7a10
 800cf88:	1fff7a14 	.word	0x1fff7a14
 800cf8c:	1fff7a18 	.word	0x1fff7a18
 800cf90:	2000017e 	.word	0x2000017e
 800cf94:	2000018e 	.word	0x2000018e

0800cf98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75fb      	strb	r3, [r7, #23]
 800cfae:	e027      	b.n	800d000 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	0f1b      	lsrs	r3, r3, #28
 800cfb4:	2b09      	cmp	r3, #9
 800cfb6:	d80b      	bhi.n	800cfd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	0f1b      	lsrs	r3, r3, #28
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	440b      	add	r3, r1
 800cfc8:	3230      	adds	r2, #48	; 0x30
 800cfca:	b2d2      	uxtb	r2, r2
 800cfcc:	701a      	strb	r2, [r3, #0]
 800cfce:	e00a      	b.n	800cfe6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	0f1b      	lsrs	r3, r3, #28
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	4619      	mov	r1, r3
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	440b      	add	r3, r1
 800cfe0:	3237      	adds	r2, #55	; 0x37
 800cfe2:	b2d2      	uxtb	r2, r2
 800cfe4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfec:	7dfb      	ldrb	r3, [r7, #23]
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	3301      	adds	r3, #1
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	4413      	add	r3, r2
 800cff6:	2200      	movs	r2, #0
 800cff8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
 800cffc:	3301      	adds	r3, #1
 800cffe:	75fb      	strb	r3, [r7, #23]
 800d000:	7dfa      	ldrb	r2, [r7, #23]
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	429a      	cmp	r2, r3
 800d006:	d3d3      	bcc.n	800cfb0 <IntToUnicode+0x18>
  }
}
 800d008:	bf00      	nop
 800d00a:	371c      	adds	r7, #28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <ws2812_init>:
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
//------------------------------------------------------------------


void ws2812_init(void)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 800d01a:	2350      	movs	r3, #80	; 0x50
 800d01c:	607b      	str	r3, [r7, #4]
 800d01e:	e007      	b.n	800d030 <ws2812_init+0x1c>
	  BUF_DMA[i] = LOW;
 800d020:	4a08      	ldr	r2, [pc, #32]	; (800d044 <ws2812_init+0x30>)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2119      	movs	r1, #25
 800d026:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	3301      	adds	r3, #1
 800d02e:	607b      	str	r3, [r7, #4]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800d036:	dbf3      	blt.n	800d020 <ws2812_init+0xc>

  }
}
 800d038:	bf00      	nop
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr
 800d044:	20000244 	.word	0x20000244

0800d048 <ws2812_setPixel_gammaCorrection>:
	for( int i; i<LED_COUNT; i++){
		ws2812_pixel_rgb_to_buf_dma(0,0,0,i);
	}
}

void ws2812_setPixel_gammaCorrection(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t pos){
 800d048:	b590      	push	{r4, r7, lr}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	4604      	mov	r4, r0
 800d050:	4608      	mov	r0, r1
 800d052:	4611      	mov	r1, r2
 800d054:	461a      	mov	r2, r3
 800d056:	4623      	mov	r3, r4
 800d058:	71fb      	strb	r3, [r7, #7]
 800d05a:	4603      	mov	r3, r0
 800d05c:	71bb      	strb	r3, [r7, #6]
 800d05e:	460b      	mov	r3, r1
 800d060:	717b      	strb	r3, [r7, #5]
 800d062:	4613      	mov	r3, r2
 800d064:	807b      	strh	r3, [r7, #2]
	ws2812_pixel_rgb_to_buf_dma(gamma8[Rpixel],gamma8[Gpixel],gamma8[Bpixel],pos);
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	4a07      	ldr	r2, [pc, #28]	; (800d088 <ws2812_setPixel_gammaCorrection+0x40>)
 800d06a:	5cd0      	ldrb	r0, [r2, r3]
 800d06c:	79bb      	ldrb	r3, [r7, #6]
 800d06e:	4a06      	ldr	r2, [pc, #24]	; (800d088 <ws2812_setPixel_gammaCorrection+0x40>)
 800d070:	5cd1      	ldrb	r1, [r2, r3]
 800d072:	797b      	ldrb	r3, [r7, #5]
 800d074:	4a04      	ldr	r2, [pc, #16]	; (800d088 <ws2812_setPixel_gammaCorrection+0x40>)
 800d076:	5cd2      	ldrb	r2, [r2, r3]
 800d078:	887b      	ldrh	r3, [r7, #2]
 800d07a:	f000 f807 	bl	800d08c <ws2812_pixel_rgb_to_buf_dma>
}
 800d07e:	bf00      	nop
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	bd90      	pop	{r4, r7, pc}
 800d086:	bf00      	nop
 800d088:	0800e4d0 	.word	0x0800e4d0

0800d08c <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 800d08c:	b490      	push	{r4, r7}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	4604      	mov	r4, r0
 800d094:	4608      	mov	r0, r1
 800d096:	4611      	mov	r1, r2
 800d098:	461a      	mov	r2, r3
 800d09a:	4623      	mov	r3, r4
 800d09c:	71fb      	strb	r3, [r7, #7]
 800d09e:	4603      	mov	r3, r0
 800d0a0:	71bb      	strb	r3, [r7, #6]
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	717b      	strb	r3, [r7, #5]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	81fb      	strh	r3, [r7, #14]
 800d0ae:	e07a      	b.n	800d1a6 <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 800d0b0:	79fa      	ldrb	r2, [r7, #7]
 800d0b2:	89fb      	ldrh	r3, [r7, #14]
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	f1c3 0307 	rsb	r3, r3, #7
 800d0ba:	fa42 f303 	asr.w	r3, r2, r3
 800d0be:	f003 0301 	and.w	r3, r3, #1
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00e      	beq.n	800d0e4 <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 800d0c6:	887a      	ldrh	r2, [r7, #2]
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	4413      	add	r3, r2
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	3350      	adds	r3, #80	; 0x50
 800d0d2:	89fa      	ldrh	r2, [r7, #14]
 800d0d4:	b292      	uxth	r2, r2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	3308      	adds	r3, #8
 800d0da:	4a37      	ldr	r2, [pc, #220]	; (800d1b8 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800d0dc:	2141      	movs	r1, #65	; 0x41
 800d0de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d0e2:	e00d      	b.n	800d100 <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 800d0e4:	887a      	ldrh	r2, [r7, #2]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4413      	add	r3, r2
 800d0ec:	00db      	lsls	r3, r3, #3
 800d0ee:	3350      	adds	r3, #80	; 0x50
 800d0f0:	89fa      	ldrh	r2, [r7, #14]
 800d0f2:	b292      	uxth	r2, r2
 800d0f4:	4413      	add	r3, r2
 800d0f6:	3308      	adds	r3, #8
 800d0f8:	4a2f      	ldr	r2, [pc, #188]	; (800d1b8 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800d0fa:	2119      	movs	r1, #25
 800d0fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 800d100:	79ba      	ldrb	r2, [r7, #6]
 800d102:	89fb      	ldrh	r3, [r7, #14]
 800d104:	b29b      	uxth	r3, r3
 800d106:	f1c3 0307 	rsb	r3, r3, #7
 800d10a:	fa42 f303 	asr.w	r3, r2, r3
 800d10e:	f003 0301 	and.w	r3, r3, #1
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00d      	beq.n	800d132 <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 800d116:	887a      	ldrh	r2, [r7, #2]
 800d118:	4613      	mov	r3, r2
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	4413      	add	r3, r2
 800d11e:	00db      	lsls	r3, r3, #3
 800d120:	3350      	adds	r3, #80	; 0x50
 800d122:	89fa      	ldrh	r2, [r7, #14]
 800d124:	b292      	uxth	r2, r2
 800d126:	4413      	add	r3, r2
 800d128:	4a23      	ldr	r2, [pc, #140]	; (800d1b8 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800d12a:	2141      	movs	r1, #65	; 0x41
 800d12c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d130:	e00c      	b.n	800d14c <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 800d132:	887a      	ldrh	r2, [r7, #2]
 800d134:	4613      	mov	r3, r2
 800d136:	005b      	lsls	r3, r3, #1
 800d138:	4413      	add	r3, r2
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	3350      	adds	r3, #80	; 0x50
 800d13e:	89fa      	ldrh	r2, [r7, #14]
 800d140:	b292      	uxth	r2, r2
 800d142:	4413      	add	r3, r2
 800d144:	4a1c      	ldr	r2, [pc, #112]	; (800d1b8 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800d146:	2119      	movs	r1, #25
 800d148:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 800d14c:	797a      	ldrb	r2, [r7, #5]
 800d14e:	89fb      	ldrh	r3, [r7, #14]
 800d150:	b29b      	uxth	r3, r3
 800d152:	f1c3 0307 	rsb	r3, r3, #7
 800d156:	fa42 f303 	asr.w	r3, r2, r3
 800d15a:	f003 0301 	and.w	r3, r3, #1
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00e      	beq.n	800d180 <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 800d162:	887a      	ldrh	r2, [r7, #2]
 800d164:	4613      	mov	r3, r2
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	4413      	add	r3, r2
 800d16a:	00db      	lsls	r3, r3, #3
 800d16c:	3350      	adds	r3, #80	; 0x50
 800d16e:	89fa      	ldrh	r2, [r7, #14]
 800d170:	b292      	uxth	r2, r2
 800d172:	4413      	add	r3, r2
 800d174:	3310      	adds	r3, #16
 800d176:	4a10      	ldr	r2, [pc, #64]	; (800d1b8 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800d178:	2141      	movs	r1, #65	; 0x41
 800d17a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d17e:	e00d      	b.n	800d19c <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 800d180:	887a      	ldrh	r2, [r7, #2]
 800d182:	4613      	mov	r3, r2
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	4413      	add	r3, r2
 800d188:	00db      	lsls	r3, r3, #3
 800d18a:	3350      	adds	r3, #80	; 0x50
 800d18c:	89fa      	ldrh	r2, [r7, #14]
 800d18e:	b292      	uxth	r2, r2
 800d190:	4413      	add	r3, r2
 800d192:	3310      	adds	r3, #16
 800d194:	4a08      	ldr	r2, [pc, #32]	; (800d1b8 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800d196:	2119      	movs	r1, #25
 800d198:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 800d19c:	89fb      	ldrh	r3, [r7, #14]
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	81fb      	strh	r3, [r7, #14]
 800d1a6:	89fb      	ldrh	r3, [r7, #14]
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	2b07      	cmp	r3, #7
 800d1ac:	d980      	bls.n	800d0b0 <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 800d1ae:	bf00      	nop
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bc90      	pop	{r4, r7}
 800d1b6:	4770      	bx	lr
 800d1b8:	20000244 	.word	0x20000244

0800d1bc <ws2812_light>:



//------------------------------------------------------------------
void ws2812_light(void)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim3,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA,ARRAY_LEN*2);
 800d1c0:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800d1c4:	4a03      	ldr	r2, [pc, #12]	; (800d1d4 <ws2812_light+0x18>)
 800d1c6:	2104      	movs	r1, #4
 800d1c8:	4803      	ldr	r0, [pc, #12]	; (800d1d8 <ws2812_light+0x1c>)
 800d1ca:	f7f9 f9f5 	bl	80065b8 <HAL_TIM_PWM_Start_DMA>
}
 800d1ce:	bf00      	nop
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20000244 	.word	0x20000244
 800d1d8:	20000c88 	.word	0x20000c88

0800d1dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800d1dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d214 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d1e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d1e2:	e003      	b.n	800d1ec <LoopCopyDataInit>

0800d1e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d1e4:	4b0c      	ldr	r3, [pc, #48]	; (800d218 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d1e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d1e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d1ea:	3104      	adds	r1, #4

0800d1ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d1ec:	480b      	ldr	r0, [pc, #44]	; (800d21c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d1ee:	4b0c      	ldr	r3, [pc, #48]	; (800d220 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d1f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d1f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d1f4:	d3f6      	bcc.n	800d1e4 <CopyDataInit>
  ldr  r2, =_sbss
 800d1f6:	4a0b      	ldr	r2, [pc, #44]	; (800d224 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d1f8:	e002      	b.n	800d200 <LoopFillZerobss>

0800d1fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d1fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d1fc:	f842 3b04 	str.w	r3, [r2], #4

0800d200 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d200:	4b09      	ldr	r3, [pc, #36]	; (800d228 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d202:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d204:	d3f9      	bcc.n	800d1fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d206:	f7ff f9fb 	bl	800c600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d20a:	f000 f817 	bl	800d23c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d20e:	f7fe f9ef 	bl	800b5f0 <main>
  bx  lr    
 800d212:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800d214:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800d218:	0800e7b8 	.word	0x0800e7b8
  ldr  r0, =_sdata
 800d21c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d220:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800d224:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800d228:	20001884 	.word	0x20001884

0800d22c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d22c:	e7fe      	b.n	800d22c <ADC_IRQHandler>
	...

0800d230 <__errno>:
 800d230:	4b01      	ldr	r3, [pc, #4]	; (800d238 <__errno+0x8>)
 800d232:	6818      	ldr	r0, [r3, #0]
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	20000198 	.word	0x20000198

0800d23c <__libc_init_array>:
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	4e0d      	ldr	r6, [pc, #52]	; (800d274 <__libc_init_array+0x38>)
 800d240:	4c0d      	ldr	r4, [pc, #52]	; (800d278 <__libc_init_array+0x3c>)
 800d242:	1ba4      	subs	r4, r4, r6
 800d244:	10a4      	asrs	r4, r4, #2
 800d246:	2500      	movs	r5, #0
 800d248:	42a5      	cmp	r5, r4
 800d24a:	d109      	bne.n	800d260 <__libc_init_array+0x24>
 800d24c:	4e0b      	ldr	r6, [pc, #44]	; (800d27c <__libc_init_array+0x40>)
 800d24e:	4c0c      	ldr	r4, [pc, #48]	; (800d280 <__libc_init_array+0x44>)
 800d250:	f001 f8fc 	bl	800e44c <_init>
 800d254:	1ba4      	subs	r4, r4, r6
 800d256:	10a4      	asrs	r4, r4, #2
 800d258:	2500      	movs	r5, #0
 800d25a:	42a5      	cmp	r5, r4
 800d25c:	d105      	bne.n	800d26a <__libc_init_array+0x2e>
 800d25e:	bd70      	pop	{r4, r5, r6, pc}
 800d260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d264:	4798      	blx	r3
 800d266:	3501      	adds	r5, #1
 800d268:	e7ee      	b.n	800d248 <__libc_init_array+0xc>
 800d26a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d26e:	4798      	blx	r3
 800d270:	3501      	adds	r5, #1
 800d272:	e7f2      	b.n	800d25a <__libc_init_array+0x1e>
 800d274:	0800e7b0 	.word	0x0800e7b0
 800d278:	0800e7b0 	.word	0x0800e7b0
 800d27c:	0800e7b0 	.word	0x0800e7b0
 800d280:	0800e7b4 	.word	0x0800e7b4

0800d284 <malloc>:
 800d284:	4b02      	ldr	r3, [pc, #8]	; (800d290 <malloc+0xc>)
 800d286:	4601      	mov	r1, r0
 800d288:	6818      	ldr	r0, [r3, #0]
 800d28a:	f000 b861 	b.w	800d350 <_malloc_r>
 800d28e:	bf00      	nop
 800d290:	20000198 	.word	0x20000198

0800d294 <free>:
 800d294:	4b02      	ldr	r3, [pc, #8]	; (800d2a0 <free+0xc>)
 800d296:	4601      	mov	r1, r0
 800d298:	6818      	ldr	r0, [r3, #0]
 800d29a:	f000 b80b 	b.w	800d2b4 <_free_r>
 800d29e:	bf00      	nop
 800d2a0:	20000198 	.word	0x20000198

0800d2a4 <memset>:
 800d2a4:	4402      	add	r2, r0
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d100      	bne.n	800d2ae <memset+0xa>
 800d2ac:	4770      	bx	lr
 800d2ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d2b2:	e7f9      	b.n	800d2a8 <memset+0x4>

0800d2b4 <_free_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	2900      	cmp	r1, #0
 800d2ba:	d045      	beq.n	800d348 <_free_r+0x94>
 800d2bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2c0:	1f0c      	subs	r4, r1, #4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bfb8      	it	lt
 800d2c6:	18e4      	addlt	r4, r4, r3
 800d2c8:	f000 f8ac 	bl	800d424 <__malloc_lock>
 800d2cc:	4a1f      	ldr	r2, [pc, #124]	; (800d34c <_free_r+0x98>)
 800d2ce:	6813      	ldr	r3, [r2, #0]
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	b933      	cbnz	r3, 800d2e2 <_free_r+0x2e>
 800d2d4:	6063      	str	r3, [r4, #4]
 800d2d6:	6014      	str	r4, [r2, #0]
 800d2d8:	4628      	mov	r0, r5
 800d2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2de:	f000 b8a2 	b.w	800d426 <__malloc_unlock>
 800d2e2:	42a3      	cmp	r3, r4
 800d2e4:	d90c      	bls.n	800d300 <_free_r+0x4c>
 800d2e6:	6821      	ldr	r1, [r4, #0]
 800d2e8:	1862      	adds	r2, r4, r1
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	bf04      	itt	eq
 800d2ee:	681a      	ldreq	r2, [r3, #0]
 800d2f0:	685b      	ldreq	r3, [r3, #4]
 800d2f2:	6063      	str	r3, [r4, #4]
 800d2f4:	bf04      	itt	eq
 800d2f6:	1852      	addeq	r2, r2, r1
 800d2f8:	6022      	streq	r2, [r4, #0]
 800d2fa:	6004      	str	r4, [r0, #0]
 800d2fc:	e7ec      	b.n	800d2d8 <_free_r+0x24>
 800d2fe:	4613      	mov	r3, r2
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	b10a      	cbz	r2, 800d308 <_free_r+0x54>
 800d304:	42a2      	cmp	r2, r4
 800d306:	d9fa      	bls.n	800d2fe <_free_r+0x4a>
 800d308:	6819      	ldr	r1, [r3, #0]
 800d30a:	1858      	adds	r0, r3, r1
 800d30c:	42a0      	cmp	r0, r4
 800d30e:	d10b      	bne.n	800d328 <_free_r+0x74>
 800d310:	6820      	ldr	r0, [r4, #0]
 800d312:	4401      	add	r1, r0
 800d314:	1858      	adds	r0, r3, r1
 800d316:	4282      	cmp	r2, r0
 800d318:	6019      	str	r1, [r3, #0]
 800d31a:	d1dd      	bne.n	800d2d8 <_free_r+0x24>
 800d31c:	6810      	ldr	r0, [r2, #0]
 800d31e:	6852      	ldr	r2, [r2, #4]
 800d320:	605a      	str	r2, [r3, #4]
 800d322:	4401      	add	r1, r0
 800d324:	6019      	str	r1, [r3, #0]
 800d326:	e7d7      	b.n	800d2d8 <_free_r+0x24>
 800d328:	d902      	bls.n	800d330 <_free_r+0x7c>
 800d32a:	230c      	movs	r3, #12
 800d32c:	602b      	str	r3, [r5, #0]
 800d32e:	e7d3      	b.n	800d2d8 <_free_r+0x24>
 800d330:	6820      	ldr	r0, [r4, #0]
 800d332:	1821      	adds	r1, r4, r0
 800d334:	428a      	cmp	r2, r1
 800d336:	bf04      	itt	eq
 800d338:	6811      	ldreq	r1, [r2, #0]
 800d33a:	6852      	ldreq	r2, [r2, #4]
 800d33c:	6062      	str	r2, [r4, #4]
 800d33e:	bf04      	itt	eq
 800d340:	1809      	addeq	r1, r1, r0
 800d342:	6021      	streq	r1, [r4, #0]
 800d344:	605c      	str	r4, [r3, #4]
 800d346:	e7c7      	b.n	800d2d8 <_free_r+0x24>
 800d348:	bd38      	pop	{r3, r4, r5, pc}
 800d34a:	bf00      	nop
 800d34c:	20000804 	.word	0x20000804

0800d350 <_malloc_r>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	1ccd      	adds	r5, r1, #3
 800d354:	f025 0503 	bic.w	r5, r5, #3
 800d358:	3508      	adds	r5, #8
 800d35a:	2d0c      	cmp	r5, #12
 800d35c:	bf38      	it	cc
 800d35e:	250c      	movcc	r5, #12
 800d360:	2d00      	cmp	r5, #0
 800d362:	4606      	mov	r6, r0
 800d364:	db01      	blt.n	800d36a <_malloc_r+0x1a>
 800d366:	42a9      	cmp	r1, r5
 800d368:	d903      	bls.n	800d372 <_malloc_r+0x22>
 800d36a:	230c      	movs	r3, #12
 800d36c:	6033      	str	r3, [r6, #0]
 800d36e:	2000      	movs	r0, #0
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	f000 f857 	bl	800d424 <__malloc_lock>
 800d376:	4a21      	ldr	r2, [pc, #132]	; (800d3fc <_malloc_r+0xac>)
 800d378:	6814      	ldr	r4, [r2, #0]
 800d37a:	4621      	mov	r1, r4
 800d37c:	b991      	cbnz	r1, 800d3a4 <_malloc_r+0x54>
 800d37e:	4c20      	ldr	r4, [pc, #128]	; (800d400 <_malloc_r+0xb0>)
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	b91b      	cbnz	r3, 800d38c <_malloc_r+0x3c>
 800d384:	4630      	mov	r0, r6
 800d386:	f000 f83d 	bl	800d404 <_sbrk_r>
 800d38a:	6020      	str	r0, [r4, #0]
 800d38c:	4629      	mov	r1, r5
 800d38e:	4630      	mov	r0, r6
 800d390:	f000 f838 	bl	800d404 <_sbrk_r>
 800d394:	1c43      	adds	r3, r0, #1
 800d396:	d124      	bne.n	800d3e2 <_malloc_r+0x92>
 800d398:	230c      	movs	r3, #12
 800d39a:	6033      	str	r3, [r6, #0]
 800d39c:	4630      	mov	r0, r6
 800d39e:	f000 f842 	bl	800d426 <__malloc_unlock>
 800d3a2:	e7e4      	b.n	800d36e <_malloc_r+0x1e>
 800d3a4:	680b      	ldr	r3, [r1, #0]
 800d3a6:	1b5b      	subs	r3, r3, r5
 800d3a8:	d418      	bmi.n	800d3dc <_malloc_r+0x8c>
 800d3aa:	2b0b      	cmp	r3, #11
 800d3ac:	d90f      	bls.n	800d3ce <_malloc_r+0x7e>
 800d3ae:	600b      	str	r3, [r1, #0]
 800d3b0:	50cd      	str	r5, [r1, r3]
 800d3b2:	18cc      	adds	r4, r1, r3
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	f000 f836 	bl	800d426 <__malloc_unlock>
 800d3ba:	f104 000b 	add.w	r0, r4, #11
 800d3be:	1d23      	adds	r3, r4, #4
 800d3c0:	f020 0007 	bic.w	r0, r0, #7
 800d3c4:	1ac3      	subs	r3, r0, r3
 800d3c6:	d0d3      	beq.n	800d370 <_malloc_r+0x20>
 800d3c8:	425a      	negs	r2, r3
 800d3ca:	50e2      	str	r2, [r4, r3]
 800d3cc:	e7d0      	b.n	800d370 <_malloc_r+0x20>
 800d3ce:	428c      	cmp	r4, r1
 800d3d0:	684b      	ldr	r3, [r1, #4]
 800d3d2:	bf16      	itet	ne
 800d3d4:	6063      	strne	r3, [r4, #4]
 800d3d6:	6013      	streq	r3, [r2, #0]
 800d3d8:	460c      	movne	r4, r1
 800d3da:	e7eb      	b.n	800d3b4 <_malloc_r+0x64>
 800d3dc:	460c      	mov	r4, r1
 800d3de:	6849      	ldr	r1, [r1, #4]
 800d3e0:	e7cc      	b.n	800d37c <_malloc_r+0x2c>
 800d3e2:	1cc4      	adds	r4, r0, #3
 800d3e4:	f024 0403 	bic.w	r4, r4, #3
 800d3e8:	42a0      	cmp	r0, r4
 800d3ea:	d005      	beq.n	800d3f8 <_malloc_r+0xa8>
 800d3ec:	1a21      	subs	r1, r4, r0
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f000 f808 	bl	800d404 <_sbrk_r>
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	d0cf      	beq.n	800d398 <_malloc_r+0x48>
 800d3f8:	6025      	str	r5, [r4, #0]
 800d3fa:	e7db      	b.n	800d3b4 <_malloc_r+0x64>
 800d3fc:	20000804 	.word	0x20000804
 800d400:	20000808 	.word	0x20000808

0800d404 <_sbrk_r>:
 800d404:	b538      	push	{r3, r4, r5, lr}
 800d406:	4c06      	ldr	r4, [pc, #24]	; (800d420 <_sbrk_r+0x1c>)
 800d408:	2300      	movs	r3, #0
 800d40a:	4605      	mov	r5, r0
 800d40c:	4608      	mov	r0, r1
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	f7ff f8ca 	bl	800c5a8 <_sbrk>
 800d414:	1c43      	adds	r3, r0, #1
 800d416:	d102      	bne.n	800d41e <_sbrk_r+0x1a>
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	b103      	cbz	r3, 800d41e <_sbrk_r+0x1a>
 800d41c:	602b      	str	r3, [r5, #0]
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	20001880 	.word	0x20001880

0800d424 <__malloc_lock>:
 800d424:	4770      	bx	lr

0800d426 <__malloc_unlock>:
 800d426:	4770      	bx	lr

0800d428 <sin>:
 800d428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d42a:	ec51 0b10 	vmov	r0, r1, d0
 800d42e:	4a20      	ldr	r2, [pc, #128]	; (800d4b0 <sin+0x88>)
 800d430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d434:	4293      	cmp	r3, r2
 800d436:	dc07      	bgt.n	800d448 <sin+0x20>
 800d438:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800d4a8 <sin+0x80>
 800d43c:	2000      	movs	r0, #0
 800d43e:	f000 fe37 	bl	800e0b0 <__kernel_sin>
 800d442:	ec51 0b10 	vmov	r0, r1, d0
 800d446:	e007      	b.n	800d458 <sin+0x30>
 800d448:	4a1a      	ldr	r2, [pc, #104]	; (800d4b4 <sin+0x8c>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	dd09      	ble.n	800d462 <sin+0x3a>
 800d44e:	ee10 2a10 	vmov	r2, s0
 800d452:	460b      	mov	r3, r1
 800d454:	f7f2 fec4 	bl	80001e0 <__aeabi_dsub>
 800d458:	ec41 0b10 	vmov	d0, r0, r1
 800d45c:	b005      	add	sp, #20
 800d45e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d462:	4668      	mov	r0, sp
 800d464:	f000 f828 	bl	800d4b8 <__ieee754_rem_pio2>
 800d468:	f000 0003 	and.w	r0, r0, #3
 800d46c:	2801      	cmp	r0, #1
 800d46e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d472:	ed9d 0b00 	vldr	d0, [sp]
 800d476:	d004      	beq.n	800d482 <sin+0x5a>
 800d478:	2802      	cmp	r0, #2
 800d47a:	d005      	beq.n	800d488 <sin+0x60>
 800d47c:	b970      	cbnz	r0, 800d49c <sin+0x74>
 800d47e:	2001      	movs	r0, #1
 800d480:	e7dd      	b.n	800d43e <sin+0x16>
 800d482:	f000 fa0d 	bl	800d8a0 <__kernel_cos>
 800d486:	e7dc      	b.n	800d442 <sin+0x1a>
 800d488:	2001      	movs	r0, #1
 800d48a:	f000 fe11 	bl	800e0b0 <__kernel_sin>
 800d48e:	ec53 2b10 	vmov	r2, r3, d0
 800d492:	ee10 0a10 	vmov	r0, s0
 800d496:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d49a:	e7dd      	b.n	800d458 <sin+0x30>
 800d49c:	f000 fa00 	bl	800d8a0 <__kernel_cos>
 800d4a0:	e7f5      	b.n	800d48e <sin+0x66>
 800d4a2:	bf00      	nop
 800d4a4:	f3af 8000 	nop.w
	...
 800d4b0:	3fe921fb 	.word	0x3fe921fb
 800d4b4:	7fefffff 	.word	0x7fefffff

0800d4b8 <__ieee754_rem_pio2>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	ec57 6b10 	vmov	r6, r7, d0
 800d4c0:	4bc3      	ldr	r3, [pc, #780]	; (800d7d0 <__ieee754_rem_pio2+0x318>)
 800d4c2:	b08d      	sub	sp, #52	; 0x34
 800d4c4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d4c8:	4598      	cmp	r8, r3
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	9704      	str	r7, [sp, #16]
 800d4ce:	dc07      	bgt.n	800d4e0 <__ieee754_rem_pio2+0x28>
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	ed84 0b00 	vstr	d0, [r4]
 800d4d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d4dc:	2500      	movs	r5, #0
 800d4de:	e027      	b.n	800d530 <__ieee754_rem_pio2+0x78>
 800d4e0:	4bbc      	ldr	r3, [pc, #752]	; (800d7d4 <__ieee754_rem_pio2+0x31c>)
 800d4e2:	4598      	cmp	r8, r3
 800d4e4:	dc75      	bgt.n	800d5d2 <__ieee754_rem_pio2+0x11a>
 800d4e6:	9b04      	ldr	r3, [sp, #16]
 800d4e8:	4dbb      	ldr	r5, [pc, #748]	; (800d7d8 <__ieee754_rem_pio2+0x320>)
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	ee10 0a10 	vmov	r0, s0
 800d4f0:	a3a9      	add	r3, pc, #676	; (adr r3, 800d798 <__ieee754_rem_pio2+0x2e0>)
 800d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	dd36      	ble.n	800d568 <__ieee754_rem_pio2+0xb0>
 800d4fa:	f7f2 fe71 	bl	80001e0 <__aeabi_dsub>
 800d4fe:	45a8      	cmp	r8, r5
 800d500:	4606      	mov	r6, r0
 800d502:	460f      	mov	r7, r1
 800d504:	d018      	beq.n	800d538 <__ieee754_rem_pio2+0x80>
 800d506:	a3a6      	add	r3, pc, #664	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x2e8>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	f7f2 fe68 	bl	80001e0 <__aeabi_dsub>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	e9c4 2300 	strd	r2, r3, [r4]
 800d518:	4630      	mov	r0, r6
 800d51a:	4639      	mov	r1, r7
 800d51c:	f7f2 fe60 	bl	80001e0 <__aeabi_dsub>
 800d520:	a39f      	add	r3, pc, #636	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x2e8>)
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	f7f2 fe5b 	bl	80001e0 <__aeabi_dsub>
 800d52a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d52e:	2501      	movs	r5, #1
 800d530:	4628      	mov	r0, r5
 800d532:	b00d      	add	sp, #52	; 0x34
 800d534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d538:	a39b      	add	r3, pc, #620	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x2f0>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	f7f2 fe4f 	bl	80001e0 <__aeabi_dsub>
 800d542:	a39b      	add	r3, pc, #620	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x2f8>)
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	4606      	mov	r6, r0
 800d54a:	460f      	mov	r7, r1
 800d54c:	f7f2 fe48 	bl	80001e0 <__aeabi_dsub>
 800d550:	4602      	mov	r2, r0
 800d552:	460b      	mov	r3, r1
 800d554:	e9c4 2300 	strd	r2, r3, [r4]
 800d558:	4630      	mov	r0, r6
 800d55a:	4639      	mov	r1, r7
 800d55c:	f7f2 fe40 	bl	80001e0 <__aeabi_dsub>
 800d560:	a393      	add	r3, pc, #588	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x2f8>)
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	e7de      	b.n	800d526 <__ieee754_rem_pio2+0x6e>
 800d568:	f7f2 fe3c 	bl	80001e4 <__adddf3>
 800d56c:	45a8      	cmp	r8, r5
 800d56e:	4606      	mov	r6, r0
 800d570:	460f      	mov	r7, r1
 800d572:	d016      	beq.n	800d5a2 <__ieee754_rem_pio2+0xea>
 800d574:	a38a      	add	r3, pc, #552	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x2e8>)
 800d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57a:	f7f2 fe33 	bl	80001e4 <__adddf3>
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	e9c4 2300 	strd	r2, r3, [r4]
 800d586:	4630      	mov	r0, r6
 800d588:	4639      	mov	r1, r7
 800d58a:	f7f2 fe29 	bl	80001e0 <__aeabi_dsub>
 800d58e:	a384      	add	r3, pc, #528	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x2e8>)
 800d590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d594:	f7f2 fe26 	bl	80001e4 <__adddf3>
 800d598:	f04f 35ff 	mov.w	r5, #4294967295
 800d59c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d5a0:	e7c6      	b.n	800d530 <__ieee754_rem_pio2+0x78>
 800d5a2:	a381      	add	r3, pc, #516	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x2f0>)
 800d5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a8:	f7f2 fe1c 	bl	80001e4 <__adddf3>
 800d5ac:	a380      	add	r3, pc, #512	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x2f8>)
 800d5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b2:	4606      	mov	r6, r0
 800d5b4:	460f      	mov	r7, r1
 800d5b6:	f7f2 fe15 	bl	80001e4 <__adddf3>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	e9c4 2300 	strd	r2, r3, [r4]
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	4639      	mov	r1, r7
 800d5c6:	f7f2 fe0b 	bl	80001e0 <__aeabi_dsub>
 800d5ca:	a379      	add	r3, pc, #484	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x2f8>)
 800d5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d0:	e7e0      	b.n	800d594 <__ieee754_rem_pio2+0xdc>
 800d5d2:	4b82      	ldr	r3, [pc, #520]	; (800d7dc <__ieee754_rem_pio2+0x324>)
 800d5d4:	4598      	cmp	r8, r3
 800d5d6:	f300 80d0 	bgt.w	800d77a <__ieee754_rem_pio2+0x2c2>
 800d5da:	f000 fe23 	bl	800e224 <fabs>
 800d5de:	ec57 6b10 	vmov	r6, r7, d0
 800d5e2:	ee10 0a10 	vmov	r0, s0
 800d5e6:	a374      	add	r3, pc, #464	; (adr r3, 800d7b8 <__ieee754_rem_pio2+0x300>)
 800d5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ec:	4639      	mov	r1, r7
 800d5ee:	f7f2 ffaf 	bl	8000550 <__aeabi_dmul>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	4b7a      	ldr	r3, [pc, #488]	; (800d7e0 <__ieee754_rem_pio2+0x328>)
 800d5f6:	f7f2 fdf5 	bl	80001e4 <__adddf3>
 800d5fa:	f7f3 fa43 	bl	8000a84 <__aeabi_d2iz>
 800d5fe:	4605      	mov	r5, r0
 800d600:	f7f2 ff3c 	bl	800047c <__aeabi_i2d>
 800d604:	a364      	add	r3, pc, #400	; (adr r3, 800d798 <__ieee754_rem_pio2+0x2e0>)
 800d606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d60e:	f7f2 ff9f 	bl	8000550 <__aeabi_dmul>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4630      	mov	r0, r6
 800d618:	4639      	mov	r1, r7
 800d61a:	f7f2 fde1 	bl	80001e0 <__aeabi_dsub>
 800d61e:	a360      	add	r3, pc, #384	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x2e8>)
 800d620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d624:	4682      	mov	sl, r0
 800d626:	468b      	mov	fp, r1
 800d628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d62c:	f7f2 ff90 	bl	8000550 <__aeabi_dmul>
 800d630:	2d1f      	cmp	r5, #31
 800d632:	4606      	mov	r6, r0
 800d634:	460f      	mov	r7, r1
 800d636:	dc0c      	bgt.n	800d652 <__ieee754_rem_pio2+0x19a>
 800d638:	1e6a      	subs	r2, r5, #1
 800d63a:	4b6a      	ldr	r3, [pc, #424]	; (800d7e4 <__ieee754_rem_pio2+0x32c>)
 800d63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d640:	4543      	cmp	r3, r8
 800d642:	d006      	beq.n	800d652 <__ieee754_rem_pio2+0x19a>
 800d644:	4632      	mov	r2, r6
 800d646:	463b      	mov	r3, r7
 800d648:	4650      	mov	r0, sl
 800d64a:	4659      	mov	r1, fp
 800d64c:	f7f2 fdc8 	bl	80001e0 <__aeabi_dsub>
 800d650:	e00e      	b.n	800d670 <__ieee754_rem_pio2+0x1b8>
 800d652:	4632      	mov	r2, r6
 800d654:	463b      	mov	r3, r7
 800d656:	4650      	mov	r0, sl
 800d658:	4659      	mov	r1, fp
 800d65a:	f7f2 fdc1 	bl	80001e0 <__aeabi_dsub>
 800d65e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d662:	9305      	str	r3, [sp, #20]
 800d664:	9a05      	ldr	r2, [sp, #20]
 800d666:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	2b10      	cmp	r3, #16
 800d66e:	dc02      	bgt.n	800d676 <__ieee754_rem_pio2+0x1be>
 800d670:	e9c4 0100 	strd	r0, r1, [r4]
 800d674:	e039      	b.n	800d6ea <__ieee754_rem_pio2+0x232>
 800d676:	a34c      	add	r3, pc, #304	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x2f0>)
 800d678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d680:	f7f2 ff66 	bl	8000550 <__aeabi_dmul>
 800d684:	4606      	mov	r6, r0
 800d686:	460f      	mov	r7, r1
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	4650      	mov	r0, sl
 800d68e:	4659      	mov	r1, fp
 800d690:	f7f2 fda6 	bl	80001e0 <__aeabi_dsub>
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	4680      	mov	r8, r0
 800d69a:	4689      	mov	r9, r1
 800d69c:	4650      	mov	r0, sl
 800d69e:	4659      	mov	r1, fp
 800d6a0:	f7f2 fd9e 	bl	80001e0 <__aeabi_dsub>
 800d6a4:	4632      	mov	r2, r6
 800d6a6:	463b      	mov	r3, r7
 800d6a8:	f7f2 fd9a 	bl	80001e0 <__aeabi_dsub>
 800d6ac:	a340      	add	r3, pc, #256	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x2f8>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	460f      	mov	r7, r1
 800d6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ba:	f7f2 ff49 	bl	8000550 <__aeabi_dmul>
 800d6be:	4632      	mov	r2, r6
 800d6c0:	463b      	mov	r3, r7
 800d6c2:	f7f2 fd8d 	bl	80001e0 <__aeabi_dsub>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	460f      	mov	r7, r1
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	4649      	mov	r1, r9
 800d6d2:	f7f2 fd85 	bl	80001e0 <__aeabi_dsub>
 800d6d6:	9a05      	ldr	r2, [sp, #20]
 800d6d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d6dc:	1ad3      	subs	r3, r2, r3
 800d6de:	2b31      	cmp	r3, #49	; 0x31
 800d6e0:	dc20      	bgt.n	800d724 <__ieee754_rem_pio2+0x26c>
 800d6e2:	e9c4 0100 	strd	r0, r1, [r4]
 800d6e6:	46c2      	mov	sl, r8
 800d6e8:	46cb      	mov	fp, r9
 800d6ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d6ee:	4650      	mov	r0, sl
 800d6f0:	4642      	mov	r2, r8
 800d6f2:	464b      	mov	r3, r9
 800d6f4:	4659      	mov	r1, fp
 800d6f6:	f7f2 fd73 	bl	80001e0 <__aeabi_dsub>
 800d6fa:	463b      	mov	r3, r7
 800d6fc:	4632      	mov	r2, r6
 800d6fe:	f7f2 fd6f 	bl	80001e0 <__aeabi_dsub>
 800d702:	9b04      	ldr	r3, [sp, #16]
 800d704:	2b00      	cmp	r3, #0
 800d706:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d70a:	f6bf af11 	bge.w	800d530 <__ieee754_rem_pio2+0x78>
 800d70e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d712:	6063      	str	r3, [r4, #4]
 800d714:	f8c4 8000 	str.w	r8, [r4]
 800d718:	60a0      	str	r0, [r4, #8]
 800d71a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d71e:	60e3      	str	r3, [r4, #12]
 800d720:	426d      	negs	r5, r5
 800d722:	e705      	b.n	800d530 <__ieee754_rem_pio2+0x78>
 800d724:	a326      	add	r3, pc, #152	; (adr r3, 800d7c0 <__ieee754_rem_pio2+0x308>)
 800d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d72e:	f7f2 ff0f 	bl	8000550 <__aeabi_dmul>
 800d732:	4606      	mov	r6, r0
 800d734:	460f      	mov	r7, r1
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	4640      	mov	r0, r8
 800d73c:	4649      	mov	r1, r9
 800d73e:	f7f2 fd4f 	bl	80001e0 <__aeabi_dsub>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	4682      	mov	sl, r0
 800d748:	468b      	mov	fp, r1
 800d74a:	4640      	mov	r0, r8
 800d74c:	4649      	mov	r1, r9
 800d74e:	f7f2 fd47 	bl	80001e0 <__aeabi_dsub>
 800d752:	4632      	mov	r2, r6
 800d754:	463b      	mov	r3, r7
 800d756:	f7f2 fd43 	bl	80001e0 <__aeabi_dsub>
 800d75a:	a31b      	add	r3, pc, #108	; (adr r3, 800d7c8 <__ieee754_rem_pio2+0x310>)
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	4606      	mov	r6, r0
 800d762:	460f      	mov	r7, r1
 800d764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d768:	f7f2 fef2 	bl	8000550 <__aeabi_dmul>
 800d76c:	4632      	mov	r2, r6
 800d76e:	463b      	mov	r3, r7
 800d770:	f7f2 fd36 	bl	80001e0 <__aeabi_dsub>
 800d774:	4606      	mov	r6, r0
 800d776:	460f      	mov	r7, r1
 800d778:	e764      	b.n	800d644 <__ieee754_rem_pio2+0x18c>
 800d77a:	4b1b      	ldr	r3, [pc, #108]	; (800d7e8 <__ieee754_rem_pio2+0x330>)
 800d77c:	4598      	cmp	r8, r3
 800d77e:	dd35      	ble.n	800d7ec <__ieee754_rem_pio2+0x334>
 800d780:	ee10 2a10 	vmov	r2, s0
 800d784:	463b      	mov	r3, r7
 800d786:	4630      	mov	r0, r6
 800d788:	4639      	mov	r1, r7
 800d78a:	f7f2 fd29 	bl	80001e0 <__aeabi_dsub>
 800d78e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d792:	e9c4 0100 	strd	r0, r1, [r4]
 800d796:	e6a1      	b.n	800d4dc <__ieee754_rem_pio2+0x24>
 800d798:	54400000 	.word	0x54400000
 800d79c:	3ff921fb 	.word	0x3ff921fb
 800d7a0:	1a626331 	.word	0x1a626331
 800d7a4:	3dd0b461 	.word	0x3dd0b461
 800d7a8:	1a600000 	.word	0x1a600000
 800d7ac:	3dd0b461 	.word	0x3dd0b461
 800d7b0:	2e037073 	.word	0x2e037073
 800d7b4:	3ba3198a 	.word	0x3ba3198a
 800d7b8:	6dc9c883 	.word	0x6dc9c883
 800d7bc:	3fe45f30 	.word	0x3fe45f30
 800d7c0:	2e000000 	.word	0x2e000000
 800d7c4:	3ba3198a 	.word	0x3ba3198a
 800d7c8:	252049c1 	.word	0x252049c1
 800d7cc:	397b839a 	.word	0x397b839a
 800d7d0:	3fe921fb 	.word	0x3fe921fb
 800d7d4:	4002d97b 	.word	0x4002d97b
 800d7d8:	3ff921fb 	.word	0x3ff921fb
 800d7dc:	413921fb 	.word	0x413921fb
 800d7e0:	3fe00000 	.word	0x3fe00000
 800d7e4:	0800e5d0 	.word	0x0800e5d0
 800d7e8:	7fefffff 	.word	0x7fefffff
 800d7ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d7f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d7f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	460f      	mov	r7, r1
 800d7fc:	f7f3 f942 	bl	8000a84 <__aeabi_d2iz>
 800d800:	f7f2 fe3c 	bl	800047c <__aeabi_i2d>
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	4630      	mov	r0, r6
 800d80a:	4639      	mov	r1, r7
 800d80c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d810:	f7f2 fce6 	bl	80001e0 <__aeabi_dsub>
 800d814:	2200      	movs	r2, #0
 800d816:	4b1f      	ldr	r3, [pc, #124]	; (800d894 <__ieee754_rem_pio2+0x3dc>)
 800d818:	f7f2 fe9a 	bl	8000550 <__aeabi_dmul>
 800d81c:	460f      	mov	r7, r1
 800d81e:	4606      	mov	r6, r0
 800d820:	f7f3 f930 	bl	8000a84 <__aeabi_d2iz>
 800d824:	f7f2 fe2a 	bl	800047c <__aeabi_i2d>
 800d828:	4602      	mov	r2, r0
 800d82a:	460b      	mov	r3, r1
 800d82c:	4630      	mov	r0, r6
 800d82e:	4639      	mov	r1, r7
 800d830:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d834:	f7f2 fcd4 	bl	80001e0 <__aeabi_dsub>
 800d838:	2200      	movs	r2, #0
 800d83a:	4b16      	ldr	r3, [pc, #88]	; (800d894 <__ieee754_rem_pio2+0x3dc>)
 800d83c:	f7f2 fe88 	bl	8000550 <__aeabi_dmul>
 800d840:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d844:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d848:	f04f 0803 	mov.w	r8, #3
 800d84c:	2600      	movs	r6, #0
 800d84e:	2700      	movs	r7, #0
 800d850:	4632      	mov	r2, r6
 800d852:	463b      	mov	r3, r7
 800d854:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d858:	f108 3aff 	add.w	sl, r8, #4294967295
 800d85c:	f7f3 f8e0 	bl	8000a20 <__aeabi_dcmpeq>
 800d860:	b9b0      	cbnz	r0, 800d890 <__ieee754_rem_pio2+0x3d8>
 800d862:	4b0d      	ldr	r3, [pc, #52]	; (800d898 <__ieee754_rem_pio2+0x3e0>)
 800d864:	9301      	str	r3, [sp, #4]
 800d866:	2302      	movs	r3, #2
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	462a      	mov	r2, r5
 800d86c:	4643      	mov	r3, r8
 800d86e:	4621      	mov	r1, r4
 800d870:	a806      	add	r0, sp, #24
 800d872:	f000 f8dd 	bl	800da30 <__kernel_rem_pio2>
 800d876:	9b04      	ldr	r3, [sp, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	4605      	mov	r5, r0
 800d87c:	f6bf ae58 	bge.w	800d530 <__ieee754_rem_pio2+0x78>
 800d880:	6863      	ldr	r3, [r4, #4]
 800d882:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d886:	6063      	str	r3, [r4, #4]
 800d888:	68e3      	ldr	r3, [r4, #12]
 800d88a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d88e:	e746      	b.n	800d71e <__ieee754_rem_pio2+0x266>
 800d890:	46d0      	mov	r8, sl
 800d892:	e7dd      	b.n	800d850 <__ieee754_rem_pio2+0x398>
 800d894:	41700000 	.word	0x41700000
 800d898:	0800e650 	.word	0x0800e650
 800d89c:	00000000 	.word	0x00000000

0800d8a0 <__kernel_cos>:
 800d8a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a4:	ec59 8b10 	vmov	r8, r9, d0
 800d8a8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800d8ac:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d8b0:	ed2d 8b02 	vpush	{d8}
 800d8b4:	eeb0 8a41 	vmov.f32	s16, s2
 800d8b8:	eef0 8a61 	vmov.f32	s17, s3
 800d8bc:	da07      	bge.n	800d8ce <__kernel_cos+0x2e>
 800d8be:	ee10 0a10 	vmov	r0, s0
 800d8c2:	4649      	mov	r1, r9
 800d8c4:	f7f3 f8de 	bl	8000a84 <__aeabi_d2iz>
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	f000 8089 	beq.w	800d9e0 <__kernel_cos+0x140>
 800d8ce:	4642      	mov	r2, r8
 800d8d0:	464b      	mov	r3, r9
 800d8d2:	4640      	mov	r0, r8
 800d8d4:	4649      	mov	r1, r9
 800d8d6:	f7f2 fe3b 	bl	8000550 <__aeabi_dmul>
 800d8da:	2200      	movs	r2, #0
 800d8dc:	4b4e      	ldr	r3, [pc, #312]	; (800da18 <__kernel_cos+0x178>)
 800d8de:	4604      	mov	r4, r0
 800d8e0:	460d      	mov	r5, r1
 800d8e2:	f7f2 fe35 	bl	8000550 <__aeabi_dmul>
 800d8e6:	a340      	add	r3, pc, #256	; (adr r3, 800d9e8 <__kernel_cos+0x148>)
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	4682      	mov	sl, r0
 800d8ee:	468b      	mov	fp, r1
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	4629      	mov	r1, r5
 800d8f4:	f7f2 fe2c 	bl	8000550 <__aeabi_dmul>
 800d8f8:	a33d      	add	r3, pc, #244	; (adr r3, 800d9f0 <__kernel_cos+0x150>)
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	f7f2 fc71 	bl	80001e4 <__adddf3>
 800d902:	4622      	mov	r2, r4
 800d904:	462b      	mov	r3, r5
 800d906:	f7f2 fe23 	bl	8000550 <__aeabi_dmul>
 800d90a:	a33b      	add	r3, pc, #236	; (adr r3, 800d9f8 <__kernel_cos+0x158>)
 800d90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d910:	f7f2 fc66 	bl	80001e0 <__aeabi_dsub>
 800d914:	4622      	mov	r2, r4
 800d916:	462b      	mov	r3, r5
 800d918:	f7f2 fe1a 	bl	8000550 <__aeabi_dmul>
 800d91c:	a338      	add	r3, pc, #224	; (adr r3, 800da00 <__kernel_cos+0x160>)
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	f7f2 fc5f 	bl	80001e4 <__adddf3>
 800d926:	4622      	mov	r2, r4
 800d928:	462b      	mov	r3, r5
 800d92a:	f7f2 fe11 	bl	8000550 <__aeabi_dmul>
 800d92e:	a336      	add	r3, pc, #216	; (adr r3, 800da08 <__kernel_cos+0x168>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	f7f2 fc54 	bl	80001e0 <__aeabi_dsub>
 800d938:	4622      	mov	r2, r4
 800d93a:	462b      	mov	r3, r5
 800d93c:	f7f2 fe08 	bl	8000550 <__aeabi_dmul>
 800d940:	a333      	add	r3, pc, #204	; (adr r3, 800da10 <__kernel_cos+0x170>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f2 fc4d 	bl	80001e4 <__adddf3>
 800d94a:	4622      	mov	r2, r4
 800d94c:	462b      	mov	r3, r5
 800d94e:	f7f2 fdff 	bl	8000550 <__aeabi_dmul>
 800d952:	4622      	mov	r2, r4
 800d954:	462b      	mov	r3, r5
 800d956:	f7f2 fdfb 	bl	8000550 <__aeabi_dmul>
 800d95a:	ec53 2b18 	vmov	r2, r3, d8
 800d95e:	4604      	mov	r4, r0
 800d960:	460d      	mov	r5, r1
 800d962:	4640      	mov	r0, r8
 800d964:	4649      	mov	r1, r9
 800d966:	f7f2 fdf3 	bl	8000550 <__aeabi_dmul>
 800d96a:	460b      	mov	r3, r1
 800d96c:	4602      	mov	r2, r0
 800d96e:	4629      	mov	r1, r5
 800d970:	4620      	mov	r0, r4
 800d972:	f7f2 fc35 	bl	80001e0 <__aeabi_dsub>
 800d976:	4b29      	ldr	r3, [pc, #164]	; (800da1c <__kernel_cos+0x17c>)
 800d978:	429e      	cmp	r6, r3
 800d97a:	4680      	mov	r8, r0
 800d97c:	4689      	mov	r9, r1
 800d97e:	dc11      	bgt.n	800d9a4 <__kernel_cos+0x104>
 800d980:	4602      	mov	r2, r0
 800d982:	460b      	mov	r3, r1
 800d984:	4650      	mov	r0, sl
 800d986:	4659      	mov	r1, fp
 800d988:	f7f2 fc2a 	bl	80001e0 <__aeabi_dsub>
 800d98c:	460b      	mov	r3, r1
 800d98e:	4924      	ldr	r1, [pc, #144]	; (800da20 <__kernel_cos+0x180>)
 800d990:	4602      	mov	r2, r0
 800d992:	2000      	movs	r0, #0
 800d994:	f7f2 fc24 	bl	80001e0 <__aeabi_dsub>
 800d998:	ecbd 8b02 	vpop	{d8}
 800d99c:	ec41 0b10 	vmov	d0, r0, r1
 800d9a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a4:	4b1f      	ldr	r3, [pc, #124]	; (800da24 <__kernel_cos+0x184>)
 800d9a6:	491e      	ldr	r1, [pc, #120]	; (800da20 <__kernel_cos+0x180>)
 800d9a8:	429e      	cmp	r6, r3
 800d9aa:	bfcc      	ite	gt
 800d9ac:	4d1e      	ldrgt	r5, [pc, #120]	; (800da28 <__kernel_cos+0x188>)
 800d9ae:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d9b2:	2400      	movs	r4, #0
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	462b      	mov	r3, r5
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	f7f2 fc11 	bl	80001e0 <__aeabi_dsub>
 800d9be:	4622      	mov	r2, r4
 800d9c0:	4606      	mov	r6, r0
 800d9c2:	460f      	mov	r7, r1
 800d9c4:	462b      	mov	r3, r5
 800d9c6:	4650      	mov	r0, sl
 800d9c8:	4659      	mov	r1, fp
 800d9ca:	f7f2 fc09 	bl	80001e0 <__aeabi_dsub>
 800d9ce:	4642      	mov	r2, r8
 800d9d0:	464b      	mov	r3, r9
 800d9d2:	f7f2 fc05 	bl	80001e0 <__aeabi_dsub>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4630      	mov	r0, r6
 800d9dc:	4639      	mov	r1, r7
 800d9de:	e7d9      	b.n	800d994 <__kernel_cos+0xf4>
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	490f      	ldr	r1, [pc, #60]	; (800da20 <__kernel_cos+0x180>)
 800d9e4:	e7d8      	b.n	800d998 <__kernel_cos+0xf8>
 800d9e6:	bf00      	nop
 800d9e8:	be8838d4 	.word	0xbe8838d4
 800d9ec:	bda8fae9 	.word	0xbda8fae9
 800d9f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d9f4:	3e21ee9e 	.word	0x3e21ee9e
 800d9f8:	809c52ad 	.word	0x809c52ad
 800d9fc:	3e927e4f 	.word	0x3e927e4f
 800da00:	19cb1590 	.word	0x19cb1590
 800da04:	3efa01a0 	.word	0x3efa01a0
 800da08:	16c15177 	.word	0x16c15177
 800da0c:	3f56c16c 	.word	0x3f56c16c
 800da10:	5555554c 	.word	0x5555554c
 800da14:	3fa55555 	.word	0x3fa55555
 800da18:	3fe00000 	.word	0x3fe00000
 800da1c:	3fd33332 	.word	0x3fd33332
 800da20:	3ff00000 	.word	0x3ff00000
 800da24:	3fe90000 	.word	0x3fe90000
 800da28:	3fd20000 	.word	0x3fd20000
 800da2c:	00000000 	.word	0x00000000

0800da30 <__kernel_rem_pio2>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	ed2d 8b02 	vpush	{d8}
 800da38:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800da3c:	1ed4      	subs	r4, r2, #3
 800da3e:	9308      	str	r3, [sp, #32]
 800da40:	9101      	str	r1, [sp, #4]
 800da42:	4bc5      	ldr	r3, [pc, #788]	; (800dd58 <__kernel_rem_pio2+0x328>)
 800da44:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800da46:	9009      	str	r0, [sp, #36]	; 0x24
 800da48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da4c:	9304      	str	r3, [sp, #16]
 800da4e:	9b08      	ldr	r3, [sp, #32]
 800da50:	3b01      	subs	r3, #1
 800da52:	9307      	str	r3, [sp, #28]
 800da54:	2318      	movs	r3, #24
 800da56:	fb94 f4f3 	sdiv	r4, r4, r3
 800da5a:	f06f 0317 	mvn.w	r3, #23
 800da5e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800da62:	fb04 3303 	mla	r3, r4, r3, r3
 800da66:	eb03 0a02 	add.w	sl, r3, r2
 800da6a:	9b04      	ldr	r3, [sp, #16]
 800da6c:	9a07      	ldr	r2, [sp, #28]
 800da6e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800dd48 <__kernel_rem_pio2+0x318>
 800da72:	eb03 0802 	add.w	r8, r3, r2
 800da76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800da78:	1aa7      	subs	r7, r4, r2
 800da7a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800da7e:	ae22      	add	r6, sp, #136	; 0x88
 800da80:	2500      	movs	r5, #0
 800da82:	4545      	cmp	r5, r8
 800da84:	dd13      	ble.n	800daae <__kernel_rem_pio2+0x7e>
 800da86:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800dd48 <__kernel_rem_pio2+0x318>
 800da8a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800da8e:	2600      	movs	r6, #0
 800da90:	9b04      	ldr	r3, [sp, #16]
 800da92:	429e      	cmp	r6, r3
 800da94:	dc32      	bgt.n	800dafc <__kernel_rem_pio2+0xcc>
 800da96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da98:	9302      	str	r3, [sp, #8]
 800da9a:	9b08      	ldr	r3, [sp, #32]
 800da9c:	199d      	adds	r5, r3, r6
 800da9e:	ab22      	add	r3, sp, #136	; 0x88
 800daa0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800daa4:	9306      	str	r3, [sp, #24]
 800daa6:	ec59 8b18 	vmov	r8, r9, d8
 800daaa:	2700      	movs	r7, #0
 800daac:	e01f      	b.n	800daee <__kernel_rem_pio2+0xbe>
 800daae:	42ef      	cmn	r7, r5
 800dab0:	d407      	bmi.n	800dac2 <__kernel_rem_pio2+0x92>
 800dab2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dab6:	f7f2 fce1 	bl	800047c <__aeabi_i2d>
 800daba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dabe:	3501      	adds	r5, #1
 800dac0:	e7df      	b.n	800da82 <__kernel_rem_pio2+0x52>
 800dac2:	ec51 0b18 	vmov	r0, r1, d8
 800dac6:	e7f8      	b.n	800daba <__kernel_rem_pio2+0x8a>
 800dac8:	9906      	ldr	r1, [sp, #24]
 800daca:	9d02      	ldr	r5, [sp, #8]
 800dacc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800dad0:	9106      	str	r1, [sp, #24]
 800dad2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800dad6:	9502      	str	r5, [sp, #8]
 800dad8:	f7f2 fd3a 	bl	8000550 <__aeabi_dmul>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	4640      	mov	r0, r8
 800dae2:	4649      	mov	r1, r9
 800dae4:	f7f2 fb7e 	bl	80001e4 <__adddf3>
 800dae8:	3701      	adds	r7, #1
 800daea:	4680      	mov	r8, r0
 800daec:	4689      	mov	r9, r1
 800daee:	9b07      	ldr	r3, [sp, #28]
 800daf0:	429f      	cmp	r7, r3
 800daf2:	dde9      	ble.n	800dac8 <__kernel_rem_pio2+0x98>
 800daf4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800daf8:	3601      	adds	r6, #1
 800dafa:	e7c9      	b.n	800da90 <__kernel_rem_pio2+0x60>
 800dafc:	9b04      	ldr	r3, [sp, #16]
 800dafe:	aa0e      	add	r2, sp, #56	; 0x38
 800db00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db04:	930c      	str	r3, [sp, #48]	; 0x30
 800db06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800db08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800db0c:	9c04      	ldr	r4, [sp, #16]
 800db0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800db10:	ab9a      	add	r3, sp, #616	; 0x268
 800db12:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800db16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db1e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800db22:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800db26:	ab9a      	add	r3, sp, #616	; 0x268
 800db28:	445b      	add	r3, fp
 800db2a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800db2e:	2500      	movs	r5, #0
 800db30:	1b63      	subs	r3, r4, r5
 800db32:	2b00      	cmp	r3, #0
 800db34:	dc78      	bgt.n	800dc28 <__kernel_rem_pio2+0x1f8>
 800db36:	4650      	mov	r0, sl
 800db38:	ec49 8b10 	vmov	d0, r8, r9
 800db3c:	f000 fc00 	bl	800e340 <scalbn>
 800db40:	ec57 6b10 	vmov	r6, r7, d0
 800db44:	2200      	movs	r2, #0
 800db46:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800db4a:	ee10 0a10 	vmov	r0, s0
 800db4e:	4639      	mov	r1, r7
 800db50:	f7f2 fcfe 	bl	8000550 <__aeabi_dmul>
 800db54:	ec41 0b10 	vmov	d0, r0, r1
 800db58:	f000 fb6e 	bl	800e238 <floor>
 800db5c:	2200      	movs	r2, #0
 800db5e:	ec51 0b10 	vmov	r0, r1, d0
 800db62:	4b7e      	ldr	r3, [pc, #504]	; (800dd5c <__kernel_rem_pio2+0x32c>)
 800db64:	f7f2 fcf4 	bl	8000550 <__aeabi_dmul>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4630      	mov	r0, r6
 800db6e:	4639      	mov	r1, r7
 800db70:	f7f2 fb36 	bl	80001e0 <__aeabi_dsub>
 800db74:	460f      	mov	r7, r1
 800db76:	4606      	mov	r6, r0
 800db78:	f7f2 ff84 	bl	8000a84 <__aeabi_d2iz>
 800db7c:	9006      	str	r0, [sp, #24]
 800db7e:	f7f2 fc7d 	bl	800047c <__aeabi_i2d>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	4630      	mov	r0, r6
 800db88:	4639      	mov	r1, r7
 800db8a:	f7f2 fb29 	bl	80001e0 <__aeabi_dsub>
 800db8e:	f1ba 0f00 	cmp.w	sl, #0
 800db92:	4606      	mov	r6, r0
 800db94:	460f      	mov	r7, r1
 800db96:	dd6c      	ble.n	800dc72 <__kernel_rem_pio2+0x242>
 800db98:	1e62      	subs	r2, r4, #1
 800db9a:	ab0e      	add	r3, sp, #56	; 0x38
 800db9c:	f1ca 0118 	rsb	r1, sl, #24
 800dba0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dba4:	9d06      	ldr	r5, [sp, #24]
 800dba6:	fa40 f301 	asr.w	r3, r0, r1
 800dbaa:	441d      	add	r5, r3
 800dbac:	408b      	lsls	r3, r1
 800dbae:	1ac0      	subs	r0, r0, r3
 800dbb0:	ab0e      	add	r3, sp, #56	; 0x38
 800dbb2:	9506      	str	r5, [sp, #24]
 800dbb4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dbb8:	f1ca 0317 	rsb	r3, sl, #23
 800dbbc:	fa40 f303 	asr.w	r3, r0, r3
 800dbc0:	9302      	str	r3, [sp, #8]
 800dbc2:	9b02      	ldr	r3, [sp, #8]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	dd62      	ble.n	800dc8e <__kernel_rem_pio2+0x25e>
 800dbc8:	9b06      	ldr	r3, [sp, #24]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	3301      	adds	r3, #1
 800dbce:	9306      	str	r3, [sp, #24]
 800dbd0:	4615      	mov	r5, r2
 800dbd2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dbd6:	4294      	cmp	r4, r2
 800dbd8:	f300 8095 	bgt.w	800dd06 <__kernel_rem_pio2+0x2d6>
 800dbdc:	f1ba 0f00 	cmp.w	sl, #0
 800dbe0:	dd07      	ble.n	800dbf2 <__kernel_rem_pio2+0x1c2>
 800dbe2:	f1ba 0f01 	cmp.w	sl, #1
 800dbe6:	f000 80a2 	beq.w	800dd2e <__kernel_rem_pio2+0x2fe>
 800dbea:	f1ba 0f02 	cmp.w	sl, #2
 800dbee:	f000 80c1 	beq.w	800dd74 <__kernel_rem_pio2+0x344>
 800dbf2:	9b02      	ldr	r3, [sp, #8]
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d14a      	bne.n	800dc8e <__kernel_rem_pio2+0x25e>
 800dbf8:	4632      	mov	r2, r6
 800dbfa:	463b      	mov	r3, r7
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	4958      	ldr	r1, [pc, #352]	; (800dd60 <__kernel_rem_pio2+0x330>)
 800dc00:	f7f2 faee 	bl	80001e0 <__aeabi_dsub>
 800dc04:	4606      	mov	r6, r0
 800dc06:	460f      	mov	r7, r1
 800dc08:	2d00      	cmp	r5, #0
 800dc0a:	d040      	beq.n	800dc8e <__kernel_rem_pio2+0x25e>
 800dc0c:	4650      	mov	r0, sl
 800dc0e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800dd50 <__kernel_rem_pio2+0x320>
 800dc12:	f000 fb95 	bl	800e340 <scalbn>
 800dc16:	4630      	mov	r0, r6
 800dc18:	4639      	mov	r1, r7
 800dc1a:	ec53 2b10 	vmov	r2, r3, d0
 800dc1e:	f7f2 fadf 	bl	80001e0 <__aeabi_dsub>
 800dc22:	4606      	mov	r6, r0
 800dc24:	460f      	mov	r7, r1
 800dc26:	e032      	b.n	800dc8e <__kernel_rem_pio2+0x25e>
 800dc28:	2200      	movs	r2, #0
 800dc2a:	4b4e      	ldr	r3, [pc, #312]	; (800dd64 <__kernel_rem_pio2+0x334>)
 800dc2c:	4640      	mov	r0, r8
 800dc2e:	4649      	mov	r1, r9
 800dc30:	f7f2 fc8e 	bl	8000550 <__aeabi_dmul>
 800dc34:	f7f2 ff26 	bl	8000a84 <__aeabi_d2iz>
 800dc38:	f7f2 fc20 	bl	800047c <__aeabi_i2d>
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	4b4a      	ldr	r3, [pc, #296]	; (800dd68 <__kernel_rem_pio2+0x338>)
 800dc40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc44:	f7f2 fc84 	bl	8000550 <__aeabi_dmul>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4640      	mov	r0, r8
 800dc4e:	4649      	mov	r1, r9
 800dc50:	f7f2 fac6 	bl	80001e0 <__aeabi_dsub>
 800dc54:	f7f2 ff16 	bl	8000a84 <__aeabi_d2iz>
 800dc58:	ab0e      	add	r3, sp, #56	; 0x38
 800dc5a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800dc5e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800dc62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc66:	f7f2 fabd 	bl	80001e4 <__adddf3>
 800dc6a:	3501      	adds	r5, #1
 800dc6c:	4680      	mov	r8, r0
 800dc6e:	4689      	mov	r9, r1
 800dc70:	e75e      	b.n	800db30 <__kernel_rem_pio2+0x100>
 800dc72:	d105      	bne.n	800dc80 <__kernel_rem_pio2+0x250>
 800dc74:	1e63      	subs	r3, r4, #1
 800dc76:	aa0e      	add	r2, sp, #56	; 0x38
 800dc78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dc7c:	15c3      	asrs	r3, r0, #23
 800dc7e:	e79f      	b.n	800dbc0 <__kernel_rem_pio2+0x190>
 800dc80:	2200      	movs	r2, #0
 800dc82:	4b3a      	ldr	r3, [pc, #232]	; (800dd6c <__kernel_rem_pio2+0x33c>)
 800dc84:	f7f2 feea 	bl	8000a5c <__aeabi_dcmpge>
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d139      	bne.n	800dd00 <__kernel_rem_pio2+0x2d0>
 800dc8c:	9002      	str	r0, [sp, #8]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	2300      	movs	r3, #0
 800dc92:	4630      	mov	r0, r6
 800dc94:	4639      	mov	r1, r7
 800dc96:	f7f2 fec3 	bl	8000a20 <__aeabi_dcmpeq>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	f000 80c7 	beq.w	800de2e <__kernel_rem_pio2+0x3fe>
 800dca0:	1e65      	subs	r5, r4, #1
 800dca2:	462b      	mov	r3, r5
 800dca4:	2200      	movs	r2, #0
 800dca6:	9904      	ldr	r1, [sp, #16]
 800dca8:	428b      	cmp	r3, r1
 800dcaa:	da6a      	bge.n	800dd82 <__kernel_rem_pio2+0x352>
 800dcac:	2a00      	cmp	r2, #0
 800dcae:	f000 8088 	beq.w	800ddc2 <__kernel_rem_pio2+0x392>
 800dcb2:	ab0e      	add	r3, sp, #56	; 0x38
 800dcb4:	f1aa 0a18 	sub.w	sl, sl, #24
 800dcb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f000 80b4 	beq.w	800de2a <__kernel_rem_pio2+0x3fa>
 800dcc2:	4650      	mov	r0, sl
 800dcc4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800dd50 <__kernel_rem_pio2+0x320>
 800dcc8:	f000 fb3a 	bl	800e340 <scalbn>
 800dccc:	00ec      	lsls	r4, r5, #3
 800dcce:	ab72      	add	r3, sp, #456	; 0x1c8
 800dcd0:	191e      	adds	r6, r3, r4
 800dcd2:	ec59 8b10 	vmov	r8, r9, d0
 800dcd6:	f106 0a08 	add.w	sl, r6, #8
 800dcda:	462f      	mov	r7, r5
 800dcdc:	2f00      	cmp	r7, #0
 800dcde:	f280 80df 	bge.w	800dea0 <__kernel_rem_pio2+0x470>
 800dce2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800dd48 <__kernel_rem_pio2+0x318>
 800dce6:	f04f 0a00 	mov.w	sl, #0
 800dcea:	eba5 030a 	sub.w	r3, r5, sl
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	f2c0 810a 	blt.w	800df08 <__kernel_rem_pio2+0x4d8>
 800dcf4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800dd70 <__kernel_rem_pio2+0x340>
 800dcf8:	ec59 8b18 	vmov	r8, r9, d8
 800dcfc:	2700      	movs	r7, #0
 800dcfe:	e0f5      	b.n	800deec <__kernel_rem_pio2+0x4bc>
 800dd00:	2302      	movs	r3, #2
 800dd02:	9302      	str	r3, [sp, #8]
 800dd04:	e760      	b.n	800dbc8 <__kernel_rem_pio2+0x198>
 800dd06:	ab0e      	add	r3, sp, #56	; 0x38
 800dd08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd0c:	b94d      	cbnz	r5, 800dd22 <__kernel_rem_pio2+0x2f2>
 800dd0e:	b12b      	cbz	r3, 800dd1c <__kernel_rem_pio2+0x2ec>
 800dd10:	a80e      	add	r0, sp, #56	; 0x38
 800dd12:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dd16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	3201      	adds	r2, #1
 800dd1e:	461d      	mov	r5, r3
 800dd20:	e759      	b.n	800dbd6 <__kernel_rem_pio2+0x1a6>
 800dd22:	a80e      	add	r0, sp, #56	; 0x38
 800dd24:	1acb      	subs	r3, r1, r3
 800dd26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dd2a:	462b      	mov	r3, r5
 800dd2c:	e7f6      	b.n	800dd1c <__kernel_rem_pio2+0x2ec>
 800dd2e:	1e62      	subs	r2, r4, #1
 800dd30:	ab0e      	add	r3, sp, #56	; 0x38
 800dd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dd3a:	a90e      	add	r1, sp, #56	; 0x38
 800dd3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dd40:	e757      	b.n	800dbf2 <__kernel_rem_pio2+0x1c2>
 800dd42:	bf00      	nop
 800dd44:	f3af 8000 	nop.w
	...
 800dd54:	3ff00000 	.word	0x3ff00000
 800dd58:	0800e798 	.word	0x0800e798
 800dd5c:	40200000 	.word	0x40200000
 800dd60:	3ff00000 	.word	0x3ff00000
 800dd64:	3e700000 	.word	0x3e700000
 800dd68:	41700000 	.word	0x41700000
 800dd6c:	3fe00000 	.word	0x3fe00000
 800dd70:	0800e758 	.word	0x0800e758
 800dd74:	1e62      	subs	r2, r4, #1
 800dd76:	ab0e      	add	r3, sp, #56	; 0x38
 800dd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd7c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dd80:	e7db      	b.n	800dd3a <__kernel_rem_pio2+0x30a>
 800dd82:	a90e      	add	r1, sp, #56	; 0x38
 800dd84:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	430a      	orrs	r2, r1
 800dd8c:	e78b      	b.n	800dca6 <__kernel_rem_pio2+0x276>
 800dd8e:	3301      	adds	r3, #1
 800dd90:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dd94:	2900      	cmp	r1, #0
 800dd96:	d0fa      	beq.n	800dd8e <__kernel_rem_pio2+0x35e>
 800dd98:	9a08      	ldr	r2, [sp, #32]
 800dd9a:	4422      	add	r2, r4
 800dd9c:	00d2      	lsls	r2, r2, #3
 800dd9e:	a922      	add	r1, sp, #136	; 0x88
 800dda0:	18e3      	adds	r3, r4, r3
 800dda2:	9206      	str	r2, [sp, #24]
 800dda4:	440a      	add	r2, r1
 800dda6:	9302      	str	r3, [sp, #8]
 800dda8:	f10b 0108 	add.w	r1, fp, #8
 800ddac:	f102 0308 	add.w	r3, r2, #8
 800ddb0:	1c66      	adds	r6, r4, #1
 800ddb2:	910a      	str	r1, [sp, #40]	; 0x28
 800ddb4:	2500      	movs	r5, #0
 800ddb6:	930d      	str	r3, [sp, #52]	; 0x34
 800ddb8:	9b02      	ldr	r3, [sp, #8]
 800ddba:	42b3      	cmp	r3, r6
 800ddbc:	da04      	bge.n	800ddc8 <__kernel_rem_pio2+0x398>
 800ddbe:	461c      	mov	r4, r3
 800ddc0:	e6a6      	b.n	800db10 <__kernel_rem_pio2+0xe0>
 800ddc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e7e3      	b.n	800dd90 <__kernel_rem_pio2+0x360>
 800ddc8:	9b06      	ldr	r3, [sp, #24]
 800ddca:	18ef      	adds	r7, r5, r3
 800ddcc:	ab22      	add	r3, sp, #136	; 0x88
 800ddce:	441f      	add	r7, r3
 800ddd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddd2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ddd6:	f7f2 fb51 	bl	800047c <__aeabi_i2d>
 800ddda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dddc:	461c      	mov	r4, r3
 800ddde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dde0:	e9c7 0100 	strd	r0, r1, [r7]
 800dde4:	eb03 0b05 	add.w	fp, r3, r5
 800dde8:	2700      	movs	r7, #0
 800ddea:	f04f 0800 	mov.w	r8, #0
 800ddee:	f04f 0900 	mov.w	r9, #0
 800ddf2:	9b07      	ldr	r3, [sp, #28]
 800ddf4:	429f      	cmp	r7, r3
 800ddf6:	dd08      	ble.n	800de0a <__kernel_rem_pio2+0x3da>
 800ddf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddfa:	aa72      	add	r2, sp, #456	; 0x1c8
 800ddfc:	18eb      	adds	r3, r5, r3
 800ddfe:	4413      	add	r3, r2
 800de00:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800de04:	3601      	adds	r6, #1
 800de06:	3508      	adds	r5, #8
 800de08:	e7d6      	b.n	800ddb8 <__kernel_rem_pio2+0x388>
 800de0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800de0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800de12:	f7f2 fb9d 	bl	8000550 <__aeabi_dmul>
 800de16:	4602      	mov	r2, r0
 800de18:	460b      	mov	r3, r1
 800de1a:	4640      	mov	r0, r8
 800de1c:	4649      	mov	r1, r9
 800de1e:	f7f2 f9e1 	bl	80001e4 <__adddf3>
 800de22:	3701      	adds	r7, #1
 800de24:	4680      	mov	r8, r0
 800de26:	4689      	mov	r9, r1
 800de28:	e7e3      	b.n	800ddf2 <__kernel_rem_pio2+0x3c2>
 800de2a:	3d01      	subs	r5, #1
 800de2c:	e741      	b.n	800dcb2 <__kernel_rem_pio2+0x282>
 800de2e:	f1ca 0000 	rsb	r0, sl, #0
 800de32:	ec47 6b10 	vmov	d0, r6, r7
 800de36:	f000 fa83 	bl	800e340 <scalbn>
 800de3a:	ec57 6b10 	vmov	r6, r7, d0
 800de3e:	2200      	movs	r2, #0
 800de40:	4b99      	ldr	r3, [pc, #612]	; (800e0a8 <__kernel_rem_pio2+0x678>)
 800de42:	ee10 0a10 	vmov	r0, s0
 800de46:	4639      	mov	r1, r7
 800de48:	f7f2 fe08 	bl	8000a5c <__aeabi_dcmpge>
 800de4c:	b1f8      	cbz	r0, 800de8e <__kernel_rem_pio2+0x45e>
 800de4e:	2200      	movs	r2, #0
 800de50:	4b96      	ldr	r3, [pc, #600]	; (800e0ac <__kernel_rem_pio2+0x67c>)
 800de52:	4630      	mov	r0, r6
 800de54:	4639      	mov	r1, r7
 800de56:	f7f2 fb7b 	bl	8000550 <__aeabi_dmul>
 800de5a:	f7f2 fe13 	bl	8000a84 <__aeabi_d2iz>
 800de5e:	4680      	mov	r8, r0
 800de60:	f7f2 fb0c 	bl	800047c <__aeabi_i2d>
 800de64:	2200      	movs	r2, #0
 800de66:	4b90      	ldr	r3, [pc, #576]	; (800e0a8 <__kernel_rem_pio2+0x678>)
 800de68:	f7f2 fb72 	bl	8000550 <__aeabi_dmul>
 800de6c:	460b      	mov	r3, r1
 800de6e:	4602      	mov	r2, r0
 800de70:	4639      	mov	r1, r7
 800de72:	4630      	mov	r0, r6
 800de74:	f7f2 f9b4 	bl	80001e0 <__aeabi_dsub>
 800de78:	f7f2 fe04 	bl	8000a84 <__aeabi_d2iz>
 800de7c:	1c65      	adds	r5, r4, #1
 800de7e:	ab0e      	add	r3, sp, #56	; 0x38
 800de80:	f10a 0a18 	add.w	sl, sl, #24
 800de84:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800de88:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800de8c:	e719      	b.n	800dcc2 <__kernel_rem_pio2+0x292>
 800de8e:	4630      	mov	r0, r6
 800de90:	4639      	mov	r1, r7
 800de92:	f7f2 fdf7 	bl	8000a84 <__aeabi_d2iz>
 800de96:	ab0e      	add	r3, sp, #56	; 0x38
 800de98:	4625      	mov	r5, r4
 800de9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800de9e:	e710      	b.n	800dcc2 <__kernel_rem_pio2+0x292>
 800dea0:	ab0e      	add	r3, sp, #56	; 0x38
 800dea2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800dea6:	f7f2 fae9 	bl	800047c <__aeabi_i2d>
 800deaa:	4642      	mov	r2, r8
 800deac:	464b      	mov	r3, r9
 800deae:	f7f2 fb4f 	bl	8000550 <__aeabi_dmul>
 800deb2:	2200      	movs	r2, #0
 800deb4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800deb8:	4b7c      	ldr	r3, [pc, #496]	; (800e0ac <__kernel_rem_pio2+0x67c>)
 800deba:	4640      	mov	r0, r8
 800debc:	4649      	mov	r1, r9
 800debe:	f7f2 fb47 	bl	8000550 <__aeabi_dmul>
 800dec2:	3f01      	subs	r7, #1
 800dec4:	4680      	mov	r8, r0
 800dec6:	4689      	mov	r9, r1
 800dec8:	e708      	b.n	800dcdc <__kernel_rem_pio2+0x2ac>
 800deca:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ded6:	f7f2 fb3b 	bl	8000550 <__aeabi_dmul>
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	4640      	mov	r0, r8
 800dee0:	4649      	mov	r1, r9
 800dee2:	f7f2 f97f 	bl	80001e4 <__adddf3>
 800dee6:	3701      	adds	r7, #1
 800dee8:	4680      	mov	r8, r0
 800deea:	4689      	mov	r9, r1
 800deec:	9b04      	ldr	r3, [sp, #16]
 800deee:	429f      	cmp	r7, r3
 800def0:	dc01      	bgt.n	800def6 <__kernel_rem_pio2+0x4c6>
 800def2:	45ba      	cmp	sl, r7
 800def4:	dae9      	bge.n	800deca <__kernel_rem_pio2+0x49a>
 800def6:	ab4a      	add	r3, sp, #296	; 0x128
 800def8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800defc:	e9c3 8900 	strd	r8, r9, [r3]
 800df00:	f10a 0a01 	add.w	sl, sl, #1
 800df04:	3e08      	subs	r6, #8
 800df06:	e6f0      	b.n	800dcea <__kernel_rem_pio2+0x2ba>
 800df08:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d85b      	bhi.n	800dfc6 <__kernel_rem_pio2+0x596>
 800df0e:	e8df f003 	tbb	[pc, r3]
 800df12:	264a      	.short	0x264a
 800df14:	0226      	.short	0x0226
 800df16:	ab9a      	add	r3, sp, #616	; 0x268
 800df18:	441c      	add	r4, r3
 800df1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800df1e:	46a2      	mov	sl, r4
 800df20:	46ab      	mov	fp, r5
 800df22:	f1bb 0f00 	cmp.w	fp, #0
 800df26:	dc6c      	bgt.n	800e002 <__kernel_rem_pio2+0x5d2>
 800df28:	46a2      	mov	sl, r4
 800df2a:	46ab      	mov	fp, r5
 800df2c:	f1bb 0f01 	cmp.w	fp, #1
 800df30:	f300 8086 	bgt.w	800e040 <__kernel_rem_pio2+0x610>
 800df34:	2000      	movs	r0, #0
 800df36:	2100      	movs	r1, #0
 800df38:	2d01      	cmp	r5, #1
 800df3a:	f300 80a0 	bgt.w	800e07e <__kernel_rem_pio2+0x64e>
 800df3e:	9b02      	ldr	r3, [sp, #8]
 800df40:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800df44:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f040 809e 	bne.w	800e08a <__kernel_rem_pio2+0x65a>
 800df4e:	9b01      	ldr	r3, [sp, #4]
 800df50:	e9c3 7800 	strd	r7, r8, [r3]
 800df54:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800df58:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800df5c:	e033      	b.n	800dfc6 <__kernel_rem_pio2+0x596>
 800df5e:	3408      	adds	r4, #8
 800df60:	ab4a      	add	r3, sp, #296	; 0x128
 800df62:	441c      	add	r4, r3
 800df64:	462e      	mov	r6, r5
 800df66:	2000      	movs	r0, #0
 800df68:	2100      	movs	r1, #0
 800df6a:	2e00      	cmp	r6, #0
 800df6c:	da3a      	bge.n	800dfe4 <__kernel_rem_pio2+0x5b4>
 800df6e:	9b02      	ldr	r3, [sp, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d03d      	beq.n	800dff0 <__kernel_rem_pio2+0x5c0>
 800df74:	4602      	mov	r2, r0
 800df76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df7a:	9c01      	ldr	r4, [sp, #4]
 800df7c:	e9c4 2300 	strd	r2, r3, [r4]
 800df80:	4602      	mov	r2, r0
 800df82:	460b      	mov	r3, r1
 800df84:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800df88:	f7f2 f92a 	bl	80001e0 <__aeabi_dsub>
 800df8c:	ae4c      	add	r6, sp, #304	; 0x130
 800df8e:	2401      	movs	r4, #1
 800df90:	42a5      	cmp	r5, r4
 800df92:	da30      	bge.n	800dff6 <__kernel_rem_pio2+0x5c6>
 800df94:	9b02      	ldr	r3, [sp, #8]
 800df96:	b113      	cbz	r3, 800df9e <__kernel_rem_pio2+0x56e>
 800df98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df9c:	4619      	mov	r1, r3
 800df9e:	9b01      	ldr	r3, [sp, #4]
 800dfa0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dfa4:	e00f      	b.n	800dfc6 <__kernel_rem_pio2+0x596>
 800dfa6:	ab9a      	add	r3, sp, #616	; 0x268
 800dfa8:	441c      	add	r4, r3
 800dfaa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dfae:	2000      	movs	r0, #0
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	2d00      	cmp	r5, #0
 800dfb4:	da10      	bge.n	800dfd8 <__kernel_rem_pio2+0x5a8>
 800dfb6:	9b02      	ldr	r3, [sp, #8]
 800dfb8:	b113      	cbz	r3, 800dfc0 <__kernel_rem_pio2+0x590>
 800dfba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	9b01      	ldr	r3, [sp, #4]
 800dfc2:	e9c3 0100 	strd	r0, r1, [r3]
 800dfc6:	9b06      	ldr	r3, [sp, #24]
 800dfc8:	f003 0007 	and.w	r0, r3, #7
 800dfcc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800dfd0:	ecbd 8b02 	vpop	{d8}
 800dfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dfdc:	f7f2 f902 	bl	80001e4 <__adddf3>
 800dfe0:	3d01      	subs	r5, #1
 800dfe2:	e7e6      	b.n	800dfb2 <__kernel_rem_pio2+0x582>
 800dfe4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dfe8:	f7f2 f8fc 	bl	80001e4 <__adddf3>
 800dfec:	3e01      	subs	r6, #1
 800dfee:	e7bc      	b.n	800df6a <__kernel_rem_pio2+0x53a>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	e7c1      	b.n	800df7a <__kernel_rem_pio2+0x54a>
 800dff6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dffa:	f7f2 f8f3 	bl	80001e4 <__adddf3>
 800dffe:	3401      	adds	r4, #1
 800e000:	e7c6      	b.n	800df90 <__kernel_rem_pio2+0x560>
 800e002:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800e006:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e00a:	4640      	mov	r0, r8
 800e00c:	ec53 2b17 	vmov	r2, r3, d7
 800e010:	4649      	mov	r1, r9
 800e012:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e016:	f7f2 f8e5 	bl	80001e4 <__adddf3>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4606      	mov	r6, r0
 800e020:	460f      	mov	r7, r1
 800e022:	4640      	mov	r0, r8
 800e024:	4649      	mov	r1, r9
 800e026:	f7f2 f8db 	bl	80001e0 <__aeabi_dsub>
 800e02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e02e:	f7f2 f8d9 	bl	80001e4 <__adddf3>
 800e032:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e036:	e9ca 0100 	strd	r0, r1, [sl]
 800e03a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800e03e:	e770      	b.n	800df22 <__kernel_rem_pio2+0x4f2>
 800e040:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800e044:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e048:	4630      	mov	r0, r6
 800e04a:	ec53 2b17 	vmov	r2, r3, d7
 800e04e:	4639      	mov	r1, r7
 800e050:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e054:	f7f2 f8c6 	bl	80001e4 <__adddf3>
 800e058:	4602      	mov	r2, r0
 800e05a:	460b      	mov	r3, r1
 800e05c:	4680      	mov	r8, r0
 800e05e:	4689      	mov	r9, r1
 800e060:	4630      	mov	r0, r6
 800e062:	4639      	mov	r1, r7
 800e064:	f7f2 f8bc 	bl	80001e0 <__aeabi_dsub>
 800e068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e06c:	f7f2 f8ba 	bl	80001e4 <__adddf3>
 800e070:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e074:	e9ca 0100 	strd	r0, r1, [sl]
 800e078:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800e07c:	e756      	b.n	800df2c <__kernel_rem_pio2+0x4fc>
 800e07e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e082:	f7f2 f8af 	bl	80001e4 <__adddf3>
 800e086:	3d01      	subs	r5, #1
 800e088:	e756      	b.n	800df38 <__kernel_rem_pio2+0x508>
 800e08a:	9b01      	ldr	r3, [sp, #4]
 800e08c:	9a01      	ldr	r2, [sp, #4]
 800e08e:	601f      	str	r7, [r3, #0]
 800e090:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e094:	605c      	str	r4, [r3, #4]
 800e096:	609d      	str	r5, [r3, #8]
 800e098:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e09c:	60d3      	str	r3, [r2, #12]
 800e09e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0a2:	6110      	str	r0, [r2, #16]
 800e0a4:	6153      	str	r3, [r2, #20]
 800e0a6:	e78e      	b.n	800dfc6 <__kernel_rem_pio2+0x596>
 800e0a8:	41700000 	.word	0x41700000
 800e0ac:	3e700000 	.word	0x3e700000

0800e0b0 <__kernel_sin>:
 800e0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b4:	ec55 4b10 	vmov	r4, r5, d0
 800e0b8:	b085      	sub	sp, #20
 800e0ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e0be:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e0c2:	ed8d 1b00 	vstr	d1, [sp]
 800e0c6:	9002      	str	r0, [sp, #8]
 800e0c8:	da06      	bge.n	800e0d8 <__kernel_sin+0x28>
 800e0ca:	ee10 0a10 	vmov	r0, s0
 800e0ce:	4629      	mov	r1, r5
 800e0d0:	f7f2 fcd8 	bl	8000a84 <__aeabi_d2iz>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d051      	beq.n	800e17c <__kernel_sin+0xcc>
 800e0d8:	4622      	mov	r2, r4
 800e0da:	462b      	mov	r3, r5
 800e0dc:	4620      	mov	r0, r4
 800e0de:	4629      	mov	r1, r5
 800e0e0:	f7f2 fa36 	bl	8000550 <__aeabi_dmul>
 800e0e4:	4682      	mov	sl, r0
 800e0e6:	468b      	mov	fp, r1
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	f7f2 fa2e 	bl	8000550 <__aeabi_dmul>
 800e0f4:	a341      	add	r3, pc, #260	; (adr r3, 800e1fc <__kernel_sin+0x14c>)
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	4680      	mov	r8, r0
 800e0fc:	4689      	mov	r9, r1
 800e0fe:	4650      	mov	r0, sl
 800e100:	4659      	mov	r1, fp
 800e102:	f7f2 fa25 	bl	8000550 <__aeabi_dmul>
 800e106:	a33f      	add	r3, pc, #252	; (adr r3, 800e204 <__kernel_sin+0x154>)
 800e108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10c:	f7f2 f868 	bl	80001e0 <__aeabi_dsub>
 800e110:	4652      	mov	r2, sl
 800e112:	465b      	mov	r3, fp
 800e114:	f7f2 fa1c 	bl	8000550 <__aeabi_dmul>
 800e118:	a33c      	add	r3, pc, #240	; (adr r3, 800e20c <__kernel_sin+0x15c>)
 800e11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11e:	f7f2 f861 	bl	80001e4 <__adddf3>
 800e122:	4652      	mov	r2, sl
 800e124:	465b      	mov	r3, fp
 800e126:	f7f2 fa13 	bl	8000550 <__aeabi_dmul>
 800e12a:	a33a      	add	r3, pc, #232	; (adr r3, 800e214 <__kernel_sin+0x164>)
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	f7f2 f856 	bl	80001e0 <__aeabi_dsub>
 800e134:	4652      	mov	r2, sl
 800e136:	465b      	mov	r3, fp
 800e138:	f7f2 fa0a 	bl	8000550 <__aeabi_dmul>
 800e13c:	a337      	add	r3, pc, #220	; (adr r3, 800e21c <__kernel_sin+0x16c>)
 800e13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e142:	f7f2 f84f 	bl	80001e4 <__adddf3>
 800e146:	9b02      	ldr	r3, [sp, #8]
 800e148:	4606      	mov	r6, r0
 800e14a:	460f      	mov	r7, r1
 800e14c:	b9db      	cbnz	r3, 800e186 <__kernel_sin+0xd6>
 800e14e:	4602      	mov	r2, r0
 800e150:	460b      	mov	r3, r1
 800e152:	4650      	mov	r0, sl
 800e154:	4659      	mov	r1, fp
 800e156:	f7f2 f9fb 	bl	8000550 <__aeabi_dmul>
 800e15a:	a325      	add	r3, pc, #148	; (adr r3, 800e1f0 <__kernel_sin+0x140>)
 800e15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e160:	f7f2 f83e 	bl	80001e0 <__aeabi_dsub>
 800e164:	4642      	mov	r2, r8
 800e166:	464b      	mov	r3, r9
 800e168:	f7f2 f9f2 	bl	8000550 <__aeabi_dmul>
 800e16c:	4602      	mov	r2, r0
 800e16e:	460b      	mov	r3, r1
 800e170:	4620      	mov	r0, r4
 800e172:	4629      	mov	r1, r5
 800e174:	f7f2 f836 	bl	80001e4 <__adddf3>
 800e178:	4604      	mov	r4, r0
 800e17a:	460d      	mov	r5, r1
 800e17c:	ec45 4b10 	vmov	d0, r4, r5
 800e180:	b005      	add	sp, #20
 800e182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e186:	2200      	movs	r2, #0
 800e188:	4b1b      	ldr	r3, [pc, #108]	; (800e1f8 <__kernel_sin+0x148>)
 800e18a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e18e:	f7f2 f9df 	bl	8000550 <__aeabi_dmul>
 800e192:	4632      	mov	r2, r6
 800e194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e198:	463b      	mov	r3, r7
 800e19a:	4640      	mov	r0, r8
 800e19c:	4649      	mov	r1, r9
 800e19e:	f7f2 f9d7 	bl	8000550 <__aeabi_dmul>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1aa:	f7f2 f819 	bl	80001e0 <__aeabi_dsub>
 800e1ae:	4652      	mov	r2, sl
 800e1b0:	465b      	mov	r3, fp
 800e1b2:	f7f2 f9cd 	bl	8000550 <__aeabi_dmul>
 800e1b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ba:	f7f2 f811 	bl	80001e0 <__aeabi_dsub>
 800e1be:	a30c      	add	r3, pc, #48	; (adr r3, 800e1f0 <__kernel_sin+0x140>)
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	460f      	mov	r7, r1
 800e1c8:	4640      	mov	r0, r8
 800e1ca:	4649      	mov	r1, r9
 800e1cc:	f7f2 f9c0 	bl	8000550 <__aeabi_dmul>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	4639      	mov	r1, r7
 800e1d8:	f7f2 f804 	bl	80001e4 <__adddf3>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	460b      	mov	r3, r1
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	f7f1 fffc 	bl	80001e0 <__aeabi_dsub>
 800e1e8:	e7c6      	b.n	800e178 <__kernel_sin+0xc8>
 800e1ea:	bf00      	nop
 800e1ec:	f3af 8000 	nop.w
 800e1f0:	55555549 	.word	0x55555549
 800e1f4:	3fc55555 	.word	0x3fc55555
 800e1f8:	3fe00000 	.word	0x3fe00000
 800e1fc:	5acfd57c 	.word	0x5acfd57c
 800e200:	3de5d93a 	.word	0x3de5d93a
 800e204:	8a2b9ceb 	.word	0x8a2b9ceb
 800e208:	3e5ae5e6 	.word	0x3e5ae5e6
 800e20c:	57b1fe7d 	.word	0x57b1fe7d
 800e210:	3ec71de3 	.word	0x3ec71de3
 800e214:	19c161d5 	.word	0x19c161d5
 800e218:	3f2a01a0 	.word	0x3f2a01a0
 800e21c:	1110f8a6 	.word	0x1110f8a6
 800e220:	3f811111 	.word	0x3f811111

0800e224 <fabs>:
 800e224:	ec51 0b10 	vmov	r0, r1, d0
 800e228:	ee10 2a10 	vmov	r2, s0
 800e22c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e230:	ec43 2b10 	vmov	d0, r2, r3
 800e234:	4770      	bx	lr
	...

0800e238 <floor>:
 800e238:	ec51 0b10 	vmov	r0, r1, d0
 800e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e244:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e248:	2e13      	cmp	r6, #19
 800e24a:	460c      	mov	r4, r1
 800e24c:	ee10 5a10 	vmov	r5, s0
 800e250:	4680      	mov	r8, r0
 800e252:	dc34      	bgt.n	800e2be <floor+0x86>
 800e254:	2e00      	cmp	r6, #0
 800e256:	da16      	bge.n	800e286 <floor+0x4e>
 800e258:	a335      	add	r3, pc, #212	; (adr r3, 800e330 <floor+0xf8>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f1 ffc1 	bl	80001e4 <__adddf3>
 800e262:	2200      	movs	r2, #0
 800e264:	2300      	movs	r3, #0
 800e266:	f7f2 fc03 	bl	8000a70 <__aeabi_dcmpgt>
 800e26a:	b148      	cbz	r0, 800e280 <floor+0x48>
 800e26c:	2c00      	cmp	r4, #0
 800e26e:	da59      	bge.n	800e324 <floor+0xec>
 800e270:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e274:	4a30      	ldr	r2, [pc, #192]	; (800e338 <floor+0x100>)
 800e276:	432b      	orrs	r3, r5
 800e278:	2500      	movs	r5, #0
 800e27a:	42ab      	cmp	r3, r5
 800e27c:	bf18      	it	ne
 800e27e:	4614      	movne	r4, r2
 800e280:	4621      	mov	r1, r4
 800e282:	4628      	mov	r0, r5
 800e284:	e025      	b.n	800e2d2 <floor+0x9a>
 800e286:	4f2d      	ldr	r7, [pc, #180]	; (800e33c <floor+0x104>)
 800e288:	4137      	asrs	r7, r6
 800e28a:	ea01 0307 	and.w	r3, r1, r7
 800e28e:	4303      	orrs	r3, r0
 800e290:	d01f      	beq.n	800e2d2 <floor+0x9a>
 800e292:	a327      	add	r3, pc, #156	; (adr r3, 800e330 <floor+0xf8>)
 800e294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e298:	f7f1 ffa4 	bl	80001e4 <__adddf3>
 800e29c:	2200      	movs	r2, #0
 800e29e:	2300      	movs	r3, #0
 800e2a0:	f7f2 fbe6 	bl	8000a70 <__aeabi_dcmpgt>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d0eb      	beq.n	800e280 <floor+0x48>
 800e2a8:	2c00      	cmp	r4, #0
 800e2aa:	bfbe      	ittt	lt
 800e2ac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e2b0:	fa43 f606 	asrlt.w	r6, r3, r6
 800e2b4:	19a4      	addlt	r4, r4, r6
 800e2b6:	ea24 0407 	bic.w	r4, r4, r7
 800e2ba:	2500      	movs	r5, #0
 800e2bc:	e7e0      	b.n	800e280 <floor+0x48>
 800e2be:	2e33      	cmp	r6, #51	; 0x33
 800e2c0:	dd0b      	ble.n	800e2da <floor+0xa2>
 800e2c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e2c6:	d104      	bne.n	800e2d2 <floor+0x9a>
 800e2c8:	ee10 2a10 	vmov	r2, s0
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	f7f1 ff89 	bl	80001e4 <__adddf3>
 800e2d2:	ec41 0b10 	vmov	d0, r0, r1
 800e2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2da:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e2de:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e2:	fa23 f707 	lsr.w	r7, r3, r7
 800e2e6:	4207      	tst	r7, r0
 800e2e8:	d0f3      	beq.n	800e2d2 <floor+0x9a>
 800e2ea:	a311      	add	r3, pc, #68	; (adr r3, 800e330 <floor+0xf8>)
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	f7f1 ff78 	bl	80001e4 <__adddf3>
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f7f2 fbba 	bl	8000a70 <__aeabi_dcmpgt>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d0bf      	beq.n	800e280 <floor+0x48>
 800e300:	2c00      	cmp	r4, #0
 800e302:	da02      	bge.n	800e30a <floor+0xd2>
 800e304:	2e14      	cmp	r6, #20
 800e306:	d103      	bne.n	800e310 <floor+0xd8>
 800e308:	3401      	adds	r4, #1
 800e30a:	ea25 0507 	bic.w	r5, r5, r7
 800e30e:	e7b7      	b.n	800e280 <floor+0x48>
 800e310:	2301      	movs	r3, #1
 800e312:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e316:	fa03 f606 	lsl.w	r6, r3, r6
 800e31a:	4435      	add	r5, r6
 800e31c:	4545      	cmp	r5, r8
 800e31e:	bf38      	it	cc
 800e320:	18e4      	addcc	r4, r4, r3
 800e322:	e7f2      	b.n	800e30a <floor+0xd2>
 800e324:	2500      	movs	r5, #0
 800e326:	462c      	mov	r4, r5
 800e328:	e7aa      	b.n	800e280 <floor+0x48>
 800e32a:	bf00      	nop
 800e32c:	f3af 8000 	nop.w
 800e330:	8800759c 	.word	0x8800759c
 800e334:	7e37e43c 	.word	0x7e37e43c
 800e338:	bff00000 	.word	0xbff00000
 800e33c:	000fffff 	.word	0x000fffff

0800e340 <scalbn>:
 800e340:	b570      	push	{r4, r5, r6, lr}
 800e342:	ec55 4b10 	vmov	r4, r5, d0
 800e346:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e34a:	4606      	mov	r6, r0
 800e34c:	462b      	mov	r3, r5
 800e34e:	b9aa      	cbnz	r2, 800e37c <scalbn+0x3c>
 800e350:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e354:	4323      	orrs	r3, r4
 800e356:	d03b      	beq.n	800e3d0 <scalbn+0x90>
 800e358:	4b31      	ldr	r3, [pc, #196]	; (800e420 <scalbn+0xe0>)
 800e35a:	4629      	mov	r1, r5
 800e35c:	2200      	movs	r2, #0
 800e35e:	ee10 0a10 	vmov	r0, s0
 800e362:	f7f2 f8f5 	bl	8000550 <__aeabi_dmul>
 800e366:	4b2f      	ldr	r3, [pc, #188]	; (800e424 <scalbn+0xe4>)
 800e368:	429e      	cmp	r6, r3
 800e36a:	4604      	mov	r4, r0
 800e36c:	460d      	mov	r5, r1
 800e36e:	da12      	bge.n	800e396 <scalbn+0x56>
 800e370:	a327      	add	r3, pc, #156	; (adr r3, 800e410 <scalbn+0xd0>)
 800e372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e376:	f7f2 f8eb 	bl	8000550 <__aeabi_dmul>
 800e37a:	e009      	b.n	800e390 <scalbn+0x50>
 800e37c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e380:	428a      	cmp	r2, r1
 800e382:	d10c      	bne.n	800e39e <scalbn+0x5e>
 800e384:	ee10 2a10 	vmov	r2, s0
 800e388:	4620      	mov	r0, r4
 800e38a:	4629      	mov	r1, r5
 800e38c:	f7f1 ff2a 	bl	80001e4 <__adddf3>
 800e390:	4604      	mov	r4, r0
 800e392:	460d      	mov	r5, r1
 800e394:	e01c      	b.n	800e3d0 <scalbn+0x90>
 800e396:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e39a:	460b      	mov	r3, r1
 800e39c:	3a36      	subs	r2, #54	; 0x36
 800e39e:	4432      	add	r2, r6
 800e3a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e3a4:	428a      	cmp	r2, r1
 800e3a6:	dd0b      	ble.n	800e3c0 <scalbn+0x80>
 800e3a8:	ec45 4b11 	vmov	d1, r4, r5
 800e3ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e418 <scalbn+0xd8>
 800e3b0:	f000 f83c 	bl	800e42c <copysign>
 800e3b4:	a318      	add	r3, pc, #96	; (adr r3, 800e418 <scalbn+0xd8>)
 800e3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ba:	ec51 0b10 	vmov	r0, r1, d0
 800e3be:	e7da      	b.n	800e376 <scalbn+0x36>
 800e3c0:	2a00      	cmp	r2, #0
 800e3c2:	dd08      	ble.n	800e3d6 <scalbn+0x96>
 800e3c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e3c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e3cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e3d0:	ec45 4b10 	vmov	d0, r4, r5
 800e3d4:	bd70      	pop	{r4, r5, r6, pc}
 800e3d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e3da:	da0d      	bge.n	800e3f8 <scalbn+0xb8>
 800e3dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e3e0:	429e      	cmp	r6, r3
 800e3e2:	ec45 4b11 	vmov	d1, r4, r5
 800e3e6:	dce1      	bgt.n	800e3ac <scalbn+0x6c>
 800e3e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e410 <scalbn+0xd0>
 800e3ec:	f000 f81e 	bl	800e42c <copysign>
 800e3f0:	a307      	add	r3, pc, #28	; (adr r3, 800e410 <scalbn+0xd0>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	e7e0      	b.n	800e3ba <scalbn+0x7a>
 800e3f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e3fc:	3236      	adds	r2, #54	; 0x36
 800e3fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e402:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e406:	4620      	mov	r0, r4
 800e408:	4629      	mov	r1, r5
 800e40a:	2200      	movs	r2, #0
 800e40c:	4b06      	ldr	r3, [pc, #24]	; (800e428 <scalbn+0xe8>)
 800e40e:	e7b2      	b.n	800e376 <scalbn+0x36>
 800e410:	c2f8f359 	.word	0xc2f8f359
 800e414:	01a56e1f 	.word	0x01a56e1f
 800e418:	8800759c 	.word	0x8800759c
 800e41c:	7e37e43c 	.word	0x7e37e43c
 800e420:	43500000 	.word	0x43500000
 800e424:	ffff3cb0 	.word	0xffff3cb0
 800e428:	3c900000 	.word	0x3c900000

0800e42c <copysign>:
 800e42c:	ec51 0b10 	vmov	r0, r1, d0
 800e430:	ee11 0a90 	vmov	r0, s3
 800e434:	ee10 2a10 	vmov	r2, s0
 800e438:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e43c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e440:	ea41 0300 	orr.w	r3, r1, r0
 800e444:	ec43 2b10 	vmov	d0, r2, r3
 800e448:	4770      	bx	lr
	...

0800e44c <_init>:
 800e44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44e:	bf00      	nop
 800e450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e452:	bc08      	pop	{r3}
 800e454:	469e      	mov	lr, r3
 800e456:	4770      	bx	lr

0800e458 <_fini>:
 800e458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45a:	bf00      	nop
 800e45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e45e:	bc08      	pop	{r3}
 800e460:	469e      	mov	lr, r3
 800e462:	4770      	bx	lr
