
monofon_USB_sk6812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010dac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd8  08010f50  08010f50  00020f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c28  08011c28  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08011c28  08011c28  00021c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c30  08011c30  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c30  08011c30  00021c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c34  08011c34  00021c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08011c38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000058f4  2000007c  08011cb4  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00004500  20005970  08011cb4  00035970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027888  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051fc  00000000  00000000  00057934  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b98  00000000  00000000  0005cb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001930  00000000  00000000  0005e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d908  00000000  00000000  0005fff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001be84  00000000  00000000  0007d900  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d5ef  00000000  00000000  00099784  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136d73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f14  00000000  00000000  00136df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010f34 	.word	0x08010f34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08010f34 	.word	0x08010f34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b972 	b.w	8000f28 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9e08      	ldr	r6, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	4688      	mov	r8, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d14b      	bne.n	8000d02 <__udivmoddi4+0xa6>
 8000c6a:	428a      	cmp	r2, r1
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	d967      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	b14a      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c76:	f1c2 0720 	rsb	r7, r2, #32
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c82:	4095      	lsls	r5, r2
 8000c84:	ea47 0803 	orr.w	r8, r7, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c94:	fa1f fc85 	uxth.w	ip, r5
 8000c98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cae:	f080 811b 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8118 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb8:	3f02      	subs	r7, #2
 8000cba:	442b      	add	r3, r5
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cd0:	45a4      	cmp	ip, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	192c      	adds	r4, r5, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x290>
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x290>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	442c      	add	r4, r5
 8000ce8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cec:	eba4 040c 	sub.w	r4, r4, ip
 8000cf0:	2700      	movs	r7, #0
 8000cf2:	b11e      	cbz	r6, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfc:	4639      	mov	r1, r7
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xbe>
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	f000 80eb 	beq.w	8000ee2 <__udivmoddi4+0x286>
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d12:	4638      	mov	r0, r7
 8000d14:	4639      	mov	r1, r7
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f783 	clz	r7, r3
 8000d1e:	2f00      	cmp	r7, #0
 8000d20:	d147      	bne.n	8000db2 <__udivmoddi4+0x156>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd0>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80fa 	bhi.w	8000f20 <__udivmoddi4+0x2c4>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	4698      	mov	r8, r3
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000d3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xe8>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 808f 	bne.w	8000e6c <__udivmoddi4+0x210>
 8000d4e:	1b49      	subs	r1, r1, r5
 8000d50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d54:	fa1f f885 	uxth.w	r8, r5
 8000d58:	2701      	movs	r7, #1
 8000d5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5e:	0c23      	lsrs	r3, r4, #16
 8000d60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb08 f10c 	mul.w	r1, r8, ip
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x124>
 8000d70:	18eb      	adds	r3, r5, r3
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x122>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	f200 80cd 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1a59      	subs	r1, r3, r1
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x14c>
 8000d98:	192c      	adds	r4, r5, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x14a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80b6 	bhi.w	8000f12 <__udivmoddi4+0x2b6>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e79f      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000db2:	f1c7 0c20 	rsb	ip, r7, #32
 8000db6:	40bb      	lsls	r3, r7
 8000db8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dd0:	4325      	orrs	r5, r4
 8000dd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd6:	0c2c      	lsrs	r4, r5, #16
 8000dd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ddc:	fa1f fa8e 	uxth.w	sl, lr
 8000de0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de4:	fb09 f40a 	mul.w	r4, r9, sl
 8000de8:	429c      	cmp	r4, r3
 8000dea:	fa02 f207 	lsl.w	r2, r2, r7
 8000dee:	fa00 f107 	lsl.w	r1, r0, r7
 8000df2:	d90b      	bls.n	8000e0c <__udivmoddi4+0x1b0>
 8000df4:	eb1e 0303 	adds.w	r3, lr, r3
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	f080 8087 	bcs.w	8000f0e <__udivmoddi4+0x2b2>
 8000e00:	429c      	cmp	r4, r3
 8000e02:	f240 8084 	bls.w	8000f0e <__udivmoddi4+0x2b2>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4473      	add	r3, lr
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	b2ad      	uxth	r5, r5
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3310 	mls	r3, r8, r0, r3
 8000e18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e20:	45a2      	cmp	sl, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1da>
 8000e24:	eb1e 0404 	adds.w	r4, lr, r4
 8000e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2c:	d26b      	bcs.n	8000f06 <__udivmoddi4+0x2aa>
 8000e2e:	45a2      	cmp	sl, r4
 8000e30:	d969      	bls.n	8000f06 <__udivmoddi4+0x2aa>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4474      	add	r4, lr
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	eba4 040a 	sub.w	r4, r4, sl
 8000e42:	454c      	cmp	r4, r9
 8000e44:	46c2      	mov	sl, r8
 8000e46:	464b      	mov	r3, r9
 8000e48:	d354      	bcc.n	8000ef4 <__udivmoddi4+0x298>
 8000e4a:	d051      	beq.n	8000ef0 <__udivmoddi4+0x294>
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d069      	beq.n	8000f24 <__udivmoddi4+0x2c8>
 8000e50:	ebb1 050a 	subs.w	r5, r1, sl
 8000e54:	eb64 0403 	sbc.w	r4, r4, r3
 8000e58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e5c:	40fd      	lsrs	r5, r7
 8000e5e:	40fc      	lsrs	r4, r7
 8000e60:	ea4c 0505 	orr.w	r5, ip, r5
 8000e64:	e9c6 5400 	strd	r5, r4, [r6]
 8000e68:	2700      	movs	r7, #0
 8000e6a:	e747      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f703 	lsr.w	r7, r0, r3
 8000e74:	4095      	lsls	r5, r2
 8000e76:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e82:	4338      	orrs	r0, r7
 8000e84:	0c01      	lsrs	r1, r0, #16
 8000e86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e8a:	fa1f f885 	uxth.w	r8, r5
 8000e8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e96:	fb07 f308 	mul.w	r3, r7, r8
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x256>
 8000ea2:	1869      	adds	r1, r5, r1
 8000ea4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea8:	d22f      	bcs.n	8000f0a <__udivmoddi4+0x2ae>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d92d      	bls.n	8000f0a <__udivmoddi4+0x2ae>
 8000eae:	3f02      	subs	r7, #2
 8000eb0:	4429      	add	r1, r5
 8000eb2:	1acb      	subs	r3, r1, r3
 8000eb4:	b281      	uxth	r1, r0
 8000eb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb00 f308 	mul.w	r3, r0, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x27e>
 8000eca:	1869      	adds	r1, r5, r1
 8000ecc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ed0:	d217      	bcs.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d915      	bls.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4429      	add	r1, r5
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ee0:	e73b      	b.n	8000d5a <__udivmoddi4+0xfe>
 8000ee2:	4637      	mov	r7, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e709      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee8:	4607      	mov	r7, r0
 8000eea:	e6e7      	b.n	8000cbc <__udivmoddi4+0x60>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000ef0:	4541      	cmp	r1, r8
 8000ef2:	d2ab      	bcs.n	8000e4c <__udivmoddi4+0x1f0>
 8000ef4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef8:	eb69 020e 	sbc.w	r2, r9, lr
 8000efc:	3801      	subs	r0, #1
 8000efe:	4613      	mov	r3, r2
 8000f00:	e7a4      	b.n	8000e4c <__udivmoddi4+0x1f0>
 8000f02:	4660      	mov	r0, ip
 8000f04:	e7e9      	b.n	8000eda <__udivmoddi4+0x27e>
 8000f06:	4618      	mov	r0, r3
 8000f08:	e795      	b.n	8000e36 <__udivmoddi4+0x1da>
 8000f0a:	4667      	mov	r7, ip
 8000f0c:	e7d1      	b.n	8000eb2 <__udivmoddi4+0x256>
 8000f0e:	4681      	mov	r9, r0
 8000f10:	e77c      	b.n	8000e0c <__udivmoddi4+0x1b0>
 8000f12:	3802      	subs	r0, #2
 8000f14:	442c      	add	r4, r5
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0x14c>
 8000f18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f1c:	442b      	add	r3, r5
 8000f1e:	e72f      	b.n	8000d80 <__udivmoddi4+0x124>
 8000f20:	4638      	mov	r0, r7
 8000f22:	e708      	b.n	8000d36 <__udivmoddi4+0xda>
 8000f24:	4637      	mov	r7, r6
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0xa0>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fd19 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f00c ffec 	bl	800df3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fd31 	bl	80019f6 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 fcf9 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000014 	.word	0x20000014
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	200008bc 	.word	0x200008bc

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200008bc 	.word	0x200008bc

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_Delay+0x40>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e033      	b.n	80010d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f00c ff8a 	bl	800df8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d118      	bne.n	80010c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800109a:	f023 0302 	bic.w	r3, r3, #2
 800109e:	f043 0202 	orr.w	r2, r3, #2
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 faa4 	bl	80015f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f023 0303 	bic.w	r3, r3, #3
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
 80010c2:	e001      	b.n	80010c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_ADC_Start+0x1a>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e08a      	b.n	800120c <HAL_ADC_Start+0x130>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b01      	cmp	r3, #1
 800110a:	d018      	beq.n	800113e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800111c:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <HAL_ADC_Start+0x13c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3e      	ldr	r2, [pc, #248]	; (800121c <HAL_ADC_Start+0x140>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9a      	lsrs	r2, r3, #18
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001130:	e002      	b.n	8001138 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3b01      	subs	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d15e      	bne.n	800120a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001176:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118a:	d106      	bne.n	800119a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	f023 0206 	bic.w	r2, r3, #6
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	645a      	str	r2, [r3, #68]	; 0x44
 8001198:	e002      	b.n	80011a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_ADC_Start+0x144>)
 80011aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10f      	bne.n	80011e2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d11c      	bne.n	800120a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	e013      	b.n	800120a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_ADC_Start+0x148>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d10e      	bne.n	800120a <HAL_ADC_Start+0x12e>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d107      	bne.n	800120a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001208:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000014 	.word	0x20000014
 800121c:	431bde83 	.word	0x431bde83
 8001220:	40012300 	.word	0x40012300
 8001224:	40012000 	.word	0x40012000

08001228 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_ADC_Stop+0x16>
 800123a:	2302      	movs	r3, #2
 800123c:	e021      	b.n	8001282 <HAL_ADC_Stop+0x5a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0201 	bic.w	r2, r2, #1
 8001254:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d109      	bne.n	8001278 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012aa:	d113      	bne.n	80012d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ba:	d10b      	bne.n	80012d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f043 0220 	orr.w	r2, r3, #32
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e05c      	b.n	800138e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012d4:	f7ff fe90 	bl	8000ff8 <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012da:	e01a      	b.n	8001312 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e2:	d016      	beq.n	8001312 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <HAL_ADC_PollForConversion+0x6c>
 80012ea:	f7ff fe85 	bl	8000ff8 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d20b      	bcs.n	8001312 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f043 0204 	orr.w	r2, r3, #4
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e03d      	b.n	800138e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b02      	cmp	r3, #2
 800131e:	d1dd      	bne.n	80012dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f06f 0212 	mvn.w	r2, #18
 8001328:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d123      	bne.n	800138c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001348:	2b00      	cmp	r3, #0
 800134a:	d11f      	bne.n	800138c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001364:	2b00      	cmp	r3, #0
 8001366:	d111      	bne.n	800138c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1c>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e105      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x228>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d925      	bls.n	8001428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68d9      	ldr	r1, [r3, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3b1e      	subs	r3, #30
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4403      	add	r3, r0
 800141a:	3b1e      	subs	r3, #30
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e022      	b.n	800146e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	2207      	movs	r2, #7
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4403      	add	r3, r0
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d824      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b05      	subs	r3, #5
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b05      	subs	r3, #5
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	e04c      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d824      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b23      	subs	r3, #35	; 0x23
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
 8001510:	e023      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b41      	subs	r3, #65	; 0x41
 8001524:	221f      	movs	r2, #31
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	400a      	ands	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_ADC_ConfigChannel+0x234>)
 800155c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_ADC_ConfigChannel+0x238>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d109      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1cc>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d105      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_ADC_ConfigChannel+0x238>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d123      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b10      	cmp	r3, #16
 800158c:	d003      	beq.n	8001596 <HAL_ADC_ConfigChannel+0x1e6>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b11      	cmp	r3, #17
 8001594:	d11b      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d111      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_ADC_ConfigChannel+0x23c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_ADC_ConfigChannel+0x240>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	0c9a      	lsrs	r2, r3, #18
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c0:	e002      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f9      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40012300 	.word	0x40012300
 80015e8:	40012000 	.word	0x40012000
 80015ec:	20000014 	.word	0x20000014
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015fc:	4b79      	ldr	r3, [pc, #484]	; (80017e4 <ADC_Init+0x1f0>)
 80015fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	431a      	orrs	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	021a      	lsls	r2, r3, #8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800164c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6899      	ldr	r1, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	4a58      	ldr	r2, [pc, #352]	; (80017e8 <ADC_Init+0x1f4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d022      	beq.n	80016d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800169a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6899      	ldr	r1, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6899      	ldr	r1, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e00f      	b.n	80016f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0202 	bic.w	r2, r2, #2
 8001700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
 800170c:	005a      	lsls	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01b      	beq.n	8001758 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800173e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6859      	ldr	r1, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	3b01      	subs	r3, #1
 800174c:	035a      	lsls	r2, r3, #13
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e007      	b.n	8001768 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001766:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	3b01      	subs	r3, #1
 8001784:	051a      	lsls	r2, r3, #20
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800179c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6899      	ldr	r1, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017aa:	025a      	lsls	r2, r3, #9
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	029a      	lsls	r2, r3, #10
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40012300 	.word	0x40012300
 80017e8:	0f000001 	.word	0x0f000001

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff faec 	bl	8000ff8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e099      	b.n	8001b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4c:	e00f      	b.n	8001a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4e:	f7ff fad3 	bl	8000ff8 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d908      	bls.n	8001a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e078      	b.n	8001b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e8      	bne.n	8001a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_DMA_Init+0x158>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d117      	bne.n	8001b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fa6f 	bl	8001ff8 <DMA_CheckFifoParam>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e016      	b.n	8001b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fa26 	bl	8001f8c <DMA_CalcBaseAndBitshift>
 8001b40:	4603      	mov	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	223f      	movs	r2, #63	; 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	f010803f 	.word	0xf010803f

08001b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Start_IT+0x26>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e040      	b.n	8001c14 <HAL_DMA_Start_IT+0xa8>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d12f      	bne.n	8001c06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f9b8 	bl	8001f30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	223f      	movs	r2, #63	; 0x3f
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0216 	orr.w	r2, r2, #22
 8001bda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d007      	beq.n	8001bf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0208 	orr.w	r2, r2, #8
 8001bf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e005      	b.n	8001c12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_DMA_IRQHandler+0x258>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a92      	ldr	r2, [pc, #584]	; (8001e78 <HAL_DMA_IRQHandler+0x25c>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	2208      	movs	r2, #8
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0204 	bic.w	r2, r2, #4
 8001c6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	2208      	movs	r2, #8
 8001c76:	409a      	lsls	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d012      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	2201      	movs	r2, #1
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d012      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	f043 0204 	orr.w	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d043      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03c      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2210      	movs	r2, #16
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d018      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d024      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
 8001d4a:	e01f      	b.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
 8001d5c:	e016      	b.n	8001d8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0208 	bic.w	r2, r2, #8
 8001d7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	2220      	movs	r2, #32
 8001d92:	409a      	lsls	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 808e 	beq.w	8001eba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8086 	beq.w	8001eba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2220      	movs	r2, #32
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d136      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0216 	bic.w	r2, r2, #22
 8001dd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <HAL_DMA_IRQHandler+0x1da>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0208 	bic.w	r2, r2, #8
 8001e04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	223f      	movs	r2, #63	; 0x3f
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d07d      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	4798      	blx	r3
        }
        return;
 8001e32:	e078      	b.n	8001f26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01c      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d108      	bne.n	8001e62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d030      	beq.n	8001eba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
 8001e60:	e02b      	b.n	8001eba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d027      	beq.n	8001eba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	4798      	blx	r3
 8001e72:	e022      	b.n	8001eba <HAL_DMA_IRQHandler+0x29e>
 8001e74:	20000014 	.word	0x20000014
 8001e78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10f      	bne.n	8001eaa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0210 	bic.w	r2, r2, #16
 8001e98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d032      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d022      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d307      	bcc.n	8001f02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f2      	bne.n	8001ee6 <HAL_DMA_IRQHandler+0x2ca>
 8001f00:	e000      	b.n	8001f04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	e000      	b.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f26:	bf00      	nop
    }
  }
}
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop

08001f30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b40      	cmp	r3, #64	; 0x40
 8001f5c:	d108      	bne.n	8001f70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f6e:	e007      	b.n	8001f80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	3b10      	subs	r3, #16
 8001f9c:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <DMA_CalcBaseAndBitshift+0x68>)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d909      	bls.n	8001fce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fc2:	f023 0303 	bic.w	r3, r3, #3
 8001fc6:	1d1a      	adds	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	659a      	str	r2, [r3, #88]	; 0x58
 8001fcc:	e007      	b.n	8001fde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	aaaaaaab 	.word	0xaaaaaaab
 8001ff4:	0801144c 	.word	0x0801144c

08001ff8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11f      	bne.n	8002052 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d855      	bhi.n	80020c4 <DMA_CheckFifoParam+0xcc>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <DMA_CheckFifoParam+0x28>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002031 	.word	0x08002031
 8002024:	08002043 	.word	0x08002043
 8002028:	08002031 	.word	0x08002031
 800202c:	080020c5 	.word	0x080020c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d045      	beq.n	80020c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002040:	e042      	b.n	80020c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800204a:	d13f      	bne.n	80020cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002050:	e03c      	b.n	80020cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800205a:	d121      	bne.n	80020a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d836      	bhi.n	80020d0 <DMA_CheckFifoParam+0xd8>
 8002062:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <DMA_CheckFifoParam+0x70>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	08002079 	.word	0x08002079
 800206c:	0800207f 	.word	0x0800207f
 8002070:	08002079 	.word	0x08002079
 8002074:	08002091 	.word	0x08002091
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      break;
 800207c:	e02f      	b.n	80020de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d024      	beq.n	80020d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208e:	e021      	b.n	80020d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002098:	d11e      	bne.n	80020d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800209e:	e01b      	b.n	80020d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d902      	bls.n	80020ac <DMA_CheckFifoParam+0xb4>
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d003      	beq.n	80020b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020aa:	e018      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
      break;
 80020b0:	e015      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00e      	beq.n	80020dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
      break;
 80020c2:	e00b      	b.n	80020dc <DMA_CheckFifoParam+0xe4>
      break;
 80020c4:	bf00      	nop
 80020c6:	e00a      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020c8:	bf00      	nop
 80020ca:	e008      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020cc:	bf00      	nop
 80020ce:	e006      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020d0:	bf00      	nop
 80020d2:	e004      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020d4:	bf00      	nop
 80020d6:	e002      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;   
 80020d8:	bf00      	nop
 80020da:	e000      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020dc:	bf00      	nop
    }
  } 
  
  return status; 
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e159      	b.n	80023bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 8148 	bne.w	80023b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d00b      	beq.n	8002146 <HAL_GPIO_Init+0x5a>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d007      	beq.n	8002146 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800213a:	2b11      	cmp	r3, #17
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b12      	cmp	r3, #18
 8002144:	d130      	bne.n	80021a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0201 	and.w	r2, r3, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0xfc>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	d123      	bne.n	8002230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3208      	adds	r2, #8
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80a2 	beq.w	80023b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b56      	ldr	r3, [pc, #344]	; (80023d0 <HAL_GPIO_Init+0x2e4>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a55      	ldr	r2, [pc, #340]	; (80023d0 <HAL_GPIO_Init+0x2e4>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <HAL_GPIO_Init+0x2e4>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228e:	4a51      	ldr	r2, [pc, #324]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a48      	ldr	r2, [pc, #288]	; (80023d8 <HAL_GPIO_Init+0x2ec>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x202>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a47      	ldr	r2, [pc, #284]	; (80023dc <HAL_GPIO_Init+0x2f0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x1fe>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a46      	ldr	r2, [pc, #280]	; (80023e0 <HAL_GPIO_Init+0x2f4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x1fa>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a45      	ldr	r2, [pc, #276]	; (80023e4 <HAL_GPIO_Init+0x2f8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x1f6>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a44      	ldr	r2, [pc, #272]	; (80023e8 <HAL_GPIO_Init+0x2fc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x1f2>
 80022da:	2304      	movs	r3, #4
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022de:	2307      	movs	r3, #7
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002300:	4934      	ldr	r1, [pc, #208]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800230e:	4b37      	ldr	r3, [pc, #220]	; (80023ec <HAL_GPIO_Init+0x300>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002332:	4a2e      	ldr	r2, [pc, #184]	; (80023ec <HAL_GPIO_Init+0x300>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002338:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_GPIO_Init+0x300>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235c:	4a23      	ldr	r2, [pc, #140]	; (80023ec <HAL_GPIO_Init+0x300>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <HAL_GPIO_Init+0x300>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002386:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_GPIO_Init+0x300>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_GPIO_Init+0x300>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_GPIO_Init+0x300>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f aea2 	bls.w	8002108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	3724      	adds	r7, #36	; 0x24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40013c00 	.word	0x40013c00

080023f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	887b      	ldrh	r3, [r7, #2]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e001      	b.n	8002412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e128      	b.n	8002684 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a90      	ldr	r2, [pc, #576]	; (800268c <HAL_I2S_Init+0x26c>)
 800244a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f00b fde1 	bl	800e014 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002468:	f023 030f 	bic.w	r3, r3, #15
 800246c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2202      	movs	r2, #2
 8002474:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d060      	beq.n	8002540 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002486:	2310      	movs	r3, #16
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e001      	b.n	8002490 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800248c:	2320      	movs	r3, #32
 800248e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b20      	cmp	r3, #32
 8002496:	d802      	bhi.n	800249e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800249e:	2001      	movs	r0, #1
 80024a0:	f002 f97c 	bl	800479c <HAL_RCCEx_GetPeriphCLKFreq>
 80024a4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ae:	d125      	bne.n	80024fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	461a      	mov	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	3305      	adds	r3, #5
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	e01f      	b.n	800251a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	461a      	mov	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	3305      	adds	r3, #5
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	e00e      	b.n	800251a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fbb2 f2f3 	udiv	r2, r2, r3
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	461a      	mov	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	3305      	adds	r3, #5
 8002518:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4a5c      	ldr	r2, [pc, #368]	; (8002690 <HAL_I2S_Init+0x270>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e003      	b.n	8002548 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002540:	2302      	movs	r3, #2
 8002542:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d902      	bls.n	8002554 <HAL_I2S_Init+0x134>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2bff      	cmp	r3, #255	; 0xff
 8002552:	d907      	bls.n	8002564 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f043 0210 	orr.w	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e08f      	b.n	8002684 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	ea42 0103 	orr.w	r1, r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	430a      	orrs	r2, r1
 8002576:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002582:	f023 030f 	bic.w	r3, r3, #15
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6851      	ldr	r1, [r2, #4]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6892      	ldr	r2, [r2, #8]
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68d2      	ldr	r2, [r2, #12]
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6992      	ldr	r2, [r2, #24]
 800259a:	430a      	orrs	r2, r1
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d161      	bne.n	8002674 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a38      	ldr	r2, [pc, #224]	; (8002694 <HAL_I2S_Init+0x274>)
 80025b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a37      	ldr	r2, [pc, #220]	; (8002698 <HAL_I2S_Init+0x278>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d101      	bne.n	80025c4 <HAL_I2S_Init+0x1a4>
 80025c0:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_I2S_Init+0x27c>)
 80025c2:	e001      	b.n	80025c8 <HAL_I2S_Init+0x1a8>
 80025c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	4932      	ldr	r1, [pc, #200]	; (8002698 <HAL_I2S_Init+0x278>)
 80025d0:	428a      	cmp	r2, r1
 80025d2:	d101      	bne.n	80025d8 <HAL_I2S_Init+0x1b8>
 80025d4:	4a31      	ldr	r2, [pc, #196]	; (800269c <HAL_I2S_Init+0x27c>)
 80025d6:	e001      	b.n	80025dc <HAL_I2S_Init+0x1bc>
 80025d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80025dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025e0:	f023 030f 	bic.w	r3, r3, #15
 80025e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <HAL_I2S_Init+0x278>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_I2S_Init+0x1d4>
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_I2S_Init+0x27c>)
 80025f2:	e001      	b.n	80025f8 <HAL_I2S_Init+0x1d8>
 80025f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f8:	2202      	movs	r2, #2
 80025fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a25      	ldr	r2, [pc, #148]	; (8002698 <HAL_I2S_Init+0x278>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_I2S_Init+0x1ea>
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_I2S_Init+0x27c>)
 8002608:	e001      	b.n	800260e <HAL_I2S_Init+0x1ee>
 800260a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261a:	d003      	beq.n	8002624 <HAL_I2S_Init+0x204>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e001      	b.n	8002630 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	b299      	uxth	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002646:	4303      	orrs	r3, r0
 8002648:	b29b      	uxth	r3, r3
 800264a:	430b      	orrs	r3, r1
 800264c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800264e:	4313      	orrs	r3, r2
 8002650:	b29a      	uxth	r2, r3
 8002652:	897b      	ldrh	r3, [r7, #10]
 8002654:	4313      	orrs	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800265c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <HAL_I2S_Init+0x278>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_I2S_Init+0x24c>
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <HAL_I2S_Init+0x27c>)
 800266a:	e001      	b.n	8002670 <HAL_I2S_Init+0x250>
 800266c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002670:	897a      	ldrh	r2, [r7, #10]
 8002672:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	0800287d 	.word	0x0800287d
 8002690:	cccccccd 	.word	0xcccccccd
 8002694:	08002991 	.word	0x08002991
 8002698:	40003800 	.word	0x40003800
 800269c:	40003400 	.word	0x40003400

080026a0 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_I2S_Transmit_IT+0x1a>
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_I2S_Transmit_IT+0x1e>
  {
    return  HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e05b      	b.n	8002776 <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_I2S_Transmit_IT+0x2e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e053      	b.n	8002776 <HAL_I2S_Transmit_IT+0xd6>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d005      	beq.n	80026ee <HAL_I2S_Transmit_IT+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
 80026ec:	e043      	b.n	8002776 <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2203      	movs	r2, #3
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d002      	beq.n	800271a <HAL_I2S_Transmit_IT+0x7a>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d10a      	bne.n	8002730 <HAL_I2S_Transmit_IT+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800272e:	e005      	b.n	800273c <HAL_I2S_Transmit_IT+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	88fa      	ldrh	r2, [r7, #6]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	88fa      	ldrh	r2, [r7, #6]
 800273a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800274a:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275a:	d007      	beq.n	800276c <HAL_I2S_Transmit_IT+0xcc>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800276a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c9a      	adds	r2, r3, #2
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10e      	bne.n	8002816 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002806:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f00a ff61 	bl	800d6d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	b292      	uxth	r2, r2
 8002832:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	1c9a      	adds	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10e      	bne.n	8002874 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002864:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff93 	bl	800279a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b04      	cmp	r3, #4
 8002896:	d13a      	bne.n	800290e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d109      	bne.n	80028b6 <I2S_IRQHandler+0x3a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d102      	bne.n	80028b6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ffb4 	bl	800281e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d126      	bne.n	800290e <I2S_IRQHandler+0x92>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d11f      	bne.n	800290e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028dc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	f043 0202 	orr.w	r2, r3, #2
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff50 	bl	80027ae <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b03      	cmp	r3, #3
 8002918:	d136      	bne.n	8002988 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d109      	bne.n	8002938 <I2S_IRQHandler+0xbc>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b80      	cmp	r3, #128	; 0x80
 8002930:	d102      	bne.n	8002938 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ff45 	bl	80027c2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b08      	cmp	r3, #8
 8002940:	d122      	bne.n	8002988 <I2S_IRQHandler+0x10c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d11b      	bne.n	8002988 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800295e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f043 0204 	orr.w	r2, r3, #4
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff13 	bl	80027ae <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4aa2      	ldr	r2, [pc, #648]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80029aa:	4ba2      	ldr	r3, [pc, #648]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029ac:	e001      	b.n	80029b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80029ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a9b      	ldr	r2, [pc, #620]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d101      	bne.n	80029cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80029c8:	4b9a      	ldr	r3, [pc, #616]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029ca:	e001      	b.n	80029d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80029cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029dc:	d004      	beq.n	80029e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 8099 	bne.w	8002b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d107      	bne.n	8002a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f925 	bl	8002c4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f9c8 	bl	8002dac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b40      	cmp	r3, #64	; 0x40
 8002a24:	d13a      	bne.n	8002a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d035      	beq.n	8002a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a7e      	ldr	r2, [pc, #504]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002a3a:	4b7e      	ldr	r3, [pc, #504]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a3c:	e001      	b.n	8002a42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4979      	ldr	r1, [pc, #484]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a4a:	428b      	cmp	r3, r1
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002a4e:	4b79      	ldr	r3, [pc, #484]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a50:	e001      	b.n	8002a56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fe89 	bl	80027ae <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	f040 80be 	bne.w	8002c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80b8 	beq.w	8002c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ac2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a59      	ldr	r2, [pc, #356]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d101      	bne.n	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002ace:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ad0:	e001      	b.n	8002ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4954      	ldr	r1, [pc, #336]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ade:	428b      	cmp	r3, r1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002ae2:	4b54      	ldr	r3, [pc, #336]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ae4:	e001      	b.n	8002aea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002ae6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f043 0204 	orr.w	r2, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff fe4b 	bl	80027ae <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b18:	e084      	b.n	8002c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d107      	bne.n	8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8be 	bl	8002cb0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f8fd 	bl	8002d48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d12f      	bne.n	8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02a      	beq.n	8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2e      	ldr	r2, [pc, #184]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d101      	bne.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b7e:	e001      	b.n	8002b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4929      	ldr	r1, [pc, #164]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b8c:	428b      	cmp	r3, r1
 8002b8e:	d101      	bne.n	8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b92:	e001      	b.n	8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f043 0202 	orr.w	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fdfb 	bl	80027ae <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d131      	bne.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02c      	beq.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bd8:	e001      	b.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4912      	ldr	r1, [pc, #72]	; (8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002be6:	428b      	cmp	r3, r1
 8002be8:	d101      	bne.n	8002bee <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bec:	e001      	b.n	8002bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bf6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c06:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	f043 0204 	orr.w	r2, r3, #4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fdc6 	bl	80027ae <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c22:	e000      	b.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c24:	bf00      	nop
}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40003800 	.word	0x40003800
 8002c34:	40003400 	.word	0x40003400

08002c38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	1c99      	adds	r1, r3, #2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6251      	str	r1, [r2, #36]	; 0x24
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d113      	bne.n	8002ca6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ffc9 	bl	8002c38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c99      	adds	r1, r3, #2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6251      	str	r1, [r2, #36]	; 0x24
 8002cc2:	8819      	ldrh	r1, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <I2SEx_TxISR_I2SExt+0x90>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <I2SEx_TxISR_I2SExt+0x22>
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <I2SEx_TxISR_I2SExt+0x94>)
 8002cd0:	e001      	b.n	8002cd6 <I2SEx_TxISR_I2SExt+0x26>
 8002cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d121      	bne.n	8002d36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <I2SEx_TxISR_I2SExt+0x90>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d101      	bne.n	8002d00 <I2SEx_TxISR_I2SExt+0x50>
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <I2SEx_TxISR_I2SExt+0x94>)
 8002cfe:	e001      	b.n	8002d04 <I2SEx_TxISR_I2SExt+0x54>
 8002d00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	490d      	ldr	r1, [pc, #52]	; (8002d40 <I2SEx_TxISR_I2SExt+0x90>)
 8002d0c:	428b      	cmp	r3, r1
 8002d0e:	d101      	bne.n	8002d14 <I2SEx_TxISR_I2SExt+0x64>
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <I2SEx_TxISR_I2SExt+0x94>)
 8002d12:	e001      	b.n	8002d18 <I2SEx_TxISR_I2SExt+0x68>
 8002d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff81 	bl	8002c38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40003800 	.word	0x40003800
 8002d44:	40003400 	.word	0x40003400

08002d48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68d8      	ldr	r0, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	1c99      	adds	r1, r3, #2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d60:	b282      	uxth	r2, r0
 8002d62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d113      	bne.n	8002da4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff4a 	bl	8002c38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <I2SEx_RxISR_I2SExt+0x90>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <I2SEx_RxISR_I2SExt+0x16>
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <I2SEx_RxISR_I2SExt+0x94>)
 8002dc0:	e001      	b.n	8002dc6 <I2SEx_RxISR_I2SExt+0x1a>
 8002dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc6:	68d8      	ldr	r0, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	1c99      	adds	r1, r3, #2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002dd2:	b282      	uxth	r2, r0
 8002dd4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d121      	bne.n	8002e32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <I2SEx_RxISR_I2SExt+0x90>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <I2SEx_RxISR_I2SExt+0x50>
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <I2SEx_RxISR_I2SExt+0x94>)
 8002dfa:	e001      	b.n	8002e00 <I2SEx_RxISR_I2SExt+0x54>
 8002dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	490d      	ldr	r1, [pc, #52]	; (8002e3c <I2SEx_RxISR_I2SExt+0x90>)
 8002e08:	428b      	cmp	r3, r1
 8002e0a:	d101      	bne.n	8002e10 <I2SEx_RxISR_I2SExt+0x64>
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <I2SEx_RxISR_I2SExt+0x94>)
 8002e0e:	e001      	b.n	8002e14 <I2SEx_RxISR_I2SExt+0x68>
 8002e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff03 	bl	8002c38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40003800 	.word	0x40003800
 8002e40:	40003400 	.word	0x40003400

08002e44 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b08d      	sub	sp, #52	; 0x34
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f005 f8cc 	bl	8007ff8 <USB_GetMode>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 839d 	bne.w	80035a2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f005 f830 	bl	8007ed2 <USB_ReadInterrupts>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8393 	beq.w	80035a0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f005 f827 	bl	8007ed2 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d107      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f002 0202 	and.w	r2, r2, #2
 8002e9c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f005 f815 	bl	8007ed2 <USB_ReadInterrupts>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d161      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0210 	bic.w	r2, r2, #16
 8002ec0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 020f 	and.w	r2, r3, #15
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	0c5b      	lsrs	r3, r3, #17
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d124      	bne.n	8002f38 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d035      	beq.n	8002f66 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6a38      	ldr	r0, [r7, #32]
 8002f0e:	f004 febd 	bl	8007c8c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1e:	441a      	add	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f30:	441a      	add	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	619a      	str	r2, [r3, #24]
 8002f36:	e016      	b.n	8002f66 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	0c5b      	lsrs	r3, r3, #17
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d110      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6a38      	ldr	r0, [r7, #32]
 8002f50:	f004 fe9c 	bl	8007c8c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f60:	441a      	add	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0210 	orr.w	r2, r2, #16
 8002f74:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 ffa9 	bl	8007ed2 <USB_ReadInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f8a:	d16e      	bne.n	800306a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f004 ffaf 	bl	8007ef8 <USB_ReadDevAllOutEpInterrupt>
 8002f9a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f9c:	e062      	b.n	8003064 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d057      	beq.n	8003058 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 ffd4 	bl	8007f60 <USB_ReadDevOutEPInterrupt>
 8002fb8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00c      	beq.n	8002fde <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fd4f 	bl	8003a7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00c      	beq.n	8003002 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fe49 	bl	8003c94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003018:	461a      	mov	r2, r3
 800301a:	2310      	movs	r3, #16
 800301c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003034:	461a      	mov	r2, r3
 8003036:	2320      	movs	r3, #32
 8003038:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003050:	461a      	mov	r2, r3
 8003052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003056:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	3301      	adds	r3, #1
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d199      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f004 ff2f 	bl	8007ed2 <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800307a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800307e:	f040 80c0 	bne.w	8003202 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f004 ff50 	bl	8007f2c <USB_ReadDevAllInEpInterrupt>
 800308c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003092:	e0b2      	b.n	80031fa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80a7 	beq.w	80031ee <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f004 ff76 	bl	8007f9c <USB_ReadDevInEPInterrupt>
 80030b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d057      	beq.n	800316c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	2201      	movs	r2, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69f9      	ldr	r1, [r7, #28]
 80030d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030dc:	4013      	ands	r3, r2
 80030de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ec:	461a      	mov	r2, r3
 80030ee:	2301      	movs	r3, #1
 80030f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d132      	bne.n	8003160 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3348      	adds	r3, #72	; 0x48
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4403      	add	r3, r0
 800311a:	3344      	adds	r3, #68	; 0x44
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4419      	add	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4403      	add	r3, r0
 800312e:	3348      	adds	r3, #72	; 0x48
 8003130:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	2b00      	cmp	r3, #0
 8003136:	d113      	bne.n	8003160 <HAL_PCD_IRQHandler+0x31c>
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3350      	adds	r3, #80	; 0x50
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003158:	461a      	mov	r2, r3
 800315a:	2101      	movs	r1, #1
 800315c:	f004 ff7e 	bl	800805c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	b2db      	uxtb	r3, r3
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f00b fa7f 	bl	800e66a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003182:	461a      	mov	r2, r3
 8003184:	2308      	movs	r3, #8
 8003186:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319e:	461a      	mov	r2, r3
 80031a0:	2310      	movs	r3, #16
 80031a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	461a      	mov	r2, r3
 80031bc:	2340      	movs	r3, #64	; 0x40
 80031be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d6:	461a      	mov	r2, r3
 80031d8:	2302      	movs	r3, #2
 80031da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fbb9 	bl	8003960 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	3301      	adds	r3, #1
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f47f af49 	bne.w	8003094 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f004 fe63 	bl	8007ed2 <USB_ReadInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003216:	d122      	bne.n	800325e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003232:	2b01      	cmp	r3, #1
 8003234:	d108      	bne.n	8003248 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800323e:	2100      	movs	r1, #0
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fd6d 	bl	8003d20 <HAL_PCDEx_LPM_Callback>
 8003246:	e002      	b.n	800324e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f00b fa85 	bl	800e758 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800325c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f004 fe35 	bl	8007ed2 <USB_ReadInterrupts>
 8003268:	4603      	mov	r3, r0
 800326a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003272:	d112      	bne.n	800329a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f00b fa41 	bl	800e70c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003298:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f004 fe17 	bl	8007ed2 <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ae:	f040 80c7 	bne.w	8003440 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2110      	movs	r1, #16
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 f83f 	bl	8007350 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d6:	e056      	b.n	8003386 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e4:	461a      	mov	r2, r3
 80032e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fc:	0151      	lsls	r1, r2, #5
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	440a      	add	r2, r1
 8003302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003306:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800330a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331c:	0151      	lsls	r1, r2, #5
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	440a      	add	r2, r1
 8003322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003326:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800332a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800333e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003350:	0151      	lsls	r1, r2, #5
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	440a      	add	r2, r1
 8003356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800335a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800335e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003370:	0151      	lsls	r1, r2, #5
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	440a      	add	r2, r1
 8003376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800337a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800337e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	3301      	adds	r3, #1
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338c:	429a      	cmp	r2, r3
 800338e:	d3a3      	bcc.n	80032d8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d016      	beq.n	80033da <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033bc:	f043 030b 	orr.w	r3, r3, #11
 80033c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d2:	f043 030b 	orr.w	r3, r3, #11
 80033d6:	6453      	str	r3, [r2, #68]	; 0x44
 80033d8:	e015      	b.n	8003406 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003400:	f043 030b 	orr.w	r3, r3, #11
 8003404:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003414:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003418:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800342a:	461a      	mov	r2, r3
 800342c:	f004 fe16 	bl	800805c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800343e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f004 fd44 	bl	8007ed2 <USB_ReadInterrupts>
 800344a:	4603      	mov	r3, r0
 800344c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003454:	d124      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f004 fdda 	bl	8008014 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f003 ff99 	bl	800739c <USB_GetDevSpeed>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681c      	ldr	r4, [r3, #0]
 8003476:	f001 f897 	bl	80045a8 <HAL_RCC_GetHCLKFreq>
 800347a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	4620      	mov	r0, r4
 8003486:	f003 fec1 	bl	800720c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f00b f915 	bl	800e6ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800349e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f004 fd14 	bl	8007ed2 <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d10a      	bne.n	80034ca <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f00b f8f2 	bl	800e69e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f002 0208 	and.w	r2, r2, #8
 80034c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 fcff 	bl	8007ed2 <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034de:	d10f      	bne.n	8003500 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f00b f954 	bl	800e798 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f004 fce4 	bl	8007ed2 <USB_ReadInterrupts>
 800350a:	4603      	mov	r3, r0
 800350c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003514:	d10f      	bne.n	8003536 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	b2db      	uxtb	r3, r3
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f00b f927 	bl	800e774 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f004 fcc9 	bl	8007ed2 <USB_ReadInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d10a      	bne.n	8003562 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f00b f935 	bl	800e7bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f004 fcb3 	bl	8007ed2 <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b04      	cmp	r3, #4
 8003574:	d115      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f00b f925 	bl	800e7d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	e000      	b.n	80035a2 <HAL_PCD_IRQHandler+0x75e>
      return;
 80035a0:	bf00      	nop
    }
  }
}
 80035a2:	3734      	adds	r7, #52	; 0x34
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd90      	pop	{r4, r7, pc}

080035a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_PCD_SetAddress+0x1a>
 80035be:	2302      	movs	r3, #2
 80035c0:	e013      	b.n	80035ea <HAL_PCD_SetAddress+0x42>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f004 fc53 	bl	8007e86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	4608      	mov	r0, r1
 80035fc:	4611      	mov	r1, r2
 80035fe:	461a      	mov	r2, r3
 8003600:	4603      	mov	r3, r0
 8003602:	70fb      	strb	r3, [r7, #3]
 8003604:	460b      	mov	r3, r1
 8003606:	803b      	strh	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003614:	2b00      	cmp	r3, #0
 8003616:	da0f      	bge.n	8003638 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 020f 	and.w	r2, r3, #15
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	3338      	adds	r3, #56	; 0x38
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	3304      	adds	r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	705a      	strb	r2, [r3, #1]
 8003636:	e00f      	b.n	8003658 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	f003 020f 	and.w	r2, r3, #15
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	3304      	adds	r3, #4
 8003650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003664:	883a      	ldrh	r2, [r7, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	78ba      	ldrb	r2, [r7, #2]
 800366e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003682:	78bb      	ldrb	r3, [r7, #2]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d102      	bne.n	800368e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_PCD_EP_Open+0xaa>
 8003698:	2302      	movs	r3, #2
 800369a:	e00e      	b.n	80036ba <HAL_PCD_EP_Open+0xc8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68f9      	ldr	r1, [r7, #12]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 fe9b 	bl	80073e6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80036b8:	7afb      	ldrb	r3, [r7, #11]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	460b      	mov	r3, r1
 80036d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d2:	7afb      	ldrb	r3, [r7, #11]
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2200      	movs	r2, #0
 80036fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003704:	7afb      	ldrb	r3, [r7, #11]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	b2da      	uxtb	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d102      	bne.n	800371e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	6979      	ldr	r1, [r7, #20]
 8003736:	f004 f921 	bl	800797c <USB_EP0StartXfer>
 800373a:	e008      	b.n	800374e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	6979      	ldr	r1, [r7, #20]
 800374a:	f003 fed3 	bl	80074f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	460b      	mov	r3, r1
 8003766:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003768:	7afb      	ldrb	r3, [r7, #11]
 800376a:	f003 020f 	and.w	r2, r3, #15
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	3338      	adds	r3, #56	; 0x38
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	3304      	adds	r3, #4
 800377e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2201      	movs	r2, #1
 8003796:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003798:	7afb      	ldrb	r3, [r7, #11]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d102      	bne.n	80037b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037b2:	7afb      	ldrb	r3, [r7, #11]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6979      	ldr	r1, [r7, #20]
 80037ca:	f004 f8d7 	bl	800797c <USB_EP0StartXfer>
 80037ce:	e008      	b.n	80037e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	6979      	ldr	r1, [r7, #20]
 80037de:	f003 fe89 	bl	80074f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	f003 020f 	and.w	r2, r3, #15
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	d901      	bls.n	800380a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e050      	b.n	80038ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800380a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800380e:	2b00      	cmp	r3, #0
 8003810:	da0f      	bge.n	8003832 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 020f 	and.w	r2, r3, #15
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	3338      	adds	r3, #56	; 0x38
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	705a      	strb	r2, [r3, #1]
 8003830:	e00d      	b.n	800384e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	3304      	adds	r3, #4
 8003846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_PCD_EP_SetStall+0x82>
 800386a:	2302      	movs	r3, #2
 800386c:	e01e      	b.n	80038ac <HAL_PCD_EP_SetStall+0xc0>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68f9      	ldr	r1, [r7, #12]
 800387c:	4618      	mov	r0, r3
 800387e:	f004 fa2e 	bl	8007cde <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	b2d9      	uxtb	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800389c:	461a      	mov	r2, r3
 800389e:	f004 fbdd 	bl	800805c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d901      	bls.n	80038d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e042      	b.n	8003958 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	da0f      	bge.n	80038fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	3338      	adds	r3, #56	; 0x38
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	3304      	adds	r3, #4
 80038f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	705a      	strb	r2, [r3, #1]
 80038f8:	e00f      	b.n	800391a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	f003 020f 	and.w	r2, r3, #15
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	3304      	adds	r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_PCD_EP_ClrStall+0x86>
 8003936:	2302      	movs	r3, #2
 8003938:	e00e      	b.n	8003958 <HAL_PCD_EP_ClrStall+0xa4>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68f9      	ldr	r1, [r7, #12]
 8003948:	4618      	mov	r0, r3
 800394a:	f004 fa36 	bl	8007dba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	3338      	adds	r3, #56	; 0x38
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	3304      	adds	r3, #4
 8003986:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	d901      	bls.n	8003998 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e06c      	b.n	8003a72 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d902      	bls.n	80039b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	3303      	adds	r3, #3
 80039b8:	089b      	lsrs	r3, r3, #2
 80039ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039bc:	e02b      	b.n	8003a16 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d902      	bls.n	80039da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3303      	adds	r3, #3
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68d9      	ldr	r1, [r3, #12]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4603      	mov	r3, r0
 80039f8:	6978      	ldr	r0, [r7, #20]
 80039fa:	f004 f912 	bl	8007c22 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	441a      	add	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	441a      	add	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d809      	bhi.n	8003a40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d203      	bcs.n	8003a40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1be      	bne.n	80039be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d811      	bhi.n	8003a70 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	2201      	movs	r2, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	6939      	ldr	r1, [r7, #16]
 8003a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	333c      	adds	r3, #60	; 0x3c
 8003a94:	3304      	adds	r3, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	f040 80a0 	bne.w	8003bf4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d015      	beq.n	8003aea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a72      	ldr	r2, [pc, #456]	; (8003c8c <PCD_EP_OutXfrComplete_int+0x210>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f240 80dd 	bls.w	8003c82 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80d7 	beq.w	8003c82 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	6093      	str	r3, [r2, #8]
 8003ae8:	e0cb      	b.n	8003c82 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b00:	461a      	mov	r2, r3
 8003b02:	2320      	movs	r3, #32
 8003b04:	6093      	str	r3, [r2, #8]
 8003b06:	e0bc      	b.n	8003c82 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 80b7 	bne.w	8003c82 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a5d      	ldr	r2, [pc, #372]	; (8003c8c <PCD_EP_OutXfrComplete_int+0x210>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d90f      	bls.n	8003b3c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	461a      	mov	r2, r3
 8003b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b38:	6093      	str	r3, [r2, #8]
 8003b3a:	e0a2      	b.n	8003c82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b4e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	0159      	lsls	r1, r3, #5
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	440b      	add	r3, r1
 8003b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003b62:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4403      	add	r3, r0
 8003b72:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b76:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4403      	add	r3, r0
 8003b9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4419      	add	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4403      	add	r3, r0
 8003bb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bb4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d114      	bne.n	8003be6 <PCD_EP_OutXfrComplete_int+0x16a>
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d108      	bne.n	8003be6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bde:	461a      	mov	r2, r3
 8003be0:	2101      	movs	r1, #1
 8003be2:	f004 fa3b 	bl	800805c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f00a fd21 	bl	800e634 <HAL_PCD_DataOutStageCallback>
 8003bf2:	e046      	b.n	8003c82 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <PCD_EP_OutXfrComplete_int+0x214>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d124      	bne.n	8003c46 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	461a      	mov	r2, r3
 8003c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c18:	6093      	str	r3, [r2, #8]
 8003c1a:	e032      	b.n	8003c82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c32:	461a      	mov	r2, r3
 8003c34:	2320      	movs	r3, #32
 8003c36:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f00a fcf8 	bl	800e634 <HAL_PCD_DataOutStageCallback>
 8003c44:	e01d      	b.n	8003c82 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d114      	bne.n	8003c76 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2100      	movs	r1, #0
 8003c72:	f004 f9f3 	bl	800805c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f00a fcd9 	bl	800e634 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	4f54300a 	.word	0x4f54300a
 8003c90:	4f54310a 	.word	0x4f54310a

08003c94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	333c      	adds	r3, #60	; 0x3c
 8003cac:	3304      	adds	r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d90e      	bls.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f00a fc91 	bl	800e610 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d90c      	bls.n	8003d10 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d108      	bne.n	8003d10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f004 f9a6 	bl	800805c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	4f54300a 	.word	0x4f54300a

08003d20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e25b      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d075      	beq.n	8003e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d56:	4ba3      	ldr	r3, [pc, #652]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d00c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4ba0      	ldr	r3, [pc, #640]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d112      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4b9d      	ldr	r3, [pc, #628]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7a:	d10b      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	4b99      	ldr	r3, [pc, #612]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05b      	beq.n	8003e40 <HAL_RCC_OscConfig+0x108>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d157      	bne.n	8003e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e236      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x74>
 8003d9e:	4b91      	ldr	r3, [pc, #580]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a90      	ldr	r2, [pc, #576]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e01d      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x98>
 8003db6:	4b8b      	ldr	r3, [pc, #556]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a8a      	ldr	r2, [pc, #552]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a87      	ldr	r2, [pc, #540]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dd0:	4b84      	ldr	r3, [pc, #528]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a83      	ldr	r2, [pc, #524]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a80      	ldr	r2, [pc, #512]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d013      	beq.n	8003e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fd f902 	bl	8000ff8 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fd f8fe 	bl	8000ff8 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e1fb      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0xc0>
 8003e16:	e014      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fd f8ee 	bl	8000ff8 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fd f8ea 	bl	8000ff8 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e1e7      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	4b6c      	ldr	r3, [pc, #432]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0xe8>
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d063      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e4e:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b62      	ldr	r3, [pc, #392]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d11c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d116      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e1bb      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4952      	ldr	r1, [pc, #328]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	e03a      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b4f      	ldr	r3, [pc, #316]	; (8003fe8 <HAL_RCC_OscConfig+0x2b0>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fd f8a3 	bl	8000ff8 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fd f89f 	bl	8000ff8 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e19c      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec8:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4940      	ldr	r1, [pc, #256]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eea:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_OscConfig+0x2b0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd f882 	bl	8000ff8 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fd f87e 	bl	8000ff8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e17b      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d030      	beq.n	8003f84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2a:	4b30      	ldr	r3, [pc, #192]	; (8003fec <HAL_RCC_OscConfig+0x2b4>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fd f862 	bl	8000ff8 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fd f85e 	bl	8000ff8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e15b      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4a:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x200>
 8003f56:	e015      	b.n	8003f84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_RCC_OscConfig+0x2b4>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5e:	f7fd f84b 	bl	8000ff8 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fd f847 	bl	8000ff8 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e144      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f78:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a0 	beq.w	80040d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_OscConfig+0x2b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d121      	bne.n	8004012 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <HAL_RCC_OscConfig+0x2b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <HAL_RCC_OscConfig+0x2b8>)
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fda:	f7fd f80d 	bl	8000ff8 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	e011      	b.n	8004006 <HAL_RCC_OscConfig+0x2ce>
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	42470000 	.word	0x42470000
 8003fec:	42470e80 	.word	0x42470e80
 8003ff0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff4:	f7fd f800 	bl	8000ff8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0fd      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004006:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_OscConfig+0x4d4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d106      	bne.n	8004028 <HAL_RCC_OscConfig+0x2f0>
 800401a:	4b7d      	ldr	r3, [pc, #500]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a7c      	ldr	r2, [pc, #496]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	e01c      	b.n	8004062 <HAL_RCC_OscConfig+0x32a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b05      	cmp	r3, #5
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x312>
 8004030:	4b77      	ldr	r3, [pc, #476]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a76      	ldr	r2, [pc, #472]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	4b74      	ldr	r3, [pc, #464]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4a73      	ldr	r2, [pc, #460]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	; 0x70
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0x32a>
 800404a:	4b71      	ldr	r3, [pc, #452]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a70      	ldr	r2, [pc, #448]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
 8004056:	4b6e      	ldr	r3, [pc, #440]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a6d      	ldr	r2, [pc, #436]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d015      	beq.n	8004096 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fc ffc5 	bl	8000ff8 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fc ffc1 	bl	8000ff8 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0bc      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	4b61      	ldr	r3, [pc, #388]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ee      	beq.n	8004072 <HAL_RCC_OscConfig+0x33a>
 8004094:	e014      	b.n	80040c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004096:	f7fc ffaf 	bl	8000ff8 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fc ffab 	bl	8000ff8 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0a6      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	4b56      	ldr	r3, [pc, #344]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b52      	ldr	r3, [pc, #328]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a51      	ldr	r2, [pc, #324]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8092 	beq.w	8004200 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040dc:	4b4c      	ldr	r3, [pc, #304]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d05c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d141      	bne.n	8004174 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b48      	ldr	r3, [pc, #288]	; (8004214 <HAL_RCC_OscConfig+0x4dc>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fc ff7f 	bl	8000ff8 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fc ff7b 	bl	8000ff8 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e078      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004110:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	019b      	lsls	r3, r3, #6
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	3b01      	subs	r3, #1
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	061b      	lsls	r3, r3, #24
 8004140:	4933      	ldr	r1, [pc, #204]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004146:	4b33      	ldr	r3, [pc, #204]	; (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004148:	2201      	movs	r2, #1
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7fc ff54 	bl	8000ff8 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004154:	f7fc ff50 	bl	8000ff8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e04d      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x41c>
 8004172:	e045      	b.n	8004200 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004174:	4b27      	ldr	r3, [pc, #156]	; (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fc ff3d 	bl	8000ff8 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004182:	f7fc ff39 	bl	8000ff8 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e036      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f0      	bne.n	8004182 <HAL_RCC_OscConfig+0x44a>
 80041a0:	e02e      	b.n	8004200 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e029      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ae:	4b18      	ldr	r3, [pc, #96]	; (8004210 <HAL_RCC_OscConfig+0x4d8>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d11c      	bne.n	80041fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d115      	bne.n	80041fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041d6:	4013      	ands	r3, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10d      	bne.n	80041fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40007000 	.word	0x40007000
 8004210:	40023800 	.word	0x40023800
 8004214:	42470060 	.word	0x42470060

08004218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0cc      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800422c:	4b68      	ldr	r3, [pc, #416]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d90c      	bls.n	8004254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b63      	ldr	r3, [pc, #396]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0b8      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800426c:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800428e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	494d      	ldr	r1, [pc, #308]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d044      	beq.n	8004338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d119      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e06f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e067      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4934      	ldr	r1, [pc, #208]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004308:	f7fc fe76 	bl	8000ff8 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fc fe72 	bl	8000ff8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e04f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d20c      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e032      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4916      	ldr	r1, [pc, #88]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	490e      	ldr	r1, [pc, #56]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800439e:	f000 f821 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4601      	mov	r1, r0
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 80043b0:	5cd3      	ldrb	r3, [r2, r3]
 80043b2:	fa21 f303 	lsr.w	r3, r1, r3
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc fdd6 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023c00 	.word	0x40023c00
 80043d4:	40023800 	.word	0x40023800
 80043d8:	080118a8 	.word	0x080118a8
 80043dc:	20000014 	.word	0x20000014
 80043e0:	20000000 	.word	0x20000000

080043e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	2300      	movs	r3, #0
 80043f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043fc:	4b67      	ldr	r3, [pc, #412]	; (800459c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b04      	cmp	r3, #4
 8004406:	d007      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x34>
 8004408:	2b08      	cmp	r3, #8
 800440a:	d008      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0x3a>
 800440c:	2b00      	cmp	r3, #0
 800440e:	f040 80bb 	bne.w	8004588 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004412:	4b63      	ldr	r3, [pc, #396]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004414:	60bb      	str	r3, [r7, #8]
       break;
 8004416:	e0ba      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004418:	4b62      	ldr	r3, [pc, #392]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800441a:	60bb      	str	r3, [r7, #8]
      break;
 800441c:	e0b7      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800441e:	4b5f      	ldr	r3, [pc, #380]	; (800459c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004426:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004428:	4b5c      	ldr	r3, [pc, #368]	; (800459c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d051      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004434:	4b59      	ldr	r3, [pc, #356]	; (800459c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	099b      	lsrs	r3, r3, #6
 800443a:	f04f 0400 	mov.w	r4, #0
 800443e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	ea03 0501 	and.w	r5, r3, r1
 800444a:	ea04 0602 	and.w	r6, r4, r2
 800444e:	46ab      	mov	fp, r5
 8004450:	46b4      	mov	ip, r6
 8004452:	eb1b 030b 	adds.w	r3, fp, fp
 8004456:	eb4c 040c 	adc.w	r4, ip, ip
 800445a:	469b      	mov	fp, r3
 800445c:	46a4      	mov	ip, r4
 800445e:	eb1b 0b05 	adds.w	fp, fp, r5
 8004462:	eb4c 0c06 	adc.w	ip, ip, r6
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8004472:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 8004476:	ea4f 110b 	mov.w	r1, fp, lsl #4
 800447a:	468b      	mov	fp, r1
 800447c:	4694      	mov	ip, r2
 800447e:	ebbb 0b05 	subs.w	fp, fp, r5
 8004482:	eb6c 0c06 	sbc.w	ip, ip, r6
 8004486:	f04f 0100 	mov.w	r1, #0
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8004492:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8004496:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 800449a:	468b      	mov	fp, r1
 800449c:	4694      	mov	ip, r2
 800449e:	ebbb 0b05 	subs.w	fp, fp, r5
 80044a2:	eb6c 0c06 	sbc.w	ip, ip, r6
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	ea4f 32cc 	mov.w	r2, ip, lsl #15
 80044b2:	ea42 425b 	orr.w	r2, r2, fp, lsr #17
 80044b6:	ea4f 31cb 	mov.w	r1, fp, lsl #15
 80044ba:	468b      	mov	fp, r1
 80044bc:	4694      	mov	ip, r2
 80044be:	4658      	mov	r0, fp
 80044c0:	4661      	mov	r1, ip
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f04f 0400 	mov.w	r4, #0
 80044c8:	461a      	mov	r2, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	f7fc fbae 	bl	8000c2c <__aeabi_uldivmod>
 80044d0:	4603      	mov	r3, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e049      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d8:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	099b      	lsrs	r3, r3, #6
 80044de:	f04f 0400 	mov.w	r4, #0
 80044e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	ea03 0501 	and.w	r5, r3, r1
 80044ee:	ea04 0602 	and.w	r6, r4, r2
 80044f2:	4629      	mov	r1, r5
 80044f4:	4632      	mov	r2, r6
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	f04f 0400 	mov.w	r4, #0
 80044fe:	0154      	lsls	r4, r2, #5
 8004500:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004504:	014b      	lsls	r3, r1, #5
 8004506:	4619      	mov	r1, r3
 8004508:	4622      	mov	r2, r4
 800450a:	1b49      	subs	r1, r1, r5
 800450c:	eb62 0206 	sbc.w	r2, r2, r6
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	f04f 0400 	mov.w	r4, #0
 8004518:	0194      	lsls	r4, r2, #6
 800451a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800451e:	018b      	lsls	r3, r1, #6
 8004520:	1a5b      	subs	r3, r3, r1
 8004522:	eb64 0402 	sbc.w	r4, r4, r2
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	00e2      	lsls	r2, r4, #3
 8004530:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004534:	00d9      	lsls	r1, r3, #3
 8004536:	460b      	mov	r3, r1
 8004538:	4614      	mov	r4, r2
 800453a:	195b      	adds	r3, r3, r5
 800453c:	eb44 0406 	adc.w	r4, r4, r6
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	02a2      	lsls	r2, r4, #10
 800454a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800454e:	0299      	lsls	r1, r3, #10
 8004550:	460b      	mov	r3, r1
 8004552:	4614      	mov	r4, r2
 8004554:	4618      	mov	r0, r3
 8004556:	4621      	mov	r1, r4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f04f 0400 	mov.w	r4, #0
 800455e:	461a      	mov	r2, r3
 8004560:	4623      	mov	r3, r4
 8004562:	f7fc fb63 	bl	8000c2c <__aeabi_uldivmod>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	3301      	adds	r3, #1
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	60bb      	str	r3, [r7, #8]
      break;
 8004586:	e002      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800458a:	60bb      	str	r3, [r7, #8]
      break;
 800458c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800458e:	68bb      	ldr	r3, [r7, #8]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800
 80045a0:	00f42400 	.word	0x00f42400
 80045a4:	00bb8000 	.word	0x00bb8000

080045a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ae:	681b      	ldr	r3, [r3, #0]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20000014 	.word	0x20000014

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d035      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045e8:	4b67      	ldr	r3, [pc, #412]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ee:	f7fc fd03 	bl	8000ff8 <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045f6:	f7fc fcff 	bl	8000ff8 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e0ba      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004608:	4b60      	ldr	r3, [pc, #384]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	019a      	lsls	r2, r3, #6
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	071b      	lsls	r3, r3, #28
 8004620:	495a      	ldr	r1, [pc, #360]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004628:	4b57      	ldr	r3, [pc, #348]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800462e:	f7fc fce3 	bl	8000ff8 <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004636:	f7fc fcdf 	bl	8000ff8 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e09a      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004648:	4b50      	ldr	r3, [pc, #320]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8083 	beq.w	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	4b49      	ldr	r3, [pc, #292]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	4a48      	ldr	r2, [pc, #288]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	6413      	str	r3, [r2, #64]	; 0x40
 8004672:	4b46      	ldr	r3, [pc, #280]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800467e:	4b44      	ldr	r3, [pc, #272]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a43      	ldr	r2, [pc, #268]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004688:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800468a:	f7fc fcb5 	bl	8000ff8 <HAL_GetTick>
 800468e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004692:	f7fc fcb1 	bl	8000ff8 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e06c      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046a4:	4b3a      	ldr	r3, [pc, #232]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b0:	4b36      	ldr	r3, [pc, #216]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d02f      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d028      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ce:	4b2f      	ldr	r3, [pc, #188]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046d8:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046de:	4b2d      	ldr	r3, [pc, #180]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046e4:	4a29      	ldr	r2, [pc, #164]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046ea:	4b28      	ldr	r3, [pc, #160]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d114      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046f6:	f7fc fc7f 	bl	8000ff8 <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fc fc7b 	bl	8000ff8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e034      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ee      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800472c:	d10d      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800472e:	4b17      	ldr	r3, [pc, #92]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800473e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004742:	4912      	ldr	r1, [pc, #72]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	608b      	str	r3, [r1, #8]
 8004748:	e005      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	4a0f      	ldr	r2, [pc, #60]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004750:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004754:	6093      	str	r3, [r2, #8]
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004762:	490a      	ldr	r1, [pc, #40]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7c1a      	ldrb	r2, [r3, #16]
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800477a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	42470068 	.word	0x42470068
 800478c:	40023800 	.word	0x40023800
 8004790:	40007000 	.word	0x40007000
 8004794:	42470e40 	.word	0x42470e40
 8004798:	424711e0 	.word	0x424711e0

0800479c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d13d      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047ba:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d12f      	bne.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047ce:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d0:	617b      	str	r3, [r7, #20]
          break;
 80047d2:	e02f      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e0:	d108      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047e2:	4b18      	ldr	r3, [pc, #96]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ea:	4a17      	ldr	r2, [pc, #92]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	e007      	b.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800481a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481e:	0f1b      	lsrs	r3, r3, #28
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	617b      	str	r3, [r7, #20]
          break;
 800482c:	e002      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
          break;
 8004832:	bf00      	nop
        }
      }
      break;
 8004834:	bf00      	nop
    }
  }
  return frequency;
 8004836:	697b      	ldr	r3, [r7, #20]
}
 8004838:	4618      	mov	r0, r3
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40023800 	.word	0x40023800
 8004848:	00bb8000 	.word	0x00bb8000
 800484c:	00f42400 	.word	0x00f42400

08004850 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e022      	b.n	80048a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f009 fc8d 	bl	800e194 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2203      	movs	r2, #3
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f814 	bl	80048b0 <HAL_SD_InitCard>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e00a      	b.n	80048a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80048b0:	b5b0      	push	{r4, r5, r7, lr}
 80048b2:	b08e      	sub	sp, #56	; 0x38
 80048b4:	af04      	add	r7, sp, #16
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80048cc:	2376      	movs	r3, #118	; 0x76
 80048ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681d      	ldr	r5, [r3, #0]
 80048d4:	466c      	mov	r4, sp
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80048e2:	f107 0308 	add.w	r3, r7, #8
 80048e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048e8:	4628      	mov	r0, r5
 80048ea:	f001 ff6d 	bl	80067c8 <SDIO_Init>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80048f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e031      	b.n	8004964 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004900:	4b1a      	ldr	r3, [pc, #104]	; (800496c <HAL_SD_InitCard+0xbc>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f001 ffa5 	bl	800685a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004910:	4b16      	ldr	r3, [pc, #88]	; (800496c <HAL_SD_InitCard+0xbc>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fe84 	bl	8005624 <SD_PowerON>
 800491c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e013      	b.n	8004964 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fda3 	bl	8005488 <SD_InitCard>
 8004942:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3728      	adds	r7, #40	; 0x28
 8004968:	46bd      	mov	sp, r7
 800496a:	bdb0      	pop	{r4, r5, r7, pc}
 800496c:	422580a0 	.word	0x422580a0

08004970 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b092      	sub	sp, #72	; 0x48
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800497e:	f7fc fb3b 	bl	8000ff8 <HAL_GetTick>
 8004982:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e1d9      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	f040 81cc 	bne.w	8004d48 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80049b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	441a      	add	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d907      	bls.n	80049d4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e1c0      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2203      	movs	r2, #3
 80049d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2200      	movs	r2, #0
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d002      	beq.n	80049f2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	025b      	lsls	r3, r3, #9
 80049f0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 ffc0 	bl	8006980 <SDMMC_CmdBlockLength>
 8004a00:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00f      	beq.n	8004a28 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a9b      	ldr	r2, [pc, #620]	; (8004c7c <HAL_SD_ReadBlocks+0x30c>)
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a16:	431a      	orrs	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e196      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	025b      	lsls	r3, r3, #9
 8004a32:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004a34:	2390      	movs	r3, #144	; 0x90
 8004a36:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004a40:	2301      	movs	r3, #1
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f107 0214 	add.w	r2, r7, #20
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 ff6a 	bl	8006928 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d90a      	bls.n	8004a70 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 ffce 	bl	8006a08 <SDMMC_CmdReadMultiBlock>
 8004a6c:	6478      	str	r0, [r7, #68]	; 0x44
 8004a6e:	e009      	b.n	8004a84 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 ffa1 	bl	80069c4 <SDMMC_CmdReadSingleBlock>
 8004a82:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d012      	beq.n	8004ab0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7b      	ldr	r2, [pc, #492]	; (8004c7c <HAL_SD_ReadBlocks+0x30c>)
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e152      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004ab4:	e061      	b.n	8004b7a <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d03c      	beq.n	8004b3e <HAL_SD_ReadBlocks+0x1ce>
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d039      	beq.n	8004b3e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ace:	e033      	b.n	8004b38 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 fea2 	bl	800681e <SDIO_ReadFIFO>
 8004ada:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aec:	3b01      	subs	r3, #1
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	0a1b      	lsrs	r3, r3, #8
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afc:	3301      	adds	r3, #1
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b02:	3b01      	subs	r3, #1
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	3301      	adds	r3, #1
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	0e1b      	lsrs	r3, r3, #24
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b28:	3301      	adds	r3, #1
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b34:	3301      	adds	r3, #1
 8004b36:	643b      	str	r3, [r7, #64]	; 0x40
 8004b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3a:	2b07      	cmp	r3, #7
 8004b3c:	d9c8      	bls.n	8004ad0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004b3e:	f7fc fa5b 	bl	8000ff8 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d902      	bls.n	8004b54 <HAL_SD_ReadBlocks+0x1e4>
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d112      	bne.n	8004b7a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a48      	ldr	r2, [pc, #288]	; (8004c7c <HAL_SD_ReadBlocks+0x30c>)
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0ed      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b80:	f240 332a 	movw	r3, #810	; 0x32a
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d095      	beq.n	8004ab6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d022      	beq.n	8004bde <HAL_SD_ReadBlocks+0x26e>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d91f      	bls.n	8004bde <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d01b      	beq.n	8004bde <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 ff92 	bl	8006ad4 <SDMMC_CmdStopTransfer>
 8004bb0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d012      	beq.n	8004bde <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a2f      	ldr	r2, [pc, #188]	; (8004c7c <HAL_SD_ReadBlocks+0x30c>)
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e0bb      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d012      	beq.n	8004c12 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a22      	ldr	r2, [pc, #136]	; (8004c7c <HAL_SD_ReadBlocks+0x30c>)
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	f043 0208 	orr.w	r2, r3, #8
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e0a1      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <HAL_SD_ReadBlocks+0x30c>)
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	f043 0202 	orr.w	r2, r3, #2
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e087      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d064      	beq.n	8004d1e <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <HAL_SD_ReadBlocks+0x30c>)
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e06d      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
 8004c7a:	bf00      	nop
 8004c7c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f001 fdca 	bl	800681e <SDIO_ReadFIFO>
 8004c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c92:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c96:	3301      	adds	r3, #1
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	3301      	adds	r3, #1
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	0c1b      	lsrs	r3, r3, #16
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	0e1b      	lsrs	r3, r3, #24
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd8:	3301      	adds	r3, #1
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004ce2:	f7fc f989 	bl	8000ff8 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d902      	bls.n	8004cf8 <HAL_SD_ReadBlocks+0x388>
 8004cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d112      	bne.n	8004d1e <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_SD_ReadBlocks+0x3f0>)
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e01b      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_SD_ReadBlocks+0x3c2>
 8004d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1a6      	bne.n	8004c80 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e006      	b.n	8004d56 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3748      	adds	r7, #72	; 0x48
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	004005ff 	.word	0x004005ff

08004d64 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b092      	sub	sp, #72	; 0x48
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d72:	f7fc f941 	bl	8000ff8 <HAL_GetTick>
 8004d76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d107      	bne.n	8004d96 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e184      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	f040 8177 	bne.w	8005092 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	441a      	add	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d907      	bls.n	8004dc8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e16b      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2203      	movs	r2, #3
 8004dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d002      	beq.n	8004de6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	025b      	lsls	r3, r3, #9
 8004de4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dee:	4618      	mov	r0, r3
 8004df0:	f001 fdc6 	bl	8006980 <SDMMC_CmdBlockLength>
 8004df4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00f      	beq.n	8004e1c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a9d      	ldr	r2, [pc, #628]	; (8005078 <HAL_SD_WriteBlocks+0x314>)
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e141      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e20:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	025b      	lsls	r3, r3, #9
 8004e26:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004e28:	2390      	movs	r3, #144	; 0x90
 8004e2a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004e34:	2301      	movs	r3, #1
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f107 0218 	add.w	r2, r7, #24
 8004e40:	4611      	mov	r1, r2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fd70 	bl	8006928 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d90a      	bls.n	8004e64 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 fe18 	bl	8006a90 <SDMMC_CmdWriteMultiBlock>
 8004e60:	6478      	str	r0, [r7, #68]	; 0x44
 8004e62:	e009      	b.n	8004e78 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2210      	movs	r2, #16
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 fdeb 	bl	8006a4c <SDMMC_CmdWriteSingleBlock>
 8004e76:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d012      	beq.n	8004ea4 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a7d      	ldr	r2, [pc, #500]	; (8005078 <HAL_SD_WriteBlocks+0x314>)
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0fd      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004ea8:	e065      	b.n	8004f76 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d040      	beq.n	8004f3a <HAL_SD_WriteBlocks+0x1d6>
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d03d      	beq.n	8004f3a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec2:	e037      	b.n	8004f34 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	3301      	adds	r3, #1
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	021a      	lsls	r2, r3, #8
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eea:	3b01      	subs	r3, #1
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	041a      	lsls	r2, r3, #16
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efc:	3301      	adds	r3, #1
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f02:	3b01      	subs	r3, #1
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	061a      	lsls	r2, r3, #24
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	3301      	adds	r3, #1
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f107 0214 	add.w	r2, r7, #20
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 fc85 	bl	8006838 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f30:	3301      	adds	r3, #1
 8004f32:	643b      	str	r3, [r7, #64]	; 0x40
 8004f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f36:	2b07      	cmp	r3, #7
 8004f38:	d9c4      	bls.n	8004ec4 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004f3a:	f7fc f85d 	bl	8000ff8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d902      	bls.n	8004f50 <HAL_SD_WriteBlocks+0x1ec>
 8004f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d112      	bne.n	8004f76 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a48      	ldr	r2, [pc, #288]	; (8005078 <HAL_SD_WriteBlocks+0x314>)
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e094      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7c:	f240 331a 	movw	r3, #794	; 0x31a
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d091      	beq.n	8004eaa <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d022      	beq.n	8004fda <HAL_SD_WriteBlocks+0x276>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d91f      	bls.n	8004fda <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d01b      	beq.n	8004fda <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 fd94 	bl	8006ad4 <SDMMC_CmdStopTransfer>
 8004fac:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d012      	beq.n	8004fda <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2f      	ldr	r2, [pc, #188]	; (8005078 <HAL_SD_WriteBlocks+0x314>)
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e062      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d012      	beq.n	800500e <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a22      	ldr	r2, [pc, #136]	; (8005078 <HAL_SD_WriteBlocks+0x314>)
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	f043 0208 	orr.w	r2, r3, #8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e048      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d012      	beq.n	8005042 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a15      	ldr	r2, [pc, #84]	; (8005078 <HAL_SD_WriteBlocks+0x314>)
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	f043 0202 	orr.w	r2, r3, #2
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e02e      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	d015      	beq.n	800507c <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a08      	ldr	r2, [pc, #32]	; (8005078 <HAL_SD_WriteBlocks+0x314>)
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	f043 0210 	orr.w	r2, r3, #16
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e014      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
 8005076:	bf00      	nop
 8005078:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f240 523a 	movw	r2, #1338	; 0x53a
 8005084:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	e006      	b.n	80050a0 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3748      	adds	r7, #72	; 0x48
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b6:	0f9b      	lsrs	r3, r3, #30
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c2:	0e9b      	lsrs	r3, r3, #26
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d4:	0e1b      	lsrs	r3, r3, #24
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e6:	0c1b      	lsrs	r3, r3, #16
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005108:	0d1b      	lsrs	r3, r3, #20
 800510a:	b29a      	uxth	r2, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	b2da      	uxtb	r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005126:	0bdb      	lsrs	r3, r3, #15
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005138:	0b9b      	lsrs	r3, r3, #14
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	b2da      	uxtb	r2, r3
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800514a:	0b5b      	lsrs	r3, r3, #13
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	b2da      	uxtb	r2, r3
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800515c:	0b1b      	lsrs	r3, r3, #12
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	b2da      	uxtb	r2, r3
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2200      	movs	r2, #0
 800516e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005174:	2b00      	cmp	r3, #0
 8005176:	d163      	bne.n	8005240 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800517c:	009a      	lsls	r2, r3, #2
 800517e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005182:	4013      	ands	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005188:	0f92      	lsrs	r2, r2, #30
 800518a:	431a      	orrs	r2, r3
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005194:	0edb      	lsrs	r3, r3, #27
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	b2da      	uxtb	r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a6:	0e1b      	lsrs	r3, r3, #24
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b8:	0d5b      	lsrs	r3, r3, #21
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ca:	0c9b      	lsrs	r3, r3, #18
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051dc:	0bdb      	lsrs	r3, r3, #15
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	7e1b      	ldrb	r3, [r3, #24]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	3302      	adds	r3, #2
 8005200:	2201      	movs	r2, #1
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800520a:	fb02 f203 	mul.w	r2, r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	7a1b      	ldrb	r3, [r3, #8]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	2201      	movs	r2, #1
 800521e:	409a      	lsls	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800522c:	0a52      	lsrs	r2, r2, #9
 800522e:	fb02 f203 	mul.w	r2, r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523c:	661a      	str	r2, [r3, #96]	; 0x60
 800523e:	e031      	b.n	80052a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	2b01      	cmp	r3, #1
 8005246:	d11d      	bne.n	8005284 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800524c:	041b      	lsls	r3, r3, #16
 800524e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	431a      	orrs	r2, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	3301      	adds	r3, #1
 8005264:	029a      	lsls	r2, r3, #10
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005278:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	661a      	str	r2, [r3, #96]	; 0x60
 8005282:	e00f      	b.n	80052a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a58      	ldr	r2, [pc, #352]	; (80053ec <HAL_SD_GetCardCSD+0x344>)
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e09d      	b.n	80053e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a8:	0b9b      	lsrs	r3, r3, #14
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ba:	09db      	lsrs	r3, r3, #7
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	0fdb      	lsrs	r3, r3, #31
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	0f5b      	lsrs	r3, r3, #29
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	0e9b      	lsrs	r3, r3, #26
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	b2da      	uxtb	r2, r3
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	0d9b      	lsrs	r3, r3, #22
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	b2da      	uxtb	r2, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	0d5b      	lsrs	r3, r3, #21
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	b2da      	uxtb	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	0c1b      	lsrs	r3, r3, #16
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	0bdb      	lsrs	r3, r3, #15
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	b2da      	uxtb	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	0b9b      	lsrs	r3, r3, #14
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	b2da      	uxtb	r2, r3
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	0b5b      	lsrs	r3, r3, #13
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	0b1b      	lsrs	r3, r3, #12
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	b2da      	uxtb	r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	0a9b      	lsrs	r3, r3, #10
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	004005ff 	.word	0x004005ff

080053f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f970 	bl	8005740 <SD_SendStatus>
 8005460:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	0a5b      	lsrs	r3, r3, #9
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800547e:	693b      	ldr	r3, [r7, #16]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005488:	b5b0      	push	{r4, r5, r7, lr}
 800548a:	b094      	sub	sp, #80	; 0x50
 800548c:	af04      	add	r7, sp, #16
 800548e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005490:	2301      	movs	r3, #1
 8005492:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f001 f9ed 	bl	8006878 <SDIO_GetPowerState>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054a8:	e0b7      	b.n	800561a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d02f      	beq.n	8005512 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fbd3 	bl	8006c62 <SDMMC_CmdSendCID>
 80054bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <SD_InitCard+0x40>
    {
      return errorstate;
 80054c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c6:	e0a8      	b.n	800561a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 fa17 	bl	8006902 <SDIO_GetResponse>
 80054d4:	4602      	mov	r2, r0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2104      	movs	r1, #4
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 fa0e 	bl	8006902 <SDIO_GetResponse>
 80054e6:	4602      	mov	r2, r0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2108      	movs	r1, #8
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 fa05 	bl	8006902 <SDIO_GetResponse>
 80054f8:	4602      	mov	r2, r0
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	210c      	movs	r1, #12
 8005504:	4618      	mov	r0, r3
 8005506:	f001 f9fc 	bl	8006902 <SDIO_GetResponse>
 800550a:	4602      	mov	r2, r0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	2b03      	cmp	r3, #3
 8005518:	d00d      	beq.n	8005536 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f107 020e 	add.w	r2, r7, #14
 8005522:	4611      	mov	r1, r2
 8005524:	4618      	mov	r0, r3
 8005526:	f001 fbd9 	bl	8006cdc <SDMMC_CmdSetRelAdd>
 800552a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <SD_InitCard+0xae>
    {
      return errorstate;
 8005532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005534:	e071      	b.n	800561a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	2b03      	cmp	r3, #3
 800553c:	d036      	beq.n	80055ac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800553e:	89fb      	ldrh	r3, [r7, #14]
 8005540:	461a      	mov	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f001 fba3 	bl	8006c9e <SDMMC_CmdSendCSD>
 8005558:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800555a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	e05a      	b.n	800561a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f001 f9c9 	bl	8006902 <SDIO_GetResponse>
 8005570:	4602      	mov	r2, r0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2104      	movs	r1, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f001 f9c0 	bl	8006902 <SDIO_GetResponse>
 8005582:	4602      	mov	r2, r0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2108      	movs	r1, #8
 800558e:	4618      	mov	r0, r3
 8005590:	f001 f9b7 	bl	8006902 <SDIO_GetResponse>
 8005594:	4602      	mov	r2, r0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	210c      	movs	r1, #12
 80055a0:	4618      	mov	r0, r3
 80055a2:	f001 f9ae 	bl	8006902 <SDIO_GetResponse>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2104      	movs	r1, #4
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f9a5 	bl	8006902 <SDIO_GetResponse>
 80055b8:	4603      	mov	r3, r0
 80055ba:	0d1a      	lsrs	r2, r3, #20
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80055c0:	f107 0310 	add.w	r3, r7, #16
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff fd6e 	bl	80050a8 <HAL_SD_GetCardCSD>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055d6:	e020      	b.n	800561a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6819      	ldr	r1, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	f04f 0400 	mov.w	r4, #0
 80055e6:	461a      	mov	r2, r3
 80055e8:	4623      	mov	r3, r4
 80055ea:	4608      	mov	r0, r1
 80055ec:	f001 fa94 	bl	8006b18 <SDMMC_CmdSelDesel>
 80055f0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80055f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <SD_InitCard+0x174>
  {
    return errorstate;
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	e00e      	b.n	800561a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681d      	ldr	r5, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	466c      	mov	r4, sp
 8005604:	f103 0210 	add.w	r2, r3, #16
 8005608:	ca07      	ldmia	r2, {r0, r1, r2}
 800560a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800560e:	3304      	adds	r3, #4
 8005610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005612:	4628      	mov	r0, r5
 8005614:	f001 f8d8 	bl	80067c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3740      	adds	r7, #64	; 0x40
 800561e:	46bd      	mov	sp, r7
 8005620:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005624 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f001 fa8e 	bl	8006b5e <SDMMC_CmdGoIdleState>
 8005642:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <SD_PowerON+0x2a>
  {
    return errorstate;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	e072      	b.n	8005734 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f001 faa1 	bl	8006b9a <SDMMC_CmdOperCond>
 8005658:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00d      	beq.n	800567c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f001 fa77 	bl	8006b5e <SDMMC_CmdGoIdleState>
 8005670:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	e05b      	b.n	8005734 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005686:	2b01      	cmp	r3, #1
 8005688:	d137      	bne.n	80056fa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2100      	movs	r1, #0
 8005690:	4618      	mov	r0, r3
 8005692:	f001 faa1 	bl	8006bd8 <SDMMC_CmdAppCommand>
 8005696:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d02d      	beq.n	80056fa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800569e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056a2:	e047      	b.n	8005734 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2100      	movs	r1, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 fa94 	bl	8006bd8 <SDMMC_CmdAppCommand>
 80056b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <SD_PowerON+0x98>
    {
      return errorstate;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	e03b      	b.n	8005734 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	491e      	ldr	r1, [pc, #120]	; (800573c <SD_PowerON+0x118>)
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 faaa 	bl	8006c1c <SDMMC_CmdAppOperCommand>
 80056c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056d4:	e02e      	b.n	8005734 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 f910 	bl	8006902 <SDIO_GetResponse>
 80056e2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	0fdb      	lsrs	r3, r3, #31
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <SD_PowerON+0xcc>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <SD_PowerON+0xce>
 80056f0:	2300      	movs	r3, #0
 80056f2:	613b      	str	r3, [r7, #16]

    count++;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005700:	4293      	cmp	r3, r2
 8005702:	d802      	bhi.n	800570a <SD_PowerON+0xe6>
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0cc      	beq.n	80056a4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005710:	4293      	cmp	r3, r2
 8005712:	d902      	bls.n	800571a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005718:	e00c      	b.n	8005734 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
 800572a:	e002      	b.n	8005732 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	c1100000 	.word	0xc1100000

08005740 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005750:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005754:	e018      	b.n	8005788 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f001 fadb 	bl	8006d1e <SDMMC_CmdSendStatus>
 8005768:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	e009      	b.n	8005788 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f001 f8c1 	bl	8006902 <SDIO_GetResponse>
 8005780:	4602      	mov	r2, r0
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e01d      	b.n	80057de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f008 fd54 	bl	800e264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f000 fcac 	bl	800612c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b06      	cmp	r3, #6
 800580e:	d007      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e01d      	b.n	800587c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f008 fd2d 	bl	800e2b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	4619      	mov	r1, r3
 800586c:	4610      	mov	r0, r2
 800586e:	f000 fc5d 	bl	800612c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800589e:	2302      	movs	r3, #2
 80058a0:	e0e9      	b.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d10b      	bne.n	80058c6 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <HAL_TIM_PWM_Start_DMA+0x3a>
 80058b4:	887b      	ldrh	r3, [r7, #2]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0db      	b.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b0c      	cmp	r3, #12
 80058ca:	f200 80ad 	bhi.w	8005a28 <HAL_TIM_PWM_Start_DMA+0x1a4>
 80058ce:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <HAL_TIM_PWM_Start_DMA+0x50>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	08005909 	.word	0x08005909
 80058d8:	08005a29 	.word	0x08005a29
 80058dc:	08005a29 	.word	0x08005a29
 80058e0:	08005a29 	.word	0x08005a29
 80058e4:	08005951 	.word	0x08005951
 80058e8:	08005a29 	.word	0x08005a29
 80058ec:	08005a29 	.word	0x08005a29
 80058f0:	08005a29 	.word	0x08005a29
 80058f4:	08005999 	.word	0x08005999
 80058f8:	08005a29 	.word	0x08005a29
 80058fc:	08005a29 	.word	0x08005a29
 8005900:	08005a29 	.word	0x08005a29
 8005904:	080059e1 	.word	0x080059e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	4a5c      	ldr	r2, [pc, #368]	; (8005a80 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800590e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	4a5b      	ldr	r2, [pc, #364]	; (8005a84 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	4a5a      	ldr	r2, [pc, #360]	; (8005a88 <HAL_TIM_PWM_Start_DMA+0x204>)
 800591e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3334      	adds	r3, #52	; 0x34
 800592c:	461a      	mov	r2, r3
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	f7fc f91c 	bl	8001b6c <HAL_DMA_Start_IT>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e09b      	b.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800594c:	60da      	str	r2, [r3, #12]
      break;
 800594e:	e06c      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	4a4a      	ldr	r2, [pc, #296]	; (8005a80 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005956:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	4a49      	ldr	r2, [pc, #292]	; (8005a84 <HAL_TIM_PWM_Start_DMA+0x200>)
 800595e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	4a48      	ldr	r2, [pc, #288]	; (8005a88 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005966:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3338      	adds	r3, #56	; 0x38
 8005974:	461a      	mov	r2, r3
 8005976:	887b      	ldrh	r3, [r7, #2]
 8005978:	f7fc f8f8 	bl	8001b6c <HAL_DMA_Start_IT>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e077      	b.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005994:	60da      	str	r2, [r3, #12]
      break;
 8005996:	e048      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	4a38      	ldr	r2, [pc, #224]	; (8005a80 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800599e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	4a37      	ldr	r2, [pc, #220]	; (8005a84 <HAL_TIM_PWM_Start_DMA+0x200>)
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	4a36      	ldr	r2, [pc, #216]	; (8005a88 <HAL_TIM_PWM_Start_DMA+0x204>)
 80059ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	333c      	adds	r3, #60	; 0x3c
 80059bc:	461a      	mov	r2, r3
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	f7fc f8d4 	bl	8001b6c <HAL_DMA_Start_IT>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e053      	b.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059dc:	60da      	str	r2, [r3, #12]
      break;
 80059de:	e024      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80059e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <HAL_TIM_PWM_Start_DMA+0x200>)
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	4a24      	ldr	r2, [pc, #144]	; (8005a88 <HAL_TIM_PWM_Start_DMA+0x204>)
 80059f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3340      	adds	r3, #64	; 0x40
 8005a04:	461a      	mov	r2, r3
 8005a06:	887b      	ldrh	r3, [r7, #2]
 8005a08:	f7fc f8b0 	bl	8001b6c <HAL_DMA_Start_IT>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e02f      	b.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a24:	60da      	str	r2, [r3, #12]
      break;
 8005a26:	e000      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8005a28:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fe20 	bl	8006678 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <HAL_TIM_PWM_Start_DMA+0x208>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d107      	bne.n	8005a52 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b06      	cmp	r3, #6
 8005a62:	d007      	beq.n	8005a74 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	0800604b 	.word	0x0800604b
 8005a84:	080060bb 	.word	0x080060bb
 8005a88:	08006027 	.word	0x08006027
 8005a8c:	40010000 	.word	0x40010000

08005a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0202 	mvn.w	r2, #2
 8005abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fa75 	bl	8005fc2 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa67 	bl	8005fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa78 	bl	8005fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0204 	mvn.w	r2, #4
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa4b 	bl	8005fc2 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa3d 	bl	8005fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fa4e 	bl	8005fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0208 	mvn.w	r2, #8
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2204      	movs	r2, #4
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa21 	bl	8005fc2 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa13 	bl	8005fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa24 	bl	8005fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0210 	mvn.w	r2, #16
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f9f7 	bl	8005fc2 <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f9e9 	bl	8005fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f9fa 	bl	8005fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10e      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d107      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0201 	mvn.w	r2, #1
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9c3 	bl	8005f9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b80      	cmp	r3, #128	; 0x80
 8005c20:	d10e      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d107      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fdba 	bl	80067b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d10e      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d107      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9c9 	bl	8005ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d10e      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d107      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0220 	mvn.w	r2, #32
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fd84 	bl	80067a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e0b4      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b0c      	cmp	r3, #12
 8005cce:	f200 809f 	bhi.w	8005e10 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005e11 	.word	0x08005e11
 8005ce0:	08005e11 	.word	0x08005e11
 8005ce4:	08005e11 	.word	0x08005e11
 8005ce8:	08005d4d 	.word	0x08005d4d
 8005cec:	08005e11 	.word	0x08005e11
 8005cf0:	08005e11 	.word	0x08005e11
 8005cf4:	08005e11 	.word	0x08005e11
 8005cf8:	08005d8f 	.word	0x08005d8f
 8005cfc:	08005e11 	.word	0x08005e11
 8005d00:	08005e11 	.word	0x08005e11
 8005d04:	08005e11 	.word	0x08005e11
 8005d08:	08005dcf 	.word	0x08005dcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fa8a 	bl	800622c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0208 	orr.w	r2, r2, #8
 8005d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0204 	bic.w	r2, r2, #4
 8005d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6999      	ldr	r1, [r3, #24]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	619a      	str	r2, [r3, #24]
      break;
 8005d4a:	e062      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fad0 	bl	80062f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6999      	ldr	r1, [r3, #24]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	619a      	str	r2, [r3, #24]
      break;
 8005d8c:	e041      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fb1b 	bl	80063d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0208 	orr.w	r2, r2, #8
 8005da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0204 	bic.w	r2, r2, #4
 8005db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69d9      	ldr	r1, [r3, #28]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	61da      	str	r2, [r3, #28]
      break;
 8005dcc:	e021      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fb65 	bl	80064a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69d9      	ldr	r1, [r3, #28]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	021a      	lsls	r2, r3, #8
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	61da      	str	r2, [r3, #28]
      break;
 8005e0e:	e000      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005e10:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIM_ConfigClockSource+0x18>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e0a6      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x166>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d067      	beq.n	8005f4c <HAL_TIM_ConfigClockSource+0x120>
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d80b      	bhi.n	8005e98 <HAL_TIM_ConfigClockSource+0x6c>
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d073      	beq.n	8005f6c <HAL_TIM_ConfigClockSource+0x140>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d802      	bhi.n	8005e8e <HAL_TIM_ConfigClockSource+0x62>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d06f      	beq.n	8005f6c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e8c:	e078      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d06c      	beq.n	8005f6c <HAL_TIM_ConfigClockSource+0x140>
 8005e92:	2b30      	cmp	r3, #48	; 0x30
 8005e94:	d06a      	beq.n	8005f6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e96:	e073      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e98:	2b70      	cmp	r3, #112	; 0x70
 8005e9a:	d00d      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x8c>
 8005e9c:	2b70      	cmp	r3, #112	; 0x70
 8005e9e:	d804      	bhi.n	8005eaa <HAL_TIM_ConfigClockSource+0x7e>
 8005ea0:	2b50      	cmp	r3, #80	; 0x50
 8005ea2:	d033      	beq.n	8005f0c <HAL_TIM_ConfigClockSource+0xe0>
 8005ea4:	2b60      	cmp	r3, #96	; 0x60
 8005ea6:	d041      	beq.n	8005f2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005ea8:	e06a      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eae:	d066      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x152>
 8005eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb4:	d017      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005eb6:	e063      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6899      	ldr	r1, [r3, #8]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f000 fbb6 	bl	8006638 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
      break;
 8005ee4:	e04c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6899      	ldr	r1, [r3, #8]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f000 fb9f 	bl	8006638 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f08:	609a      	str	r2, [r3, #8]
      break;
 8005f0a:	e039      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6859      	ldr	r1, [r3, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f000 fb13 	bl	8006544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2150      	movs	r1, #80	; 0x50
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fb6c 	bl	8006602 <TIM_ITRx_SetConfig>
      break;
 8005f2a:	e029      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f000 fb32 	bl	80065a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2160      	movs	r1, #96	; 0x60
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fb5c 	bl	8006602 <TIM_ITRx_SetConfig>
      break;
 8005f4a:	e019      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6859      	ldr	r1, [r3, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f000 faf3 	bl	8006544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2140      	movs	r1, #64	; 0x40
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fb4c 	bl	8006602 <TIM_ITRx_SetConfig>
      break;
 8005f6a:	e009      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f000 fb43 	bl	8006602 <TIM_ITRx_SetConfig>
      break;
 8005f7c:	e000      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff ffe8 	bl	8006012 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d103      	bne.n	8006072 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	771a      	strb	r2, [r3, #28]
 8006070:	e019      	b.n	80060a6 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	d103      	bne.n	8006084 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2202      	movs	r2, #2
 8006080:	771a      	strb	r2, [r3, #28]
 8006082:	e010      	b.n	80060a6 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d103      	bne.n	8006096 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2204      	movs	r2, #4
 8006092:	771a      	strb	r2, [r3, #28]
 8006094:	e007      	b.n	80060a6 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d102      	bne.n	80060a6 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2208      	movs	r2, #8
 80060a4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff ff95 	bl	8005fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	771a      	strb	r2, [r3, #28]
}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d103      	bne.n	80060e2 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	771a      	strb	r2, [r3, #28]
 80060e0:	e019      	b.n	8006116 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d103      	bne.n	80060f4 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2202      	movs	r2, #2
 80060f0:	771a      	strb	r2, [r3, #28]
 80060f2:	e010      	b.n	8006116 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d103      	bne.n	8006106 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2204      	movs	r2, #4
 8006102:	771a      	strb	r2, [r3, #28]
 8006104:	e007      	b.n	8006116 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	d102      	bne.n	8006116 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2208      	movs	r2, #8
 8006114:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff ff67 	bl	8005fea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	771a      	strb	r2, [r3, #28]
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a34      	ldr	r2, [pc, #208]	; (8006210 <TIM_Base_SetConfig+0xe4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00f      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614a:	d00b      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a31      	ldr	r2, [pc, #196]	; (8006214 <TIM_Base_SetConfig+0xe8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d007      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a30      	ldr	r2, [pc, #192]	; (8006218 <TIM_Base_SetConfig+0xec>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a2f      	ldr	r2, [pc, #188]	; (800621c <TIM_Base_SetConfig+0xf0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d108      	bne.n	8006176 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a25      	ldr	r2, [pc, #148]	; (8006210 <TIM_Base_SetConfig+0xe4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01b      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006184:	d017      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a22      	ldr	r2, [pc, #136]	; (8006214 <TIM_Base_SetConfig+0xe8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d013      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a21      	ldr	r2, [pc, #132]	; (8006218 <TIM_Base_SetConfig+0xec>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00f      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a20      	ldr	r2, [pc, #128]	; (800621c <TIM_Base_SetConfig+0xf0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00b      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a1f      	ldr	r2, [pc, #124]	; (8006220 <TIM_Base_SetConfig+0xf4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d007      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <TIM_Base_SetConfig+0xf8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d003      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <TIM_Base_SetConfig+0xfc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d108      	bne.n	80061c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a08      	ldr	r2, [pc, #32]	; (8006210 <TIM_Base_SetConfig+0xe4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d103      	bne.n	80061fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	615a      	str	r2, [r3, #20]
}
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40010000 	.word	0x40010000
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800
 800621c:	40000c00 	.word	0x40000c00
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f023 0201 	bic.w	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f023 0302 	bic.w	r3, r3, #2
 8006274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <TIM_OC1_SetConfig+0xc8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d10c      	bne.n	80062a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0308 	bic.w	r3, r3, #8
 800628e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f023 0304 	bic.w	r3, r3, #4
 80062a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a13      	ldr	r2, [pc, #76]	; (80062f4 <TIM_OC1_SetConfig+0xc8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d111      	bne.n	80062ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40010000 	.word	0x40010000

080062f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 0210 	bic.w	r2, r3, #16
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0320 	bic.w	r3, r3, #32
 8006342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <TIM_OC2_SetConfig+0xd4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d10d      	bne.n	8006374 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006372:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a15      	ldr	r2, [pc, #84]	; (80063cc <TIM_OC2_SetConfig+0xd4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d113      	bne.n	80063a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800638a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40010000 	.word	0x40010000

080063d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <TIM_OC3_SetConfig+0xd0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10d      	bne.n	800644a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <TIM_OC3_SetConfig+0xd0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d113      	bne.n	800647a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	621a      	str	r2, [r3, #32]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	40010000 	.word	0x40010000

080064a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	031b      	lsls	r3, r3, #12
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a10      	ldr	r2, [pc, #64]	; (8006540 <TIM_OC4_SetConfig+0x9c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d109      	bne.n	8006518 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	019b      	lsls	r3, r3, #6
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000

08006544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	f023 0201 	bic.w	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800656e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 030a 	bic.w	r3, r3, #10
 8006580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b087      	sub	sp, #28
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f023 0210 	bic.w	r2, r3, #16
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	031b      	lsls	r3, r3, #12
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	f043 0307 	orr.w	r3, r3, #7
 8006624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	609a      	str	r2, [r3, #8]
}
 800662c:	bf00      	nop
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	021a      	lsls	r2, r3, #8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	431a      	orrs	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4313      	orrs	r3, r2
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	609a      	str	r2, [r3, #8]
}
 800666c:	bf00      	nop
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	2201      	movs	r2, #1
 800668c:	fa02 f303 	lsl.w	r3, r2, r3
 8006690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1a      	ldr	r2, [r3, #32]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	43db      	mvns	r3, r3
 800669a:	401a      	ands	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a1a      	ldr	r2, [r3, #32]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 031f 	and.w	r3, r3, #31
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	fa01 f303 	lsl.w	r3, r1, r3
 80066b0:	431a      	orrs	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	621a      	str	r2, [r3, #32]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066d8:	2302      	movs	r3, #2
 80066da:	e050      	b.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a1c      	ldr	r2, [pc, #112]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d018      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d013      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a18      	ldr	r2, [pc, #96]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00e      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a16      	ldr	r2, [pc, #88]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d009      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a15      	ldr	r2, [pc, #84]	; (8006798 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d004      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a13      	ldr	r2, [pc, #76]	; (800679c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d10c      	bne.n	800676c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	4313      	orrs	r3, r2
 8006762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40010000 	.word	0x40010000
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	40000c00 	.word	0x40000c00
 800679c:	40014000 	.word	0x40014000

080067a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80067c8:	b084      	sub	sp, #16
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	f107 001c 	add.w	r0, r7, #28
 80067d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80067de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80067e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80067e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80067e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80067ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80067ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80067f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006802:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	b004      	add	sp, #16
 800681c:	4770      	bx	lr

0800681e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2203      	movs	r2, #3
 8006866:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006868:	2002      	movs	r0, #2
 800686a:	f7fa fbd1 	bl	8001010 <HAL_Delay>
  
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0303 	and.w	r3, r3, #3
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80068b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80068b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80068be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80068ce:	f023 030f 	bic.w	r3, r3, #15
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	b2db      	uxtb	r3, r3
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3314      	adds	r3, #20
 8006910:	461a      	mov	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	4413      	add	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
}  
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800694e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006954:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800695a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006972:	2300      	movs	r3, #0

}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800698e:	2310      	movs	r3, #16
 8006990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006992:	2340      	movs	r3, #64	; 0x40
 8006994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800699a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800699e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069a0:	f107 0308 	add.w	r3, r7, #8
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff ff74 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80069ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b0:	2110      	movs	r1, #16
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9fe 	bl	8006db4 <SDMMC_GetCmdResp1>
 80069b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069ba:	69fb      	ldr	r3, [r7, #28]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3720      	adds	r7, #32
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80069d2:	2311      	movs	r3, #17
 80069d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069d6:	2340      	movs	r3, #64	; 0x40
 80069d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069e4:	f107 0308 	add.w	r3, r7, #8
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff ff52 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80069f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f4:	2111      	movs	r1, #17
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9dc 	bl	8006db4 <SDMMC_GetCmdResp1>
 80069fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069fe:	69fb      	ldr	r3, [r7, #28]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006a16:	2312      	movs	r3, #18
 8006a18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a1a:	2340      	movs	r3, #64	; 0x40
 8006a1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a28:	f107 0308 	add.w	r3, r7, #8
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff ff30 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a38:	2112      	movs	r1, #18
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f9ba 	bl	8006db4 <SDMMC_GetCmdResp1>
 8006a40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a42:	69fb      	ldr	r3, [r7, #28]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006a5a:	2318      	movs	r3, #24
 8006a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a5e:	2340      	movs	r3, #64	; 0x40
 8006a60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a6c:	f107 0308 	add.w	r3, r7, #8
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff ff0e 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7c:	2118      	movs	r1, #24
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f998 	bl	8006db4 <SDMMC_GetCmdResp1>
 8006a84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a86:	69fb      	ldr	r3, [r7, #28]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006a9e:	2319      	movs	r3, #25
 8006aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006aa2:	2340      	movs	r3, #64	; 0x40
 8006aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ab0:	f107 0308 	add.w	r3, r7, #8
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff feec 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac0:	2119      	movs	r1, #25
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f976 	bl	8006db4 <SDMMC_GetCmdResp1>
 8006ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006aca:	69fb      	ldr	r3, [r7, #28]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3720      	adds	r7, #32
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006af0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006af2:	f107 0308 	add.w	r3, r7, #8
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fecb 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006afe:	4a05      	ldr	r2, [pc, #20]	; (8006b14 <SDMMC_CmdStopTransfer+0x40>)
 8006b00:	210c      	movs	r1, #12
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f956 	bl	8006db4 <SDMMC_GetCmdResp1>
 8006b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	05f5e100 	.word	0x05f5e100

08006b18 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006b28:	2307      	movs	r3, #7
 8006b2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b2c:	2340      	movs	r3, #64	; 0x40
 8006b2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b38:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b3a:	f107 0310 	add.w	r3, r7, #16
 8006b3e:	4619      	mov	r1, r3
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7ff fea7 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4a:	2107      	movs	r1, #7
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f931 	bl	8006db4 <SDMMC_GetCmdResp1>
 8006b52:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3728      	adds	r7, #40	; 0x28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b088      	sub	sp, #32
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b72:	2300      	movs	r3, #0
 8006b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b7c:	f107 0308 	add.w	r3, r7, #8
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fe86 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f8eb 	bl	8006d64 <SDMMC_GetCmdError>
 8006b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b90:	69fb      	ldr	r3, [r7, #28]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b088      	sub	sp, #32
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006ba2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006ba6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006ba8:	2308      	movs	r3, #8
 8006baa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bac:	2340      	movs	r3, #64	; 0x40
 8006bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bba:	f107 0308 	add.w	r3, r7, #8
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff fe67 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fad4 	bl	8007174 <SDMMC_GetCmdResp7>
 8006bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bce:	69fb      	ldr	r3, [r7, #28]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006be6:	2337      	movs	r3, #55	; 0x37
 8006be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bf8:	f107 0308 	add.w	r3, r7, #8
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fe48 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c08:	2137      	movs	r1, #55	; 0x37
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f8d2 	bl	8006db4 <SDMMC_GetCmdResp1>
 8006c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c12:	69fb      	ldr	r3, [r7, #28]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006c32:	2329      	movs	r3, #41	; 0x29
 8006c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c36:	2340      	movs	r3, #64	; 0x40
 8006c38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c44:	f107 0308 	add.w	r3, r7, #8
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff fe22 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f9e1 	bl	8007018 <SDMMC_GetCmdResp3>
 8006c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c58:	69fb      	ldr	r3, [r7, #28]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b088      	sub	sp, #32
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006c72:	23c0      	movs	r3, #192	; 0xc0
 8006c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c80:	f107 0308 	add.w	r3, r7, #8
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff fe04 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f97d 	bl	8006f8c <SDMMC_GetCmdResp2>
 8006c92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c94:	69fb      	ldr	r3, [r7, #28]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b088      	sub	sp, #32
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006cac:	2309      	movs	r3, #9
 8006cae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006cb0:	23c0      	movs	r3, #192	; 0xc0
 8006cb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cbe:	f107 0308 	add.w	r3, r7, #8
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff fde5 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f95e 	bl	8006f8c <SDMMC_GetCmdResp2>
 8006cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006cea:	2303      	movs	r3, #3
 8006cec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cee:	2340      	movs	r3, #64	; 0x40
 8006cf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cfc:	f107 0308 	add.w	r3, r7, #8
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fdc6 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	2103      	movs	r1, #3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f9bd 	bl	800708c <SDMMC_GetCmdResp6>
 8006d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d14:	69fb      	ldr	r3, [r7, #28]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b088      	sub	sp, #32
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006d2c:	230d      	movs	r3, #13
 8006d2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d30:	2340      	movs	r3, #64	; 0x40
 8006d32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d34:	2300      	movs	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff fda5 	bl	8006894 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d4e:	210d      	movs	r1, #13
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f82f 	bl	8006db4 <SDMMC_GetCmdResp1>
 8006d56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d58:	69fb      	ldr	r3, [r7, #28]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3720      	adds	r7, #32
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006d64:	b490      	push	{r4, r7}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d6c:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <SDMMC_GetCmdError+0x48>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <SDMMC_GetCmdError+0x4c>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	0a5b      	lsrs	r3, r3, #9
 8006d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d80:	4623      	mov	r3, r4
 8006d82:	1e5c      	subs	r4, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d8c:	e009      	b.n	8006da2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0f2      	beq.n	8006d80 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	22c5      	movs	r2, #197	; 0xc5
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc90      	pop	{r4, r7}
 8006daa:	4770      	bx	lr
 8006dac:	20000014 	.word	0x20000014
 8006db0:	10624dd3 	.word	0x10624dd3

08006db4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006db4:	b590      	push	{r4, r7, lr}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dc2:	4b6f      	ldr	r3, [pc, #444]	; (8006f80 <SDMMC_GetCmdResp1+0x1cc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a6f      	ldr	r2, [pc, #444]	; (8006f84 <SDMMC_GetCmdResp1+0x1d0>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	0a5b      	lsrs	r3, r3, #9
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006dd4:	4623      	mov	r3, r4
 8006dd6:	1e5c      	subs	r4, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006de0:	e0c9      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f0      	beq.n	8006dd4 <SDMMC_GetCmdResp1+0x20>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1eb      	bne.n	8006dd4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d004      	beq.n	8006e12 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e0e:	2304      	movs	r3, #4
 8006e10:	e0b1      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0a6      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	22c5      	movs	r2, #197	; 0xc5
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff fd5a 	bl	80068e8 <SDIO_GetCommandResponse>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d001      	beq.n	8006e42 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e099      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006e42:	2100      	movs	r1, #0
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7ff fd5c 	bl	8006902 <SDIO_GetResponse>
 8006e4a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	4b4e      	ldr	r3, [pc, #312]	; (8006f88 <SDMMC_GetCmdResp1+0x1d4>)
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e08d      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	da02      	bge.n	8006e66 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006e60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e64:	e087      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006e70:	2340      	movs	r3, #64	; 0x40
 8006e72:	e080      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006e7e:	2380      	movs	r3, #128	; 0x80
 8006e80:	e079      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e90:	e071      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea0:	e069      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb0:	e061      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ec0:	e059      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ed0:	e051      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ee0:	e049      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006eec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ef0:	e041      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f00:	e039      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f10:	e031      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006f1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f20:	e029      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006f2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006f30:	e021      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006f3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f40:	e019      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f50:	e011      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006f5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f60:	e009      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006f6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f70:	e001      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd90      	pop	{r4, r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000014 	.word	0x20000014
 8006f84:	10624dd3 	.word	0x10624dd3
 8006f88:	fdffe008 	.word	0xfdffe008

08006f8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006f8c:	b490      	push	{r4, r7}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f94:	4b1e      	ldr	r3, [pc, #120]	; (8007010 <SDMMC_GetCmdResp2+0x84>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1e      	ldr	r2, [pc, #120]	; (8007014 <SDMMC_GetCmdResp2+0x88>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	0a5b      	lsrs	r3, r3, #9
 8006fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006fa8:	4623      	mov	r3, r4
 8006faa:	1e5c      	subs	r4, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fb4:	e026      	b.n	8007004 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <SDMMC_GetCmdResp2+0x1c>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1eb      	bne.n	8006fa8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2204      	movs	r2, #4
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fe2:	2304      	movs	r3, #4
 8006fe4:	e00e      	b.n	8007004 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e003      	b.n	8007004 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	22c5      	movs	r2, #197	; 0xc5
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bc90      	pop	{r4, r7}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000014 	.word	0x20000014
 8007014:	10624dd3 	.word	0x10624dd3

08007018 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007018:	b490      	push	{r4, r7}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007020:	4b18      	ldr	r3, [pc, #96]	; (8007084 <SDMMC_GetCmdResp3+0x6c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a18      	ldr	r2, [pc, #96]	; (8007088 <SDMMC_GetCmdResp3+0x70>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	0a5b      	lsrs	r3, r3, #9
 800702c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007030:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007034:	4623      	mov	r3, r4
 8007036:	1e5c      	subs	r4, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800703c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007040:	e01b      	b.n	800707a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007046:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0f0      	beq.n	8007034 <SDMMC_GetCmdResp3+0x1c>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1eb      	bne.n	8007034 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2204      	movs	r2, #4
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800706e:	2304      	movs	r3, #4
 8007070:	e003      	b.n	800707a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	22c5      	movs	r2, #197	; 0xc5
 8007076:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bc90      	pop	{r4, r7}
 8007082:	4770      	bx	lr
 8007084:	20000014 	.word	0x20000014
 8007088:	10624dd3 	.word	0x10624dd3

0800708c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	460b      	mov	r3, r1
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800709a:	4b34      	ldr	r3, [pc, #208]	; (800716c <SDMMC_GetCmdResp6+0xe0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a34      	ldr	r2, [pc, #208]	; (8007170 <SDMMC_GetCmdResp6+0xe4>)
 80070a0:	fba2 2303 	umull	r2, r3, r2, r3
 80070a4:	0a5b      	lsrs	r3, r3, #9
 80070a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070aa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80070ae:	4623      	mov	r3, r4
 80070b0:	1e5c      	subs	r4, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d102      	bne.n	80070bc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070ba:	e052      	b.n	8007162 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0f0      	beq.n	80070ae <SDMMC_GetCmdResp6+0x22>
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1eb      	bne.n	80070ae <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d004      	beq.n	80070ec <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2204      	movs	r2, #4
 80070e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070e8:	2304      	movs	r3, #4
 80070ea:	e03a      	b.n	8007162 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2201      	movs	r2, #1
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070fe:	2301      	movs	r3, #1
 8007100:	e02f      	b.n	8007162 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fbf0 	bl	80068e8 <SDIO_GetCommandResponse>
 8007108:	4603      	mov	r3, r0
 800710a:	461a      	mov	r2, r3
 800710c:	7afb      	ldrb	r3, [r7, #11]
 800710e:	4293      	cmp	r3, r2
 8007110:	d001      	beq.n	8007116 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007112:	2301      	movs	r3, #1
 8007114:	e025      	b.n	8007162 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	22c5      	movs	r2, #197	; 0xc5
 800711a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800711c:	2100      	movs	r1, #0
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7ff fbef 	bl	8006902 <SDIO_GetResponse>
 8007124:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	b29a      	uxth	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800713a:	2300      	movs	r3, #0
 800713c:	e011      	b.n	8007162 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800714c:	e009      	b.n	8007162 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800715c:	e001      	b.n	8007162 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800715e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007162:	4618      	mov	r0, r3
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	bd90      	pop	{r4, r7, pc}
 800716a:	bf00      	nop
 800716c:	20000014 	.word	0x20000014
 8007170:	10624dd3 	.word	0x10624dd3

08007174 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007174:	b490      	push	{r4, r7}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800717c:	4b21      	ldr	r3, [pc, #132]	; (8007204 <SDMMC_GetCmdResp7+0x90>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a21      	ldr	r2, [pc, #132]	; (8007208 <SDMMC_GetCmdResp7+0x94>)
 8007182:	fba2 2303 	umull	r2, r3, r2, r3
 8007186:	0a5b      	lsrs	r3, r3, #9
 8007188:	f241 3288 	movw	r2, #5000	; 0x1388
 800718c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007190:	4623      	mov	r3, r4
 8007192:	1e5c      	subs	r4, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d102      	bne.n	800719e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007198:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800719c:	e02c      	b.n	80071f8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f0      	beq.n	8007190 <SDMMC_GetCmdResp7+0x1c>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1eb      	bne.n	8007190 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2204      	movs	r2, #4
 80071c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071ca:	2304      	movs	r3, #4
 80071cc:	e014      	b.n	80071f8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d004      	beq.n	80071e4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e009      	b.n	80071f8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2240      	movs	r2, #64	; 0x40
 80071f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80071f6:	2300      	movs	r3, #0
  
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc90      	pop	{r4, r7}
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20000014 	.word	0x20000014
 8007208:	10624dd3 	.word	0x10624dd3

0800720c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4613      	mov	r3, r2
 8007218:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d165      	bne.n	80072ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4a41      	ldr	r2, [pc, #260]	; (8007328 <USB_SetTurnaroundTime+0x11c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d906      	bls.n	8007236 <USB_SetTurnaroundTime+0x2a>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4a40      	ldr	r2, [pc, #256]	; (800732c <USB_SetTurnaroundTime+0x120>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d802      	bhi.n	8007236 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007230:	230f      	movs	r3, #15
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	e062      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4a3c      	ldr	r2, [pc, #240]	; (800732c <USB_SetTurnaroundTime+0x120>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d906      	bls.n	800724c <USB_SetTurnaroundTime+0x40>
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4a3b      	ldr	r2, [pc, #236]	; (8007330 <USB_SetTurnaroundTime+0x124>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d802      	bhi.n	800724c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007246:	230e      	movs	r3, #14
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	e057      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4a38      	ldr	r2, [pc, #224]	; (8007330 <USB_SetTurnaroundTime+0x124>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d906      	bls.n	8007262 <USB_SetTurnaroundTime+0x56>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4a37      	ldr	r2, [pc, #220]	; (8007334 <USB_SetTurnaroundTime+0x128>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d802      	bhi.n	8007262 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800725c:	230d      	movs	r3, #13
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	e04c      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	4a33      	ldr	r2, [pc, #204]	; (8007334 <USB_SetTurnaroundTime+0x128>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d906      	bls.n	8007278 <USB_SetTurnaroundTime+0x6c>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	4a32      	ldr	r2, [pc, #200]	; (8007338 <USB_SetTurnaroundTime+0x12c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d802      	bhi.n	8007278 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007272:	230c      	movs	r3, #12
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e041      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4a2f      	ldr	r2, [pc, #188]	; (8007338 <USB_SetTurnaroundTime+0x12c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d906      	bls.n	800728e <USB_SetTurnaroundTime+0x82>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4a2e      	ldr	r2, [pc, #184]	; (800733c <USB_SetTurnaroundTime+0x130>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d802      	bhi.n	800728e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007288:	230b      	movs	r3, #11
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e036      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4a2a      	ldr	r2, [pc, #168]	; (800733c <USB_SetTurnaroundTime+0x130>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d906      	bls.n	80072a4 <USB_SetTurnaroundTime+0x98>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4a29      	ldr	r2, [pc, #164]	; (8007340 <USB_SetTurnaroundTime+0x134>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d802      	bhi.n	80072a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800729e:	230a      	movs	r3, #10
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	e02b      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4a26      	ldr	r2, [pc, #152]	; (8007340 <USB_SetTurnaroundTime+0x134>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d906      	bls.n	80072ba <USB_SetTurnaroundTime+0xae>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4a25      	ldr	r2, [pc, #148]	; (8007344 <USB_SetTurnaroundTime+0x138>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d802      	bhi.n	80072ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072b4:	2309      	movs	r3, #9
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	e020      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	4a21      	ldr	r2, [pc, #132]	; (8007344 <USB_SetTurnaroundTime+0x138>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d906      	bls.n	80072d0 <USB_SetTurnaroundTime+0xc4>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4a20      	ldr	r2, [pc, #128]	; (8007348 <USB_SetTurnaroundTime+0x13c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d802      	bhi.n	80072d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80072ca:	2308      	movs	r3, #8
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e015      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4a1d      	ldr	r2, [pc, #116]	; (8007348 <USB_SetTurnaroundTime+0x13c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d906      	bls.n	80072e6 <USB_SetTurnaroundTime+0xda>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4a1c      	ldr	r2, [pc, #112]	; (800734c <USB_SetTurnaroundTime+0x140>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d802      	bhi.n	80072e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80072e0:	2307      	movs	r3, #7
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e00a      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80072e6:	2306      	movs	r3, #6
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	e007      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80072f2:	2309      	movs	r3, #9
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	e001      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80072f8:	2309      	movs	r3, #9
 80072fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	029b      	lsls	r3, r3, #10
 8007310:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007314:	431a      	orrs	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	00d8acbf 	.word	0x00d8acbf
 800732c:	00e4e1bf 	.word	0x00e4e1bf
 8007330:	00f423ff 	.word	0x00f423ff
 8007334:	0106737f 	.word	0x0106737f
 8007338:	011a499f 	.word	0x011a499f
 800733c:	01312cff 	.word	0x01312cff
 8007340:	014ca43f 	.word	0x014ca43f
 8007344:	016e35ff 	.word	0x016e35ff
 8007348:	01a6ab1f 	.word	0x01a6ab1f
 800734c:	01e847ff 	.word	0x01e847ff

08007350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	019b      	lsls	r3, r3, #6
 8007362:	f043 0220 	orr.w	r2, r3, #32
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3301      	adds	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a09      	ldr	r2, [pc, #36]	; (8007398 <USB_FlushTxFifo+0x48>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e006      	b.n	800738a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b20      	cmp	r3, #32
 8007386:	d0f0      	beq.n	800736a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	00030d40 	.word	0x00030d40

0800739c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0306 	and.w	r3, r3, #6
 80073b4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80073bc:	2300      	movs	r3, #0
 80073be:	75fb      	strb	r3, [r7, #23]
 80073c0:	e00a      	b.n	80073d8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d002      	beq.n	80073ce <USB_GetDevSpeed+0x32>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b06      	cmp	r3, #6
 80073cc:	d102      	bne.n	80073d4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80073ce:	2302      	movs	r3, #2
 80073d0:	75fb      	strb	r3, [r7, #23]
 80073d2:	e001      	b.n	80073d8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80073d4:	230f      	movs	r3, #15
 80073d6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d13a      	bne.n	8007478 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007408:	69da      	ldr	r2, [r3, #28]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	2101      	movs	r1, #1
 8007414:	fa01 f303 	lsl.w	r3, r1, r3
 8007418:	b29b      	uxth	r3, r3
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007420:	4313      	orrs	r3, r2
 8007422:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d155      	bne.n	80074e6 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	78db      	ldrb	r3, [r3, #3]
 8007454:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007456:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	059b      	lsls	r3, r3, #22
 800745c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800745e:	4313      	orrs	r3, r2
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	e036      	b.n	80074e6 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	2101      	movs	r1, #1
 800748a:	fa01 f303 	lsl.w	r3, r1, r3
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	68f9      	ldr	r1, [r7, #12]
 8007492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007496:	4313      	orrs	r3, r2
 8007498:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d11a      	bne.n	80074e6 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	78db      	ldrb	r3, [r3, #3]
 80074ca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80074cc:	430b      	orrs	r3, r1
 80074ce:	4313      	orrs	r3, r2
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074e4:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b01      	cmp	r3, #1
 8007512:	f040 815c 	bne.w	80077ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d132      	bne.n	8007584 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800753c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007540:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800755c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	0151      	lsls	r1, r2, #5
 8007574:	69fa      	ldr	r2, [r7, #28]
 8007576:	440a      	add	r2, r1
 8007578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757c:	0cdb      	lsrs	r3, r3, #19
 800757e:	04db      	lsls	r3, r3, #19
 8007580:	6113      	str	r3, [r2, #16]
 8007582:	e074      	b.n	800766e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	440a      	add	r2, r1
 800759a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759e:	0cdb      	lsrs	r3, r3, #19
 80075a0:	04db      	lsls	r3, r3, #19
 80075a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	691a      	ldr	r2, [r3, #16]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6959      	ldr	r1, [r3, #20]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	440b      	add	r3, r1
 80075e0:	1e59      	subs	r1, r3, #1
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80075ea:	04d9      	lsls	r1, r3, #19
 80075ec:	4b9d      	ldr	r3, [pc, #628]	; (8007864 <USB_EPStartXfer+0x370>)
 80075ee:	400b      	ands	r3, r1
 80075f0:	69b9      	ldr	r1, [r7, #24]
 80075f2:	0148      	lsls	r0, r1, #5
 80075f4:	69f9      	ldr	r1, [r7, #28]
 80075f6:	4401      	add	r1, r0
 80075f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80075fc:	4313      	orrs	r3, r2
 80075fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	691a      	ldr	r2, [r3, #16]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007616:	69b9      	ldr	r1, [r7, #24]
 8007618:	0148      	lsls	r0, r1, #5
 800761a:	69f9      	ldr	r1, [r7, #28]
 800761c:	4401      	add	r1, r0
 800761e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007622:	4313      	orrs	r3, r2
 8007624:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	78db      	ldrb	r3, [r3, #3]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d11f      	bne.n	800766e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007648:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800764c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800766c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d14b      	bne.n	800770c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d009      	beq.n	8007690 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	461a      	mov	r2, r3
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	78db      	ldrb	r3, [r3, #3]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d128      	bne.n	80076ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d110      	bne.n	80076ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	e00f      	b.n	80076ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	0151      	lsls	r1, r2, #5
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	440a      	add	r2, r1
 80076e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	0151      	lsls	r1, r2, #5
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	440a      	add	r2, r1
 8007700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007704:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e12f      	b.n	800796c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800772a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	78db      	ldrb	r3, [r3, #3]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d015      	beq.n	8007760 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8117 	beq.w	800796c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	2101      	movs	r1, #1
 8007750:	fa01 f303 	lsl.w	r3, r1, r3
 8007754:	69f9      	ldr	r1, [r7, #28]
 8007756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800775a:	4313      	orrs	r3, r2
 800775c:	634b      	str	r3, [r1, #52]	; 0x34
 800775e:	e105      	b.n	800796c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d110      	bne.n	8007792 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	440a      	add	r2, r1
 8007786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800778a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	e00f      	b.n	80077b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	0151      	lsls	r1, r2, #5
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	440a      	add	r2, r1
 80077a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	68d9      	ldr	r1, [r3, #12]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	b298      	uxth	r0, r3
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	4603      	mov	r3, r0
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 fa2b 	bl	8007c22 <USB_WritePacket>
 80077cc:	e0ce      	b.n	800796c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e8:	0cdb      	lsrs	r3, r3, #19
 80077ea:	04db      	lsls	r3, r3, #19
 80077ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800780c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007810:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d126      	bne.n	8007868 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007830:	69b9      	ldr	r1, [r7, #24]
 8007832:	0148      	lsls	r0, r1, #5
 8007834:	69f9      	ldr	r1, [r7, #28]
 8007836:	4401      	add	r1, r0
 8007838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800783c:	4313      	orrs	r3, r2
 800783e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	440a      	add	r2, r1
 8007856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800785e:	6113      	str	r3, [r2, #16]
 8007860:	e036      	b.n	80078d0 <USB_EPStartXfer+0x3dc>
 8007862:	bf00      	nop
 8007864:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	4413      	add	r3, r2
 8007872:	1e5a      	subs	r2, r3, #1
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	8afb      	ldrh	r3, [r7, #22]
 800788e:	04d9      	lsls	r1, r3, #19
 8007890:	4b39      	ldr	r3, [pc, #228]	; (8007978 <USB_EPStartXfer+0x484>)
 8007892:	400b      	ands	r3, r1
 8007894:	69b9      	ldr	r1, [r7, #24]
 8007896:	0148      	lsls	r0, r1, #5
 8007898:	69f9      	ldr	r1, [r7, #28]
 800789a:	4401      	add	r1, r0
 800789c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078a0:	4313      	orrs	r3, r2
 80078a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	8af9      	ldrh	r1, [r7, #22]
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c0:	69b9      	ldr	r1, [r7, #24]
 80078c2:	0148      	lsls	r0, r1, #5
 80078c4:	69f9      	ldr	r1, [r7, #28]
 80078c6:	4401      	add	r1, r0
 80078c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078cc:	4313      	orrs	r3, r2
 80078ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d10d      	bne.n	80078f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	68d9      	ldr	r1, [r3, #12]
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	460a      	mov	r2, r1
 80078f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	78db      	ldrb	r3, [r3, #3]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d128      	bne.n	800794c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007906:	2b00      	cmp	r3, #0
 8007908:	d110      	bne.n	800792c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	440a      	add	r2, r1
 8007920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007924:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	e00f      	b.n	800794c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	440a      	add	r2, r1
 8007942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800794a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	440a      	add	r2, r1
 8007962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007966:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800796a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3720      	adds	r7, #32
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	1ff80000 	.word	0x1ff80000

0800797c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b01      	cmp	r3, #1
 800799a:	f040 80cd 	bne.w	8007b38 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d132      	bne.n	8007a0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	0151      	lsls	r1, r2, #5
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	440a      	add	r2, r1
 80079e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	0151      	lsls	r1, r2, #5
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	440a      	add	r2, r1
 8007a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a04:	0cdb      	lsrs	r3, r3, #19
 8007a06:	04db      	lsls	r3, r3, #19
 8007a08:	6113      	str	r3, [r2, #16]
 8007a0a:	e04e      	b.n	8007aaa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a26:	0cdb      	lsrs	r3, r3, #19
 8007a28:	04db      	lsls	r3, r3, #19
 8007a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	695a      	ldr	r2, [r3, #20]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d903      	bls.n	8007a64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a9a:	6939      	ldr	r1, [r7, #16]
 8007a9c:	0148      	lsls	r0, r1, #5
 8007a9e:	6979      	ldr	r1, [r7, #20]
 8007aa0:	4401      	add	r1, r0
 8007aa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d11e      	bne.n	8007aee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d009      	beq.n	8007acc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	e092      	b.n	8007c14 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	0151      	lsls	r1, r2, #5
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	440a      	add	r2, r1
 8007b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d07e      	beq.n	8007c14 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	2101      	movs	r1, #1
 8007b28:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2c:	6979      	ldr	r1, [r7, #20]
 8007b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b32:	4313      	orrs	r3, r2
 8007b34:	634b      	str	r3, [r1, #52]	; 0x34
 8007b36:	e06d      	b.n	8007c14 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b52:	0cdb      	lsrs	r3, r3, #19
 8007b54:	04db      	lsls	r3, r3, #19
 8007b56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	0151      	lsls	r1, r2, #5
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	440a      	add	r2, r1
 8007b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b7a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	0151      	lsls	r1, r2, #5
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	440a      	add	r2, r1
 8007ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007baa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb8:	691a      	ldr	r2, [r3, #16]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bc2:	6939      	ldr	r1, [r7, #16]
 8007bc4:	0148      	lsls	r0, r1, #5
 8007bc6:	6979      	ldr	r1, [r7, #20]
 8007bc8:	4401      	add	r1, r0
 8007bca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d10d      	bne.n	8007bf4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d009      	beq.n	8007bf4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	68d9      	ldr	r1, [r3, #12]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf0:	460a      	mov	r2, r1
 8007bf2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b089      	sub	sp, #36	; 0x24
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	461a      	mov	r2, r3
 8007c30:	460b      	mov	r3, r1
 8007c32:	71fb      	strb	r3, [r7, #7]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11a      	bne.n	8007c7e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c48:	88bb      	ldrh	r3, [r7, #4]
 8007c4a:	3303      	adds	r3, #3
 8007c4c:	089b      	lsrs	r3, r3, #2
 8007c4e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c50:	2300      	movs	r3, #0
 8007c52:	61bb      	str	r3, [r7, #24]
 8007c54:	e00f      	b.n	8007c76 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	031a      	lsls	r2, r3, #12
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c62:	461a      	mov	r2, r3
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	3301      	adds	r3, #1
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d3eb      	bcc.n	8007c56 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3724      	adds	r7, #36	; 0x24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b089      	sub	sp, #36	; 0x24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	3303      	adds	r3, #3
 8007ca6:	089b      	lsrs	r3, r3, #2
 8007ca8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	61bb      	str	r3, [r7, #24]
 8007cae:	e00b      	b.n	8007cc8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d3ef      	bcc.n	8007cb0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007cd0:	69fb      	ldr	r3, [r7, #28]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3724      	adds	r7, #36	; 0x24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d12c      	bne.n	8007d54 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	db12      	blt.n	8007d32 <USB_EPSetStall+0x54>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00f      	beq.n	8007d32 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	0151      	lsls	r1, r2, #5
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	440a      	add	r2, r1
 8007d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d30:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	e02b      	b.n	8007dac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	db12      	blt.n	8007d8c <USB_EPSetStall+0xae>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00f      	beq.n	8007d8c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d8a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007daa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	785b      	ldrb	r3, [r3, #1]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d128      	bne.n	8007e28 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007df4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	78db      	ldrb	r3, [r3, #3]
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d003      	beq.n	8007e06 <USB_EPClearStall+0x4c>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	78db      	ldrb	r3, [r3, #3]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d138      	bne.n	8007e78 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	0151      	lsls	r1, r2, #5
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	440a      	add	r2, r1
 8007e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	e027      	b.n	8007e78 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	0151      	lsls	r1, r2, #5
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	440a      	add	r2, r1
 8007e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	78db      	ldrb	r3, [r3, #3]
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d003      	beq.n	8007e58 <USB_EPClearStall+0x9e>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	78db      	ldrb	r3, [r3, #3]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d10f      	bne.n	8007e78 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	0151      	lsls	r1, r2, #5
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	440a      	add	r2, r1
 8007e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e76:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ea4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ea8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007eea:	68fb      	ldr	r3, [r7, #12]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	0c1b      	lsrs	r3, r3, #16
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	b29b      	uxth	r3, r3
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fcc:	01db      	lsls	r3, r3, #7
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fea:	68bb      	ldr	r3, [r7, #8]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	371c      	adds	r7, #28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	f003 0301 	and.w	r3, r3, #1
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008032:	f023 0307 	bic.w	r3, r3, #7
 8008036:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
	...

0800805c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	460b      	mov	r3, r1
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	333c      	adds	r3, #60	; 0x3c
 8008072:	3304      	adds	r3, #4
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	4a26      	ldr	r2, [pc, #152]	; (8008114 <USB_EP0_OutStart+0xb8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d90a      	bls.n	8008096 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800808c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008090:	d101      	bne.n	8008096 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e037      	b.n	8008106 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809c:	461a      	mov	r2, r3
 800809e:	2300      	movs	r3, #0
 80080a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c4:	f043 0318 	orr.w	r3, r3, #24
 80080c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80080dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80080de:	7afb      	ldrb	r3, [r7, #11]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d10f      	bne.n	8008104 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008102:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	4f54300a 	.word	0x4f54300a

08008118 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)classData;
 8008126:	4b0d      	ldr	r3, [pc, #52]	; (800815c <USBD_HID_SendReport+0x44>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008132:	2b03      	cmp	r3, #3
 8008134:	d10c      	bne.n	8008150 <USBD_HID_SendReport+0x38>
  {
    if (hhid->state == HID_IDLE)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	7b1b      	ldrb	r3, [r3, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d108      	bne.n	8008150 <USBD_HID_SendReport+0x38>
    {
      hhid->state = HID_BUSY;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2201      	movs	r2, #1
 8008142:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008144:	88fb      	ldrh	r3, [r7, #6]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	2181      	movs	r1, #129	; 0x81
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f006 fc01 	bl	800e952 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	200008c0 	.word	0x200008c0

08008160 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008182:	2303      	movs	r3, #3
 8008184:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	4611      	mov	r1, r2
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d007      	beq.n	80081d4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	78fa      	ldrb	r2, [r7, #3]
 80081ce:	4611      	mov	r1, r2
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
  }

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 ff2b 	bl	800904c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008204:	461a      	mov	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008212:	f003 031f 	and.w	r3, r3, #31
 8008216:	2b01      	cmp	r3, #1
 8008218:	d00e      	beq.n	8008238 <USBD_LL_SetupStage+0x5a>
 800821a:	2b01      	cmp	r3, #1
 800821c:	d302      	bcc.n	8008224 <USBD_LL_SetupStage+0x46>
 800821e:	2b02      	cmp	r3, #2
 8008220:	d014      	beq.n	800824c <USBD_LL_SetupStage+0x6e>
 8008222:	e01d      	b.n	8008260 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fa17 	bl	8008660 <USBD_StdDevReq>
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]
      break;
 8008236:	e020      	b.n	800827a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fa7b 	bl	800873c <USBD_StdItfReq>
 8008246:	4603      	mov	r3, r0
 8008248:	73fb      	strb	r3, [r7, #15]
      break;
 800824a:	e016      	b.n	800827a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fab7 	bl	80087c8 <USBD_StdEPReq>
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
      break;
 800825e:	e00c      	b.n	800827a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008266:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800826a:	b2db      	uxtb	r3, r3
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f006 fae6 	bl	800e840 <USBD_LL_StallEP>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]
      break;
 8008278:	bf00      	nop
  }

  return ret;
 800827a:	7bfb      	ldrb	r3, [r7, #15]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	460b      	mov	r3, r1
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008292:	7afb      	ldrb	r3, [r7, #11]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d137      	bne.n	8008308 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800829e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d14a      	bne.n	8008340 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d913      	bls.n	80082de <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	4293      	cmp	r3, r2
 80082ce:	bf28      	it	cs
 80082d0:	4613      	movcs	r3, r2
 80082d2:	461a      	mov	r2, r3
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 ff2f 	bl	800913a <USBD_CtlContinueRx>
 80082dc:	e030      	b.n	8008340 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d105      	bne.n	8008300 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 ff2b 	bl	800915c <USBD_CtlSendStatus>
 8008306:	e01b      	b.n	8008340 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d013      	beq.n	800833c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800831a:	2b03      	cmp	r3, #3
 800831c:	d10e      	bne.n	800833c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	7afa      	ldrb	r2, [r7, #11]
 8008328:	4611      	mov	r1, r2
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	4798      	blx	r3
 800832e:	4603      	mov	r3, r0
 8008330:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	e002      	b.n	8008342 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800833c:	2303      	movs	r3, #3
 800833e:	e000      	b.n	8008342 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	460b      	mov	r3, r1
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d16a      	bne.n	8008434 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3314      	adds	r3, #20
 8008362:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800836a:	2b02      	cmp	r3, #2
 800836c:	d155      	bne.n	800841a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	429a      	cmp	r2, r3
 8008378:	d914      	bls.n	80083a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	1ad2      	subs	r2, r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	461a      	mov	r2, r3
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 fec1 	bl	8009118 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008396:	2300      	movs	r3, #0
 8008398:	2200      	movs	r2, #0
 800839a:	2100      	movs	r1, #0
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f006 faf9 	bl	800e994 <USBD_LL_PrepareReceive>
 80083a2:	e03a      	b.n	800841a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d11c      	bne.n	80083ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d316      	bcc.n	80083ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d20f      	bcs.n	80083ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083ca:	2200      	movs	r2, #0
 80083cc:	2100      	movs	r1, #0
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 fea2 	bl	8009118 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083dc:	2300      	movs	r3, #0
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f006 fad6 	bl	800e994 <USBD_LL_PrepareReceive>
 80083e8:	e017      	b.n	800841a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d105      	bne.n	800840c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800840c:	2180      	movs	r1, #128	; 0x80
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f006 fa16 	bl	800e840 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 feb4 	bl	8009182 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008420:	2b01      	cmp	r3, #1
 8008422:	d123      	bne.n	800846c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7ff fe9b 	bl	8008160 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008432:	e01b      	b.n	800846c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d013      	beq.n	8008468 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008446:	2b03      	cmp	r3, #3
 8008448:	d10e      	bne.n	8008468 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	7afa      	ldrb	r2, [r7, #11]
 8008454:	4611      	mov	r1, r2
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	4798      	blx	r3
 800845a:	4603      	mov	r3, r0
 800845c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	e002      	b.n	800846e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008468:	2303      	movs	r3, #3
 800846a:	e000      	b.n	800846e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d009      	beq.n	80084ba <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	6852      	ldr	r2, [r2, #4]
 80084b2:	b2d2      	uxtb	r2, r2
 80084b4:	4611      	mov	r1, r2
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084ba:	2340      	movs	r3, #64	; 0x40
 80084bc:	2200      	movs	r2, #0
 80084be:	2100      	movs	r1, #0
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f006 f997 	bl	800e7f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2240      	movs	r2, #64	; 0x40
 80084d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084d6:	2340      	movs	r3, #64	; 0x40
 80084d8:	2200      	movs	r2, #0
 80084da:	2180      	movs	r1, #128	; 0x80
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f006 f989 	bl	800e7f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2240      	movs	r2, #64	; 0x40
 80084ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2204      	movs	r2, #4
 8008530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008550:	2b04      	cmp	r3, #4
 8008552:	d105      	bne.n	8008560 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857c:	2b03      	cmp	r3, #3
 800857e:	d10b      	bne.n	8008598 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	6852      	ldr	r2, [r2, #4]
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	4611      	mov	r1, r2
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	4798      	blx	r3
  }

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	3301      	adds	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008642:	8a3b      	ldrh	r3, [r7, #16]
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	b21a      	sxth	r2, r3
 8008648:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800864c:	4313      	orrs	r3, r2
 800864e:	b21b      	sxth	r3, r3
 8008650:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008652:	89fb      	ldrh	r3, [r7, #14]
}
 8008654:	4618      	mov	r0, r3
 8008656:	371c      	adds	r7, #28
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008676:	2b20      	cmp	r3, #32
 8008678:	d004      	beq.n	8008684 <USBD_StdDevReq+0x24>
 800867a:	2b40      	cmp	r3, #64	; 0x40
 800867c:	d002      	beq.n	8008684 <USBD_StdDevReq+0x24>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00a      	beq.n	8008698 <USBD_StdDevReq+0x38>
 8008682:	e050      	b.n	8008726 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	4798      	blx	r3
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
    break;
 8008696:	e04b      	b.n	8008730 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b09      	cmp	r3, #9
 800869e:	d83c      	bhi.n	800871a <USBD_StdDevReq+0xba>
 80086a0:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <USBD_StdDevReq+0x48>)
 80086a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a6:	bf00      	nop
 80086a8:	080086fd 	.word	0x080086fd
 80086ac:	08008711 	.word	0x08008711
 80086b0:	0800871b 	.word	0x0800871b
 80086b4:	08008707 	.word	0x08008707
 80086b8:	0800871b 	.word	0x0800871b
 80086bc:	080086db 	.word	0x080086db
 80086c0:	080086d1 	.word	0x080086d1
 80086c4:	0800871b 	.word	0x0800871b
 80086c8:	080086f3 	.word	0x080086f3
 80086cc:	080086e5 	.word	0x080086e5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f9ce 	bl	8008a74 <USBD_GetDescriptor>
      break;
 80086d8:	e024      	b.n	8008724 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fb33 	bl	8008d48 <USBD_SetAddress>
      break;
 80086e2:	e01f      	b.n	8008724 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fb70 	bl	8008dcc <USBD_SetConfig>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
      break;
 80086f0:	e018      	b.n	8008724 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fc0d 	bl	8008f14 <USBD_GetConfig>
      break;
 80086fa:	e013      	b.n	8008724 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fc3c 	bl	8008f7c <USBD_GetStatus>
      break;
 8008704:	e00e      	b.n	8008724 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fc6a 	bl	8008fe2 <USBD_SetFeature>
      break;
 800870e:	e009      	b.n	8008724 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fc79 	bl	800900a <USBD_ClrFeature>
      break;
 8008718:	e004      	b.n	8008724 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fccf 	bl	80090c0 <USBD_CtlError>
      break;
 8008722:	bf00      	nop
    }
    break;
 8008724:	e004      	b.n	8008730 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fcc9 	bl	80090c0 <USBD_CtlError>
    break;
 800872e:	bf00      	nop
  }

  return ret;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop

0800873c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008752:	2b20      	cmp	r3, #32
 8008754:	d003      	beq.n	800875e <USBD_StdItfReq+0x22>
 8008756:	2b40      	cmp	r3, #64	; 0x40
 8008758:	d001      	beq.n	800875e <USBD_StdItfReq+0x22>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d12a      	bne.n	80087b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008764:	3b01      	subs	r3, #1
 8008766:	2b02      	cmp	r3, #2
 8008768:	d81d      	bhi.n	80087a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	889b      	ldrh	r3, [r3, #4]
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b03      	cmp	r3, #3
 8008772:	d813      	bhi.n	800879c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	88db      	ldrh	r3, [r3, #6]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d110      	bne.n	80087b0 <USBD_StdItfReq+0x74>
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10d      	bne.n	80087b0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fce1 	bl	800915c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800879a:	e009      	b.n	80087b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fc8e 	bl	80090c0 <USBD_CtlError>
      break;
 80087a4:	e004      	b.n	80087b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fc89 	bl	80090c0 <USBD_CtlError>
      break;
 80087ae:	e000      	b.n	80087b2 <USBD_StdItfReq+0x76>
      break;
 80087b0:	bf00      	nop
    }
    break;
 80087b2:	e004      	b.n	80087be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fc82 	bl	80090c0 <USBD_CtlError>
    break;
 80087bc:	bf00      	nop
  }

  return ret;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	889b      	ldrh	r3, [r3, #4]
 80087da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087e4:	2b20      	cmp	r3, #32
 80087e6:	d004      	beq.n	80087f2 <USBD_StdEPReq+0x2a>
 80087e8:	2b40      	cmp	r3, #64	; 0x40
 80087ea:	d002      	beq.n	80087f2 <USBD_StdEPReq+0x2a>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <USBD_StdEPReq+0x3e>
 80087f0:	e135      	b.n	8008a5e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	4798      	blx	r3
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
    break;
 8008804:	e130      	b.n	8008a68 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d03e      	beq.n	800888c <USBD_StdEPReq+0xc4>
 800880e:	2b03      	cmp	r3, #3
 8008810:	d002      	beq.n	8008818 <USBD_StdEPReq+0x50>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d077      	beq.n	8008906 <USBD_StdEPReq+0x13e>
 8008816:	e11c      	b.n	8008a52 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881e:	2b02      	cmp	r3, #2
 8008820:	d002      	beq.n	8008828 <USBD_StdEPReq+0x60>
 8008822:	2b03      	cmp	r3, #3
 8008824:	d015      	beq.n	8008852 <USBD_StdEPReq+0x8a>
 8008826:	e02b      	b.n	8008880 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00c      	beq.n	8008848 <USBD_StdEPReq+0x80>
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	2b80      	cmp	r3, #128	; 0x80
 8008832:	d009      	beq.n	8008848 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f006 f801 	bl	800e840 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800883e:	2180      	movs	r1, #128	; 0x80
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f005 fffd 	bl	800e840 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008846:	e020      	b.n	800888a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fc38 	bl	80090c0 <USBD_CtlError>
        break;
 8008850:	e01b      	b.n	800888a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	885b      	ldrh	r3, [r3, #2]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10e      	bne.n	8008878 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <USBD_StdEPReq+0xb0>
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	2b80      	cmp	r3, #128	; 0x80
 8008864:	d008      	beq.n	8008878 <USBD_StdEPReq+0xb0>
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	88db      	ldrh	r3, [r3, #6]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d104      	bne.n	8008878 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f005 ffe4 	bl	800e840 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fc6f 	bl	800915c <USBD_CtlSendStatus>

        break;
 800887e:	e004      	b.n	800888a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fc1c 	bl	80090c0 <USBD_CtlError>
        break;
 8008888:	bf00      	nop
      }
      break;
 800888a:	e0e7      	b.n	8008a5c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008892:	2b02      	cmp	r3, #2
 8008894:	d002      	beq.n	800889c <USBD_StdEPReq+0xd4>
 8008896:	2b03      	cmp	r3, #3
 8008898:	d015      	beq.n	80088c6 <USBD_StdEPReq+0xfe>
 800889a:	e02d      	b.n	80088f8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00c      	beq.n	80088bc <USBD_StdEPReq+0xf4>
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	2b80      	cmp	r3, #128	; 0x80
 80088a6:	d009      	beq.n	80088bc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f005 ffc7 	bl	800e840 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088b2:	2180      	movs	r1, #128	; 0x80
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f005 ffc3 	bl	800e840 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80088ba:	e023      	b.n	8008904 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fbfe 	bl	80090c0 <USBD_CtlError>
        break;
 80088c4:	e01e      	b.n	8008904 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	885b      	ldrh	r3, [r3, #2]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d119      	bne.n	8008902 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d004      	beq.n	80088e2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f005 ffce 	bl	800e87e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fc3a 	bl	800915c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
        }
        break;
 80088f6:	e004      	b.n	8008902 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fbe0 	bl	80090c0 <USBD_CtlError>
        break;
 8008900:	e000      	b.n	8008904 <USBD_StdEPReq+0x13c>
        break;
 8008902:	bf00      	nop
      }
      break;
 8008904:	e0aa      	b.n	8008a5c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890c:	2b02      	cmp	r3, #2
 800890e:	d002      	beq.n	8008916 <USBD_StdEPReq+0x14e>
 8008910:	2b03      	cmp	r3, #3
 8008912:	d032      	beq.n	800897a <USBD_StdEPReq+0x1b2>
 8008914:	e097      	b.n	8008a46 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d007      	beq.n	800892c <USBD_StdEPReq+0x164>
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b80      	cmp	r3, #128	; 0x80
 8008920:	d004      	beq.n	800892c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fbcb 	bl	80090c0 <USBD_CtlError>
          break;
 800892a:	e091      	b.n	8008a50 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800892c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008930:	2b00      	cmp	r3, #0
 8008932:	da0b      	bge.n	800894c <USBD_StdEPReq+0x184>
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800893a:	4613      	mov	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	3310      	adds	r3, #16
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	4413      	add	r3, r2
 8008948:	3304      	adds	r3, #4
 800894a:	e00b      	b.n	8008964 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008952:	4613      	mov	r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	4413      	add	r3, r2
 8008962:	3304      	adds	r3, #4
 8008964:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2202      	movs	r2, #2
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fbb5 	bl	80090e2 <USBD_CtlSendData>
        break;
 8008978:	e06a      	b.n	8008a50 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800897a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800897e:	2b00      	cmp	r3, #0
 8008980:	da11      	bge.n	80089a6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	f003 020f 	and.w	r2, r3, #15
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	3324      	adds	r3, #36	; 0x24
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d117      	bne.n	80089cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fb8e 	bl	80090c0 <USBD_CtlError>
            break;
 80089a4:	e054      	b.n	8008a50 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	f003 020f 	and.w	r2, r3, #15
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fb7b 	bl	80090c0 <USBD_CtlError>
            break;
 80089ca:	e041      	b.n	8008a50 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	da0b      	bge.n	80089ec <USBD_StdEPReq+0x224>
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	3310      	adds	r3, #16
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	4413      	add	r3, r2
 80089e8:	3304      	adds	r3, #4
 80089ea:	e00b      	b.n	8008a04 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	4413      	add	r3, r2
 8008a02:	3304      	adds	r3, #4
 8008a04:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <USBD_StdEPReq+0x24a>
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b80      	cmp	r3, #128	; 0x80
 8008a10:	d103      	bne.n	8008a1a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	e00e      	b.n	8008a38 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f005 ff4c 	bl	800e8bc <USBD_LL_IsStallEP>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e002      	b.n	8008a38 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fb4f 	bl	80090e2 <USBD_CtlSendData>
          break;
 8008a44:	e004      	b.n	8008a50 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fb39 	bl	80090c0 <USBD_CtlError>
        break;
 8008a4e:	bf00      	nop
      }
      break;
 8008a50:	e004      	b.n	8008a5c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fb33 	bl	80090c0 <USBD_CtlError>
      break;
 8008a5a:	bf00      	nop
    }
    break;
 8008a5c:	e004      	b.n	8008a68 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fb2d 	bl	80090c0 <USBD_CtlError>
    break;
 8008a66:	bf00      	nop
  }

  return ret;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	885b      	ldrh	r3, [r3, #2]
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	2b06      	cmp	r3, #6
 8008a96:	f200 8128 	bhi.w	8008cea <USBD_GetDescriptor+0x276>
 8008a9a:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <USBD_GetDescriptor+0x2c>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008abd 	.word	0x08008abd
 8008aa4:	08008ad5 	.word	0x08008ad5
 8008aa8:	08008b15 	.word	0x08008b15
 8008aac:	08008ceb 	.word	0x08008ceb
 8008ab0:	08008ceb 	.word	0x08008ceb
 8008ab4:	08008c8b 	.word	0x08008c8b
 8008ab8:	08008cb7 	.word	0x08008cb7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	7c12      	ldrb	r2, [r2, #16]
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
 8008ad0:	60f8      	str	r0, [r7, #12]
    break;
 8008ad2:	e112      	b.n	8008cfa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	7c1b      	ldrb	r3, [r3, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10d      	bne.n	8008af8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	f107 0208 	add.w	r2, r7, #8
 8008ae8:	4610      	mov	r0, r2
 8008aea:	4798      	blx	r3
 8008aec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3301      	adds	r3, #1
 8008af2:	2202      	movs	r2, #2
 8008af4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008af6:	e100      	b.n	8008cfa <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	f107 0208 	add.w	r2, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	2202      	movs	r2, #2
 8008b10:	701a      	strb	r2, [r3, #0]
    break;
 8008b12:	e0f2      	b.n	8008cfa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	885b      	ldrh	r3, [r3, #2]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b05      	cmp	r3, #5
 8008b1c:	f200 80ac 	bhi.w	8008c78 <USBD_GetDescriptor+0x204>
 8008b20:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <USBD_GetDescriptor+0xb4>)
 8008b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b26:	bf00      	nop
 8008b28:	08008b41 	.word	0x08008b41
 8008b2c:	08008b75 	.word	0x08008b75
 8008b30:	08008ba9 	.word	0x08008ba9
 8008b34:	08008bdd 	.word	0x08008bdd
 8008b38:	08008c11 	.word	0x08008c11
 8008b3c:	08008c45 	.word	0x08008c45
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	7c12      	ldrb	r2, [r2, #16]
 8008b58:	f107 0108 	add.w	r1, r7, #8
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b62:	e091      	b.n	8008c88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 faaa 	bl	80090c0 <USBD_CtlError>
        err++;
 8008b6c:	7afb      	ldrb	r3, [r7, #11]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	72fb      	strb	r3, [r7, #11]
      break;
 8008b72:	e089      	b.n	8008c88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	7c12      	ldrb	r2, [r2, #16]
 8008b8c:	f107 0108 	add.w	r1, r7, #8
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b96:	e077      	b.n	8008c88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa90 	bl	80090c0 <USBD_CtlError>
        err++;
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ba6:	e06f      	b.n	8008c88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	7c12      	ldrb	r2, [r2, #16]
 8008bc0:	f107 0108 	add.w	r1, r7, #8
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bca:	e05d      	b.n	8008c88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fa76 	bl	80090c0 <USBD_CtlError>
        err++;
 8008bd4:	7afb      	ldrb	r3, [r7, #11]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	72fb      	strb	r3, [r7, #11]
      break;
 8008bda:	e055      	b.n	8008c88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	7c12      	ldrb	r2, [r2, #16]
 8008bf4:	f107 0108 	add.w	r1, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bfe:	e043      	b.n	8008c88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fa5c 	bl	80090c0 <USBD_CtlError>
        err++;
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	72fb      	strb	r3, [r7, #11]
      break;
 8008c0e:	e03b      	b.n	8008c88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	7c12      	ldrb	r2, [r2, #16]
 8008c28:	f107 0108 	add.w	r1, r7, #8
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4798      	blx	r3
 8008c30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c32:	e029      	b.n	8008c88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fa42 	bl	80090c0 <USBD_CtlError>
        err++;
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	72fb      	strb	r3, [r7, #11]
      break;
 8008c42:	e021      	b.n	8008c88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00b      	beq.n	8008c68 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	7c12      	ldrb	r2, [r2, #16]
 8008c5c:	f107 0108 	add.w	r1, r7, #8
 8008c60:	4610      	mov	r0, r2
 8008c62:	4798      	blx	r3
 8008c64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c66:	e00f      	b.n	8008c88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fa28 	bl	80090c0 <USBD_CtlError>
        err++;
 8008c70:	7afb      	ldrb	r3, [r7, #11]
 8008c72:	3301      	adds	r3, #1
 8008c74:	72fb      	strb	r3, [r7, #11]
      break;
 8008c76:	e007      	b.n	8008c88 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa20 	bl	80090c0 <USBD_CtlError>
      err++;
 8008c80:	7afb      	ldrb	r3, [r7, #11]
 8008c82:	3301      	adds	r3, #1
 8008c84:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008c86:	bf00      	nop
    }
    break;
 8008c88:	e037      	b.n	8008cfa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7c1b      	ldrb	r3, [r3, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d109      	bne.n	8008ca6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9a:	f107 0208 	add.w	r2, r7, #8
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4798      	blx	r3
 8008ca2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ca4:	e029      	b.n	8008cfa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa09 	bl	80090c0 <USBD_CtlError>
      err++;
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	72fb      	strb	r3, [r7, #11]
    break;
 8008cb4:	e021      	b.n	8008cfa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	7c1b      	ldrb	r3, [r3, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10d      	bne.n	8008cda <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	f107 0208 	add.w	r2, r7, #8
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4798      	blx	r3
 8008cce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008cd8:	e00f      	b.n	8008cfa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f9ef 	bl	80090c0 <USBD_CtlError>
      err++;
 8008ce2:	7afb      	ldrb	r3, [r7, #11]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	72fb      	strb	r3, [r7, #11]
    break;
 8008ce8:	e007      	b.n	8008cfa <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9e7 	bl	80090c0 <USBD_CtlError>
    err++;
 8008cf2:	7afb      	ldrb	r3, [r7, #11]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	72fb      	strb	r3, [r7, #11]
    break;
 8008cf8:	bf00      	nop
  }

  if (err != 0U)
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d11e      	bne.n	8008d3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	88db      	ldrh	r3, [r3, #6]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d016      	beq.n	8008d36 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008d08:	893b      	ldrh	r3, [r7, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00e      	beq.n	8008d2c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	88da      	ldrh	r2, [r3, #6]
 8008d12:	893b      	ldrh	r3, [r7, #8]
 8008d14:	4293      	cmp	r3, r2
 8008d16:	bf28      	it	cs
 8008d18:	4613      	movcs	r3, r2
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d1e:	893b      	ldrh	r3, [r7, #8]
 8008d20:	461a      	mov	r2, r3
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f9dc 	bl	80090e2 <USBD_CtlSendData>
 8008d2a:	e009      	b.n	8008d40 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f9c6 	bl	80090c0 <USBD_CtlError>
 8008d34:	e004      	b.n	8008d40 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa10 	bl	800915c <USBD_CtlSendStatus>
 8008d3c:	e000      	b.n	8008d40 <USBD_GetDescriptor+0x2cc>
    return;
 8008d3e:	bf00      	nop
    }
  }
}
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop

08008d48 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	889b      	ldrh	r3, [r3, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d130      	bne.n	8008dbc <USBD_SetAddress+0x74>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	88db      	ldrh	r3, [r3, #6]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d12c      	bne.n	8008dbc <USBD_SetAddress+0x74>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	885b      	ldrh	r3, [r3, #2]
 8008d66:	2b7f      	cmp	r3, #127	; 0x7f
 8008d68:	d828      	bhi.n	8008dbc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d104      	bne.n	8008d8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f99c 	bl	80090c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d88:	e01c      	b.n	8008dc4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	7bfa      	ldrb	r2, [r7, #15]
 8008d8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f005 fdbc 	bl	800e914 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f9dd 	bl	800915c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db0:	e008      	b.n	8008dc4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dba:	e003      	b.n	8008dc4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f97e 	bl	80090c0 <USBD_CtlError>
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	4b4b      	ldr	r3, [pc, #300]	; (8008f10 <USBD_SetConfig+0x144>)
 8008de2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008de4:	4b4a      	ldr	r3, [pc, #296]	; (8008f10 <USBD_SetConfig+0x144>)
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d905      	bls.n	8008df8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f966 	bl	80090c0 <USBD_CtlError>
    return USBD_FAIL;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e087      	b.n	8008f08 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d002      	beq.n	8008e08 <USBD_SetConfig+0x3c>
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d025      	beq.n	8008e52 <USBD_SetConfig+0x86>
 8008e06:	e071      	b.n	8008eec <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008e08:	4b41      	ldr	r3, [pc, #260]	; (8008f10 <USBD_SetConfig+0x144>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01c      	beq.n	8008e4a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008e10:	4b3f      	ldr	r3, [pc, #252]	; (8008f10 <USBD_SetConfig+0x144>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e1a:	4b3d      	ldr	r3, [pc, #244]	; (8008f10 <USBD_SetConfig+0x144>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff f9a8 	bl	8008176 <USBD_SetClassConfig>
 8008e26:	4603      	mov	r3, r0
 8008e28:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d004      	beq.n	8008e3a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f944 	bl	80090c0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008e38:	e065      	b.n	8008f06 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f98e 	bl	800915c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2203      	movs	r2, #3
 8008e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008e48:	e05d      	b.n	8008f06 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f986 	bl	800915c <USBD_CtlSendStatus>
    break;
 8008e50:	e059      	b.n	8008f06 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008e52:	4b2f      	ldr	r3, [pc, #188]	; (8008f10 <USBD_SetConfig+0x144>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d112      	bne.n	8008e80 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008e62:	4b2b      	ldr	r3, [pc, #172]	; (8008f10 <USBD_SetConfig+0x144>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e6c:	4b28      	ldr	r3, [pc, #160]	; (8008f10 <USBD_SetConfig+0x144>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff f99b 	bl	80081ae <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f96f 	bl	800915c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008e7e:	e042      	b.n	8008f06 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008e80:	4b23      	ldr	r3, [pc, #140]	; (8008f10 <USBD_SetConfig+0x144>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d02a      	beq.n	8008ee4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff f989 	bl	80081ae <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008e9c:	4b1c      	ldr	r3, [pc, #112]	; (8008f10 <USBD_SetConfig+0x144>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ea6:	4b1a      	ldr	r3, [pc, #104]	; (8008f10 <USBD_SetConfig+0x144>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff f962 	bl	8008176 <USBD_SetClassConfig>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00f      	beq.n	8008edc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f8fe 	bl	80090c0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff f96e 	bl	80081ae <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008eda:	e014      	b.n	8008f06 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f93d 	bl	800915c <USBD_CtlSendStatus>
    break;
 8008ee2:	e010      	b.n	8008f06 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f939 	bl	800915c <USBD_CtlSendStatus>
    break;
 8008eea:	e00c      	b.n	8008f06 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f8e6 	bl	80090c0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ef4:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <USBD_SetConfig+0x144>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff f957 	bl	80081ae <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	73fb      	strb	r3, [r7, #15]
    break;
 8008f04:	bf00      	nop
  }

  return ret;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20000098 	.word	0x20000098

08008f14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	88db      	ldrh	r3, [r3, #6]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d004      	beq.n	8008f30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f8c9 	bl	80090c0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008f2e:	e021      	b.n	8008f74 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	db17      	blt.n	8008f6a <USBD_GetConfig+0x56>
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	dd02      	ble.n	8008f44 <USBD_GetConfig+0x30>
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d00b      	beq.n	8008f5a <USBD_GetConfig+0x46>
 8008f42:	e012      	b.n	8008f6a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	2201      	movs	r2, #1
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f8c5 	bl	80090e2 <USBD_CtlSendData>
      break;
 8008f58:	e00c      	b.n	8008f74 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	2201      	movs	r2, #1
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f8bd 	bl	80090e2 <USBD_CtlSendData>
      break;
 8008f68:	e004      	b.n	8008f74 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f8a7 	bl	80090c0 <USBD_CtlError>
      break;
 8008f72:	bf00      	nop
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d81e      	bhi.n	8008fd0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	88db      	ldrh	r3, [r3, #6]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d004      	beq.n	8008fa4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f88f 	bl	80090c0 <USBD_CtlError>
      break;
 8008fa2:	e01a      	b.n	8008fda <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f043 0202 	orr.w	r2, r3, #2
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	330c      	adds	r3, #12
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f88a 	bl	80090e2 <USBD_CtlSendData>
    break;
 8008fce:	e004      	b.n	8008fda <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f874 	bl	80090c0 <USBD_CtlError>
    break;
 8008fd8:	bf00      	nop
  }
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	885b      	ldrh	r3, [r3, #2]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d106      	bne.n	8009002 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f8ad 	bl	800915c <USBD_CtlSendStatus>
  }
}
 8009002:	bf00      	nop
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800901a:	3b01      	subs	r3, #1
 800901c:	2b02      	cmp	r3, #2
 800901e:	d80b      	bhi.n	8009038 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	885b      	ldrh	r3, [r3, #2]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d10c      	bne.n	8009042 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f893 	bl	800915c <USBD_CtlSendStatus>
      }
      break;
 8009036:	e004      	b.n	8009042 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f840 	bl	80090c0 <USBD_CtlError>
      break;
 8009040:	e000      	b.n	8009044 <USBD_ClrFeature+0x3a>
      break;
 8009042:	bf00      	nop
  }
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	781a      	ldrb	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3301      	adds	r3, #1
 8009066:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	781a      	ldrb	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f7ff fad4 	bl	8008624 <SWAPBYTE>
 800907c:	4603      	mov	r3, r0
 800907e:	461a      	mov	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3301      	adds	r3, #1
 8009088:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3301      	adds	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f7ff fac7 	bl	8008624 <SWAPBYTE>
 8009096:	4603      	mov	r3, r0
 8009098:	461a      	mov	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3301      	adds	r3, #1
 80090a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3301      	adds	r3, #1
 80090a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7ff faba 	bl	8008624 <SWAPBYTE>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	80da      	strh	r2, [r3, #6]
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80090ca:	2180      	movs	r1, #128	; 0x80
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f005 fbb7 	bl	800e840 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80090d2:	2100      	movs	r1, #0
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f005 fbb3 	bl	800e840 <USBD_LL_StallEP>
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	60f8      	str	r0, [r7, #12]
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2202      	movs	r2, #2
 80090f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	2100      	movs	r1, #0
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f005 fc22 	bl	800e952 <USBD_LL_Transmit>

  return USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	2100      	movs	r1, #0
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f005 fc11 	bl	800e952 <USBD_LL_Transmit>

  return USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	2100      	movs	r1, #0
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f005 fc21 	bl	800e994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2204      	movs	r2, #4
 8009168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800916c:	2300      	movs	r3, #0
 800916e:	2200      	movs	r2, #0
 8009170:	2100      	movs	r1, #0
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f005 fbed 	bl	800e952 <USBD_LL_Transmit>

  return USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2205      	movs	r2, #5
 800918e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009192:	2300      	movs	r3, #0
 8009194:	2200      	movs	r2, #0
 8009196:	2100      	movs	r1, #0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f005 fbfb 	bl	800e994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	4603      	mov	r3, r0
 80091b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	4a08      	ldr	r2, [pc, #32]	; (80091d8 <disk_status+0x30>)
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	79fa      	ldrb	r2, [r7, #7]
 80091c0:	4905      	ldr	r1, [pc, #20]	; (80091d8 <disk_status+0x30>)
 80091c2:	440a      	add	r2, r1
 80091c4:	7a12      	ldrb	r2, [r2, #8]
 80091c6:	4610      	mov	r0, r2
 80091c8:	4798      	blx	r3
 80091ca:	4603      	mov	r3, r0
 80091cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	200002c4 	.word	0x200002c4

080091dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	4a0d      	ldr	r2, [pc, #52]	; (8009224 <disk_initialize+0x48>)
 80091ee:	5cd3      	ldrb	r3, [r2, r3]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d111      	bne.n	8009218 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	4a0b      	ldr	r2, [pc, #44]	; (8009224 <disk_initialize+0x48>)
 80091f8:	2101      	movs	r1, #1
 80091fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	4a09      	ldr	r2, [pc, #36]	; (8009224 <disk_initialize+0x48>)
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	79fa      	ldrb	r2, [r7, #7]
 800920a:	4906      	ldr	r1, [pc, #24]	; (8009224 <disk_initialize+0x48>)
 800920c:	440a      	add	r2, r1
 800920e:	7a12      	ldrb	r2, [r2, #8]
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	200002c4 	.word	0x200002c4

08009228 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009228:	b590      	push	{r4, r7, lr}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	607a      	str	r2, [r7, #4]
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	4603      	mov	r3, r0
 8009236:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	4a0a      	ldr	r2, [pc, #40]	; (8009264 <disk_read+0x3c>)
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	689c      	ldr	r4, [r3, #8]
 8009244:	7bfb      	ldrb	r3, [r7, #15]
 8009246:	4a07      	ldr	r2, [pc, #28]	; (8009264 <disk_read+0x3c>)
 8009248:	4413      	add	r3, r2
 800924a:	7a18      	ldrb	r0, [r3, #8]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	47a0      	blx	r4
 8009254:	4603      	mov	r3, r0
 8009256:	75fb      	strb	r3, [r7, #23]
  return res;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
}
 800925a:	4618      	mov	r0, r3
 800925c:	371c      	adds	r7, #28
 800925e:	46bd      	mov	sp, r7
 8009260:	bd90      	pop	{r4, r7, pc}
 8009262:	bf00      	nop
 8009264:	200002c4 	.word	0x200002c4

08009268 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009268:	b590      	push	{r4, r7, lr}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	607a      	str	r2, [r7, #4]
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	4603      	mov	r3, r0
 8009276:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	4a0a      	ldr	r2, [pc, #40]	; (80092a4 <disk_write+0x3c>)
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	68dc      	ldr	r4, [r3, #12]
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	4a07      	ldr	r2, [pc, #28]	; (80092a4 <disk_write+0x3c>)
 8009288:	4413      	add	r3, r2
 800928a:	7a18      	ldrb	r0, [r3, #8]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	47a0      	blx	r4
 8009294:	4603      	mov	r3, r0
 8009296:	75fb      	strb	r3, [r7, #23]
  return res;
 8009298:	7dfb      	ldrb	r3, [r7, #23]
}
 800929a:	4618      	mov	r0, r3
 800929c:	371c      	adds	r7, #28
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd90      	pop	{r4, r7, pc}
 80092a2:	bf00      	nop
 80092a4:	200002c4 	.word	0x200002c4

080092a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	603a      	str	r2, [r7, #0]
 80092b2:	71fb      	strb	r3, [r7, #7]
 80092b4:	460b      	mov	r3, r1
 80092b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	4a09      	ldr	r2, [pc, #36]	; (80092e0 <disk_ioctl+0x38>)
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	79fa      	ldrb	r2, [r7, #7]
 80092c6:	4906      	ldr	r1, [pc, #24]	; (80092e0 <disk_ioctl+0x38>)
 80092c8:	440a      	add	r2, r1
 80092ca:	7a10      	ldrb	r0, [r2, #8]
 80092cc:	79b9      	ldrb	r1, [r7, #6]
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4798      	blx	r3
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	200002c4 	.word	0x200002c4

080092e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3301      	adds	r3, #1
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80092f4:	89fb      	ldrh	r3, [r7, #14]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	b21a      	sxth	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	b21b      	sxth	r3, r3
 8009300:	4313      	orrs	r3, r2
 8009302:	b21b      	sxth	r3, r3
 8009304:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009306:	89fb      	ldrh	r3, [r7, #14]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3303      	adds	r3, #3
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	021b      	lsls	r3, r3, #8
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	3202      	adds	r2, #2
 800932c:	7812      	ldrb	r2, [r2, #0]
 800932e:	4313      	orrs	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	021b      	lsls	r3, r3, #8
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	3201      	adds	r2, #1
 800933a:	7812      	ldrb	r2, [r2, #0]
 800933c:	4313      	orrs	r3, r2
 800933e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	021b      	lsls	r3, r3, #8
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7812      	ldrb	r2, [r2, #0]
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]
	return rv;
 800934c:	68fb      	ldr	r3, [r7, #12]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	887a      	ldrh	r2, [r7, #2]
 800936e:	b2d2      	uxtb	r2, r2
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	887b      	ldrh	r3, [r7, #2]
 8009374:	0a1b      	lsrs	r3, r3, #8
 8009376:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	607a      	str	r2, [r7, #4]
 800937e:	887a      	ldrh	r2, [r7, #2]
 8009380:	b2d2      	uxtb	r2, r2
 8009382:	701a      	strb	r2, [r3, #0]
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	1c5a      	adds	r2, r3, #1
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	701a      	strb	r2, [r3, #0]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	0a1b      	lsrs	r3, r3, #8
 80093aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	1c5a      	adds	r2, r3, #1
 80093b0:	607a      	str	r2, [r7, #4]
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	b2d2      	uxtb	r2, r2
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	b2d2      	uxtb	r2, r2
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	0a1b      	lsrs	r3, r3, #8
 80093ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	607a      	str	r2, [r7, #4]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	b2d2      	uxtb	r2, r2
 80093da:	701a      	strb	r2, [r3, #0]
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00d      	beq.n	800941e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	1c53      	adds	r3, r2, #1
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	1c59      	adds	r1, r3, #1
 800940c:	6179      	str	r1, [r7, #20]
 800940e:	7812      	ldrb	r2, [r2, #0]
 8009410:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3b01      	subs	r3, #1
 8009416:	607b      	str	r3, [r7, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1f1      	bne.n	8009402 <mem_cpy+0x1a>
	}
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800942a:	b480      	push	{r7}
 800942c:	b087      	sub	sp, #28
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	617a      	str	r2, [r7, #20]
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3b01      	subs	r3, #1
 800944a:	607b      	str	r3, [r7, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1f3      	bne.n	800943a <mem_set+0x10>
}
 8009452:	bf00      	nop
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800945e:	b480      	push	{r7}
 8009460:	b089      	sub	sp, #36	; 0x24
 8009462:	af00      	add	r7, sp, #0
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	61fb      	str	r3, [r7, #28]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	61fa      	str	r2, [r7, #28]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	4619      	mov	r1, r3
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	61ba      	str	r2, [r7, #24]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	1acb      	subs	r3, r1, r3
 800948a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3b01      	subs	r3, #1
 8009490:	607b      	str	r3, [r7, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <mem_cmp+0x40>
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0eb      	beq.n	8009476 <mem_cmp+0x18>

	return r;
 800949e:	697b      	ldr	r3, [r7, #20]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3724      	adds	r7, #36	; 0x24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80094b6:	e002      	b.n	80094be <chk_chr+0x12>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3301      	adds	r3, #1
 80094bc:	607b      	str	r3, [r7, #4]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <chk_chr+0x26>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d1f2      	bne.n	80094b8 <chk_chr+0xc>
	return *str;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	781b      	ldrb	r3, [r3, #0]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80094ee:	2300      	movs	r3, #0
 80094f0:	60bb      	str	r3, [r7, #8]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	e029      	b.n	800954c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80094f8:	4a27      	ldr	r2, [pc, #156]	; (8009598 <chk_lock+0xb4>)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	011b      	lsls	r3, r3, #4
 80094fe:	4413      	add	r3, r2
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d01d      	beq.n	8009542 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009506:	4a24      	ldr	r2, [pc, #144]	; (8009598 <chk_lock+0xb4>)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	4413      	add	r3, r2
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	429a      	cmp	r2, r3
 8009516:	d116      	bne.n	8009546 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009518:	4a1f      	ldr	r2, [pc, #124]	; (8009598 <chk_lock+0xb4>)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	4413      	add	r3, r2
 8009520:	3304      	adds	r3, #4
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009528:	429a      	cmp	r2, r3
 800952a:	d10c      	bne.n	8009546 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800952c:	4a1a      	ldr	r2, [pc, #104]	; (8009598 <chk_lock+0xb4>)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	4413      	add	r3, r2
 8009534:	3308      	adds	r3, #8
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800953c:	429a      	cmp	r2, r3
 800953e:	d102      	bne.n	8009546 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009540:	e007      	b.n	8009552 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009542:	2301      	movs	r3, #1
 8009544:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3301      	adds	r3, #1
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d9d2      	bls.n	80094f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b02      	cmp	r3, #2
 8009556:	d109      	bne.n	800956c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <chk_lock+0x80>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b02      	cmp	r3, #2
 8009562:	d101      	bne.n	8009568 <chk_lock+0x84>
 8009564:	2300      	movs	r3, #0
 8009566:	e010      	b.n	800958a <chk_lock+0xa6>
 8009568:	2312      	movs	r3, #18
 800956a:	e00e      	b.n	800958a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d108      	bne.n	8009584 <chk_lock+0xa0>
 8009572:	4a09      	ldr	r2, [pc, #36]	; (8009598 <chk_lock+0xb4>)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	011b      	lsls	r3, r3, #4
 8009578:	4413      	add	r3, r2
 800957a:	330c      	adds	r3, #12
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009582:	d101      	bne.n	8009588 <chk_lock+0xa4>
 8009584:	2310      	movs	r3, #16
 8009586:	e000      	b.n	800958a <chk_lock+0xa6>
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	200000a4 	.word	0x200000a4

0800959c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	e002      	b.n	80095ae <enq_lock+0x12>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3301      	adds	r3, #1
 80095ac:	607b      	str	r3, [r7, #4]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d806      	bhi.n	80095c2 <enq_lock+0x26>
 80095b4:	4a09      	ldr	r2, [pc, #36]	; (80095dc <enq_lock+0x40>)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	4413      	add	r3, r2
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1f2      	bne.n	80095a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	bf14      	ite	ne
 80095c8:	2301      	movne	r3, #1
 80095ca:	2300      	moveq	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	200000a4 	.word	0x200000a4

080095e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
 80095ee:	e01f      	b.n	8009630 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80095f0:	4a41      	ldr	r2, [pc, #260]	; (80096f8 <inc_lock+0x118>)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	011b      	lsls	r3, r3, #4
 80095f6:	4413      	add	r3, r2
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d113      	bne.n	800962a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009602:	4a3d      	ldr	r2, [pc, #244]	; (80096f8 <inc_lock+0x118>)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	4413      	add	r3, r2
 800960a:	3304      	adds	r3, #4
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009612:	429a      	cmp	r2, r3
 8009614:	d109      	bne.n	800962a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009616:	4a38      	ldr	r2, [pc, #224]	; (80096f8 <inc_lock+0x118>)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	4413      	add	r3, r2
 800961e:	3308      	adds	r3, #8
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009626:	429a      	cmp	r2, r3
 8009628:	d006      	beq.n	8009638 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3301      	adds	r3, #1
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d9dc      	bls.n	80095f0 <inc_lock+0x10>
 8009636:	e000      	b.n	800963a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009638:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b02      	cmp	r3, #2
 800963e:	d132      	bne.n	80096a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009640:	2300      	movs	r3, #0
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	e002      	b.n	800964c <inc_lock+0x6c>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3301      	adds	r3, #1
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d806      	bhi.n	8009660 <inc_lock+0x80>
 8009652:	4a29      	ldr	r2, [pc, #164]	; (80096f8 <inc_lock+0x118>)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	011b      	lsls	r3, r3, #4
 8009658:	4413      	add	r3, r2
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1f2      	bne.n	8009646 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b02      	cmp	r3, #2
 8009664:	d101      	bne.n	800966a <inc_lock+0x8a>
 8009666:	2300      	movs	r3, #0
 8009668:	e040      	b.n	80096ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	4922      	ldr	r1, [pc, #136]	; (80096f8 <inc_lock+0x118>)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	011b      	lsls	r3, r3, #4
 8009674:	440b      	add	r3, r1
 8009676:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	491e      	ldr	r1, [pc, #120]	; (80096f8 <inc_lock+0x118>)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	440b      	add	r3, r1
 8009684:	3304      	adds	r3, #4
 8009686:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	695a      	ldr	r2, [r3, #20]
 800968c:	491a      	ldr	r1, [pc, #104]	; (80096f8 <inc_lock+0x118>)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	440b      	add	r3, r1
 8009694:	3308      	adds	r3, #8
 8009696:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009698:	4a17      	ldr	r2, [pc, #92]	; (80096f8 <inc_lock+0x118>)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	011b      	lsls	r3, r3, #4
 800969e:	4413      	add	r3, r2
 80096a0:	330c      	adds	r3, #12
 80096a2:	2200      	movs	r2, #0
 80096a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d009      	beq.n	80096c0 <inc_lock+0xe0>
 80096ac:	4a12      	ldr	r2, [pc, #72]	; (80096f8 <inc_lock+0x118>)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	011b      	lsls	r3, r3, #4
 80096b2:	4413      	add	r3, r2
 80096b4:	330c      	adds	r3, #12
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <inc_lock+0xe0>
 80096bc:	2300      	movs	r3, #0
 80096be:	e015      	b.n	80096ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d108      	bne.n	80096d8 <inc_lock+0xf8>
 80096c6:	4a0c      	ldr	r2, [pc, #48]	; (80096f8 <inc_lock+0x118>)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	4413      	add	r3, r2
 80096ce:	330c      	adds	r3, #12
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	3301      	adds	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	e001      	b.n	80096dc <inc_lock+0xfc>
 80096d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096dc:	4906      	ldr	r1, [pc, #24]	; (80096f8 <inc_lock+0x118>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	440b      	add	r3, r1
 80096e4:	330c      	adds	r3, #12
 80096e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3301      	adds	r3, #1
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	200000a4 	.word	0x200000a4

080096fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3b01      	subs	r3, #1
 8009708:	607b      	str	r3, [r7, #4]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d825      	bhi.n	800975c <dec_lock+0x60>
		n = Files[i].ctr;
 8009710:	4a17      	ldr	r2, [pc, #92]	; (8009770 <dec_lock+0x74>)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	4413      	add	r3, r2
 8009718:	330c      	adds	r3, #12
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800971e:	89fb      	ldrh	r3, [r7, #14]
 8009720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009724:	d101      	bne.n	800972a <dec_lock+0x2e>
 8009726:	2300      	movs	r3, #0
 8009728:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800972a:	89fb      	ldrh	r3, [r7, #14]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <dec_lock+0x3a>
 8009730:	89fb      	ldrh	r3, [r7, #14]
 8009732:	3b01      	subs	r3, #1
 8009734:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009736:	4a0e      	ldr	r2, [pc, #56]	; (8009770 <dec_lock+0x74>)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	011b      	lsls	r3, r3, #4
 800973c:	4413      	add	r3, r2
 800973e:	330c      	adds	r3, #12
 8009740:	89fa      	ldrh	r2, [r7, #14]
 8009742:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009744:	89fb      	ldrh	r3, [r7, #14]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d105      	bne.n	8009756 <dec_lock+0x5a>
 800974a:	4a09      	ldr	r2, [pc, #36]	; (8009770 <dec_lock+0x74>)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	4413      	add	r3, r2
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	737b      	strb	r3, [r7, #13]
 800975a:	e001      	b.n	8009760 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800975c:	2302      	movs	r3, #2
 800975e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009760:	7b7b      	ldrb	r3, [r7, #13]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	200000a4 	.word	0x200000a4

08009774 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800977c:	2300      	movs	r3, #0
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	e010      	b.n	80097a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009782:	4a0d      	ldr	r2, [pc, #52]	; (80097b8 <clear_lock+0x44>)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	011b      	lsls	r3, r3, #4
 8009788:	4413      	add	r3, r2
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	429a      	cmp	r2, r3
 8009790:	d105      	bne.n	800979e <clear_lock+0x2a>
 8009792:	4a09      	ldr	r2, [pc, #36]	; (80097b8 <clear_lock+0x44>)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	011b      	lsls	r3, r3, #4
 8009798:	4413      	add	r3, r2
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3301      	adds	r3, #1
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d9eb      	bls.n	8009782 <clear_lock+0xe>
	}
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	200000a4 	.word	0x200000a4

080097bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	78db      	ldrb	r3, [r3, #3]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d034      	beq.n	800983a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	7858      	ldrb	r0, [r3, #1]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80097e0:	2301      	movs	r3, #1
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	f7ff fd40 	bl	8009268 <disk_write>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	73fb      	strb	r3, [r7, #15]
 80097f2:	e022      	b.n	800983a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	1ad2      	subs	r2, r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	429a      	cmp	r2, r3
 8009808:	d217      	bcs.n	800983a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	789b      	ldrb	r3, [r3, #2]
 800980e:	613b      	str	r3, [r7, #16]
 8009810:	e010      	b.n	8009834 <sync_window+0x78>
					wsect += fs->fsize;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4413      	add	r3, r2
 800981a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	7858      	ldrb	r0, [r3, #1]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009826:	2301      	movs	r3, #1
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	f7ff fd1d 	bl	8009268 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	3b01      	subs	r3, #1
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d8eb      	bhi.n	8009812 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	429a      	cmp	r2, r3
 800985a:	d01b      	beq.n	8009894 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff ffad 	bl	80097bc <sync_window>
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d113      	bne.n	8009894 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	7858      	ldrb	r0, [r3, #1]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009876:	2301      	movs	r3, #1
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	f7ff fcd5 	bl	8009228 <disk_read>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d004      	beq.n	800988e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009884:	f04f 33ff 	mov.w	r3, #4294967295
 8009888:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800988a:	2301      	movs	r3, #1
 800988c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff ff87 	bl	80097bc <sync_window>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d158      	bne.n	800996a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d148      	bne.n	8009952 <sync_fs+0xb2>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	791b      	ldrb	r3, [r3, #4]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d144      	bne.n	8009952 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3334      	adds	r3, #52	; 0x34
 80098cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098d0:	2100      	movs	r1, #0
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fda9 	bl	800942a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3334      	adds	r3, #52	; 0x34
 80098dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7ff fd38 	bl	800935a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3334      	adds	r3, #52	; 0x34
 80098ee:	4921      	ldr	r1, [pc, #132]	; (8009974 <sync_fs+0xd4>)
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff fd4d 	bl	8009390 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3334      	adds	r3, #52	; 0x34
 80098fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80098fe:	491e      	ldr	r1, [pc, #120]	; (8009978 <sync_fs+0xd8>)
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fd45 	bl	8009390 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3334      	adds	r3, #52	; 0x34
 800990a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	4619      	mov	r1, r3
 8009914:	4610      	mov	r0, r2
 8009916:	f7ff fd3b 	bl	8009390 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3334      	adds	r3, #52	; 0x34
 800991e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7ff fd31 	bl	8009390 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7858      	ldrb	r0, [r3, #1]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009946:	2301      	movs	r3, #1
 8009948:	f7ff fc8e 	bl	8009268 <disk_write>
			fs->fsi_flag = 0;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	2200      	movs	r2, #0
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff fca4 	bl	80092a8 <disk_ioctl>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <sync_fs+0xca>
 8009966:	2301      	movs	r3, #1
 8009968:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800996a:	7bfb      	ldrb	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	41615252 	.word	0x41615252
 8009978:	61417272 	.word	0x61417272

0800997c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	3b02      	subs	r3, #2
 800998a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	3b02      	subs	r3, #2
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d301      	bcc.n	800999c <clust2sect+0x20>
 8009998:	2300      	movs	r3, #0
 800999a:	e008      	b.n	80099ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	895b      	ldrh	r3, [r3, #10]
 80099a0:	461a      	mov	r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	fb03 f202 	mul.w	r2, r3, r2
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	4413      	add	r3, r2
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b086      	sub	sp, #24
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d904      	bls.n	80099da <get_fat+0x20>
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d302      	bcc.n	80099e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80099da:	2301      	movs	r3, #1
 80099dc:	617b      	str	r3, [r7, #20]
 80099de:	e08c      	b.n	8009afa <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80099e0:	f04f 33ff 	mov.w	r3, #4294967295
 80099e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d045      	beq.n	8009a7a <get_fat+0xc0>
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d05d      	beq.n	8009aae <get_fat+0xf4>
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d177      	bne.n	8009ae6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	60fb      	str	r3, [r7, #12]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	085b      	lsrs	r3, r3, #1
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	4413      	add	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	0a5b      	lsrs	r3, r3, #9
 8009a0c:	4413      	add	r3, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6938      	ldr	r0, [r7, #16]
 8009a12:	f7ff ff17 	bl	8009844 <move_window>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d167      	bne.n	8009aec <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	60fa      	str	r2, [r7, #12]
 8009a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a2e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	0a5b      	lsrs	r3, r3, #9
 8009a38:	4413      	add	r3, r2
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6938      	ldr	r0, [r7, #16]
 8009a3e:	f7ff ff01 	bl	8009844 <move_window>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d153      	bne.n	8009af0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	4413      	add	r3, r2
 8009a52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a56:	021b      	lsls	r3, r3, #8
 8009a58:	461a      	mov	r2, r3
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d002      	beq.n	8009a70 <get_fat+0xb6>
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	091b      	lsrs	r3, r3, #4
 8009a6e:	e002      	b.n	8009a76 <get_fat+0xbc>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a76:	617b      	str	r3, [r7, #20]
			break;
 8009a78:	e03f      	b.n	8009afa <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	0a1b      	lsrs	r3, r3, #8
 8009a82:	4413      	add	r3, r2
 8009a84:	4619      	mov	r1, r3
 8009a86:	6938      	ldr	r0, [r7, #16]
 8009a88:	f7ff fedc 	bl	8009844 <move_window>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d130      	bne.n	8009af4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009aa0:	4413      	add	r3, r2
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff fc1e 	bl	80092e4 <ld_word>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	617b      	str	r3, [r7, #20]
			break;
 8009aac:	e025      	b.n	8009afa <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	09db      	lsrs	r3, r3, #7
 8009ab6:	4413      	add	r3, r2
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6938      	ldr	r0, [r7, #16]
 8009abc:	f7ff fec2 	bl	8009844 <move_window>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d118      	bne.n	8009af8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009ad4:	4413      	add	r3, r2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff fc1c 	bl	8009314 <ld_dword>
 8009adc:	4603      	mov	r3, r0
 8009ade:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009ae2:	617b      	str	r3, [r7, #20]
			break;
 8009ae4:	e009      	b.n	8009afa <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	e006      	b.n	8009afa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009aec:	bf00      	nop
 8009aee:	e004      	b.n	8009afa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009af0:	bf00      	nop
 8009af2:	e002      	b.n	8009afa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009af4:	bf00      	nop
 8009af6:	e000      	b.n	8009afa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009af8:	bf00      	nop
		}
	}

	return val;
 8009afa:	697b      	ldr	r3, [r7, #20]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009b04:	b590      	push	{r4, r7, lr}
 8009b06:	b089      	sub	sp, #36	; 0x24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009b10:	2302      	movs	r3, #2
 8009b12:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	f240 80d6 	bls.w	8009cc8 <put_fat+0x1c4>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	f080 80d0 	bcs.w	8009cc8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d073      	beq.n	8009c18 <put_fat+0x114>
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	f000 8091 	beq.w	8009c58 <put_fat+0x154>
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	f040 80c6 	bne.w	8009cc8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	61bb      	str	r3, [r7, #24]
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	085b      	lsrs	r3, r3, #1
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	4413      	add	r3, r2
 8009b48:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	0a5b      	lsrs	r3, r3, #9
 8009b52:	4413      	add	r3, r2
 8009b54:	4619      	mov	r1, r3
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff fe74 	bl	8009844 <move_window>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b60:	7ffb      	ldrb	r3, [r7, #31]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f040 80a9 	bne.w	8009cba <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	1c59      	adds	r1, r3, #1
 8009b72:	61b9      	str	r1, [r7, #24]
 8009b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b78:	4413      	add	r3, r2
 8009b7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00d      	beq.n	8009ba2 <put_fat+0x9e>
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	b25b      	sxtb	r3, r3
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	b25a      	sxtb	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	011b      	lsls	r3, r3, #4
 8009b98:	b25b      	sxtb	r3, r3
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	b25b      	sxtb	r3, r3
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	e001      	b.n	8009ba6 <put_fat+0xa2>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2201      	movs	r2, #1
 8009bae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	0a5b      	lsrs	r3, r3, #9
 8009bb8:	4413      	add	r3, r2
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7ff fe41 	bl	8009844 <move_window>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009bc6:	7ffb      	ldrb	r3, [r7, #31]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d178      	bne.n	8009cbe <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd8:	4413      	add	r3, r2
 8009bda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <put_fat+0xea>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	091b      	lsrs	r3, r3, #4
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	e00e      	b.n	8009c0c <put_fat+0x108>
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	b25b      	sxtb	r3, r3
 8009bf4:	f023 030f 	bic.w	r3, r3, #15
 8009bf8:	b25a      	sxtb	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	0a1b      	lsrs	r3, r3, #8
 8009bfe:	b25b      	sxtb	r3, r3
 8009c00:	f003 030f 	and.w	r3, r3, #15
 8009c04:	b25b      	sxtb	r3, r3
 8009c06:	4313      	orrs	r3, r2
 8009c08:	b25b      	sxtb	r3, r3
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2201      	movs	r2, #1
 8009c14:	70da      	strb	r2, [r3, #3]
			break;
 8009c16:	e057      	b.n	8009cc8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	0a1b      	lsrs	r3, r3, #8
 8009c20:	4413      	add	r3, r2
 8009c22:	4619      	mov	r1, r3
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7ff fe0d 	bl	8009844 <move_window>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c2e:	7ffb      	ldrb	r3, [r7, #31]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d146      	bne.n	8009cc2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009c42:	4413      	add	r3, r2
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	b292      	uxth	r2, r2
 8009c48:	4611      	mov	r1, r2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7ff fb85 	bl	800935a <st_word>
			fs->wflag = 1;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2201      	movs	r2, #1
 8009c54:	70da      	strb	r2, [r3, #3]
			break;
 8009c56:	e037      	b.n	8009cc8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	09db      	lsrs	r3, r3, #7
 8009c60:	4413      	add	r3, r2
 8009c62:	4619      	mov	r1, r3
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7ff fded 	bl	8009844 <move_window>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c6e:	7ffb      	ldrb	r3, [r7, #31]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d128      	bne.n	8009cc6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009c88:	4413      	add	r3, r2
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7ff fb42 	bl	8009314 <ld_dword>
 8009c90:	4603      	mov	r3, r0
 8009c92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009c96:	4323      	orrs	r3, r4
 8009c98:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009ca8:	4413      	add	r3, r2
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7ff fb6f 	bl	8009390 <st_dword>
			fs->wflag = 1;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	70da      	strb	r2, [r3, #3]
			break;
 8009cb8:	e006      	b.n	8009cc8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009cba:	bf00      	nop
 8009cbc:	e004      	b.n	8009cc8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009cbe:	bf00      	nop
 8009cc0:	e002      	b.n	8009cc8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009cc2:	bf00      	nop
 8009cc4:	e000      	b.n	8009cc8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009cc6:	bf00      	nop
		}
	}
	return res;
 8009cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3724      	adds	r7, #36	; 0x24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd90      	pop	{r4, r7, pc}

08009cd2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b088      	sub	sp, #32
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d904      	bls.n	8009cf8 <remove_chain+0x26>
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d301      	bcc.n	8009cfc <remove_chain+0x2a>
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	e04b      	b.n	8009d94 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00c      	beq.n	8009d1c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009d02:	f04f 32ff 	mov.w	r2, #4294967295
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	69b8      	ldr	r0, [r7, #24]
 8009d0a:	f7ff fefb 	bl	8009b04 <put_fat>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009d12:	7ffb      	ldrb	r3, [r7, #31]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <remove_chain+0x4a>
 8009d18:	7ffb      	ldrb	r3, [r7, #31]
 8009d1a:	e03b      	b.n	8009d94 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f7ff fe4b 	bl	80099ba <get_fat>
 8009d24:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d031      	beq.n	8009d90 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <remove_chain+0x64>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e02e      	b.n	8009d94 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3c:	d101      	bne.n	8009d42 <remove_chain+0x70>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e028      	b.n	8009d94 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009d42:	2200      	movs	r2, #0
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	69b8      	ldr	r0, [r7, #24]
 8009d48:	f7ff fedc 	bl	8009b04 <put_fat>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009d50:	7ffb      	ldrb	r3, [r7, #31]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <remove_chain+0x88>
 8009d56:	7ffb      	ldrb	r3, [r7, #31]
 8009d58:	e01c      	b.n	8009d94 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	695a      	ldr	r2, [r3, #20]
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	3b02      	subs	r3, #2
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d20b      	bcs.n	8009d80 <remove_chain+0xae>
			fs->free_clst++;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	791b      	ldrb	r3, [r3, #4]
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d3c6      	bcc.n	8009d1c <remove_chain+0x4a>
 8009d8e:	e000      	b.n	8009d92 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009d90:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3720      	adds	r7, #32
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10d      	bne.n	8009dce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d004      	beq.n	8009dc8 <create_chain+0x2c>
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d31b      	bcc.n	8009e00 <create_chain+0x64>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	61bb      	str	r3, [r7, #24]
 8009dcc:	e018      	b.n	8009e00 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff fdf2 	bl	80099ba <get_fat>
 8009dd6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d801      	bhi.n	8009de2 <create_chain+0x46>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e070      	b.n	8009ec4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d101      	bne.n	8009dee <create_chain+0x52>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	e06a      	b.n	8009ec4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d201      	bcs.n	8009dfc <create_chain+0x60>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	e063      	b.n	8009ec4 <create_chain+0x128>
		scl = clst;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	3301      	adds	r3, #1
 8009e08:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	69fa      	ldr	r2, [r7, #28]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d307      	bcc.n	8009e24 <create_chain+0x88>
				ncl = 2;
 8009e14:	2302      	movs	r3, #2
 8009e16:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009e18:	69fa      	ldr	r2, [r7, #28]
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d901      	bls.n	8009e24 <create_chain+0x88>
 8009e20:	2300      	movs	r3, #0
 8009e22:	e04f      	b.n	8009ec4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009e24:	69f9      	ldr	r1, [r7, #28]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7ff fdc7 	bl	80099ba <get_fat>
 8009e2c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00e      	beq.n	8009e52 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d003      	beq.n	8009e42 <create_chain+0xa6>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e40:	d101      	bne.n	8009e46 <create_chain+0xaa>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	e03e      	b.n	8009ec4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d1da      	bne.n	8009e04 <create_chain+0x68>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e038      	b.n	8009ec4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009e52:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009e54:	f04f 32ff 	mov.w	r2, #4294967295
 8009e58:	69f9      	ldr	r1, [r7, #28]
 8009e5a:	6938      	ldr	r0, [r7, #16]
 8009e5c:	f7ff fe52 	bl	8009b04 <put_fat>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d109      	bne.n	8009e7e <create_chain+0xe2>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d006      	beq.n	8009e7e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009e70:	69fa      	ldr	r2, [r7, #28]
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6938      	ldr	r0, [r7, #16]
 8009e76:	f7ff fe45 	bl	8009b04 <put_fat>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d116      	bne.n	8009eb2 <create_chain+0x116>
		fs->last_clst = ncl;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	69fa      	ldr	r2, [r7, #28]
 8009e88:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	695a      	ldr	r2, [r3, #20]
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	3b02      	subs	r3, #2
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d804      	bhi.n	8009ea2 <create_chain+0x106>
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	1e5a      	subs	r2, r3, #1
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	791b      	ldrb	r3, [r3, #4]
 8009ea6:	f043 0301 	orr.w	r3, r3, #1
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	711a      	strb	r2, [r3, #4]
 8009eb0:	e007      	b.n	8009ec2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d102      	bne.n	8009ebe <create_chain+0x122>
 8009eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ebc:	e000      	b.n	8009ec0 <create_chain+0x124>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009ec2:	69fb      	ldr	r3, [r7, #28]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3720      	adds	r7, #32
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	0a5b      	lsrs	r3, r3, #9
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	8952      	ldrh	r2, [r2, #10]
 8009eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ef0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	1d1a      	adds	r2, r3, #4
 8009ef6:	613a      	str	r2, [r7, #16]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <clmt_clust+0x3a>
 8009f02:	2300      	movs	r3, #0
 8009f04:	e010      	b.n	8009f28 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d307      	bcc.n	8009f1e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f1c:	e7e9      	b.n	8009ef2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009f1e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	4413      	add	r3, r2
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	371c      	adds	r7, #28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f4a:	d204      	bcs.n	8009f56 <dir_sdi+0x22>
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	f003 031f 	and.w	r3, r3, #31
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009f56:	2302      	movs	r3, #2
 8009f58:	e063      	b.n	800a022 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d106      	bne.n	8009f7a <dir_sdi+0x46>
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d902      	bls.n	8009f7a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f78:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10c      	bne.n	8009f9a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	095b      	lsrs	r3, r3, #5
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	8912      	ldrh	r2, [r2, #8]
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d301      	bcc.n	8009f90 <dir_sdi+0x5c>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	e048      	b.n	800a022 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	61da      	str	r2, [r3, #28]
 8009f98:	e029      	b.n	8009fee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	895b      	ldrh	r3, [r3, #10]
 8009f9e:	025b      	lsls	r3, r3, #9
 8009fa0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009fa2:	e019      	b.n	8009fd8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6979      	ldr	r1, [r7, #20]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7ff fd06 	bl	80099ba <get_fat>
 8009fae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb6:	d101      	bne.n	8009fbc <dir_sdi+0x88>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e032      	b.n	800a022 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d904      	bls.n	8009fcc <dir_sdi+0x98>
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d301      	bcc.n	8009fd0 <dir_sdi+0x9c>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e028      	b.n	800a022 <dir_sdi+0xee>
			ofs -= csz;
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d2e1      	bcs.n	8009fa4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009fe0:	6979      	ldr	r1, [r7, #20]
 8009fe2:	6938      	ldr	r0, [r7, #16]
 8009fe4:	f7ff fcca 	bl	800997c <clust2sect>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <dir_sdi+0xcc>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e010      	b.n	800a022 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	69da      	ldr	r2, [r3, #28]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	0a5b      	lsrs	r3, r3, #9
 800a008:	441a      	add	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a01a:	441a      	add	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b086      	sub	sp, #24
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	3320      	adds	r3, #32
 800a040:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <dir_next+0x28>
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a050:	d301      	bcc.n	800a056 <dir_next+0x2c>
 800a052:	2304      	movs	r3, #4
 800a054:	e0aa      	b.n	800a1ac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f040 8098 	bne.w	800a192 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10b      	bne.n	800a08c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	095b      	lsrs	r3, r3, #5
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	8912      	ldrh	r2, [r2, #8]
 800a07c:	4293      	cmp	r3, r2
 800a07e:	f0c0 8088 	bcc.w	800a192 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	61da      	str	r2, [r3, #28]
 800a088:	2304      	movs	r3, #4
 800a08a:	e08f      	b.n	800a1ac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	0a5b      	lsrs	r3, r3, #9
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	8952      	ldrh	r2, [r2, #10]
 800a094:	3a01      	subs	r2, #1
 800a096:	4013      	ands	r3, r2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d17a      	bne.n	800a192 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	f7ff fc88 	bl	80099ba <get_fat>
 800a0aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d801      	bhi.n	800a0b6 <dir_next+0x8c>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e07a      	b.n	800a1ac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d101      	bne.n	800a0c2 <dir_next+0x98>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e074      	b.n	800a1ac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d358      	bcc.n	800a17e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d104      	bne.n	800a0dc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	61da      	str	r2, [r3, #28]
 800a0d8:	2304      	movs	r3, #4
 800a0da:	e067      	b.n	800a1ac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	f7ff fe59 	bl	8009d9c <create_chain>
 800a0ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <dir_next+0xcc>
 800a0f2:	2307      	movs	r3, #7
 800a0f4:	e05a      	b.n	800a1ac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d101      	bne.n	800a100 <dir_next+0xd6>
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	e055      	b.n	800a1ac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a106:	d101      	bne.n	800a10c <dir_next+0xe2>
 800a108:	2301      	movs	r3, #1
 800a10a:	e04f      	b.n	800a1ac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7ff fb55 	bl	80097bc <sync_window>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <dir_next+0xf2>
 800a118:	2301      	movs	r3, #1
 800a11a:	e047      	b.n	800a1ac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	3334      	adds	r3, #52	; 0x34
 800a120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a124:	2100      	movs	r1, #0
 800a126:	4618      	mov	r0, r3
 800a128:	f7ff f97f 	bl	800942a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a12c:	2300      	movs	r3, #0
 800a12e:	613b      	str	r3, [r7, #16]
 800a130:	6979      	ldr	r1, [r7, #20]
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7ff fc22 	bl	800997c <clust2sect>
 800a138:	4602      	mov	r2, r0
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	631a      	str	r2, [r3, #48]	; 0x30
 800a13e:	e012      	b.n	800a166 <dir_next+0x13c>
						fs->wflag = 1;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2201      	movs	r2, #1
 800a144:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7ff fb38 	bl	80097bc <sync_window>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <dir_next+0x12c>
 800a152:	2301      	movs	r3, #1
 800a154:	e02a      	b.n	800a1ac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	3301      	adds	r3, #1
 800a15a:	613b      	str	r3, [r7, #16]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	631a      	str	r2, [r3, #48]	; 0x30
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	895b      	ldrh	r3, [r3, #10]
 800a16a:	461a      	mov	r2, r3
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	4293      	cmp	r3, r2
 800a170:	d3e6      	bcc.n	800a140 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	1ad2      	subs	r2, r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a184:	6979      	ldr	r1, [r7, #20]
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7ff fbf8 	bl	800997c <clust2sect>
 800a18c:	4602      	mov	r2, r0
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a4:	441a      	add	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3718      	adds	r7, #24
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff feb4 	bl	8009f34 <dir_sdi>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d12b      	bne.n	800a22e <dir_alloc+0x7a>
		n = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7ff fb2f 	bl	8009844 <move_window>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d11d      	bne.n	800a22c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	2be5      	cmp	r3, #229	; 0xe5
 800a1f8:	d004      	beq.n	800a204 <dir_alloc+0x50>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d107      	bne.n	800a214 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	3301      	adds	r3, #1
 800a208:	613b      	str	r3, [r7, #16]
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d102      	bne.n	800a218 <dir_alloc+0x64>
 800a212:	e00c      	b.n	800a22e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a214:	2300      	movs	r3, #0
 800a216:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a218:	2101      	movs	r1, #1
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff ff05 	bl	800a02a <dir_next>
 800a220:	4603      	mov	r3, r0
 800a222:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0d7      	beq.n	800a1da <dir_alloc+0x26>
 800a22a:	e000      	b.n	800a22e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a22c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	2b04      	cmp	r3, #4
 800a232:	d101      	bne.n	800a238 <dir_alloc+0x84>
 800a234:	2307      	movs	r3, #7
 800a236:	75fb      	strb	r3, [r7, #23]
	return res;
 800a238:	7dfb      	ldrb	r3, [r7, #23]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	331a      	adds	r3, #26
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff f847 	bl	80092e4 <ld_word>
 800a256:	4603      	mov	r3, r0
 800a258:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d109      	bne.n	800a276 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	3314      	adds	r3, #20
 800a266:	4618      	mov	r0, r3
 800a268:	f7ff f83c 	bl	80092e4 <ld_word>
 800a26c:	4603      	mov	r3, r0
 800a26e:	041b      	lsls	r3, r3, #16
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a276:	68fb      	ldr	r3, [r7, #12]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	331a      	adds	r3, #26
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	b292      	uxth	r2, r2
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff f85f 	bl	800935a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d109      	bne.n	800a2b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f103 0214 	add.w	r2, r3, #20
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	0c1b      	lsrs	r3, r3, #16
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	f7ff f851 	bl	800935a <st_word>
	}
}
 800a2b8:	bf00      	nop
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a2c0:	b590      	push	{r4, r7, lr}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	331a      	adds	r3, #26
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff f808 	bl	80092e4 <ld_word>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <cmp_lfn+0x1e>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e059      	b.n	800a392 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2e6:	1e5a      	subs	r2, r3, #1
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	81fb      	strh	r3, [r7, #14]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	613b      	str	r3, [r7, #16]
 800a2fc:	e033      	b.n	800a366 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a2fe:	4a27      	ldr	r2, [pc, #156]	; (800a39c <cmp_lfn+0xdc>)
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	4413      	add	r3, r2
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	4413      	add	r3, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe ffe9 	bl	80092e4 <ld_word>
 800a312:	4603      	mov	r3, r0
 800a314:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a316:	89fb      	ldrh	r3, [r7, #14]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01a      	beq.n	800a352 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2bfe      	cmp	r3, #254	; 0xfe
 800a320:	d812      	bhi.n	800a348 <cmp_lfn+0x88>
 800a322:	89bb      	ldrh	r3, [r7, #12]
 800a324:	4618      	mov	r0, r3
 800a326:	f002 faad 	bl	800c884 <ff_wtoupper>
 800a32a:	4603      	mov	r3, r0
 800a32c:	461c      	mov	r4, r3
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	617a      	str	r2, [r7, #20]
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	4413      	add	r3, r2
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f002 faa1 	bl	800c884 <ff_wtoupper>
 800a342:	4603      	mov	r3, r0
 800a344:	429c      	cmp	r4, r3
 800a346:	d001      	beq.n	800a34c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a348:	2300      	movs	r3, #0
 800a34a:	e022      	b.n	800a392 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a34c:	89bb      	ldrh	r3, [r7, #12]
 800a34e:	81fb      	strh	r3, [r7, #14]
 800a350:	e006      	b.n	800a360 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a352:	89bb      	ldrh	r3, [r7, #12]
 800a354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a358:	4293      	cmp	r3, r2
 800a35a:	d001      	beq.n	800a360 <cmp_lfn+0xa0>
 800a35c:	2300      	movs	r3, #0
 800a35e:	e018      	b.n	800a392 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	3301      	adds	r3, #1
 800a364:	613b      	str	r3, [r7, #16]
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2b0c      	cmp	r3, #12
 800a36a:	d9c8      	bls.n	800a2fe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00b      	beq.n	800a390 <cmp_lfn+0xd0>
 800a378:	89fb      	ldrh	r3, [r7, #14]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d008      	beq.n	800a390 <cmp_lfn+0xd0>
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	005b      	lsls	r3, r3, #1
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	4413      	add	r3, r2
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <cmp_lfn+0xd0>
 800a38c:	2300      	movs	r3, #0
 800a38e:	e000      	b.n	800a392 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a390:	2301      	movs	r3, #1
}
 800a392:	4618      	mov	r0, r3
 800a394:	371c      	adds	r7, #28
 800a396:	46bd      	mov	sp, r7
 800a398:	bd90      	pop	{r4, r7, pc}
 800a39a:	bf00      	nop
 800a39c:	080114d4 	.word	0x080114d4

0800a3a0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	331a      	adds	r3, #26
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe ff98 	bl	80092e4 <ld_word>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <pick_lfn+0x1e>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e04d      	b.n	800a45a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3c6:	1e5a      	subs	r2, r3, #1
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4413      	add	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	81fb      	strh	r3, [r7, #14]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	613b      	str	r3, [r7, #16]
 800a3dc:	e028      	b.n	800a430 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a3de:	4a21      	ldr	r2, [pc, #132]	; (800a464 <pick_lfn+0xc4>)
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fe ff79 	bl	80092e4 <ld_word>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a3f6:	89fb      	ldrh	r3, [r7, #14]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00f      	beq.n	800a41c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2bfe      	cmp	r3, #254	; 0xfe
 800a400:	d901      	bls.n	800a406 <pick_lfn+0x66>
 800a402:	2300      	movs	r3, #0
 800a404:	e029      	b.n	800a45a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a406:	89bb      	ldrh	r3, [r7, #12]
 800a408:	81fb      	strh	r3, [r7, #14]
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	617a      	str	r2, [r7, #20]
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	4413      	add	r3, r2
 800a416:	89fa      	ldrh	r2, [r7, #14]
 800a418:	801a      	strh	r2, [r3, #0]
 800a41a:	e006      	b.n	800a42a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a41c:	89bb      	ldrh	r3, [r7, #12]
 800a41e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a422:	4293      	cmp	r3, r2
 800a424:	d001      	beq.n	800a42a <pick_lfn+0x8a>
 800a426:	2300      	movs	r3, #0
 800a428:	e017      	b.n	800a45a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	3301      	adds	r3, #1
 800a42e:	613b      	str	r3, [r7, #16]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	2b0c      	cmp	r3, #12
 800a434:	d9d3      	bls.n	800a3de <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00a      	beq.n	800a458 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2bfe      	cmp	r3, #254	; 0xfe
 800a446:	d901      	bls.n	800a44c <pick_lfn+0xac>
 800a448:	2300      	movs	r3, #0
 800a44a:	e006      	b.n	800a45a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	005b      	lsls	r3, r3, #1
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	4413      	add	r3, r2
 800a454:	2200      	movs	r2, #0
 800a456:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a458:	2301      	movs	r3, #1
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	080114d4 	.word	0x080114d4

0800a468 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b088      	sub	sp, #32
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	4611      	mov	r1, r2
 800a474:	461a      	mov	r2, r3
 800a476:	460b      	mov	r3, r1
 800a478:	71fb      	strb	r3, [r7, #7]
 800a47a:	4613      	mov	r3, r2
 800a47c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	330d      	adds	r3, #13
 800a482:	79ba      	ldrb	r2, [r7, #6]
 800a484:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	330b      	adds	r3, #11
 800a48a:	220f      	movs	r2, #15
 800a48c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	330c      	adds	r3, #12
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	331a      	adds	r3, #26
 800a49a:	2100      	movs	r1, #0
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe ff5c 	bl	800935a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a4a2:	79fb      	ldrb	r3, [r7, #7]
 800a4a4:	1e5a      	subs	r2, r3, #1
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4413      	add	r3, r2
 800a4b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	82fb      	strh	r3, [r7, #22]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a4ba:	8afb      	ldrh	r3, [r7, #22]
 800a4bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d007      	beq.n	800a4d4 <put_lfn+0x6c>
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	61fa      	str	r2, [r7, #28]
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a4d4:	4a17      	ldr	r2, [pc, #92]	; (800a534 <put_lfn+0xcc>)
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	4413      	add	r3, r2
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	8afa      	ldrh	r2, [r7, #22]
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe ff37 	bl	800935a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a4ec:	8afb      	ldrh	r3, [r7, #22]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d102      	bne.n	800a4f8 <put_lfn+0x90>
 800a4f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	61bb      	str	r3, [r7, #24]
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	2b0c      	cmp	r3, #12
 800a502:	d9da      	bls.n	800a4ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a504:	8afb      	ldrh	r3, [r7, #22]
 800a506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d006      	beq.n	800a51c <put_lfn+0xb4>
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	4413      	add	r3, r2
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d103      	bne.n	800a524 <put_lfn+0xbc>
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a522:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	79fa      	ldrb	r2, [r7, #7]
 800a528:	701a      	strb	r2, [r3, #0]
}
 800a52a:	bf00      	nop
 800a52c:	3720      	adds	r7, #32
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	080114d4 	.word	0x080114d4

0800a538 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08c      	sub	sp, #48	; 0x30
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a546:	220b      	movs	r2, #11
 800a548:	68b9      	ldr	r1, [r7, #8]
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f7fe ff4c 	bl	80093e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b05      	cmp	r3, #5
 800a554:	d92b      	bls.n	800a5ae <gen_numname+0x76>
		sr = seq;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a55a:	e022      	b.n	800a5a2 <gen_numname+0x6a>
			wc = *lfn++;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	1c9a      	adds	r2, r3, #2
 800a560:	607a      	str	r2, [r7, #4]
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a566:	2300      	movs	r3, #0
 800a568:	62bb      	str	r3, [r7, #40]	; 0x28
 800a56a:	e017      	b.n	800a59c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	005a      	lsls	r2, r3, #1
 800a570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	4413      	add	r3, r2
 800a578:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a57a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a57c:	085b      	lsrs	r3, r3, #1
 800a57e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d005      	beq.n	800a596 <gen_numname+0x5e>
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a590:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a594:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a598:	3301      	adds	r3, #1
 800a59a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	2b0f      	cmp	r3, #15
 800a5a0:	d9e4      	bls.n	800a56c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1d8      	bne.n	800a55c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a5ae:	2307      	movs	r3, #7
 800a5b0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	f003 030f 	and.w	r3, r3, #15
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	3330      	adds	r3, #48	; 0x30
 800a5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a5c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5c6:	2b39      	cmp	r3, #57	; 0x39
 800a5c8:	d904      	bls.n	800a5d4 <gen_numname+0x9c>
 800a5ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5ce:	3307      	adds	r3, #7
 800a5d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	1e5a      	subs	r2, r3, #1
 800a5d8:	62ba      	str	r2, [r7, #40]	; 0x28
 800a5da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a5de:	4413      	add	r3, r2
 800a5e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a5e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	091b      	lsrs	r3, r3, #4
 800a5ec:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1de      	bne.n	800a5b2 <gen_numname+0x7a>
	ns[i] = '~';
 800a5f4:	f107 0214 	add.w	r2, r7, #20
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	4413      	add	r3, r2
 800a5fc:	227e      	movs	r2, #126	; 0x7e
 800a5fe:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a600:	2300      	movs	r3, #0
 800a602:	627b      	str	r3, [r7, #36]	; 0x24
 800a604:	e002      	b.n	800a60c <gen_numname+0xd4>
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	3301      	adds	r3, #1
 800a60a:	627b      	str	r3, [r7, #36]	; 0x24
 800a60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	429a      	cmp	r2, r3
 800a612:	d205      	bcs.n	800a620 <gen_numname+0xe8>
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a618:	4413      	add	r3, r2
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	d1f2      	bne.n	800a606 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	2b07      	cmp	r3, #7
 800a624:	d808      	bhi.n	800a638 <gen_numname+0x100>
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	62ba      	str	r2, [r7, #40]	; 0x28
 800a62c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a630:	4413      	add	r3, r2
 800a632:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a636:	e000      	b.n	800a63a <gen_numname+0x102>
 800a638:	2120      	movs	r1, #32
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	627a      	str	r2, [r7, #36]	; 0x24
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	460a      	mov	r2, r1
 800a646:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	2b07      	cmp	r3, #7
 800a64c:	d9e8      	bls.n	800a620 <gen_numname+0xe8>
}
 800a64e:	bf00      	nop
 800a650:	3730      	adds	r7, #48	; 0x30
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a656:	b480      	push	{r7}
 800a658:	b085      	sub	sp, #20
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a662:	230b      	movs	r3, #11
 800a664:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	0852      	lsrs	r2, r2, #1
 800a66c:	01db      	lsls	r3, r3, #7
 800a66e:	4313      	orrs	r3, r2
 800a670:	b2da      	uxtb	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	1c59      	adds	r1, r3, #1
 800a676:	6079      	str	r1, [r7, #4]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	4413      	add	r3, r2
 800a67c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	3b01      	subs	r3, #1
 800a682:	60bb      	str	r3, [r7, #8]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1ed      	bne.n	800a666 <sum_sfn+0x10>
	return sum;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a6a2:	2304      	movs	r3, #4
 800a6a4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800a6ac:	23ff      	movs	r3, #255	; 0xff
 800a6ae:	757b      	strb	r3, [r7, #21]
 800a6b0:	23ff      	movs	r3, #255	; 0xff
 800a6b2:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800a6b4:	e081      	b.n	800a7ba <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6938      	ldr	r0, [r7, #16]
 800a6be:	f7ff f8c1 	bl	8009844 <move_window>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d17c      	bne.n	800a7c6 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800a6d4:	7dbb      	ldrb	r3, [r7, #22]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d102      	bne.n	800a6e0 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a6da:	2304      	movs	r3, #4
 800a6dc:	75fb      	strb	r3, [r7, #23]
 800a6de:	e077      	b.n	800a7d0 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	330b      	adds	r3, #11
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ec:	73fb      	strb	r3, [r7, #15]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	7bfa      	ldrb	r2, [r7, #15]
 800a6f2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a6f4:	7dbb      	ldrb	r3, [r7, #22]
 800a6f6:	2be5      	cmp	r3, #229	; 0xe5
 800a6f8:	d00e      	beq.n	800a718 <dir_read+0x80>
 800a6fa:	7dbb      	ldrb	r3, [r7, #22]
 800a6fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a6fe:	d00b      	beq.n	800a718 <dir_read+0x80>
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	f023 0320 	bic.w	r3, r3, #32
 800a706:	2b08      	cmp	r3, #8
 800a708:	bf0c      	ite	eq
 800a70a:	2301      	moveq	r3, #1
 800a70c:	2300      	movne	r3, #0
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	461a      	mov	r2, r3
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	4293      	cmp	r3, r2
 800a716:	d002      	beq.n	800a71e <dir_read+0x86>
				ord = 0xFF;
 800a718:	23ff      	movs	r3, #255	; 0xff
 800a71a:	757b      	strb	r3, [r7, #21]
 800a71c:	e044      	b.n	800a7a8 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
 800a720:	2b0f      	cmp	r3, #15
 800a722:	d12f      	bne.n	800a784 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800a724:	7dbb      	ldrb	r3, [r7, #22]
 800a726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00d      	beq.n	800a74a <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	7b5b      	ldrb	r3, [r3, #13]
 800a734:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800a736:	7dbb      	ldrb	r3, [r7, #22]
 800a738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a73c:	75bb      	strb	r3, [r7, #22]
 800a73e:	7dbb      	ldrb	r3, [r7, #22]
 800a740:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	695a      	ldr	r2, [r3, #20]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a74a:	7dba      	ldrb	r2, [r7, #22]
 800a74c:	7d7b      	ldrb	r3, [r7, #21]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d115      	bne.n	800a77e <dir_read+0xe6>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	330d      	adds	r3, #13
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	7d3a      	ldrb	r2, [r7, #20]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d10e      	bne.n	800a77e <dir_read+0xe6>
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a1b      	ldr	r3, [r3, #32]
 800a768:	4619      	mov	r1, r3
 800a76a:	4610      	mov	r0, r2
 800a76c:	f7ff fe18 	bl	800a3a0 <pick_lfn>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <dir_read+0xe6>
 800a776:	7d7b      	ldrb	r3, [r7, #21]
 800a778:	3b01      	subs	r3, #1
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	e000      	b.n	800a780 <dir_read+0xe8>
 800a77e:	23ff      	movs	r3, #255	; 0xff
 800a780:	757b      	strb	r3, [r7, #21]
 800a782:	e011      	b.n	800a7a8 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800a784:	7d7b      	ldrb	r3, [r7, #21]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d109      	bne.n	800a79e <dir_read+0x106>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff ff61 	bl	800a656 <sum_sfn>
 800a794:	4603      	mov	r3, r0
 800a796:	461a      	mov	r2, r3
 800a798:	7d3b      	ldrb	r3, [r7, #20]
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d015      	beq.n	800a7ca <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800a7a6:	e010      	b.n	800a7ca <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff fc3d 	bl	800a02a <dir_next>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <dir_read+0x136>
	while (dp->sect) {
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f47f af79 	bne.w	800a6b6 <dir_read+0x1e>
 800a7c4:	e004      	b.n	800a7d0 <dir_read+0x138>
		if (res != FR_OK) break;
 800a7c6:	bf00      	nop
 800a7c8:	e002      	b.n	800a7d0 <dir_read+0x138>
					break;
 800a7ca:	bf00      	nop
 800a7cc:	e000      	b.n	800a7d0 <dir_read+0x138>
		if (res != FR_OK) break;
 800a7ce:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <dir_read+0x144>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	61da      	str	r2, [r3, #28]
	return res;
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b086      	sub	sp, #24
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff fb9c 	bl	8009f34 <dir_sdi>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <dir_find+0x24>
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	e0a9      	b.n	800a95e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a80a:	23ff      	movs	r3, #255	; 0xff
 800a80c:	753b      	strb	r3, [r7, #20]
 800a80e:	7d3b      	ldrb	r3, [r7, #20]
 800a810:	757b      	strb	r3, [r7, #21]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f04f 32ff 	mov.w	r2, #4294967295
 800a818:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	4619      	mov	r1, r3
 800a820:	6938      	ldr	r0, [r7, #16]
 800a822:	f7ff f80f 	bl	8009844 <move_window>
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f040 8090 	bne.w	800a952 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a83a:	7dbb      	ldrb	r3, [r7, #22]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d102      	bne.n	800a846 <dir_find+0x60>
 800a840:	2304      	movs	r3, #4
 800a842:	75fb      	strb	r3, [r7, #23]
 800a844:	e08a      	b.n	800a95c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	330b      	adds	r3, #11
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a852:	73fb      	strb	r3, [r7, #15]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	7bfa      	ldrb	r2, [r7, #15]
 800a858:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a85a:	7dbb      	ldrb	r3, [r7, #22]
 800a85c:	2be5      	cmp	r3, #229	; 0xe5
 800a85e:	d007      	beq.n	800a870 <dir_find+0x8a>
 800a860:	7bfb      	ldrb	r3, [r7, #15]
 800a862:	f003 0308 	and.w	r3, r3, #8
 800a866:	2b00      	cmp	r3, #0
 800a868:	d009      	beq.n	800a87e <dir_find+0x98>
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
 800a86c:	2b0f      	cmp	r3, #15
 800a86e:	d006      	beq.n	800a87e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a870:	23ff      	movs	r3, #255	; 0xff
 800a872:	757b      	strb	r3, [r7, #21]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f04f 32ff 	mov.w	r2, #4294967295
 800a87a:	631a      	str	r2, [r3, #48]	; 0x30
 800a87c:	e05e      	b.n	800a93c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	2b0f      	cmp	r3, #15
 800a882:	d136      	bne.n	800a8f2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d154      	bne.n	800a93c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a892:	7dbb      	ldrb	r3, [r7, #22]
 800a894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00d      	beq.n	800a8b8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	7b5b      	ldrb	r3, [r3, #13]
 800a8a2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a8a4:	7dbb      	ldrb	r3, [r7, #22]
 800a8a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8aa:	75bb      	strb	r3, [r7, #22]
 800a8ac:	7dbb      	ldrb	r3, [r7, #22]
 800a8ae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	695a      	ldr	r2, [r3, #20]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a8b8:	7dba      	ldrb	r2, [r7, #22]
 800a8ba:	7d7b      	ldrb	r3, [r7, #21]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d115      	bne.n	800a8ec <dir_find+0x106>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	330d      	adds	r3, #13
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	7d3a      	ldrb	r2, [r7, #20]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d10e      	bne.n	800a8ec <dir_find+0x106>
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	68da      	ldr	r2, [r3, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f7ff fcf1 	bl	800a2c0 <cmp_lfn>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <dir_find+0x106>
 800a8e4:	7d7b      	ldrb	r3, [r7, #21]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	e000      	b.n	800a8ee <dir_find+0x108>
 800a8ec:	23ff      	movs	r3, #255	; 0xff
 800a8ee:	757b      	strb	r3, [r7, #21]
 800a8f0:	e024      	b.n	800a93c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a8f2:	7d7b      	ldrb	r3, [r7, #21]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d109      	bne.n	800a90c <dir_find+0x126>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a1b      	ldr	r3, [r3, #32]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7ff feaa 	bl	800a656 <sum_sfn>
 800a902:	4603      	mov	r3, r0
 800a904:	461a      	mov	r2, r3
 800a906:	7d3b      	ldrb	r3, [r7, #20]
 800a908:	4293      	cmp	r3, r2
 800a90a:	d024      	beq.n	800a956 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10a      	bne.n	800a930 <dir_find+0x14a>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a18      	ldr	r0, [r3, #32]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3324      	adds	r3, #36	; 0x24
 800a922:	220b      	movs	r2, #11
 800a924:	4619      	mov	r1, r3
 800a926:	f7fe fd9a 	bl	800945e <mem_cmp>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d014      	beq.n	800a95a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a930:	23ff      	movs	r3, #255	; 0xff
 800a932:	757b      	strb	r3, [r7, #21]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f04f 32ff 	mov.w	r2, #4294967295
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a93c:	2100      	movs	r1, #0
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fb73 	bl	800a02a <dir_next>
 800a944:	4603      	mov	r3, r0
 800a946:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a948:	7dfb      	ldrb	r3, [r7, #23]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f43f af65 	beq.w	800a81a <dir_find+0x34>
 800a950:	e004      	b.n	800a95c <dir_find+0x176>
		if (res != FR_OK) break;
 800a952:	bf00      	nop
 800a954:	e002      	b.n	800a95c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a956:	bf00      	nop
 800a958:	e000      	b.n	800a95c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a95a:	bf00      	nop

	return res;
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08c      	sub	sp, #48	; 0x30
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a97c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <dir_register+0x20>
 800a984:	2306      	movs	r3, #6
 800a986:	e0e0      	b.n	800ab4a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a988:	2300      	movs	r3, #0
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
 800a98c:	e002      	b.n	800a994 <dir_register+0x2c>
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	3301      	adds	r3, #1
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	4413      	add	r3, r2
 800a99e:	881b      	ldrh	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1f4      	bne.n	800a98e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a9aa:	f107 030c 	add.w	r3, r7, #12
 800a9ae:	220c      	movs	r2, #12
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe fd19 	bl	80093e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a9b6:	7dfb      	ldrb	r3, [r7, #23]
 800a9b8:	f003 0301 	and.w	r3, r3, #1
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d032      	beq.n	800aa26 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2240      	movs	r2, #64	; 0x40
 800a9c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9cc:	e016      	b.n	800a9fc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	68da      	ldr	r2, [r3, #12]
 800a9d8:	f107 010c 	add.w	r1, r7, #12
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	f7ff fdab 	bl	800a538 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff feff 	bl	800a7e6 <dir_find>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a9ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	2b63      	cmp	r3, #99	; 0x63
 800aa00:	d9e5      	bls.n	800a9ce <dir_register+0x66>
 800aa02:	e000      	b.n	800aa06 <dir_register+0x9e>
			if (res != FR_OK) break;
 800aa04:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800aa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa08:	2b64      	cmp	r3, #100	; 0x64
 800aa0a:	d101      	bne.n	800aa10 <dir_register+0xa8>
 800aa0c:	2307      	movs	r3, #7
 800aa0e:	e09c      	b.n	800ab4a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800aa10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa14:	2b04      	cmp	r3, #4
 800aa16:	d002      	beq.n	800aa1e <dir_register+0xb6>
 800aa18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa1c:	e095      	b.n	800ab4a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800aa1e:	7dfa      	ldrb	r2, [r7, #23]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
 800aa28:	f003 0302 	and.w	r3, r3, #2
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <dir_register+0xd8>
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	330c      	adds	r3, #12
 800aa34:	4a47      	ldr	r2, [pc, #284]	; (800ab54 <dir_register+0x1ec>)
 800aa36:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3a:	089b      	lsrs	r3, r3, #2
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	e000      	b.n	800aa42 <dir_register+0xda>
 800aa40:	2301      	movs	r3, #1
 800aa42:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800aa44:	6a39      	ldr	r1, [r7, #32]
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff fbb4 	bl	800a1b4 <dir_alloc>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800aa52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d148      	bne.n	800aaec <dir_register+0x184>
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	623b      	str	r3, [r7, #32]
 800aa60:	6a3b      	ldr	r3, [r7, #32]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d042      	beq.n	800aaec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	695a      	ldr	r2, [r3, #20]
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	015b      	lsls	r3, r3, #5
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7ff fa5e 	bl	8009f34 <dir_sdi>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800aa7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d132      	bne.n	800aaec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3324      	adds	r3, #36	; 0x24
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff fde3 	bl	800a656 <sum_sfn>
 800aa90:	4603      	mov	r3, r0
 800aa92:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	69db      	ldr	r3, [r3, #28]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	69f8      	ldr	r0, [r7, #28]
 800aa9c:	f7fe fed2 	bl	8009844 <move_window>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800aaa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d11d      	bne.n	800aaea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	68d8      	ldr	r0, [r3, #12]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a19      	ldr	r1, [r3, #32]
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	7efb      	ldrb	r3, [r7, #27]
 800aabc:	f7ff fcd4 	bl	800a468 <put_lfn>
				fs->wflag = 1;
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	2201      	movs	r2, #1
 800aac4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800aac6:	2100      	movs	r1, #0
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff faae 	bl	800a02a <dir_next>
 800aace:	4603      	mov	r3, r0
 800aad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800aad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d107      	bne.n	800aaec <dir_register+0x184>
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	3b01      	subs	r3, #1
 800aae0:	623b      	str	r3, [r7, #32]
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1d5      	bne.n	800aa94 <dir_register+0x12c>
 800aae8:	e000      	b.n	800aaec <dir_register+0x184>
				if (res != FR_OK) break;
 800aaea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aaec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d128      	bne.n	800ab46 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	69db      	ldr	r3, [r3, #28]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	69f8      	ldr	r0, [r7, #28]
 800aafc:	f7fe fea2 	bl	8009844 <move_window>
 800ab00:	4603      	mov	r3, r0
 800ab02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ab06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d11b      	bne.n	800ab46 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	2220      	movs	r2, #32
 800ab14:	2100      	movs	r1, #0
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fe fc87 	bl	800942a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a18      	ldr	r0, [r3, #32]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3324      	adds	r3, #36	; 0x24
 800ab24:	220b      	movs	r2, #11
 800ab26:	4619      	mov	r1, r3
 800ab28:	f7fe fc5e 	bl	80093e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	330c      	adds	r3, #12
 800ab38:	f002 0218 	and.w	r2, r2, #24
 800ab3c:	b2d2      	uxtb	r2, r2
 800ab3e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	2201      	movs	r2, #1
 800ab44:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ab46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3730      	adds	r7, #48	; 0x30
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	4ec4ec4f 	.word	0x4ec4ec4f

0800ab58 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 80c9 	beq.w	800ad0a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d032      	beq.n	800abe8 <get_fileinfo+0x90>
			i = j = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	61bb      	str	r3, [r7, #24]
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ab8a:	e01b      	b.n	800abc4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ab8c:	89fb      	ldrh	r3, [r7, #14]
 800ab8e:	2100      	movs	r1, #0
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 fe3b 	bl	800c80c <ff_convert>
 800ab96:	4603      	mov	r3, r0
 800ab98:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ab9a:	89fb      	ldrh	r3, [r7, #14]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d102      	bne.n	800aba6 <get_fileinfo+0x4e>
 800aba0:	2300      	movs	r3, #0
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	e01a      	b.n	800abdc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	2bfe      	cmp	r3, #254	; 0xfe
 800abaa:	d902      	bls.n	800abb2 <get_fileinfo+0x5a>
 800abac:	2300      	movs	r3, #0
 800abae:	61fb      	str	r3, [r7, #28]
 800abb0:	e014      	b.n	800abdc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	61fa      	str	r2, [r7, #28]
 800abb8:	89fa      	ldrh	r2, [r7, #14]
 800abba:	b2d1      	uxtb	r1, r2
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	4413      	add	r3, r2
 800abc0:	460a      	mov	r2, r1
 800abc2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	1c59      	adds	r1, r3, #1
 800abcc:	61b9      	str	r1, [r7, #24]
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	4413      	add	r3, r2
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	81fb      	strh	r3, [r7, #14]
 800abd6:	89fb      	ldrh	r3, [r7, #14]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1d7      	bne.n	800ab8c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	4413      	add	r3, r2
 800abe2:	3316      	adds	r3, #22
 800abe4:	2200      	movs	r2, #0
 800abe6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	61bb      	str	r3, [r7, #24]
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800abf0:	683a      	ldr	r2, [r7, #0]
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	4413      	add	r3, r2
 800abf6:	3316      	adds	r3, #22
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800abfc:	e04c      	b.n	800ac98 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1a      	ldr	r2, [r3, #32]
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	1c59      	adds	r1, r3, #1
 800ac06:	61f9      	str	r1, [r7, #28]
 800ac08:	4413      	add	r3, r2
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
 800ac10:	2b20      	cmp	r3, #32
 800ac12:	d100      	bne.n	800ac16 <get_fileinfo+0xbe>
 800ac14:	e040      	b.n	800ac98 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
 800ac18:	2b05      	cmp	r3, #5
 800ac1a:	d101      	bne.n	800ac20 <get_fileinfo+0xc8>
 800ac1c:	23e5      	movs	r3, #229	; 0xe5
 800ac1e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	2b09      	cmp	r3, #9
 800ac24:	d10f      	bne.n	800ac46 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ac26:	89bb      	ldrh	r3, [r7, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d105      	bne.n	800ac38 <get_fileinfo+0xe0>
 800ac2c:	683a      	ldr	r2, [r7, #0]
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	4413      	add	r3, r2
 800ac32:	3316      	adds	r3, #22
 800ac34:	222e      	movs	r2, #46	; 0x2e
 800ac36:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	61ba      	str	r2, [r7, #24]
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	4413      	add	r3, r2
 800ac42:	222e      	movs	r2, #46	; 0x2e
 800ac44:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	3309      	adds	r3, #9
 800ac4e:	7dfa      	ldrb	r2, [r7, #23]
 800ac50:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ac52:	89bb      	ldrh	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d11c      	bne.n	800ac92 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	2b40      	cmp	r3, #64	; 0x40
 800ac5c:	d913      	bls.n	800ac86 <get_fileinfo+0x12e>
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	2b5a      	cmp	r3, #90	; 0x5a
 800ac62:	d810      	bhi.n	800ac86 <get_fileinfo+0x12e>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	330c      	adds	r3, #12
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	2b08      	cmp	r3, #8
 800ac72:	d901      	bls.n	800ac78 <get_fileinfo+0x120>
 800ac74:	2310      	movs	r3, #16
 800ac76:	e000      	b.n	800ac7a <get_fileinfo+0x122>
 800ac78:	2308      	movs	r3, #8
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	3320      	adds	r3, #32
 800ac84:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	3316      	adds	r3, #22
 800ac8e:	7dfa      	ldrb	r2, [r7, #23]
 800ac90:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	3301      	adds	r3, #1
 800ac96:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	2b0a      	cmp	r3, #10
 800ac9c:	d9af      	bls.n	800abfe <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ac9e:	89bb      	ldrh	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10d      	bne.n	800acc0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	4413      	add	r3, r2
 800acaa:	3316      	adds	r3, #22
 800acac:	2200      	movs	r2, #0
 800acae:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a1b      	ldr	r3, [r3, #32]
 800acb4:	330c      	adds	r3, #12
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d101      	bne.n	800acc0 <get_fileinfo+0x168>
 800acbc:	2300      	movs	r3, #0
 800acbe:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	4413      	add	r3, r2
 800acc6:	3309      	adds	r3, #9
 800acc8:	2200      	movs	r2, #0
 800acca:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	7ada      	ldrb	r2, [r3, #11]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	331c      	adds	r3, #28
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fe fb19 	bl	8009314 <ld_dword>
 800ace2:	4602      	mov	r2, r0
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a1b      	ldr	r3, [r3, #32]
 800acec:	3316      	adds	r3, #22
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe fb10 	bl	8009314 <ld_dword>
 800acf4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	80da      	strh	r2, [r3, #6]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	0c1b      	lsrs	r3, r3, #16
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	809a      	strh	r2, [r3, #4]
 800ad08:	e000      	b.n	800ad0c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ad0a:	bf00      	nop
}
 800ad0c:	3720      	adds	r7, #32
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	1c59      	adds	r1, r3, #1
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	6011      	str	r1, [r2, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ad2a:	89fb      	ldrh	r3, [r7, #14]
 800ad2c:	2b60      	cmp	r3, #96	; 0x60
 800ad2e:	d905      	bls.n	800ad3c <get_achar+0x28>
 800ad30:	89fb      	ldrh	r3, [r7, #14]
 800ad32:	2b7a      	cmp	r3, #122	; 0x7a
 800ad34:	d802      	bhi.n	800ad3c <get_achar+0x28>
 800ad36:	89fb      	ldrh	r3, [r7, #14]
 800ad38:	3b20      	subs	r3, #32
 800ad3a:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ad3c:	89fb      	ldrh	r3, [r7, #14]
 800ad3e:	2b7f      	cmp	r3, #127	; 0x7f
 800ad40:	d904      	bls.n	800ad4c <get_achar+0x38>
 800ad42:	89fb      	ldrh	r3, [r7, #14]
 800ad44:	3b80      	subs	r3, #128	; 0x80
 800ad46:	4a05      	ldr	r2, [pc, #20]	; (800ad5c <get_achar+0x48>)
 800ad48:	5cd3      	ldrb	r3, [r2, r3]
 800ad4a:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800ad4c:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	08011454 	.word	0x08011454

0800ad60 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08a      	sub	sp, #40	; 0x28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800ad6e:	e009      	b.n	800ad84 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800ad70:	f107 0308 	add.w	r3, r7, #8
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7ff ffcd 	bl	800ad14 <get_achar>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <pattern_matching+0x24>
 800ad80:	2300      	movs	r3, #0
 800ad82:	e064      	b.n	800ae4e <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	1e5a      	subs	r2, r3, #1
 800ad88:	607a      	str	r2, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f0      	bne.n	800ad70 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d104      	bne.n	800ada0 <pattern_matching+0x40>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <pattern_matching+0x40>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e056      	b.n	800ae4e <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b3f      	cmp	r3, #63	; 0x3f
 800adae:	d003      	beq.n	800adb8 <pattern_matching+0x58>
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	2b2a      	cmp	r3, #42	; 0x2a
 800adb6:	d126      	bne.n	800ae06 <pattern_matching+0xa6>
				nm = nx = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	61fb      	str	r3, [r7, #28]
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	617a      	str	r2, [r7, #20]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b3f      	cmp	r3, #63	; 0x3f
 800adca:	d103      	bne.n	800add4 <pattern_matching+0x74>
 800adcc:	6a3b      	ldr	r3, [r7, #32]
 800adce:	3301      	adds	r3, #1
 800add0:	623b      	str	r3, [r7, #32]
 800add2:	e001      	b.n	800add8 <pattern_matching+0x78>
 800add4:	2301      	movs	r3, #1
 800add6:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	2b3f      	cmp	r3, #63	; 0x3f
 800adde:	d0ef      	beq.n	800adc0 <pattern_matching+0x60>
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b2a      	cmp	r3, #42	; 0x2a
 800ade6:	d0eb      	beq.n	800adc0 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800ade8:	6978      	ldr	r0, [r7, #20]
 800adea:	6939      	ldr	r1, [r7, #16]
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	6a3a      	ldr	r2, [r7, #32]
 800adf0:	f7ff ffb6 	bl	800ad60 <pattern_matching>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <pattern_matching+0x9e>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e027      	b.n	800ae4e <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ae04:	e017      	b.n	800ae36 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800ae06:	f107 0314 	add.w	r3, r7, #20
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff ff82 	bl	800ad14 <get_achar>
 800ae10:	4603      	mov	r3, r0
 800ae12:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800ae14:	f107 0310 	add.w	r3, r7, #16
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff ff7b 	bl	800ad14 <get_achar>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800ae22:	8b7a      	ldrh	r2, [r7, #26]
 800ae24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d104      	bne.n	800ae34 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800ae2a:	8b7b      	ldrh	r3, [r7, #26]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1bb      	bne.n	800ada8 <pattern_matching+0x48>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e00c      	b.n	800ae4e <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800ae34:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff ff6a 	bl	800ad14 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <pattern_matching+0xec>
 800ae46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1a9      	bne.n	800ada0 <pattern_matching+0x40>

	return 0;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3728      	adds	r7, #40	; 0x28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08a      	sub	sp, #40	; 0x28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	613b      	str	r3, [r7, #16]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	2300      	movs	r3, #0
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	61ba      	str	r2, [r7, #24]
 800ae7e:	693a      	ldr	r2, [r7, #16]
 800ae80:	4413      	add	r3, r2
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ae86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae88:	2b1f      	cmp	r3, #31
 800ae8a:	d940      	bls.n	800af0e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ae8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae8e:	2b2f      	cmp	r3, #47	; 0x2f
 800ae90:	d006      	beq.n	800aea0 <create_name+0x48>
 800ae92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae94:	2b5c      	cmp	r3, #92	; 0x5c
 800ae96:	d110      	bne.n	800aeba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ae98:	e002      	b.n	800aea0 <create_name+0x48>
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	61bb      	str	r3, [r7, #24]
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	4413      	add	r3, r2
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	2b2f      	cmp	r3, #47	; 0x2f
 800aeaa:	d0f6      	beq.n	800ae9a <create_name+0x42>
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	2b5c      	cmp	r3, #92	; 0x5c
 800aeb6:	d0f0      	beq.n	800ae9a <create_name+0x42>
			break;
 800aeb8:	e02a      	b.n	800af10 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2bfe      	cmp	r3, #254	; 0xfe
 800aebe:	d901      	bls.n	800aec4 <create_name+0x6c>
 800aec0:	2306      	movs	r3, #6
 800aec2:	e177      	b.n	800b1b4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800aec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800aeca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aecc:	2101      	movs	r1, #1
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 fc9c 	bl	800c80c <ff_convert>
 800aed4:	4603      	mov	r3, r0
 800aed6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <create_name+0x8a>
 800aede:	2306      	movs	r3, #6
 800aee0:	e168      	b.n	800b1b4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800aee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aee4:	2b7f      	cmp	r3, #127	; 0x7f
 800aee6:	d809      	bhi.n	800aefc <create_name+0xa4>
 800aee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeea:	4619      	mov	r1, r3
 800aeec:	48b3      	ldr	r0, [pc, #716]	; (800b1bc <create_name+0x364>)
 800aeee:	f7fe fadd 	bl	80094ac <chk_chr>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <create_name+0xa4>
 800aef8:	2306      	movs	r3, #6
 800aefa:	e15b      	b.n	800b1b4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	1c5a      	adds	r2, r3, #1
 800af00:	617a      	str	r2, [r7, #20]
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af0a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800af0c:	e7b4      	b.n	800ae78 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800af0e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	441a      	add	r2, r3
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800af1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af1c:	2b1f      	cmp	r3, #31
 800af1e:	d801      	bhi.n	800af24 <create_name+0xcc>
 800af20:	2304      	movs	r3, #4
 800af22:	e000      	b.n	800af26 <create_name+0xce>
 800af24:	2300      	movs	r3, #0
 800af26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800af2a:	e011      	b.n	800af50 <create_name+0xf8>
		w = lfn[di - 1];
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af32:	3b01      	subs	r3, #1
 800af34:	005b      	lsls	r3, r3, #1
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4413      	add	r3, r2
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800af3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af40:	2b20      	cmp	r3, #32
 800af42:	d002      	beq.n	800af4a <create_name+0xf2>
 800af44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af46:	2b2e      	cmp	r3, #46	; 0x2e
 800af48:	d106      	bne.n	800af58 <create_name+0x100>
		di--;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1ea      	bne.n	800af2c <create_name+0xd4>
 800af56:	e000      	b.n	800af5a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800af58:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	005b      	lsls	r3, r3, #1
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	4413      	add	r3, r2
 800af62:	2200      	movs	r2, #0
 800af64:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <create_name+0x118>
 800af6c:	2306      	movs	r3, #6
 800af6e:	e121      	b.n	800b1b4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3324      	adds	r3, #36	; 0x24
 800af74:	220b      	movs	r2, #11
 800af76:	2120      	movs	r1, #32
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fe fa56 	bl	800942a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800af7e:	2300      	movs	r3, #0
 800af80:	61bb      	str	r3, [r7, #24]
 800af82:	e002      	b.n	800af8a <create_name+0x132>
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	3301      	adds	r3, #1
 800af88:	61bb      	str	r3, [r7, #24]
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	4413      	add	r3, r2
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	2b20      	cmp	r3, #32
 800af96:	d0f5      	beq.n	800af84 <create_name+0x12c>
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	4413      	add	r3, r2
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	2b2e      	cmp	r3, #46	; 0x2e
 800afa4:	d0ee      	beq.n	800af84 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d009      	beq.n	800afc0 <create_name+0x168>
 800afac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afb0:	f043 0303 	orr.w	r3, r3, #3
 800afb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800afb8:	e002      	b.n	800afc0 <create_name+0x168>
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	617b      	str	r3, [r7, #20]
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d009      	beq.n	800afda <create_name+0x182>
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afcc:	3b01      	subs	r3, #1
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4413      	add	r3, r2
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	2b2e      	cmp	r3, #46	; 0x2e
 800afd8:	d1ef      	bne.n	800afba <create_name+0x162>

	i = b = 0; ni = 8;
 800afda:	2300      	movs	r3, #0
 800afdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800afe0:	2300      	movs	r3, #0
 800afe2:	623b      	str	r3, [r7, #32]
 800afe4:	2308      	movs	r3, #8
 800afe6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	61ba      	str	r2, [r7, #24]
 800afee:	005b      	lsls	r3, r3, #1
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	4413      	add	r3, r2
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800aff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 8090 	beq.w	800b120 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b002:	2b20      	cmp	r3, #32
 800b004:	d006      	beq.n	800b014 <create_name+0x1bc>
 800b006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b008:	2b2e      	cmp	r3, #46	; 0x2e
 800b00a:	d10a      	bne.n	800b022 <create_name+0x1ca>
 800b00c:	69ba      	ldr	r2, [r7, #24]
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	429a      	cmp	r2, r3
 800b012:	d006      	beq.n	800b022 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b018:	f043 0303 	orr.w	r3, r3, #3
 800b01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b020:	e07d      	b.n	800b11e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b022:	6a3a      	ldr	r2, [r7, #32]
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	429a      	cmp	r2, r3
 800b028:	d203      	bcs.n	800b032 <create_name+0x1da>
 800b02a:	69ba      	ldr	r2, [r7, #24]
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d123      	bne.n	800b07a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	2b0b      	cmp	r3, #11
 800b036:	d106      	bne.n	800b046 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b03c:	f043 0303 	orr.w	r3, r3, #3
 800b040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b044:	e06f      	b.n	800b126 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d005      	beq.n	800b05a <create_name+0x202>
 800b04e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b052:	f043 0303 	orr.w	r3, r3, #3
 800b056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d860      	bhi.n	800b124 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	61bb      	str	r3, [r7, #24]
 800b066:	2308      	movs	r3, #8
 800b068:	623b      	str	r3, [r7, #32]
 800b06a:	230b      	movs	r3, #11
 800b06c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b06e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b078:	e051      	b.n	800b11e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b07a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b07c:	2b7f      	cmp	r3, #127	; 0x7f
 800b07e:	d914      	bls.n	800b0aa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b082:	2100      	movs	r1, #0
 800b084:	4618      	mov	r0, r3
 800b086:	f001 fbc1 	bl	800c80c <ff_convert>
 800b08a:	4603      	mov	r3, r0
 800b08c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b08e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <create_name+0x246>
 800b094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b096:	3b80      	subs	r3, #128	; 0x80
 800b098:	4a49      	ldr	r2, [pc, #292]	; (800b1c0 <create_name+0x368>)
 800b09a:	5cd3      	ldrb	r3, [r2, r3]
 800b09c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b09e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0a2:	f043 0302 	orr.w	r3, r3, #2
 800b0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b0aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d007      	beq.n	800b0c0 <create_name+0x268>
 800b0b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4843      	ldr	r0, [pc, #268]	; (800b1c4 <create_name+0x36c>)
 800b0b6:	f7fe f9f9 	bl	80094ac <chk_chr>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d008      	beq.n	800b0d2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b0c0:	235f      	movs	r3, #95	; 0x5f
 800b0c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0c8:	f043 0303 	orr.w	r3, r3, #3
 800b0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0d0:	e01b      	b.n	800b10a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b0d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0d4:	2b40      	cmp	r3, #64	; 0x40
 800b0d6:	d909      	bls.n	800b0ec <create_name+0x294>
 800b0d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0da:	2b5a      	cmp	r3, #90	; 0x5a
 800b0dc:	d806      	bhi.n	800b0ec <create_name+0x294>
					b |= 2;
 800b0de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0e2:	f043 0302 	orr.w	r3, r3, #2
 800b0e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0ea:	e00e      	b.n	800b10a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b0ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0ee:	2b60      	cmp	r3, #96	; 0x60
 800b0f0:	d90b      	bls.n	800b10a <create_name+0x2b2>
 800b0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0f4:	2b7a      	cmp	r3, #122	; 0x7a
 800b0f6:	d808      	bhi.n	800b10a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b0f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0fc:	f043 0301 	orr.w	r3, r3, #1
 800b100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b106:	3b20      	subs	r3, #32
 800b108:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	1c5a      	adds	r2, r3, #1
 800b10e:	623a      	str	r2, [r7, #32]
 800b110:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b112:	b2d1      	uxtb	r1, r2
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	4413      	add	r3, r2
 800b118:	460a      	mov	r2, r1
 800b11a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b11e:	e763      	b.n	800afe8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b120:	bf00      	nop
 800b122:	e000      	b.n	800b126 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800b124:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b12c:	2be5      	cmp	r3, #229	; 0xe5
 800b12e:	d103      	bne.n	800b138 <create_name+0x2e0>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2205      	movs	r2, #5
 800b134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	2b08      	cmp	r3, #8
 800b13c:	d104      	bne.n	800b148 <create_name+0x2f0>
 800b13e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b14c:	f003 030c 	and.w	r3, r3, #12
 800b150:	2b0c      	cmp	r3, #12
 800b152:	d005      	beq.n	800b160 <create_name+0x308>
 800b154:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b158:	f003 0303 	and.w	r3, r3, #3
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d105      	bne.n	800b16c <create_name+0x314>
 800b160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b164:	f043 0302 	orr.w	r3, r3, #2
 800b168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b170:	f003 0302 	and.w	r3, r3, #2
 800b174:	2b00      	cmp	r3, #0
 800b176:	d117      	bne.n	800b1a8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b17c:	f003 0303 	and.w	r3, r3, #3
 800b180:	2b01      	cmp	r3, #1
 800b182:	d105      	bne.n	800b190 <create_name+0x338>
 800b184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b188:	f043 0310 	orr.w	r3, r3, #16
 800b18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b194:	f003 030c 	and.w	r3, r3, #12
 800b198:	2b04      	cmp	r3, #4
 800b19a:	d105      	bne.n	800b1a8 <create_name+0x350>
 800b19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1a0:	f043 0308 	orr.w	r3, r3, #8
 800b1a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b1ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b1b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3728      	adds	r7, #40	; 0x28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	08010f50 	.word	0x08010f50
 800b1c0:	08011454 	.word	0x08011454
 800b1c4:	08010f5c 	.word	0x08010f5c

0800b1c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b1dc:	e002      	b.n	800b1e4 <follow_path+0x1c>
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	603b      	str	r3, [r7, #0]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	2b2f      	cmp	r3, #47	; 0x2f
 800b1ea:	d0f8      	beq.n	800b1de <follow_path+0x16>
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	2b5c      	cmp	r3, #92	; 0x5c
 800b1f2:	d0f4      	beq.n	800b1de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	2b1f      	cmp	r3, #31
 800b200:	d80a      	bhi.n	800b218 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2280      	movs	r2, #128	; 0x80
 800b206:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b20a:	2100      	movs	r1, #0
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7fe fe91 	bl	8009f34 <dir_sdi>
 800b212:	4603      	mov	r3, r0
 800b214:	75fb      	strb	r3, [r7, #23]
 800b216:	e043      	b.n	800b2a0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b218:	463b      	mov	r3, r7
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff fe1b 	bl	800ae58 <create_name>
 800b222:	4603      	mov	r3, r0
 800b224:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b226:	7dfb      	ldrb	r3, [r7, #23]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d134      	bne.n	800b296 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff fada 	bl	800a7e6 <dir_find>
 800b232:	4603      	mov	r3, r0
 800b234:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b23c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00a      	beq.n	800b25a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	2b04      	cmp	r3, #4
 800b248:	d127      	bne.n	800b29a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b24a:	7afb      	ldrb	r3, [r7, #11]
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b00      	cmp	r3, #0
 800b252:	d122      	bne.n	800b29a <follow_path+0xd2>
 800b254:	2305      	movs	r3, #5
 800b256:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b258:	e01f      	b.n	800b29a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	d11c      	bne.n	800b29e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	799b      	ldrb	r3, [r3, #6]
 800b268:	f003 0310 	and.w	r3, r3, #16
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d102      	bne.n	800b276 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b270:	2305      	movs	r3, #5
 800b272:	75fb      	strb	r3, [r7, #23]
 800b274:	e014      	b.n	800b2a0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b284:	4413      	add	r3, r2
 800b286:	4619      	mov	r1, r3
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7fe ffda 	bl	800a242 <ld_clust>
 800b28e:	4602      	mov	r2, r0
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b294:	e7c0      	b.n	800b218 <follow_path+0x50>
			if (res != FR_OK) break;
 800b296:	bf00      	nop
 800b298:	e002      	b.n	800b2a0 <follow_path+0xd8>
				break;
 800b29a:	bf00      	nop
 800b29c:	e000      	b.n	800b2a0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b29e:	bf00      	nop
			}
		}
	}

	return res;
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b087      	sub	sp, #28
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d031      	beq.n	800b324 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	617b      	str	r3, [r7, #20]
 800b2c6:	e002      	b.n	800b2ce <get_ldnumber+0x24>
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	617b      	str	r3, [r7, #20]
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	2b1f      	cmp	r3, #31
 800b2d4:	d903      	bls.n	800b2de <get_ldnumber+0x34>
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	2b3a      	cmp	r3, #58	; 0x3a
 800b2dc:	d1f4      	bne.n	800b2c8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	2b3a      	cmp	r3, #58	; 0x3a
 800b2e4:	d11c      	bne.n	800b320 <get_ldnumber+0x76>
			tp = *path;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	60fa      	str	r2, [r7, #12]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	3b30      	subs	r3, #48	; 0x30
 800b2f6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	2b09      	cmp	r3, #9
 800b2fc:	d80e      	bhi.n	800b31c <get_ldnumber+0x72>
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	429a      	cmp	r2, r3
 800b304:	d10a      	bne.n	800b31c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d107      	bne.n	800b31c <get_ldnumber+0x72>
					vol = (int)i;
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	3301      	adds	r3, #1
 800b314:	617b      	str	r3, [r7, #20]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	e002      	b.n	800b326 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b320:	2300      	movs	r3, #0
 800b322:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b324:	693b      	ldr	r3, [r7, #16]
}
 800b326:	4618      	mov	r0, r3
 800b328:	371c      	adds	r7, #28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
	...

0800b334 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	70da      	strb	r2, [r3, #3]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f04f 32ff 	mov.w	r2, #4294967295
 800b34a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7fe fa78 	bl	8009844 <move_window>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <check_fs+0x2a>
 800b35a:	2304      	movs	r3, #4
 800b35c:	e038      	b.n	800b3d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3334      	adds	r3, #52	; 0x34
 800b362:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b366:	4618      	mov	r0, r3
 800b368:	f7fd ffbc 	bl	80092e4 <ld_word>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461a      	mov	r2, r3
 800b370:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b374:	429a      	cmp	r2, r3
 800b376:	d001      	beq.n	800b37c <check_fs+0x48>
 800b378:	2303      	movs	r3, #3
 800b37a:	e029      	b.n	800b3d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b382:	2be9      	cmp	r3, #233	; 0xe9
 800b384:	d009      	beq.n	800b39a <check_fs+0x66>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b38c:	2beb      	cmp	r3, #235	; 0xeb
 800b38e:	d11e      	bne.n	800b3ce <check_fs+0x9a>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b396:	2b90      	cmp	r3, #144	; 0x90
 800b398:	d119      	bne.n	800b3ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3334      	adds	r3, #52	; 0x34
 800b39e:	3336      	adds	r3, #54	; 0x36
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fd ffb7 	bl	8009314 <ld_dword>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b3ac:	4a0a      	ldr	r2, [pc, #40]	; (800b3d8 <check_fs+0xa4>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d101      	bne.n	800b3b6 <check_fs+0x82>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	e00c      	b.n	800b3d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	3334      	adds	r3, #52	; 0x34
 800b3ba:	3352      	adds	r3, #82	; 0x52
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fd ffa9 	bl	8009314 <ld_dword>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	4b05      	ldr	r3, [pc, #20]	; (800b3dc <check_fs+0xa8>)
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d101      	bne.n	800b3ce <check_fs+0x9a>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e000      	b.n	800b3d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b3ce:	2302      	movs	r3, #2
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	00544146 	.word	0x00544146
 800b3dc:	33544146 	.word	0x33544146

0800b3e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b096      	sub	sp, #88	; 0x58
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f7ff ff58 	bl	800b2aa <get_ldnumber>
 800b3fa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	da01      	bge.n	800b406 <find_volume+0x26>
 800b402:	230b      	movs	r3, #11
 800b404:	e231      	b.n	800b86a <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b406:	4aa8      	ldr	r2, [pc, #672]	; (800b6a8 <find_volume+0x2c8>)
 800b408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b40e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <find_volume+0x3a>
 800b416:	230c      	movs	r3, #12
 800b418:	e227      	b.n	800b86a <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b41e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	f023 0301 	bic.w	r3, r3, #1
 800b426:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01a      	beq.n	800b466 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	785b      	ldrb	r3, [r3, #1]
 800b434:	4618      	mov	r0, r3
 800b436:	f7fd feb7 	bl	80091a8 <disk_status>
 800b43a:	4603      	mov	r3, r0
 800b43c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10c      	bne.n	800b466 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d007      	beq.n	800b462 <find_volume+0x82>
 800b452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b456:	f003 0304 	and.w	r3, r3, #4
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b45e:	230a      	movs	r3, #10
 800b460:	e203      	b.n	800b86a <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800b462:	2300      	movs	r3, #0
 800b464:	e201      	b.n	800b86a <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	2200      	movs	r2, #0
 800b46a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b472:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fd feaf 	bl	80091dc <disk_initialize>
 800b47e:	4603      	mov	r3, r0
 800b480:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b488:	f003 0301 	and.w	r3, r3, #1
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b490:	2303      	movs	r3, #3
 800b492:	e1ea      	b.n	800b86a <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b494:	79fb      	ldrb	r3, [r7, #7]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d007      	beq.n	800b4aa <find_volume+0xca>
 800b49a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b49e:	f003 0304 	and.w	r3, r3, #4
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b4a6:	230a      	movs	r3, #10
 800b4a8:	e1df      	b.n	800b86a <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b4ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4b2:	f7ff ff3f 	bl	800b334 <check_fs>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b4bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d14b      	bne.n	800b55c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	643b      	str	r3, [r7, #64]	; 0x40
 800b4c8:	e01f      	b.n	800b50a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d2:	011b      	lsls	r3, r3, #4
 800b4d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b4d8:	4413      	add	r3, r2
 800b4da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	3304      	adds	r3, #4
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d006      	beq.n	800b4f4 <find_volume+0x114>
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fd ff12 	bl	8009314 <ld_dword>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	e000      	b.n	800b4f6 <find_volume+0x116>
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b4fe:	440b      	add	r3, r1
 800b500:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b506:	3301      	adds	r3, #1
 800b508:	643b      	str	r3, [r7, #64]	; 0x40
 800b50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d9dc      	bls.n	800b4ca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b510:	2300      	movs	r3, #0
 800b512:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <find_volume+0x140>
 800b51a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b51c:	3b01      	subs	r3, #1
 800b51e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b528:	4413      	add	r3, r2
 800b52a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b52e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b532:	2b00      	cmp	r3, #0
 800b534:	d005      	beq.n	800b542 <find_volume+0x162>
 800b536:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b53a:	f7ff fefb 	bl	800b334 <check_fs>
 800b53e:	4603      	mov	r3, r0
 800b540:	e000      	b.n	800b544 <find_volume+0x164>
 800b542:	2303      	movs	r3, #3
 800b544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b548:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d905      	bls.n	800b55c <find_volume+0x17c>
 800b550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b552:	3301      	adds	r3, #1
 800b554:	643b      	str	r3, [r7, #64]	; 0x40
 800b556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d9e1      	bls.n	800b520 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b55c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b560:	2b04      	cmp	r3, #4
 800b562:	d101      	bne.n	800b568 <find_volume+0x188>
 800b564:	2301      	movs	r3, #1
 800b566:	e180      	b.n	800b86a <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d901      	bls.n	800b574 <find_volume+0x194>
 800b570:	230d      	movs	r3, #13
 800b572:	e17a      	b.n	800b86a <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	3334      	adds	r3, #52	; 0x34
 800b578:	330b      	adds	r3, #11
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fd feb2 	bl	80092e4 <ld_word>
 800b580:	4603      	mov	r3, r0
 800b582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b586:	d001      	beq.n	800b58c <find_volume+0x1ac>
 800b588:	230d      	movs	r3, #13
 800b58a:	e16e      	b.n	800b86a <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	3334      	adds	r3, #52	; 0x34
 800b590:	3316      	adds	r3, #22
 800b592:	4618      	mov	r0, r3
 800b594:	f7fd fea6 	bl	80092e4 <ld_word>
 800b598:	4603      	mov	r3, r0
 800b59a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b59c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <find_volume+0x1d0>
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a4:	3334      	adds	r3, #52	; 0x34
 800b5a6:	3324      	adds	r3, #36	; 0x24
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fd feb3 	bl	8009314 <ld_dword>
 800b5ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5b4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	789b      	ldrb	r3, [r3, #2]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d005      	beq.n	800b5d4 <find_volume+0x1f4>
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ca:	789b      	ldrb	r3, [r3, #2]
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d001      	beq.n	800b5d4 <find_volume+0x1f4>
 800b5d0:	230d      	movs	r3, #13
 800b5d2:	e14a      	b.n	800b86a <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	789b      	ldrb	r3, [r3, #2]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5dc:	fb02 f303 	mul.w	r3, r2, r3
 800b5e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f0:	895b      	ldrh	r3, [r3, #10]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d008      	beq.n	800b608 <find_volume+0x228>
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f8:	895b      	ldrh	r3, [r3, #10]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	895b      	ldrh	r3, [r3, #10]
 800b600:	3b01      	subs	r3, #1
 800b602:	4013      	ands	r3, r2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <find_volume+0x22c>
 800b608:	230d      	movs	r3, #13
 800b60a:	e12e      	b.n	800b86a <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60e:	3334      	adds	r3, #52	; 0x34
 800b610:	3311      	adds	r3, #17
 800b612:	4618      	mov	r0, r3
 800b614:	f7fd fe66 	bl	80092e4 <ld_word>
 800b618:	4603      	mov	r3, r0
 800b61a:	461a      	mov	r2, r3
 800b61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	891b      	ldrh	r3, [r3, #8]
 800b624:	f003 030f 	and.w	r3, r3, #15
 800b628:	b29b      	uxth	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <find_volume+0x252>
 800b62e:	230d      	movs	r3, #13
 800b630:	e11b      	b.n	800b86a <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b634:	3334      	adds	r3, #52	; 0x34
 800b636:	3313      	adds	r3, #19
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fd fe53 	bl	80092e4 <ld_word>
 800b63e:	4603      	mov	r3, r0
 800b640:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b644:	2b00      	cmp	r3, #0
 800b646:	d106      	bne.n	800b656 <find_volume+0x276>
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	3334      	adds	r3, #52	; 0x34
 800b64c:	3320      	adds	r3, #32
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fd fe60 	bl	8009314 <ld_dword>
 800b654:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b658:	3334      	adds	r3, #52	; 0x34
 800b65a:	330e      	adds	r3, #14
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fd fe41 	bl	80092e4 <ld_word>
 800b662:	4603      	mov	r3, r0
 800b664:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b666:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <find_volume+0x290>
 800b66c:	230d      	movs	r3, #13
 800b66e:	e0fc      	b.n	800b86a <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b670:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b674:	4413      	add	r3, r2
 800b676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b678:	8912      	ldrh	r2, [r2, #8]
 800b67a:	0912      	lsrs	r2, r2, #4
 800b67c:	b292      	uxth	r2, r2
 800b67e:	4413      	add	r3, r2
 800b680:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b686:	429a      	cmp	r2, r3
 800b688:	d201      	bcs.n	800b68e <find_volume+0x2ae>
 800b68a:	230d      	movs	r3, #13
 800b68c:	e0ed      	b.n	800b86a <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b68e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b696:	8952      	ldrh	r2, [r2, #10]
 800b698:	fbb3 f3f2 	udiv	r3, r3, r2
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d103      	bne.n	800b6ac <find_volume+0x2cc>
 800b6a4:	230d      	movs	r3, #13
 800b6a6:	e0e0      	b.n	800b86a <find_volume+0x48a>
 800b6a8:	2000009c 	.word	0x2000009c
		fmt = FS_FAT32;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d802      	bhi.n	800b6c2 <find_volume+0x2e2>
 800b6bc:	2302      	movs	r3, #2
 800b6be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d802      	bhi.n	800b6d2 <find_volume+0x2f2>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d4:	1c9a      	adds	r2, r3, #2
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6de:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b6e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6e4:	441a      	add	r2, r3
 800b6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b6ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	441a      	add	r2, r3
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b6f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6f8:	2b03      	cmp	r3, #3
 800b6fa:	d11e      	bne.n	800b73a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fe:	3334      	adds	r3, #52	; 0x34
 800b700:	332a      	adds	r3, #42	; 0x2a
 800b702:	4618      	mov	r0, r3
 800b704:	f7fd fdee 	bl	80092e4 <ld_word>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <find_volume+0x332>
 800b70e:	230d      	movs	r3, #13
 800b710:	e0ab      	b.n	800b86a <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b714:	891b      	ldrh	r3, [r3, #8]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <find_volume+0x33e>
 800b71a:	230d      	movs	r3, #13
 800b71c:	e0a5      	b.n	800b86a <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	3334      	adds	r3, #52	; 0x34
 800b722:	332c      	adds	r3, #44	; 0x2c
 800b724:	4618      	mov	r0, r3
 800b726:	f7fd fdf5 	bl	8009314 <ld_dword>
 800b72a:	4602      	mov	r2, r0
 800b72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	647b      	str	r3, [r7, #68]	; 0x44
 800b738:	e01f      	b.n	800b77a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73c:	891b      	ldrh	r3, [r3, #8]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d101      	bne.n	800b746 <find_volume+0x366>
 800b742:	230d      	movs	r3, #13
 800b744:	e091      	b.n	800b86a <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b74c:	441a      	add	r2, r3
 800b74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b750:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b752:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b756:	2b02      	cmp	r3, #2
 800b758:	d103      	bne.n	800b762 <find_volume+0x382>
 800b75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	e00a      	b.n	800b778 <find_volume+0x398>
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	699a      	ldr	r2, [r3, #24]
 800b766:	4613      	mov	r3, r2
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	4413      	add	r3, r2
 800b76c:	085a      	lsrs	r2, r3, #1
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b778:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77c:	69da      	ldr	r2, [r3, #28]
 800b77e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b780:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b784:	0a5b      	lsrs	r3, r3, #9
 800b786:	429a      	cmp	r2, r3
 800b788:	d201      	bcs.n	800b78e <find_volume+0x3ae>
 800b78a:	230d      	movs	r3, #13
 800b78c:	e06d      	b.n	800b86a <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b790:	f04f 32ff 	mov.w	r2, #4294967295
 800b794:	615a      	str	r2, [r3, #20]
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	695a      	ldr	r2, [r3, #20]
 800b79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a0:	2280      	movs	r2, #128	; 0x80
 800b7a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b7a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	d149      	bne.n	800b840 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ae:	3334      	adds	r3, #52	; 0x34
 800b7b0:	3330      	adds	r3, #48	; 0x30
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fd fd96 	bl	80092e4 <ld_word>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d140      	bne.n	800b840 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7c6:	f7fe f83d 	bl	8009844 <move_window>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d137      	bne.n	800b840 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	3334      	adds	r3, #52	; 0x34
 800b7da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fd fd80 	bl	80092e4 <ld_word>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d127      	bne.n	800b840 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	3334      	adds	r3, #52	; 0x34
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fd fd8d 	bl	8009314 <ld_dword>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	4b1d      	ldr	r3, [pc, #116]	; (800b874 <find_volume+0x494>)
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d11e      	bne.n	800b840 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	3334      	adds	r3, #52	; 0x34
 800b806:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fd fd82 	bl	8009314 <ld_dword>
 800b810:	4602      	mov	r2, r0
 800b812:	4b19      	ldr	r3, [pc, #100]	; (800b878 <find_volume+0x498>)
 800b814:	429a      	cmp	r2, r3
 800b816:	d113      	bne.n	800b840 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81a:	3334      	adds	r3, #52	; 0x34
 800b81c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b820:	4618      	mov	r0, r3
 800b822:	f7fd fd77 	bl	8009314 <ld_dword>
 800b826:	4602      	mov	r2, r0
 800b828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	3334      	adds	r3, #52	; 0x34
 800b830:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b834:	4618      	mov	r0, r3
 800b836:	f7fd fd6d 	bl	8009314 <ld_dword>
 800b83a:	4602      	mov	r2, r0
 800b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b842:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b846:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b848:	4b0c      	ldr	r3, [pc, #48]	; (800b87c <find_volume+0x49c>)
 800b84a:	881b      	ldrh	r3, [r3, #0]
 800b84c:	3301      	adds	r3, #1
 800b84e:	b29a      	uxth	r2, r3
 800b850:	4b0a      	ldr	r3, [pc, #40]	; (800b87c <find_volume+0x49c>)
 800b852:	801a      	strh	r2, [r3, #0]
 800b854:	4b09      	ldr	r3, [pc, #36]	; (800b87c <find_volume+0x49c>)
 800b856:	881a      	ldrh	r2, [r3, #0]
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	4a08      	ldr	r2, [pc, #32]	; (800b880 <find_volume+0x4a0>)
 800b860:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b862:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b864:	f7fd ff86 	bl	8009774 <clear_lock>
#endif
	return FR_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3758      	adds	r7, #88	; 0x58
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	41615252 	.word	0x41615252
 800b878:	61417272 	.word	0x61417272
 800b87c:	200000a0 	.word	0x200000a0
 800b880:	200000c4 	.word	0x200000c4

0800b884 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b88e:	2309      	movs	r3, #9
 800b890:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d01c      	beq.n	800b8d2 <validate+0x4e>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d018      	beq.n	800b8d2 <validate+0x4e>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d013      	beq.n	800b8d2 <validate+0x4e>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	889a      	ldrh	r2, [r3, #4]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	88db      	ldrh	r3, [r3, #6]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d10c      	bne.n	800b8d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	785b      	ldrb	r3, [r3, #1]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fd fc72 	bl	80091a8 <disk_status>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <validate+0x4e>
			res = FR_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <validate+0x5a>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	e000      	b.n	800b8e0 <validate+0x5c>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	683a      	ldr	r2, [r7, #0]
 800b8e2:	6013      	str	r3, [r2, #0]
	return res;
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b088      	sub	sp, #32
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b902:	f107 0310 	add.w	r3, r7, #16
 800b906:	4618      	mov	r0, r3
 800b908:	f7ff fccf 	bl	800b2aa <get_ldnumber>
 800b90c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	2b00      	cmp	r3, #0
 800b912:	da01      	bge.n	800b918 <f_mount+0x28>
 800b914:	230b      	movs	r3, #11
 800b916:	e02b      	b.n	800b970 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b918:	4a17      	ldr	r2, [pc, #92]	; (800b978 <f_mount+0x88>)
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b920:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d005      	beq.n	800b934 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b928:	69b8      	ldr	r0, [r7, #24]
 800b92a:	f7fd ff23 	bl	8009774 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	2200      	movs	r2, #0
 800b932:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	490d      	ldr	r1, [pc, #52]	; (800b978 <f_mount+0x88>)
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <f_mount+0x66>
 800b950:	79fb      	ldrb	r3, [r7, #7]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d001      	beq.n	800b95a <f_mount+0x6a>
 800b956:	2300      	movs	r3, #0
 800b958:	e00a      	b.n	800b970 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b95a:	f107 010c 	add.w	r1, r7, #12
 800b95e:	f107 0308 	add.w	r3, r7, #8
 800b962:	2200      	movs	r2, #0
 800b964:	4618      	mov	r0, r3
 800b966:	f7ff fd3b 	bl	800b3e0 <find_volume>
 800b96a:	4603      	mov	r3, r0
 800b96c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3720      	adds	r7, #32
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	2000009c 	.word	0x2000009c

0800b97c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b09a      	sub	sp, #104	; 0x68
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	4613      	mov	r3, r2
 800b988:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <f_open+0x18>
 800b990:	2309      	movs	r3, #9
 800b992:	e1ad      	b.n	800bcf0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b994:	79fb      	ldrb	r3, [r7, #7]
 800b996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b99a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b99c:	79fa      	ldrb	r2, [r7, #7]
 800b99e:	f107 0110 	add.w	r1, r7, #16
 800b9a2:	f107 0308 	add.w	r3, r7, #8
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff fd1a 	bl	800b3e0 <find_volume>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b9b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f040 8191 	bne.w	800bcde <f_open+0x362>
		dj.obj.fs = fs;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	f107 0314 	add.w	r3, r7, #20
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fbfd 	bl	800b1c8 <follow_path>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b9d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d11a      	bne.n	800ba12 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b9dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b9e0:	b25b      	sxtb	r3, r3
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	da03      	bge.n	800b9ee <f_open+0x72>
				res = FR_INVALID_NAME;
 800b9e6:	2306      	movs	r3, #6
 800b9e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b9ec:	e011      	b.n	800ba12 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b9ee:	79fb      	ldrb	r3, [r7, #7]
 800b9f0:	f023 0301 	bic.w	r3, r3, #1
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	bf14      	ite	ne
 800b9f8:	2301      	movne	r3, #1
 800b9fa:	2300      	moveq	r3, #0
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f107 0314 	add.w	r3, r7, #20
 800ba04:	4611      	mov	r1, r2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fd fd6c 	bl	80094e4 <chk_lock>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ba12:	79fb      	ldrb	r3, [r7, #7]
 800ba14:	f003 031c 	and.w	r3, r3, #28
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d07f      	beq.n	800bb1c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ba1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d017      	beq.n	800ba54 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ba24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d10e      	bne.n	800ba4a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ba2c:	f7fd fdb6 	bl	800959c <enq_lock>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d006      	beq.n	800ba44 <f_open+0xc8>
 800ba36:	f107 0314 	add.w	r3, r7, #20
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe ff94 	bl	800a968 <dir_register>
 800ba40:	4603      	mov	r3, r0
 800ba42:	e000      	b.n	800ba46 <f_open+0xca>
 800ba44:	2312      	movs	r3, #18
 800ba46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ba4a:	79fb      	ldrb	r3, [r7, #7]
 800ba4c:	f043 0308 	orr.w	r3, r3, #8
 800ba50:	71fb      	strb	r3, [r7, #7]
 800ba52:	e010      	b.n	800ba76 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ba54:	7ebb      	ldrb	r3, [r7, #26]
 800ba56:	f003 0311 	and.w	r3, r3, #17
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <f_open+0xea>
					res = FR_DENIED;
 800ba5e:	2307      	movs	r3, #7
 800ba60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ba64:	e007      	b.n	800ba76 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <f_open+0xfa>
 800ba70:	2308      	movs	r3, #8
 800ba72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ba76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d168      	bne.n	800bb50 <f_open+0x1d4>
 800ba7e:	79fb      	ldrb	r3, [r7, #7]
 800ba80:	f003 0308 	and.w	r3, r3, #8
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d063      	beq.n	800bb50 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ba88:	f001 f81c 	bl	800cac4 <get_fattime>
 800ba8c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ba8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba90:	330e      	adds	r3, #14
 800ba92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fd fc7b 	bl	8009390 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9c:	3316      	adds	r3, #22
 800ba9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fd fc75 	bl	8009390 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800baa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa8:	330b      	adds	r3, #11
 800baaa:	2220      	movs	r2, #32
 800baac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bab2:	4611      	mov	r1, r2
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fe fbc4 	bl	800a242 <ld_clust>
 800baba:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bac0:	2200      	movs	r2, #0
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe fbdc 	bl	800a280 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baca:	331c      	adds	r3, #28
 800bacc:	2100      	movs	r1, #0
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fd fc5e 	bl	8009390 <st_dword>
					fs->wflag = 1;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	2201      	movs	r2, #1
 800bad8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800badc:	2b00      	cmp	r3, #0
 800bade:	d037      	beq.n	800bb50 <f_open+0x1d4>
						dw = fs->winsect;
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bae6:	f107 0314 	add.w	r3, r7, #20
 800baea:	2200      	movs	r2, #0
 800baec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe f8ef 	bl	8009cd2 <remove_chain>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800bafa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d126      	bne.n	800bb50 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fd fe9c 	bl	8009844 <move_window>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb16:	3a01      	subs	r2, #1
 800bb18:	611a      	str	r2, [r3, #16]
 800bb1a:	e019      	b.n	800bb50 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bb1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d115      	bne.n	800bb50 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bb24:	7ebb      	ldrb	r3, [r7, #26]
 800bb26:	f003 0310 	and.w	r3, r3, #16
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <f_open+0x1ba>
					res = FR_NO_FILE;
 800bb2e:	2304      	movs	r3, #4
 800bb30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bb34:	e00c      	b.n	800bb50 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bb36:	79fb      	ldrb	r3, [r7, #7]
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d007      	beq.n	800bb50 <f_open+0x1d4>
 800bb40:	7ebb      	ldrb	r3, [r7, #26]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <f_open+0x1d4>
						res = FR_DENIED;
 800bb4a:	2307      	movs	r3, #7
 800bb4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bb50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d128      	bne.n	800bbaa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bb58:	79fb      	ldrb	r3, [r7, #7]
 800bb5a:	f003 0308 	and.w	r3, r3, #8
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bb62:	79fb      	ldrb	r3, [r7, #7]
 800bb64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bb72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bb78:	79fb      	ldrb	r3, [r7, #7]
 800bb7a:	f023 0301 	bic.w	r3, r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	bf14      	ite	ne
 800bb82:	2301      	movne	r3, #1
 800bb84:	2300      	moveq	r3, #0
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	461a      	mov	r2, r3
 800bb8a:	f107 0314 	add.w	r3, r7, #20
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fd fd25 	bl	80095e0 <inc_lock>
 800bb96:	4602      	mov	r2, r0
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <f_open+0x22e>
 800bba4:	2302      	movs	r3, #2
 800bba6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bbaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f040 8095 	bne.w	800bcde <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbb8:	4611      	mov	r1, r2
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe fb41 	bl	800a242 <ld_clust>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc8:	331c      	adds	r3, #28
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fd fba2 	bl	8009314 <ld_dword>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	88da      	ldrh	r2, [r3, #6]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	79fa      	ldrb	r2, [r7, #7]
 800bbee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3330      	adds	r3, #48	; 0x30
 800bc06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fd fc0c 	bl	800942a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bc12:	79fb      	ldrb	r3, [r7, #7]
 800bc14:	f003 0320 	and.w	r3, r3, #32
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d060      	beq.n	800bcde <f_open+0x362>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d05c      	beq.n	800bcde <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	68da      	ldr	r2, [r3, #12]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	895b      	ldrh	r3, [r3, #10]
 800bc30:	025b      	lsls	r3, r3, #9
 800bc32:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc40:	e016      	b.n	800bc70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fd feb7 	bl	80099ba <get_fat>
 800bc4c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800bc4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d802      	bhi.n	800bc5a <f_open+0x2de>
 800bc54:	2302      	movs	r3, #2
 800bc56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bc5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc60:	d102      	bne.n	800bc68 <f_open+0x2ec>
 800bc62:	2301      	movs	r3, #1
 800bc64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d103      	bne.n	800bc80 <f_open+0x304>
 800bc78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d8e0      	bhi.n	800bc42 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bc86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d127      	bne.n	800bcde <f_open+0x362>
 800bc8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d022      	beq.n	800bcde <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7fd fe6d 	bl	800997c <clust2sect>
 800bca2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d103      	bne.n	800bcb2 <f_open+0x336>
						res = FR_INT_ERR;
 800bcaa:	2302      	movs	r3, #2
 800bcac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bcb0:	e015      	b.n	800bcde <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bcb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcb4:	0a5a      	lsrs	r2, r3, #9
 800bcb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb8:	441a      	add	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	7858      	ldrb	r0, [r3, #1]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6a1a      	ldr	r2, [r3, #32]
 800bccc:	2301      	movs	r3, #1
 800bcce:	f7fd faab 	bl	8009228 <disk_read>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d002      	beq.n	800bcde <f_open+0x362>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bcde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <f_open+0x370>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bcec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3768      	adds	r7, #104	; 0x68
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08e      	sub	sp, #56	; 0x38
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f107 0214 	add.w	r2, r7, #20
 800bd16:	4611      	mov	r1, r2
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff fdb3 	bl	800b884 <validate>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bd24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d107      	bne.n	800bd3c <f_read+0x44>
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	7d5b      	ldrb	r3, [r3, #21]
 800bd30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <f_read+0x4a>
 800bd3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd40:	e115      	b.n	800bf6e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	7d1b      	ldrb	r3, [r3, #20]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <f_read+0x5a>
 800bd4e:	2307      	movs	r3, #7
 800bd50:	e10d      	b.n	800bf6e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	6a3b      	ldr	r3, [r7, #32]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	f240 80fe 	bls.w	800bf64 <f_read+0x26c>
 800bd68:	6a3b      	ldr	r3, [r7, #32]
 800bd6a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bd6c:	e0fa      	b.n	800bf64 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f040 80c6 	bne.w	800bf08 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	0a5b      	lsrs	r3, r3, #9
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	8952      	ldrh	r2, [r2, #10]
 800bd86:	3a01      	subs	r2, #1
 800bd88:	4013      	ands	r3, r2
 800bd8a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d12f      	bne.n	800bdf2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d103      	bne.n	800bda2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	633b      	str	r3, [r7, #48]	; 0x30
 800bda0:	e013      	b.n	800bdca <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d007      	beq.n	800bdba <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f7fe f88b 	bl	8009ecc <clmt_clust>
 800bdb6:	6338      	str	r0, [r7, #48]	; 0x30
 800bdb8:	e007      	b.n	800bdca <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	69db      	ldr	r3, [r3, #28]
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	f7fd fdf9 	bl	80099ba <get_fat>
 800bdc8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d804      	bhi.n	800bdda <f_read+0xe2>
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	755a      	strb	r2, [r3, #21]
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	e0c9      	b.n	800bf6e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde0:	d104      	bne.n	800bdec <f_read+0xf4>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2201      	movs	r2, #1
 800bde6:	755a      	strb	r2, [r3, #21]
 800bde8:	2301      	movs	r3, #1
 800bdea:	e0c0      	b.n	800bf6e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	69db      	ldr	r3, [r3, #28]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	4610      	mov	r0, r2
 800bdfc:	f7fd fdbe 	bl	800997c <clust2sect>
 800be00:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d104      	bne.n	800be12 <f_read+0x11a>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2202      	movs	r2, #2
 800be0c:	755a      	strb	r2, [r3, #21]
 800be0e:	2302      	movs	r3, #2
 800be10:	e0ad      	b.n	800bf6e <f_read+0x276>
			sect += csect;
 800be12:	69ba      	ldr	r2, [r7, #24]
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	4413      	add	r3, r2
 800be18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	0a5b      	lsrs	r3, r3, #9
 800be1e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	2b00      	cmp	r3, #0
 800be24:	d039      	beq.n	800be9a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800be26:	69fa      	ldr	r2, [r7, #28]
 800be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2a:	4413      	add	r3, r2
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	8952      	ldrh	r2, [r2, #10]
 800be30:	4293      	cmp	r3, r2
 800be32:	d905      	bls.n	800be40 <f_read+0x148>
					cc = fs->csize - csect;
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	895b      	ldrh	r3, [r3, #10]
 800be38:	461a      	mov	r2, r3
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	7858      	ldrb	r0, [r3, #1]
 800be44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be46:	69ba      	ldr	r2, [r7, #24]
 800be48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be4a:	f7fd f9ed 	bl	8009228 <disk_read>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d004      	beq.n	800be5e <f_read+0x166>
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2201      	movs	r2, #1
 800be58:	755a      	strb	r2, [r3, #21]
 800be5a:	2301      	movs	r3, #1
 800be5c:	e087      	b.n	800bf6e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	7d1b      	ldrb	r3, [r3, #20]
 800be62:	b25b      	sxtb	r3, r3
 800be64:	2b00      	cmp	r3, #0
 800be66:	da14      	bge.n	800be92 <f_read+0x19a>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6a1a      	ldr	r2, [r3, #32]
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be72:	429a      	cmp	r2, r3
 800be74:	d90d      	bls.n	800be92 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6a1a      	ldr	r2, [r3, #32]
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	025b      	lsls	r3, r3, #9
 800be80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be82:	18d0      	adds	r0, r2, r3
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3330      	adds	r3, #48	; 0x30
 800be88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be8c:	4619      	mov	r1, r3
 800be8e:	f7fd faab 	bl	80093e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	025b      	lsls	r3, r3, #9
 800be96:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800be98:	e050      	b.n	800bf3c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	69ba      	ldr	r2, [r7, #24]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d02e      	beq.n	800bf02 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	7d1b      	ldrb	r3, [r3, #20]
 800bea8:	b25b      	sxtb	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	da18      	bge.n	800bee0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	7858      	ldrb	r0, [r3, #1]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6a1a      	ldr	r2, [r3, #32]
 800bebc:	2301      	movs	r3, #1
 800bebe:	f7fd f9d3 	bl	8009268 <disk_write>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d004      	beq.n	800bed2 <f_read+0x1da>
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2201      	movs	r2, #1
 800becc:	755a      	strb	r2, [r3, #21]
 800bece:	2301      	movs	r3, #1
 800bed0:	e04d      	b.n	800bf6e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	7d1b      	ldrb	r3, [r3, #20]
 800bed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	7858      	ldrb	r0, [r3, #1]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800beea:	2301      	movs	r3, #1
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	f7fd f99b 	bl	8009228 <disk_read>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d004      	beq.n	800bf02 <f_read+0x20a>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2201      	movs	r2, #1
 800befc:	755a      	strb	r2, [r3, #21]
 800befe:	2301      	movs	r3, #1
 800bf00:	e035      	b.n	800bf6e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	69ba      	ldr	r2, [r7, #24]
 800bf06:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bf14:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bf16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d901      	bls.n	800bf22 <f_read+0x22a>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf30:	4413      	add	r3, r2
 800bf32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf34:	4619      	mov	r1, r3
 800bf36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf38:	f7fd fa56 	bl	80093e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bf3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	4413      	add	r3, r2
 800bf42:	627b      	str	r3, [r7, #36]	; 0x24
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	699a      	ldr	r2, [r3, #24]
 800bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4a:	441a      	add	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	619a      	str	r2, [r3, #24]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf56:	441a      	add	r2, r3
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f47f af01 	bne.w	800bd6e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3738      	adds	r7, #56	; 0x38
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b08c      	sub	sp, #48	; 0x30
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	60b9      	str	r1, [r7, #8]
 800bf80:	607a      	str	r2, [r7, #4]
 800bf82:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f107 0210 	add.w	r2, r7, #16
 800bf94:	4611      	mov	r1, r2
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff fc74 	bl	800b884 <validate>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bfa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d107      	bne.n	800bfba <f_write+0x44>
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	7d5b      	ldrb	r3, [r3, #21]
 800bfae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bfb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d002      	beq.n	800bfc0 <f_write+0x4a>
 800bfba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfbe:	e14b      	b.n	800c258 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	7d1b      	ldrb	r3, [r3, #20]
 800bfc4:	f003 0302 	and.w	r3, r3, #2
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d101      	bne.n	800bfd0 <f_write+0x5a>
 800bfcc:	2307      	movs	r3, #7
 800bfce:	e143      	b.n	800c258 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	699a      	ldr	r2, [r3, #24]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	441a      	add	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	f080 812d 	bcs.w	800c23c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	43db      	mvns	r3, r3
 800bfe8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bfea:	e127      	b.n	800c23c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f040 80e3 	bne.w	800c1c0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	0a5b      	lsrs	r3, r3, #9
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	8952      	ldrh	r2, [r2, #10]
 800c004:	3a01      	subs	r2, #1
 800c006:	4013      	ands	r3, r2
 800c008:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d143      	bne.n	800c098 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10c      	bne.n	800c032 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	2b00      	cmp	r3, #0
 800c022:	d11a      	bne.n	800c05a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2100      	movs	r1, #0
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fd feb7 	bl	8009d9c <create_chain>
 800c02e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c030:	e013      	b.n	800c05a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c036:	2b00      	cmp	r3, #0
 800c038:	d007      	beq.n	800c04a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	4619      	mov	r1, r3
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7fd ff43 	bl	8009ecc <clmt_clust>
 800c046:	62b8      	str	r0, [r7, #40]	; 0x28
 800c048:	e007      	b.n	800c05a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	69db      	ldr	r3, [r3, #28]
 800c050:	4619      	mov	r1, r3
 800c052:	4610      	mov	r0, r2
 800c054:	f7fd fea2 	bl	8009d9c <create_chain>
 800c058:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 80f2 	beq.w	800c246 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	2b01      	cmp	r3, #1
 800c066:	d104      	bne.n	800c072 <f_write+0xfc>
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2202      	movs	r2, #2
 800c06c:	755a      	strb	r2, [r3, #21]
 800c06e:	2302      	movs	r3, #2
 800c070:	e0f2      	b.n	800c258 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c078:	d104      	bne.n	800c084 <f_write+0x10e>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2201      	movs	r2, #1
 800c07e:	755a      	strb	r2, [r3, #21]
 800c080:	2301      	movs	r3, #1
 800c082:	e0e9      	b.n	800c258 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c088:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d102      	bne.n	800c098 <f_write+0x122>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c096:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	7d1b      	ldrb	r3, [r3, #20]
 800c09c:	b25b      	sxtb	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da18      	bge.n	800c0d4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	7858      	ldrb	r0, [r3, #1]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6a1a      	ldr	r2, [r3, #32]
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	f7fd f8d9 	bl	8009268 <disk_write>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d004      	beq.n	800c0c6 <f_write+0x150>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	755a      	strb	r2, [r3, #21]
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e0c8      	b.n	800c258 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	69db      	ldr	r3, [r3, #28]
 800c0da:	4619      	mov	r1, r3
 800c0dc:	4610      	mov	r0, r2
 800c0de:	f7fd fc4d 	bl	800997c <clust2sect>
 800c0e2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d104      	bne.n	800c0f4 <f_write+0x17e>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	755a      	strb	r2, [r3, #21]
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	e0b1      	b.n	800c258 <f_write+0x2e2>
			sect += csect;
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	0a5b      	lsrs	r3, r3, #9
 800c100:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d03c      	beq.n	800c182 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c108:	69ba      	ldr	r2, [r7, #24]
 800c10a:	6a3b      	ldr	r3, [r7, #32]
 800c10c:	4413      	add	r3, r2
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	8952      	ldrh	r2, [r2, #10]
 800c112:	4293      	cmp	r3, r2
 800c114:	d905      	bls.n	800c122 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	895b      	ldrh	r3, [r3, #10]
 800c11a:	461a      	mov	r2, r3
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	7858      	ldrb	r0, [r3, #1]
 800c126:	6a3b      	ldr	r3, [r7, #32]
 800c128:	697a      	ldr	r2, [r7, #20]
 800c12a:	69f9      	ldr	r1, [r7, #28]
 800c12c:	f7fd f89c 	bl	8009268 <disk_write>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d004      	beq.n	800c140 <f_write+0x1ca>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2201      	movs	r2, #1
 800c13a:	755a      	strb	r2, [r3, #21]
 800c13c:	2301      	movs	r3, #1
 800c13e:	e08b      	b.n	800c258 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6a1a      	ldr	r2, [r3, #32]
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	6a3a      	ldr	r2, [r7, #32]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d915      	bls.n	800c17a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6a1a      	ldr	r2, [r3, #32]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	1ad3      	subs	r3, r2, r3
 800c15c:	025b      	lsls	r3, r3, #9
 800c15e:	69fa      	ldr	r2, [r7, #28]
 800c160:	4413      	add	r3, r2
 800c162:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c166:	4619      	mov	r1, r3
 800c168:	f7fd f93e 	bl	80093e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	7d1b      	ldrb	r3, [r3, #20]
 800c170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c174:	b2da      	uxtb	r2, r3
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	025b      	lsls	r3, r3, #9
 800c17e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c180:	e03f      	b.n	800c202 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6a1b      	ldr	r3, [r3, #32]
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d016      	beq.n	800c1ba <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	699a      	ldr	r2, [r3, #24]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c194:	429a      	cmp	r2, r3
 800c196:	d210      	bcs.n	800c1ba <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	7858      	ldrb	r0, [r3, #1]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	f7fd f83f 	bl	8009228 <disk_read>
 800c1aa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d004      	beq.n	800c1ba <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	755a      	strb	r2, [r3, #21]
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e04e      	b.n	800c258 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c1cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c1ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d901      	bls.n	800c1da <f_write+0x264>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1e8:	4413      	add	r3, r2
 800c1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ec:	69f9      	ldr	r1, [r7, #28]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fd f8fa 	bl	80093e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	7d1b      	ldrb	r3, [r3, #20]
 800c1f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1fc:	b2da      	uxtb	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c202:	69fa      	ldr	r2, [r7, #28]
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	4413      	add	r3, r2
 800c208:	61fb      	str	r3, [r7, #28]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	699a      	ldr	r2, [r3, #24]
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	441a      	add	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	619a      	str	r2, [r3, #24]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	68da      	ldr	r2, [r3, #12]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	429a      	cmp	r2, r3
 800c220:	bf38      	it	cc
 800c222:	461a      	movcc	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	60da      	str	r2, [r3, #12]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	441a      	add	r2, r3
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f47f aed4 	bne.w	800bfec <f_write+0x76>
 800c244:	e000      	b.n	800c248 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c246:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	7d1b      	ldrb	r3, [r3, #20]
 800c24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c250:	b2da      	uxtb	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3730      	adds	r7, #48	; 0x30
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f107 0208 	add.w	r2, r7, #8
 800c26e:	4611      	mov	r1, r2
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff fb07 	bl	800b884 <validate>
 800c276:	4603      	mov	r3, r0
 800c278:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c27a:	7dfb      	ldrb	r3, [r7, #23]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d168      	bne.n	800c352 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	7d1b      	ldrb	r3, [r3, #20]
 800c284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d062      	beq.n	800c352 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	7d1b      	ldrb	r3, [r3, #20]
 800c290:	b25b      	sxtb	r3, r3
 800c292:	2b00      	cmp	r3, #0
 800c294:	da15      	bge.n	800c2c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	7858      	ldrb	r0, [r3, #1]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a1a      	ldr	r2, [r3, #32]
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	f7fc ffdf 	bl	8009268 <disk_write>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <f_sync+0x54>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e04f      	b.n	800c354 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7d1b      	ldrb	r3, [r3, #20]
 800c2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c2c2:	f000 fbff 	bl	800cac4 <get_fattime>
 800c2c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	f7fd fab7 	bl	8009844 <move_window>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d138      	bne.n	800c352 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	330b      	adds	r3, #11
 800c2ea:	781a      	ldrb	r2, [r3, #0]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	330b      	adds	r3, #11
 800c2f0:	f042 0220 	orr.w	r2, r2, #32
 800c2f4:	b2d2      	uxtb	r2, r2
 800c2f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6818      	ldr	r0, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	461a      	mov	r2, r3
 800c302:	68f9      	ldr	r1, [r7, #12]
 800c304:	f7fd ffbc 	bl	800a280 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f103 021c 	add.w	r2, r3, #28
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f7fd f83b 	bl	8009390 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3316      	adds	r3, #22
 800c31e:	6939      	ldr	r1, [r7, #16]
 800c320:	4618      	mov	r0, r3
 800c322:	f7fd f835 	bl	8009390 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3312      	adds	r3, #18
 800c32a:	2100      	movs	r1, #0
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fd f814 	bl	800935a <st_word>
					fs->wflag = 1;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2201      	movs	r2, #1
 800c336:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fd fab0 	bl	80098a0 <sync_fs>
 800c340:	4603      	mov	r3, r0
 800c342:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	7d1b      	ldrb	r3, [r3, #20]
 800c348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c352:	7dfb      	ldrb	r3, [r7, #23]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3718      	adds	r7, #24
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7ff ff7b 	bl	800c260 <f_sync>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d118      	bne.n	800c3a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f107 0208 	add.w	r2, r7, #8
 800c37a:	4611      	mov	r1, r2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff fa81 	bl	800b884 <validate>
 800c382:	4603      	mov	r3, r0
 800c384:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10c      	bne.n	800c3a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	4618      	mov	r0, r3
 800c392:	f7fd f9b3 	bl	80096fc <dec_lock>
 800c396:	4603      	mov	r3, r0
 800c398:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <f_opendir+0x14>
 800c3c0:	2309      	movs	r3, #9
 800c3c2:	e064      	b.n	800c48e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c3c8:	f107 010c 	add.w	r1, r7, #12
 800c3cc:	463b      	mov	r3, r7
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff f805 	bl	800b3e0 <find_volume>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3da:	7dfb      	ldrb	r3, [r7, #23]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d14f      	bne.n	800c480 <f_opendir+0xd0>
		obj->fs = fs;
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7fe feec 	bl	800b1c8 <follow_path>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c3f4:	7dfb      	ldrb	r3, [r7, #23]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d13d      	bne.n	800c476 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c400:	b25b      	sxtb	r3, r3
 800c402:	2b00      	cmp	r3, #0
 800c404:	db12      	blt.n	800c42c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	799b      	ldrb	r3, [r3, #6]
 800c40a:	f003 0310 	and.w	r3, r3, #16
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00a      	beq.n	800c428 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a1b      	ldr	r3, [r3, #32]
 800c418:	4619      	mov	r1, r3
 800c41a:	4610      	mov	r0, r2
 800c41c:	f7fd ff11 	bl	800a242 <ld_clust>
 800c420:	4602      	mov	r2, r0
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	609a      	str	r2, [r3, #8]
 800c426:	e001      	b.n	800c42c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c428:	2305      	movs	r3, #5
 800c42a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d121      	bne.n	800c476 <f_opendir+0xc6>
				obj->id = fs->id;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	88da      	ldrh	r2, [r3, #6]
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c43a:	2100      	movs	r1, #0
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f7fd fd79 	bl	8009f34 <dir_sdi>
 800c442:	4603      	mov	r3, r0
 800c444:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d114      	bne.n	800c476 <f_opendir+0xc6>
					if (obj->sclust) {
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00d      	beq.n	800c470 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c454:	2100      	movs	r1, #0
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7fd f8c2 	bl	80095e0 <inc_lock>
 800c45c:	4602      	mov	r2, r0
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <f_opendir+0xc6>
 800c46a:	2312      	movs	r3, #18
 800c46c:	75fb      	strb	r3, [r7, #23]
 800c46e:	e002      	b.n	800c476 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	2200      	movs	r2, #0
 800c474:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c476:	7dfb      	ldrb	r3, [r7, #23]
 800c478:	2b04      	cmp	r3, #4
 800c47a:	d101      	bne.n	800c480 <f_opendir+0xd0>
 800c47c:	2305      	movs	r3, #5
 800c47e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c480:	7dfb      	ldrb	r3, [r7, #23]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d002      	beq.n	800c48c <f_opendir+0xdc>
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f107 0208 	add.w	r2, r7, #8
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff f9ec 	bl	800b884 <validate>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d110      	bne.n	800c4d8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d006      	beq.n	800c4cc <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fd f91a 	bl	80096fc <dec_lock>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d102      	bne.n	800c4d8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f107 0208 	add.w	r2, r7, #8
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7ff f9c5 	bl	800b884 <validate>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d126      	bne.n	800c552 <f_readdir+0x70>
		if (!fno) {
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d106      	bne.n	800c518 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c50a:	2100      	movs	r1, #0
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7fd fd11 	bl	8009f34 <dir_sdi>
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]
 800c516:	e01c      	b.n	800c552 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c518:	2100      	movs	r1, #0
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7fe f8bc 	bl	800a698 <dir_read>
 800c520:	4603      	mov	r3, r0
 800c522:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c524:	7bfb      	ldrb	r3, [r7, #15]
 800c526:	2b04      	cmp	r3, #4
 800c528:	d101      	bne.n	800c52e <f_readdir+0x4c>
 800c52a:	2300      	movs	r3, #0
 800c52c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10e      	bne.n	800c552 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7fe fb0e 	bl	800ab58 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c53c:	2100      	movs	r1, #0
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7fd fd73 	bl	800a02a <dir_next>
 800c544:	4603      	mov	r3, r0
 800c546:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	d101      	bne.n	800c552 <f_readdir+0x70>
 800c54e:	2300      	movs	r3, #0
 800c550:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c552:	7bfb      	ldrb	r3, [r7, #15]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff ffba 	bl	800c4e2 <f_readdir>
 800c56e:	4603      	mov	r3, r0
 800c570:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800c572:	7bfb      	ldrb	r3, [r7, #15]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d114      	bne.n	800c5a2 <f_findnext+0x46>
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d011      	beq.n	800c5a2 <f_findnext+0x46>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	7d9b      	ldrb	r3, [r3, #22]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00d      	beq.n	800c5a2 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	f103 0116 	add.w	r1, r3, #22
 800c590:	2300      	movs	r3, #0
 800c592:	2200      	movs	r2, #0
 800c594:	f7fe fbe4 	bl	800ad60 <pattern_matching>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d100      	bne.n	800c5a0 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800c59e:	e7e2      	b.n	800c566 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800c5a0:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800c5c0:	6879      	ldr	r1, [r7, #4]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f7ff fef4 	bl	800c3b0 <f_opendir>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d105      	bne.n	800c5de <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800c5d2:	68b9      	ldr	r1, [r7, #8]
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f7ff ffc1 	bl	800c55c <f_findnext>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800c5de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3718      	adds	r7, #24
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b092      	sub	sp, #72	; 0x48
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c5f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c5f8:	f107 030c 	add.w	r3, r7, #12
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7fe feee 	bl	800b3e0 <find_volume>
 800c604:	4603      	mov	r3, r0
 800c606:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800c60a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f040 8099 	bne.w	800c746 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61c:	695a      	ldr	r2, [r3, #20]
 800c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	3b02      	subs	r3, #2
 800c624:	429a      	cmp	r2, r3
 800c626:	d804      	bhi.n	800c632 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62a:	695a      	ldr	r2, [r3, #20]
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	601a      	str	r2, [r3, #0]
 800c630:	e089      	b.n	800c746 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d128      	bne.n	800c690 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c63e:	2302      	movs	r3, #2
 800c640:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c646:	f107 0314 	add.w	r3, r7, #20
 800c64a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fd f9b4 	bl	80099ba <get_fat>
 800c652:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65a:	d103      	bne.n	800c664 <f_getfree+0x7c>
 800c65c:	2301      	movs	r3, #1
 800c65e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c662:	e063      	b.n	800c72c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c666:	2b01      	cmp	r3, #1
 800c668:	d103      	bne.n	800c672 <f_getfree+0x8a>
 800c66a:	2302      	movs	r3, #2
 800c66c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c670:	e05c      	b.n	800c72c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	2b00      	cmp	r3, #0
 800c676:	d102      	bne.n	800c67e <f_getfree+0x96>
 800c678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c67a:	3301      	adds	r3, #1
 800c67c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800c67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c680:	3301      	adds	r3, #1
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d3db      	bcc.n	800c646 <f_getfree+0x5e>
 800c68e:	e04d      	b.n	800c72c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	637b      	str	r3, [r7, #52]	; 0x34
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800c6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d113      	bne.n	800c6d2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c6aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	1c5a      	adds	r2, r3, #1
 800c6b0:	63ba      	str	r2, [r7, #56]	; 0x38
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	f7fd f8c6 	bl	8009844 <move_window>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800c6be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d131      	bne.n	800c72a <f_getfree+0x142>
							p = fs->win;
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	3334      	adds	r3, #52	; 0x34
 800c6ca:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800c6cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6d0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d10f      	bne.n	800c6fa <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c6da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6dc:	f7fc fe02 	bl	80092e4 <ld_word>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d102      	bne.n	800c6ec <f_getfree+0x104>
 800c6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ee:	3302      	adds	r3, #2
 800c6f0:	633b      	str	r3, [r7, #48]	; 0x30
 800c6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f4:	3b02      	subs	r3, #2
 800c6f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c6f8:	e010      	b.n	800c71c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c6fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6fc:	f7fc fe0a 	bl	8009314 <ld_dword>
 800c700:	4603      	mov	r3, r0
 800c702:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d102      	bne.n	800c710 <f_getfree+0x128>
 800c70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c70c:	3301      	adds	r3, #1
 800c70e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800c710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c712:	3304      	adds	r3, #4
 800c714:	633b      	str	r3, [r7, #48]	; 0x30
 800c716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c718:	3b04      	subs	r3, #4
 800c71a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800c71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71e:	3b01      	subs	r3, #1
 800c720:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1bd      	bne.n	800c6a4 <f_getfree+0xbc>
 800c728:	e000      	b.n	800c72c <f_getfree+0x144>
							if (res != FR_OK) break;
 800c72a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c730:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c736:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	791a      	ldrb	r2, [r3, #4]
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	f042 0201 	orr.w	r2, r2, #1
 800c742:	b2d2      	uxtb	r2, r2
 800c744:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c746:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3748      	adds	r7, #72	; 0x48
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c754:	b480      	push	{r7}
 800c756:	b087      	sub	sp, #28
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	4613      	mov	r3, r2
 800c760:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c762:	2301      	movs	r3, #1
 800c764:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c76a:	4b1f      	ldr	r3, [pc, #124]	; (800c7e8 <FATFS_LinkDriverEx+0x94>)
 800c76c:	7a5b      	ldrb	r3, [r3, #9]
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b00      	cmp	r3, #0
 800c772:	d131      	bne.n	800c7d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c774:	4b1c      	ldr	r3, [pc, #112]	; (800c7e8 <FATFS_LinkDriverEx+0x94>)
 800c776:	7a5b      	ldrb	r3, [r3, #9]
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	461a      	mov	r2, r3
 800c77c:	4b1a      	ldr	r3, [pc, #104]	; (800c7e8 <FATFS_LinkDriverEx+0x94>)
 800c77e:	2100      	movs	r1, #0
 800c780:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c782:	4b19      	ldr	r3, [pc, #100]	; (800c7e8 <FATFS_LinkDriverEx+0x94>)
 800c784:	7a5b      	ldrb	r3, [r3, #9]
 800c786:	b2db      	uxtb	r3, r3
 800c788:	4a17      	ldr	r2, [pc, #92]	; (800c7e8 <FATFS_LinkDriverEx+0x94>)
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c792:	4b15      	ldr	r3, [pc, #84]	; (800c7e8 <FATFS_LinkDriverEx+0x94>)
 800c794:	7a5b      	ldrb	r3, [r3, #9]
 800c796:	b2db      	uxtb	r3, r3
 800c798:	461a      	mov	r2, r3
 800c79a:	4b13      	ldr	r3, [pc, #76]	; (800c7e8 <FATFS_LinkDriverEx+0x94>)
 800c79c:	4413      	add	r3, r2
 800c79e:	79fa      	ldrb	r2, [r7, #7]
 800c7a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c7a2:	4b11      	ldr	r3, [pc, #68]	; (800c7e8 <FATFS_LinkDriverEx+0x94>)
 800c7a4:	7a5b      	ldrb	r3, [r3, #9]
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	1c5a      	adds	r2, r3, #1
 800c7aa:	b2d1      	uxtb	r1, r2
 800c7ac:	4a0e      	ldr	r2, [pc, #56]	; (800c7e8 <FATFS_LinkDriverEx+0x94>)
 800c7ae:	7251      	strb	r1, [r2, #9]
 800c7b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c7b2:	7dbb      	ldrb	r3, [r7, #22]
 800c7b4:	3330      	adds	r3, #48	; 0x30
 800c7b6:	b2da      	uxtb	r2, r3
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	223a      	movs	r2, #58	; 0x3a
 800c7c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	3302      	adds	r3, #2
 800c7c8:	222f      	movs	r2, #47	; 0x2f
 800c7ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	3303      	adds	r3, #3
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	371c      	adds	r7, #28
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	200002c4 	.word	0x200002c4

0800c7ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7ff ffaa 	bl	800c754 <FATFS_LinkDriverEx>
 800c800:	4603      	mov	r3, r0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
	...

0800c80c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	6039      	str	r1, [r7, #0]
 800c816:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c818:	88fb      	ldrh	r3, [r7, #6]
 800c81a:	2b7f      	cmp	r3, #127	; 0x7f
 800c81c:	d802      	bhi.n	800c824 <ff_convert+0x18>
		c = chr;
 800c81e:	88fb      	ldrh	r3, [r7, #6]
 800c820:	81fb      	strh	r3, [r7, #14]
 800c822:	e025      	b.n	800c870 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00b      	beq.n	800c842 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c82a:	88fb      	ldrh	r3, [r7, #6]
 800c82c:	2bff      	cmp	r3, #255	; 0xff
 800c82e:	d805      	bhi.n	800c83c <ff_convert+0x30>
 800c830:	88fb      	ldrh	r3, [r7, #6]
 800c832:	3b80      	subs	r3, #128	; 0x80
 800c834:	4a12      	ldr	r2, [pc, #72]	; (800c880 <ff_convert+0x74>)
 800c836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c83a:	e000      	b.n	800c83e <ff_convert+0x32>
 800c83c:	2300      	movs	r3, #0
 800c83e:	81fb      	strh	r3, [r7, #14]
 800c840:	e016      	b.n	800c870 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c842:	2300      	movs	r3, #0
 800c844:	81fb      	strh	r3, [r7, #14]
 800c846:	e009      	b.n	800c85c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c848:	89fb      	ldrh	r3, [r7, #14]
 800c84a:	4a0d      	ldr	r2, [pc, #52]	; (800c880 <ff_convert+0x74>)
 800c84c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c850:	88fa      	ldrh	r2, [r7, #6]
 800c852:	429a      	cmp	r2, r3
 800c854:	d006      	beq.n	800c864 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c856:	89fb      	ldrh	r3, [r7, #14]
 800c858:	3301      	adds	r3, #1
 800c85a:	81fb      	strh	r3, [r7, #14]
 800c85c:	89fb      	ldrh	r3, [r7, #14]
 800c85e:	2b7f      	cmp	r3, #127	; 0x7f
 800c860:	d9f2      	bls.n	800c848 <ff_convert+0x3c>
 800c862:	e000      	b.n	800c866 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c864:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c866:	89fb      	ldrh	r3, [r7, #14]
 800c868:	3380      	adds	r3, #128	; 0x80
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c870:	89fb      	ldrh	r3, [r7, #14]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3714      	adds	r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	080114e4 	.word	0x080114e4

0800c884 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c884:	b480      	push	{r7}
 800c886:	b087      	sub	sp, #28
 800c888:	af00      	add	r7, sp, #0
 800c88a:	4603      	mov	r3, r0
 800c88c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c88e:	88fb      	ldrh	r3, [r7, #6]
 800c890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c894:	d201      	bcs.n	800c89a <ff_wtoupper+0x16>
 800c896:	4b3e      	ldr	r3, [pc, #248]	; (800c990 <ff_wtoupper+0x10c>)
 800c898:	e000      	b.n	800c89c <ff_wtoupper+0x18>
 800c89a:	4b3e      	ldr	r3, [pc, #248]	; (800c994 <ff_wtoupper+0x110>)
 800c89c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	1c9a      	adds	r2, r3, #2
 800c8a2:	617a      	str	r2, [r7, #20]
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c8a8:	8a7b      	ldrh	r3, [r7, #18]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d068      	beq.n	800c980 <ff_wtoupper+0xfc>
 800c8ae:	88fa      	ldrh	r2, [r7, #6]
 800c8b0:	8a7b      	ldrh	r3, [r7, #18]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d364      	bcc.n	800c980 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	1c9a      	adds	r2, r3, #2
 800c8ba:	617a      	str	r2, [r7, #20]
 800c8bc:	881b      	ldrh	r3, [r3, #0]
 800c8be:	823b      	strh	r3, [r7, #16]
 800c8c0:	8a3b      	ldrh	r3, [r7, #16]
 800c8c2:	0a1b      	lsrs	r3, r3, #8
 800c8c4:	81fb      	strh	r3, [r7, #14]
 800c8c6:	8a3b      	ldrh	r3, [r7, #16]
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c8cc:	88fa      	ldrh	r2, [r7, #6]
 800c8ce:	8a79      	ldrh	r1, [r7, #18]
 800c8d0:	8a3b      	ldrh	r3, [r7, #16]
 800c8d2:	440b      	add	r3, r1
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	da49      	bge.n	800c96c <ff_wtoupper+0xe8>
			switch (cmd) {
 800c8d8:	89fb      	ldrh	r3, [r7, #14]
 800c8da:	2b08      	cmp	r3, #8
 800c8dc:	d84f      	bhi.n	800c97e <ff_wtoupper+0xfa>
 800c8de:	a201      	add	r2, pc, #4	; (adr r2, 800c8e4 <ff_wtoupper+0x60>)
 800c8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e4:	0800c909 	.word	0x0800c909
 800c8e8:	0800c91b 	.word	0x0800c91b
 800c8ec:	0800c931 	.word	0x0800c931
 800c8f0:	0800c939 	.word	0x0800c939
 800c8f4:	0800c941 	.word	0x0800c941
 800c8f8:	0800c949 	.word	0x0800c949
 800c8fc:	0800c951 	.word	0x0800c951
 800c900:	0800c959 	.word	0x0800c959
 800c904:	0800c961 	.word	0x0800c961
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c908:	88fa      	ldrh	r2, [r7, #6]
 800c90a:	8a7b      	ldrh	r3, [r7, #18]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	4413      	add	r3, r2
 800c914:	881b      	ldrh	r3, [r3, #0]
 800c916:	80fb      	strh	r3, [r7, #6]
 800c918:	e027      	b.n	800c96a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c91a:	88fa      	ldrh	r2, [r7, #6]
 800c91c:	8a7b      	ldrh	r3, [r7, #18]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	b29b      	uxth	r3, r3
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	b29b      	uxth	r3, r3
 800c928:	88fa      	ldrh	r2, [r7, #6]
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	80fb      	strh	r3, [r7, #6]
 800c92e:	e01c      	b.n	800c96a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c930:	88fb      	ldrh	r3, [r7, #6]
 800c932:	3b10      	subs	r3, #16
 800c934:	80fb      	strh	r3, [r7, #6]
 800c936:	e018      	b.n	800c96a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c938:	88fb      	ldrh	r3, [r7, #6]
 800c93a:	3b20      	subs	r3, #32
 800c93c:	80fb      	strh	r3, [r7, #6]
 800c93e:	e014      	b.n	800c96a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c940:	88fb      	ldrh	r3, [r7, #6]
 800c942:	3b30      	subs	r3, #48	; 0x30
 800c944:	80fb      	strh	r3, [r7, #6]
 800c946:	e010      	b.n	800c96a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c948:	88fb      	ldrh	r3, [r7, #6]
 800c94a:	3b1a      	subs	r3, #26
 800c94c:	80fb      	strh	r3, [r7, #6]
 800c94e:	e00c      	b.n	800c96a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c950:	88fb      	ldrh	r3, [r7, #6]
 800c952:	3308      	adds	r3, #8
 800c954:	80fb      	strh	r3, [r7, #6]
 800c956:	e008      	b.n	800c96a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c958:	88fb      	ldrh	r3, [r7, #6]
 800c95a:	3b50      	subs	r3, #80	; 0x50
 800c95c:	80fb      	strh	r3, [r7, #6]
 800c95e:	e004      	b.n	800c96a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c960:	88fb      	ldrh	r3, [r7, #6]
 800c962:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c966:	80fb      	strh	r3, [r7, #6]
 800c968:	bf00      	nop
			}
			break;
 800c96a:	e008      	b.n	800c97e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c96c:	89fb      	ldrh	r3, [r7, #14]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d195      	bne.n	800c89e <ff_wtoupper+0x1a>
 800c972:	8a3b      	ldrh	r3, [r7, #16]
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	4413      	add	r3, r2
 800c97a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c97c:	e78f      	b.n	800c89e <ff_wtoupper+0x1a>
			break;
 800c97e:	bf00      	nop
	}

	return chr;
 800c980:	88fb      	ldrh	r3, [r7, #6]
}
 800c982:	4618      	mov	r0, r3
 800c984:	371c      	adds	r7, #28
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	080115e4 	.word	0x080115e4
 800c994:	080117d8 	.word	0x080117d8

0800c998 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c9a2:	f000 f86b 	bl	800ca7c <BSP_SD_IsDetected>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d001      	beq.n	800c9b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e005      	b.n	800c9bc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c9b0:	4804      	ldr	r0, [pc, #16]	; (800c9c4 <BSP_SD_Init+0x2c>)
 800c9b2:	f7f7 ff4d 	bl	8004850 <HAL_SD_Init>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	20000ed4 	.word	0x20000ed4

0800c9c8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af02      	add	r7, sp, #8
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	68f9      	ldr	r1, [r7, #12]
 800c9e4:	4806      	ldr	r0, [pc, #24]	; (800ca00 <BSP_SD_ReadBlocks+0x38>)
 800c9e6:	f7f7 ffc3 	bl	8004970 <HAL_SD_ReadBlocks>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20000ed4 	.word	0x20000ed4

0800ca04 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b088      	sub	sp, #32
 800ca08:	af02      	add	r7, sp, #8
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
 800ca10:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	68f9      	ldr	r1, [r7, #12]
 800ca20:	4806      	ldr	r0, [pc, #24]	; (800ca3c <BSP_SD_WriteBlocks+0x38>)
 800ca22:	f7f8 f99f 	bl	8004d64 <HAL_SD_WriteBlocks>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ca30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3718      	adds	r7, #24
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20000ed4 	.word	0x20000ed4

0800ca40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca44:	4805      	ldr	r0, [pc, #20]	; (800ca5c <BSP_SD_GetCardState+0x1c>)
 800ca46:	f7f8 fcff 	bl	8005448 <HAL_SD_GetCardState>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	bf14      	ite	ne
 800ca50:	2301      	movne	r3, #1
 800ca52:	2300      	moveq	r3, #0
 800ca54:	b2db      	uxtb	r3, r3
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20000ed4 	.word	0x20000ed4

0800ca60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	4803      	ldr	r0, [pc, #12]	; (800ca78 <BSP_SD_GetCardInfo+0x18>)
 800ca6c:	f7f8 fcc0 	bl	80053f0 <HAL_SD_GetCardInfo>
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20000ed4 	.word	0x20000ed4

0800ca7c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ca82:	2301      	movs	r3, #1
 800ca84:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ca86:	f000 f825 	bl	800cad4 <BSP_PlatformIsDetected>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d101      	bne.n	800ca94 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ca90:	2300      	movs	r3, #0
 800ca92:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ca94:	79fb      	ldrb	r3, [r7, #7]
 800ca96:	b2db      	uxtb	r3, r3
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800caa4:	4904      	ldr	r1, [pc, #16]	; (800cab8 <MX_FATFS_Init+0x18>)
 800caa6:	4805      	ldr	r0, [pc, #20]	; (800cabc <MX_FATFS_Init+0x1c>)
 800caa8:	f7ff fea0 	bl	800c7ec <FATFS_LinkDriver>
 800caac:	4603      	mov	r3, r0
 800caae:	461a      	mov	r2, r3
 800cab0:	4b03      	ldr	r3, [pc, #12]	; (800cac0 <MX_FATFS_Init+0x20>)
 800cab2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800cab4:	bf00      	nop
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	200008c8 	.word	0x200008c8
 800cabc:	08011894 	.word	0x08011894
 800cac0:	200008c4 	.word	0x200008c4

0800cac4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cac4:	b480      	push	{r7}
 800cac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cac8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800caca:	4618      	mov	r0, r3
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cada:	2301      	movs	r3, #1
 800cadc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cade:	2180      	movs	r1, #128	; 0x80
 800cae0:	4806      	ldr	r0, [pc, #24]	; (800cafc <BSP_PlatformIsDetected+0x28>)
 800cae2:	f7f5 fc85 	bl	80023f0 <HAL_GPIO_ReadPin>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d001      	beq.n	800caf0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800caec:	2300      	movs	r3, #0
 800caee:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800caf0:	79fb      	ldrb	r3, [r7, #7]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	40020800 	.word	0x40020800

0800cb00 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800cb08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800cb0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800cb10:	f003 0301 	and.w	r3, r3, #1
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d013      	beq.n	800cb40 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800cb18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800cb1c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800cb20:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00b      	beq.n	800cb40 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800cb28:	e000      	b.n	800cb2c <ITM_SendChar+0x2c>
    {
      __NOP();
 800cb2a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800cb2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0f9      	beq.n	800cb2a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800cb36:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	b2d2      	uxtb	r2, r2
 800cb3e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800cb40:	687b      	ldr	r3, [r7, #4]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	370c      	adds	r7, #12
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <_write>:
 0x09, 0xe2,                    //   USAGE (Mute)
 0x09, 0xe9,                    //   USAGE (Volume Up)
 0x09, 0xea,                    //   USAGE (Volume Down)
 */

int _write(int file, char *ptr, int len) {
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b086      	sub	sp, #24
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	60b9      	str	r1, [r7, #8]
 800cb58:	607a      	str	r2, [r7, #4]

	int i = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 800cb5e:	2300      	movs	r3, #0
 800cb60:	617b      	str	r3, [r7, #20]
 800cb62:	e009      	b.n	800cb78 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	1c5a      	adds	r2, r3, #1
 800cb68:	60ba      	str	r2, [r7, #8]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff ffc7 	bl	800cb00 <ITM_SendChar>
	for (i = 0; i < len; i++)
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	3301      	adds	r3, #1
 800cb76:	617b      	str	r3, [r7, #20]
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	dbf1      	blt.n	800cb64 <_write+0x16>
	return len;
 800cb80:	687b      	ldr	r3, [r7, #4]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
	...

0800cb8c <hid_send_stop>:

static void hid_send_stop() {
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0;
 800cb90:	4b10      	ldr	r3, [pc, #64]	; (800cbd4 <hid_send_stop+0x48>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800cb96:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <hid_send_stop+0x48>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 22;
 800cb9c:	4b0d      	ldr	r3, [pc, #52]	; (800cbd4 <hid_send_stop+0x48>)
 800cb9e:	2216      	movs	r2, #22
 800cba0:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[1]=0x00;
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800cba2:	2208      	movs	r2, #8
 800cba4:	490b      	ldr	r1, [pc, #44]	; (800cbd4 <hid_send_stop+0x48>)
 800cba6:	480c      	ldr	r0, [pc, #48]	; (800cbd8 <hid_send_stop+0x4c>)
 800cba8:	f7fb fab6 	bl	8008118 <USBD_HID_SendReport>
	HAL_Delay(20);
 800cbac:	2014      	movs	r0, #20
 800cbae:	f7f4 fa2f 	bl	8001010 <HAL_Delay>

	HID_Buffer[0] = 0;
 800cbb2:	4b08      	ldr	r3, [pc, #32]	; (800cbd4 <hid_send_stop+0x48>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800cbb8:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <hid_send_stop+0x48>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 0;
 800cbbe:	4b05      	ldr	r3, [pc, #20]	; (800cbd4 <hid_send_stop+0x48>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800cbc4:	2208      	movs	r2, #8
 800cbc6:	4903      	ldr	r1, [pc, #12]	; (800cbd4 <hid_send_stop+0x48>)
 800cbc8:	4803      	ldr	r0, [pc, #12]	; (800cbd8 <hid_send_stop+0x4c>)
 800cbca:	f7fb faa5 	bl	8008118 <USBD_HID_SendReport>
}
 800cbce:	bf00      	nop
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	20000d78 	.word	0x20000d78
 800cbd8:	20005294 	.word	0x20005294

0800cbdc <hid_send_start>:
static void hid_send_start() {
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0;
 800cbe0:	4b10      	ldr	r3, [pc, #64]	; (800cc24 <hid_send_start+0x48>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800cbe6:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <hid_send_start+0x48>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 19;
 800cbec:	4b0d      	ldr	r3, [pc, #52]	; (800cc24 <hid_send_start+0x48>)
 800cbee:	2213      	movs	r2, #19
 800cbf0:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800cbf2:	2208      	movs	r2, #8
 800cbf4:	490b      	ldr	r1, [pc, #44]	; (800cc24 <hid_send_start+0x48>)
 800cbf6:	480c      	ldr	r0, [pc, #48]	; (800cc28 <hid_send_start+0x4c>)
 800cbf8:	f7fb fa8e 	bl	8008118 <USBD_HID_SendReport>
	HAL_Delay(20);
 800cbfc:	2014      	movs	r0, #20
 800cbfe:	f7f4 fa07 	bl	8001010 <HAL_Delay>

	HID_Buffer[0] = 0;
 800cc02:	4b08      	ldr	r3, [pc, #32]	; (800cc24 <hid_send_start+0x48>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800cc08:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <hid_send_start+0x48>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 0;
 800cc0e:	4b05      	ldr	r3, [pc, #20]	; (800cc24 <hid_send_start+0x48>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800cc14:	2208      	movs	r2, #8
 800cc16:	4903      	ldr	r1, [pc, #12]	; (800cc24 <hid_send_start+0x48>)
 800cc18:	4803      	ldr	r0, [pc, #12]	; (800cc28 <hid_send_start+0x4c>)
 800cc1a:	f7fb fa7d 	bl	8008118 <USBD_HID_SendReport>
}
 800cc1e:	bf00      	nop
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	20000d78 	.word	0x20000d78
 800cc28:	20005294 	.word	0x20005294
 800cc2c:	00000000 	.word	0x00000000

0800cc30 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800cc30:	b5b0      	push	{r4, r5, r7, lr}
 800cc32:	b088      	sub	sp, #32
 800cc34:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800cc36:	f7f4 f979 	bl	8000f2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800cc3a:	f000 f9ad 	bl	800cf98 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800cc3e:	f000 fb9d 	bl	800d37c <MX_GPIO_Init>
	MX_DMA_Init();
 800cc42:	f000 fb73 	bl	800d32c <MX_DMA_Init>
	//MX_USB_DEVICE_Init();
	MX_I2S2_Init();
 800cc46:	f000 fa7b 	bl	800d140 <MX_I2S2_Init>
	MX_SDIO_SD_Init();
 800cc4a:	f000 faa7 	bl	800d19c <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 800cc4e:	f7ff ff27 	bl	800caa0 <MX_FATFS_Init>
	MX_TIM1_Init();
 800cc52:	f000 fac3 	bl	800d1dc <MX_TIM1_Init>
	MX_TIM3_Init();
 800cc56:	f000 fb11 	bl	800d27c <MX_TIM3_Init>
	MX_ADC1_Init();
 800cc5a:	f000 fa1f 	bl	800d09c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim1);
 800cc5e:	48b6      	ldr	r0, [pc, #728]	; (800cf38 <main+0x308>)
 800cc60:	f7f8 fdc1 	bl	80057e6 <HAL_TIM_Base_Start_IT>

	//-----------------init led--------------------

	ws2812_init();
 800cc64:	f001 fee4 	bl	800ea30 <ws2812_init>

	RGB.r = 0;
 800cc68:	4bb4      	ldr	r3, [pc, #720]	; (800cf3c <main+0x30c>)
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	701a      	strb	r2, [r3, #0]
	RGB.g = 0;
 800cc6e:	4bb3      	ldr	r3, [pc, #716]	; (800cf3c <main+0x30c>)
 800cc70:	2200      	movs	r2, #0
 800cc72:	705a      	strb	r2, [r3, #1]
	RGB.b = MAX_BRIGHT;
 800cc74:	4bb1      	ldr	r3, [pc, #708]	; (800cf3c <main+0x30c>)
 800cc76:	22c8      	movs	r2, #200	; 0xc8
 800cc78:	709a      	strb	r2, [r3, #2]

	HSV.h = 0;
 800cc7a:	4bb1      	ldr	r3, [pc, #708]	; (800cf40 <main+0x310>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	701a      	strb	r2, [r3, #0]
	HSV.s = 255;
 800cc80:	4baf      	ldr	r3, [pc, #700]	; (800cf40 <main+0x310>)
 800cc82:	22ff      	movs	r2, #255	; 0xff
 800cc84:	705a      	strb	r2, [r3, #1]
	HSV.v = MAX_BRIGHT;
 800cc86:	4bae      	ldr	r3, [pc, #696]	; (800cf40 <main+0x310>)
 800cc88:	22c8      	movs	r2, #200	; 0xc8
 800cc8a:	709a      	strb	r2, [r3, #2]

	for (int t = 0; t < LED_COUNT; t++) {
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61fb      	str	r3, [r7, #28]
 800cc90:	e02a      	b.n	800cce8 <main+0xb8>
		float val = sin((float) (6.28 / LED_COUNT) * (float) t);
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc9c:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800cf44 <main+0x314>
 800cca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cca4:	ee17 0a90 	vmov	r0, s15
 800cca8:	f7f3 fc56 	bl	8000558 <__aeabi_f2d>
 800ccac:	4603      	mov	r3, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	ec44 3b10 	vmov	d0, r3, r4
 800ccb4:	f003 f92c 	bl	800ff10 <sin>
 800ccb8:	ec54 3b10 	vmov	r3, r4, d0
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	f7f3 ff64 	bl	8000b8c <__aeabi_d2f>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	60bb      	str	r3, [r7, #8]
		if (val > 0) {
 800ccc8:	edd7 7a02 	vldr	s15, [r7, #8]
 800cccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ccd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd4:	dd05      	ble.n	800cce2 <main+0xb2>
			front[t] = val;
 800ccd6:	4a9c      	ldr	r2, [pc, #624]	; (800cf48 <main+0x318>)
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	601a      	str	r2, [r3, #0]
	for (int t = 0; t < LED_COUNT; t++) {
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	3301      	adds	r3, #1
 800cce6:	61fb      	str	r3, [r7, #28]
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	2b17      	cmp	r3, #23
 800ccec:	ddd1      	ble.n	800cc92 <main+0x62>
		}
	}


	//-----------------init SDcard--------------------
	init();
 800ccee:	f000 fbb3 	bl	800d458 <init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		player();
 800ccf2:	f000 fcb7 	bl	800d664 <player>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(5);
 800ccf6:	2005      	movs	r0, #5
 800ccf8:	f7f4 f98a 	bl	8001010 <HAL_Delay>

		HAL_ADC_Start(&hadc1);
 800ccfc:	4893      	ldr	r0, [pc, #588]	; (800cf4c <main+0x31c>)
 800ccfe:	f7f4 f9ed 	bl	80010dc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 800cd02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cd06:	4891      	ldr	r0, [pc, #580]	; (800cf4c <main+0x31c>)
 800cd08:	f7f4 fac1 	bl	800128e <HAL_ADC_PollForConversion>
		adcResult = HAL_ADC_GetValue(&hadc1);
 800cd0c:	488f      	ldr	r0, [pc, #572]	; (800cf4c <main+0x31c>)
 800cd0e:	f7f4 fb42 	bl	8001396 <HAL_ADC_GetValue>
 800cd12:	4602      	mov	r2, r0
 800cd14:	4b8e      	ldr	r3, [pc, #568]	; (800cf50 <main+0x320>)
 800cd16:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 800cd18:	488c      	ldr	r0, [pc, #560]	; (800cf4c <main+0x31c>)
 800cd1a:	f7f4 fa85 	bl	8001228 <HAL_ADC_Stop>

		//________CALC_MAGNITUDE_________________________
		a = 0.99 * a + 0.01 * adcResult;
 800cd1e:	4b8d      	ldr	r3, [pc, #564]	; (800cf54 <main+0x324>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7f3 fc18 	bl	8000558 <__aeabi_f2d>
 800cd28:	a37b      	add	r3, pc, #492	; (adr r3, 800cf18 <main+0x2e8>)
 800cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2e:	f7f3 fc6b 	bl	8000608 <__aeabi_dmul>
 800cd32:	4603      	mov	r3, r0
 800cd34:	460c      	mov	r4, r1
 800cd36:	4625      	mov	r5, r4
 800cd38:	461c      	mov	r4, r3
 800cd3a:	4b85      	ldr	r3, [pc, #532]	; (800cf50 <main+0x320>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7f3 fbe8 	bl	8000514 <__aeabi_ui2d>
 800cd44:	a376      	add	r3, pc, #472	; (adr r3, 800cf20 <main+0x2f0>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	f7f3 fc5d 	bl	8000608 <__aeabi_dmul>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	4620      	mov	r0, r4
 800cd54:	4629      	mov	r1, r5
 800cd56:	f7f3 faa1 	bl	800029c <__adddf3>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	460c      	mov	r4, r1
 800cd5e:	4618      	mov	r0, r3
 800cd60:	4621      	mov	r1, r4
 800cd62:	f7f3 ff13 	bl	8000b8c <__aeabi_d2f>
 800cd66:	4602      	mov	r2, r0
 800cd68:	4b7a      	ldr	r3, [pc, #488]	; (800cf54 <main+0x324>)
 800cd6a:	601a      	str	r2, [r3, #0]
		b = 0.9 * b + 0.1 * adcResult;
 800cd6c:	4b7a      	ldr	r3, [pc, #488]	; (800cf58 <main+0x328>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7f3 fbf1 	bl	8000558 <__aeabi_f2d>
 800cd76:	a36c      	add	r3, pc, #432	; (adr r3, 800cf28 <main+0x2f8>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f7f3 fc44 	bl	8000608 <__aeabi_dmul>
 800cd80:	4603      	mov	r3, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	4625      	mov	r5, r4
 800cd86:	461c      	mov	r4, r3
 800cd88:	4b71      	ldr	r3, [pc, #452]	; (800cf50 <main+0x320>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7f3 fbc1 	bl	8000514 <__aeabi_ui2d>
 800cd92:	a367      	add	r3, pc, #412	; (adr r3, 800cf30 <main+0x300>)
 800cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd98:	f7f3 fc36 	bl	8000608 <__aeabi_dmul>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	4620      	mov	r0, r4
 800cda2:	4629      	mov	r1, r5
 800cda4:	f7f3 fa7a 	bl	800029c <__adddf3>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	460c      	mov	r4, r1
 800cdac:	4618      	mov	r0, r3
 800cdae:	4621      	mov	r1, r4
 800cdb0:	f7f3 feec 	bl	8000b8c <__aeabi_d2f>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	4b68      	ldr	r3, [pc, #416]	; (800cf58 <main+0x328>)
 800cdb8:	601a      	str	r2, [r3, #0]
		d = a - b;
 800cdba:	4b66      	ldr	r3, [pc, #408]	; (800cf54 <main+0x324>)
 800cdbc:	ed93 7a00 	vldr	s14, [r3]
 800cdc0:	4b65      	ldr	r3, [pc, #404]	; (800cf58 <main+0x328>)
 800cdc2:	edd3 7a00 	vldr	s15, [r3]
 800cdc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdca:	4b64      	ldr	r3, [pc, #400]	; (800cf5c <main+0x32c>)
 800cdcc:	edc3 7a00 	vstr	s15, [r3]
		if (d > MAG_VAL) {
 800cdd0:	4b62      	ldr	r3, [pc, #392]	; (800cf5c <main+0x32c>)
 800cdd2:	edd3 7a00 	vldr	s15, [r3]
 800cdd6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800cdda:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde2:	dd03      	ble.n	800cdec <main+0x1bc>
			phoneUp = 0;
 800cde4:	4b5e      	ldr	r3, [pc, #376]	; (800cf60 <main+0x330>)
 800cde6:	2200      	movs	r2, #0
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	e00c      	b.n	800ce06 <main+0x1d6>
		} else if (d < -MAG_VAL) {
 800cdec:	4b5b      	ldr	r3, [pc, #364]	; (800cf5c <main+0x32c>)
 800cdee:	edd3 7a00 	vldr	s15, [r3]
 800cdf2:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800cdf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdfe:	d502      	bpl.n	800ce06 <main+0x1d6>
			phoneUp = 1;
 800ce00:	4b57      	ldr	r3, [pc, #348]	; (800cf60 <main+0x330>)
 800ce02:	2201      	movs	r2, #1
 800ce04:	601a      	str	r2, [r3, #0]
		}

		//___________________HID_Sender____________
		if (phoneUp != phoneUp_) {
 800ce06:	4b56      	ldr	r3, [pc, #344]	; (800cf60 <main+0x330>)
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	4b56      	ldr	r3, [pc, #344]	; (800cf64 <main+0x334>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d008      	beq.n	800ce24 <main+0x1f4>
			if (phoneUp) {
 800ce12:	4b53      	ldr	r3, [pc, #332]	; (800cf60 <main+0x330>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <main+0x1f0>
				hid_send_start();
 800ce1a:	f7ff fedf 	bl	800cbdc <hid_send_start>
 800ce1e:	e001      	b.n	800ce24 <main+0x1f4>

			} else {
				hid_send_stop();
 800ce20:	f7ff feb4 	bl	800cb8c <hid_send_stop>

			}
		}
		phoneUp_ = phoneUp;
 800ce24:	4b4e      	ldr	r3, [pc, #312]	; (800cf60 <main+0x330>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a4e      	ldr	r2, [pc, #312]	; (800cf64 <main+0x334>)
 800ce2a:	6013      	str	r3, [r2, #0]

		if (ledRefresh) {
 800ce2c:	4b4e      	ldr	r3, [pc, #312]	; (800cf68 <main+0x338>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f43f af5e 	beq.w	800ccf2 <main+0xc2>
			 HSV.h = 0;
			 }
			 RGB = HsvToRgb(HSV);
			 */

			ledRefresh = 0;
 800ce36:	4b4c      	ldr	r3, [pc, #304]	; (800cf68 <main+0x338>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]
			if (phoneUp) {
 800ce3c:	4b48      	ldr	r3, [pc, #288]	; (800cf60 <main+0x330>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d065      	beq.n	800cf10 <main+0x2e0>
				for (int i = 0; i < LED_COUNT; i++) {
 800ce44:	2300      	movs	r3, #0
 800ce46:	61bb      	str	r3, [r7, #24]
 800ce48:	e042      	b.n	800ced0 <main+0x2a0>
					ws2812_setPixel_gammaCorrection(RGB.r * front[i],
 800ce4a:	4b3c      	ldr	r3, [pc, #240]	; (800cf3c <main+0x30c>)
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	ee07 3a90 	vmov	s15, r3
 800ce52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce56:	4a3c      	ldr	r2, [pc, #240]	; (800cf48 <main+0x318>)
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4413      	add	r3, r2
 800ce5e:	edd3 7a00 	vldr	s15, [r3]
 800ce62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce6a:	edc7 7a01 	vstr	s15, [r7, #4]
 800ce6e:	793b      	ldrb	r3, [r7, #4]
 800ce70:	b2d8      	uxtb	r0, r3
							RGB.g * front[i], RGB.b * front[i], i);
 800ce72:	4b32      	ldr	r3, [pc, #200]	; (800cf3c <main+0x30c>)
 800ce74:	785b      	ldrb	r3, [r3, #1]
 800ce76:	ee07 3a90 	vmov	s15, r3
 800ce7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce7e:	4a32      	ldr	r2, [pc, #200]	; (800cf48 <main+0x318>)
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4413      	add	r3, r2
 800ce86:	edd3 7a00 	vldr	s15, [r3]
 800ce8a:	ee67 7a27 	vmul.f32	s15, s14, s15
					ws2812_setPixel_gammaCorrection(RGB.r * front[i],
 800ce8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce92:	edc7 7a01 	vstr	s15, [r7, #4]
 800ce96:	793b      	ldrb	r3, [r7, #4]
 800ce98:	b2d9      	uxtb	r1, r3
							RGB.g * front[i], RGB.b * front[i], i);
 800ce9a:	4b28      	ldr	r3, [pc, #160]	; (800cf3c <main+0x30c>)
 800ce9c:	789b      	ldrb	r3, [r3, #2]
 800ce9e:	ee07 3a90 	vmov	s15, r3
 800cea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cea6:	4a28      	ldr	r2, [pc, #160]	; (800cf48 <main+0x318>)
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4413      	add	r3, r2
 800ceae:	edd3 7a00 	vldr	s15, [r3]
 800ceb2:	ee67 7a27 	vmul.f32	s15, s14, s15
					ws2812_setPixel_gammaCorrection(RGB.r * front[i],
 800ceb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceba:	edc7 7a01 	vstr	s15, [r7, #4]
 800cebe:	793b      	ldrb	r3, [r7, #4]
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	f001 fdcd 	bl	800ea64 <ws2812_setPixel_gammaCorrection>
				for (int i = 0; i < LED_COUNT; i++) {
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	3301      	adds	r3, #1
 800cece:	61bb      	str	r3, [r7, #24]
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	2b17      	cmp	r3, #23
 800ced4:	ddb9      	ble.n	800ce4a <main+0x21a>
					//ws2812_pixel_rgb_to_buf_dma(RGB.r * front[i], RGB.g * front[i],RGB.b * front[i], i);
				}
				ws2812_light();
 800ced6:	f001 fe7f 	bl	800ebd8 <ws2812_light>
				//HAL_Delay(40);

				//shift front
				float tmp = front[0];
 800ceda:	4b1b      	ldr	r3, [pc, #108]	; (800cf48 <main+0x318>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]
				for (int t = 0; t < (LED_COUNT - 1); t++) {
 800cee0:	2300      	movs	r3, #0
 800cee2:	617b      	str	r3, [r7, #20]
 800cee4:	e00d      	b.n	800cf02 <main+0x2d2>
					front[t] = front[t + 1];
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	3301      	adds	r3, #1
 800ceea:	4a17      	ldr	r2, [pc, #92]	; (800cf48 <main+0x318>)
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	4915      	ldr	r1, [pc, #84]	; (800cf48 <main+0x318>)
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	440b      	add	r3, r1
 800cefa:	601a      	str	r2, [r3, #0]
				for (int t = 0; t < (LED_COUNT - 1); t++) {
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	3301      	adds	r3, #1
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2b16      	cmp	r3, #22
 800cf06:	ddee      	ble.n	800cee6 <main+0x2b6>
				}
				front[LED_COUNT - 1] = tmp;
 800cf08:	4a0f      	ldr	r2, [pc, #60]	; (800cf48 <main+0x318>)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800cf0e:	e6f0      	b.n	800ccf2 <main+0xc2>
			} else {
				for (int i = 0; i < LED_COUNT; i++) {
 800cf10:	2300      	movs	r3, #0
 800cf12:	613b      	str	r3, [r7, #16]
 800cf14:	e037      	b.n	800cf86 <main+0x356>
 800cf16:	bf00      	nop
 800cf18:	7ae147ae 	.word	0x7ae147ae
 800cf1c:	3fefae14 	.word	0x3fefae14
 800cf20:	47ae147b 	.word	0x47ae147b
 800cf24:	3f847ae1 	.word	0x3f847ae1
 800cf28:	cccccccd 	.word	0xcccccccd
 800cf2c:	3feccccc 	.word	0x3feccccc
 800cf30:	9999999a 	.word	0x9999999a
 800cf34:	3fb99999 	.word	0x3fb99999
 800cf38:	20000e94 	.word	0x20000e94
 800cf3c:	20000e2c 	.word	0x20000e2c
 800cf40:	20000e30 	.word	0x20000e30
 800cf44:	3e85f92c 	.word	0x3e85f92c
 800cf48:	20000d80 	.word	0x20000d80
 800cf4c:	20000de4 	.word	0x20000de4
 800cf50:	20000de0 	.word	0x20000de0
 800cf54:	200002d4 	.word	0x200002d4
 800cf58:	200002d8 	.word	0x200002d8
 800cf5c:	200002dc 	.word	0x200002dc
 800cf60:	200002d0 	.word	0x200002d0
 800cf64:	2000000c 	.word	0x2000000c
 800cf68:	20000008 	.word	0x20000008
					ws2812_setPixel_gammaCorrection(RGB.r, RGB.g, RGB.b, i);
 800cf6c:	4b09      	ldr	r3, [pc, #36]	; (800cf94 <main+0x364>)
 800cf6e:	7818      	ldrb	r0, [r3, #0]
 800cf70:	4b08      	ldr	r3, [pc, #32]	; (800cf94 <main+0x364>)
 800cf72:	7859      	ldrb	r1, [r3, #1]
 800cf74:	4b07      	ldr	r3, [pc, #28]	; (800cf94 <main+0x364>)
 800cf76:	789a      	ldrb	r2, [r3, #2]
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	f001 fd72 	bl	800ea64 <ws2812_setPixel_gammaCorrection>
				for (int i = 0; i < LED_COUNT; i++) {
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	3301      	adds	r3, #1
 800cf84:	613b      	str	r3, [r7, #16]
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	2b17      	cmp	r3, #23
 800cf8a:	ddef      	ble.n	800cf6c <main+0x33c>
					//ws2812_pixel_rgb_to_buf_dma(RGB.r, RGB.g ,RGB.b , i);
				}
				ws2812_light();
 800cf8c:	f001 fe24 	bl	800ebd8 <ws2812_light>
		player();
 800cf90:	e6af      	b.n	800ccf2 <main+0xc2>
 800cf92:	bf00      	nop
 800cf94:	20000e2c 	.word	0x20000e2c

0800cf98 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b098      	sub	sp, #96	; 0x60
 800cf9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800cf9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfa2:	2230      	movs	r2, #48	; 0x30
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f001 fe94 	bl	800ecd4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800cfac:	f107 031c 	add.w	r3, r7, #28
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	605a      	str	r2, [r3, #4]
 800cfb6:	609a      	str	r2, [r3, #8]
 800cfb8:	60da      	str	r2, [r3, #12]
 800cfba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800cfbc:	f107 0308 	add.w	r3, r7, #8
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	605a      	str	r2, [r3, #4]
 800cfc6:	609a      	str	r2, [r3, #8]
 800cfc8:	60da      	str	r2, [r3, #12]
 800cfca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800cfcc:	2300      	movs	r3, #0
 800cfce:	607b      	str	r3, [r7, #4]
 800cfd0:	4b30      	ldr	r3, [pc, #192]	; (800d094 <SystemClock_Config+0xfc>)
 800cfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd4:	4a2f      	ldr	r2, [pc, #188]	; (800d094 <SystemClock_Config+0xfc>)
 800cfd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfda:	6413      	str	r3, [r2, #64]	; 0x40
 800cfdc:	4b2d      	ldr	r3, [pc, #180]	; (800d094 <SystemClock_Config+0xfc>)
 800cfde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfe4:	607b      	str	r3, [r7, #4]
 800cfe6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800cfe8:	2300      	movs	r3, #0
 800cfea:	603b      	str	r3, [r7, #0]
 800cfec:	4b2a      	ldr	r3, [pc, #168]	; (800d098 <SystemClock_Config+0x100>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800cff4:	4a28      	ldr	r2, [pc, #160]	; (800d098 <SystemClock_Config+0x100>)
 800cff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	4b26      	ldr	r3, [pc, #152]	; (800d098 <SystemClock_Config+0x100>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d004:	603b      	str	r3, [r7, #0]
 800d006:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d008:	2301      	movs	r3, #1
 800d00a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d00c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d010:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d012:	2302      	movs	r3, #2
 800d014:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d01a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800d01c:	2308      	movs	r3, #8
 800d01e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 125;
 800d020:	237d      	movs	r3, #125	; 0x7d
 800d022:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800d024:	2304      	movs	r3, #4
 800d026:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800d028:	2304      	movs	r3, #4
 800d02a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800d02c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d030:	4618      	mov	r0, r3
 800d032:	f7f6 fe81 	bl	8003d38 <HAL_RCC_OscConfig>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <SystemClock_Config+0xa8>
		Error_Handler();
 800d03c:	f000 fa04 	bl	800d448 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800d040:	230f      	movs	r3, #15
 800d042:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d044:	2302      	movs	r3, #2
 800d046:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d048:	2300      	movs	r3, #0
 800d04a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d04c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d050:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d052:	2300      	movs	r3, #0
 800d054:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800d056:	f107 031c 	add.w	r3, r7, #28
 800d05a:	2101      	movs	r1, #1
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7f7 f8db 	bl	8004218 <HAL_RCC_ClockConfig>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <SystemClock_Config+0xd4>
		Error_Handler();
 800d068:	f000 f9ee 	bl	800d448 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800d06c:	2301      	movs	r3, #1
 800d06e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800d070:	23c0      	movs	r3, #192	; 0xc0
 800d072:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 800d074:	2304      	movs	r3, #4
 800d076:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800d078:	f107 0308 	add.w	r3, r7, #8
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7f7 fa9f 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d001      	beq.n	800d08c <SystemClock_Config+0xf4>
		Error_Handler();
 800d088:	f000 f9de 	bl	800d448 <Error_Handler>
	}
}
 800d08c:	bf00      	nop
 800d08e:	3760      	adds	r7, #96	; 0x60
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	40023800 	.word	0x40023800
 800d098:	40007000 	.word	0x40007000

0800d09c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800d0a2:	463b      	mov	r3, r7
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	605a      	str	r2, [r3, #4]
 800d0aa:	609a      	str	r2, [r3, #8]
 800d0ac:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800d0ae:	4b21      	ldr	r3, [pc, #132]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0b0:	4a21      	ldr	r2, [pc, #132]	; (800d138 <MX_ADC1_Init+0x9c>)
 800d0b2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800d0b4:	4b1f      	ldr	r3, [pc, #124]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d0ba:	4b1e      	ldr	r3, [pc, #120]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800d0c0:	4b1c      	ldr	r3, [pc, #112]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800d0c6:	4b1b      	ldr	r3, [pc, #108]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d0cc:	4b19      	ldr	r3, [pc, #100]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d0d4:	4b17      	ldr	r3, [pc, #92]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d0da:	4b16      	ldr	r3, [pc, #88]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0dc:	4a17      	ldr	r2, [pc, #92]	; (800d13c <MX_ADC1_Init+0xa0>)
 800d0de:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d0e0:	4b14      	ldr	r3, [pc, #80]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800d0e6:	4b13      	ldr	r3, [pc, #76]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800d0ec:	4b11      	ldr	r3, [pc, #68]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d0f4:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800d0fa:	480e      	ldr	r0, [pc, #56]	; (800d134 <MX_ADC1_Init+0x98>)
 800d0fc:	f7f3 ffaa 	bl	8001054 <HAL_ADC_Init>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <MX_ADC1_Init+0x6e>
		Error_Handler();
 800d106:	f000 f99f 	bl	800d448 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800d10a:	2303      	movs	r3, #3
 800d10c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800d10e:	2301      	movs	r3, #1
 800d110:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800d112:	2300      	movs	r3, #0
 800d114:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800d116:	463b      	mov	r3, r7
 800d118:	4619      	mov	r1, r3
 800d11a:	4806      	ldr	r0, [pc, #24]	; (800d134 <MX_ADC1_Init+0x98>)
 800d11c:	f7f4 f948 	bl	80013b0 <HAL_ADC_ConfigChannel>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <MX_ADC1_Init+0x8e>
		Error_Handler();
 800d126:	f000 f98f 	bl	800d448 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800d12a:	bf00      	nop
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	20000de4 	.word	0x20000de4
 800d138:	40012000 	.word	0x40012000
 800d13c:	0f000001 	.word	0x0f000001

0800d140 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 800d140:	b580      	push	{r7, lr}
 800d142:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 800d144:	4b13      	ldr	r3, [pc, #76]	; (800d194 <MX_I2S2_Init+0x54>)
 800d146:	4a14      	ldr	r2, [pc, #80]	; (800d198 <MX_I2S2_Init+0x58>)
 800d148:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800d14a:	4b12      	ldr	r3, [pc, #72]	; (800d194 <MX_I2S2_Init+0x54>)
 800d14c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d150:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800d152:	4b10      	ldr	r3, [pc, #64]	; (800d194 <MX_I2S2_Init+0x54>)
 800d154:	2200      	movs	r2, #0
 800d156:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800d158:	4b0e      	ldr	r3, [pc, #56]	; (800d194 <MX_I2S2_Init+0x54>)
 800d15a:	2200      	movs	r2, #0
 800d15c:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800d15e:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <MX_I2S2_Init+0x54>)
 800d160:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d164:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800d166:	4b0b      	ldr	r3, [pc, #44]	; (800d194 <MX_I2S2_Init+0x54>)
 800d168:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800d16c:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800d16e:	4b09      	ldr	r3, [pc, #36]	; (800d194 <MX_I2S2_Init+0x54>)
 800d170:	2200      	movs	r2, #0
 800d172:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800d174:	4b07      	ldr	r3, [pc, #28]	; (800d194 <MX_I2S2_Init+0x54>)
 800d176:	2200      	movs	r2, #0
 800d178:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800d17a:	4b06      	ldr	r3, [pc, #24]	; (800d194 <MX_I2S2_Init+0x54>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 800d180:	4804      	ldr	r0, [pc, #16]	; (800d194 <MX_I2S2_Init+0x54>)
 800d182:	f7f5 f94d 	bl	8002420 <HAL_I2S_Init>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d001      	beq.n	800d190 <MX_I2S2_Init+0x50>
		Error_Handler();
 800d18c:	f000 f95c 	bl	800d448 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 800d190:	bf00      	nop
 800d192:	bd80      	pop	{r7, pc}
 800d194:	20001018 	.word	0x20001018
 800d198:	40003800 	.word	0x40003800

0800d19c <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 800d19c:	b480      	push	{r7}
 800d19e:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 800d1a0:	4b0c      	ldr	r3, [pc, #48]	; (800d1d4 <MX_SDIO_SD_Init+0x38>)
 800d1a2:	4a0d      	ldr	r2, [pc, #52]	; (800d1d8 <MX_SDIO_SD_Init+0x3c>)
 800d1a4:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800d1a6:	4b0b      	ldr	r3, [pc, #44]	; (800d1d4 <MX_SDIO_SD_Init+0x38>)
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800d1ac:	4b09      	ldr	r3, [pc, #36]	; (800d1d4 <MX_SDIO_SD_Init+0x38>)
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d1b2:	4b08      	ldr	r3, [pc, #32]	; (800d1d4 <MX_SDIO_SD_Init+0x38>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800d1b8:	4b06      	ldr	r3, [pc, #24]	; (800d1d4 <MX_SDIO_SD_Init+0x38>)
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d1be:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <MX_SDIO_SD_Init+0x38>)
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 8;
 800d1c4:	4b03      	ldr	r3, [pc, #12]	; (800d1d4 <MX_SDIO_SD_Init+0x38>)
 800d1c6:	2208      	movs	r2, #8
 800d1c8:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800d1ca:	bf00      	nop
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr
 800d1d4:	20000ed4 	.word	0x20000ed4
 800d1d8:	40012c00 	.word	0x40012c00

0800d1dc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800d1e2:	f107 0308 	add.w	r3, r7, #8
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	605a      	str	r2, [r3, #4]
 800d1ec:	609a      	str	r2, [r3, #8]
 800d1ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d1f0:	463b      	mov	r3, r7
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800d1f8:	4b1e      	ldr	r3, [pc, #120]	; (800d274 <MX_TIM1_Init+0x98>)
 800d1fa:	4a1f      	ldr	r2, [pc, #124]	; (800d278 <MX_TIM1_Init+0x9c>)
 800d1fc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64000;
 800d1fe:	4b1d      	ldr	r3, [pc, #116]	; (800d274 <MX_TIM1_Init+0x98>)
 800d200:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800d204:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d206:	4b1b      	ldr	r3, [pc, #108]	; (800d274 <MX_TIM1_Init+0x98>)
 800d208:	2200      	movs	r2, #0
 800d20a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 30;
 800d20c:	4b19      	ldr	r3, [pc, #100]	; (800d274 <MX_TIM1_Init+0x98>)
 800d20e:	221e      	movs	r2, #30
 800d210:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d212:	4b18      	ldr	r3, [pc, #96]	; (800d274 <MX_TIM1_Init+0x98>)
 800d214:	2200      	movs	r2, #0
 800d216:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800d218:	4b16      	ldr	r3, [pc, #88]	; (800d274 <MX_TIM1_Init+0x98>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d21e:	4b15      	ldr	r3, [pc, #84]	; (800d274 <MX_TIM1_Init+0x98>)
 800d220:	2200      	movs	r2, #0
 800d222:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800d224:	4813      	ldr	r0, [pc, #76]	; (800d274 <MX_TIM1_Init+0x98>)
 800d226:	f7f8 fab3 	bl	8005790 <HAL_TIM_Base_Init>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d001      	beq.n	800d234 <MX_TIM1_Init+0x58>
		Error_Handler();
 800d230:	f000 f90a 	bl	800d448 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d238:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800d23a:	f107 0308 	add.w	r3, r7, #8
 800d23e:	4619      	mov	r1, r3
 800d240:	480c      	ldr	r0, [pc, #48]	; (800d274 <MX_TIM1_Init+0x98>)
 800d242:	f7f8 fdf3 	bl	8005e2c <HAL_TIM_ConfigClockSource>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d001      	beq.n	800d250 <MX_TIM1_Init+0x74>
		Error_Handler();
 800d24c:	f000 f8fc 	bl	800d448 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d250:	2300      	movs	r3, #0
 800d252:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d254:	2300      	movs	r3, #0
 800d256:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800d258:	463b      	mov	r3, r7
 800d25a:	4619      	mov	r1, r3
 800d25c:	4805      	ldr	r0, [pc, #20]	; (800d274 <MX_TIM1_Init+0x98>)
 800d25e:	f7f9 fa31 	bl	80066c4 <HAL_TIMEx_MasterConfigSynchronization>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800d268:	f000 f8ee 	bl	800d448 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800d26c:	bf00      	nop
 800d26e:	3718      	adds	r7, #24
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	20000e94 	.word	0x20000e94
 800d278:	40010000 	.word	0x40010000

0800d27c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b08a      	sub	sp, #40	; 0x28
 800d280:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d282:	f107 0320 	add.w	r3, r7, #32
 800d286:	2200      	movs	r2, #0
 800d288:	601a      	str	r2, [r3, #0]
 800d28a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d28c:	1d3b      	adds	r3, r7, #4
 800d28e:	2200      	movs	r2, #0
 800d290:	601a      	str	r2, [r3, #0]
 800d292:	605a      	str	r2, [r3, #4]
 800d294:	609a      	str	r2, [r3, #8]
 800d296:	60da      	str	r2, [r3, #12]
 800d298:	611a      	str	r2, [r3, #16]
 800d29a:	615a      	str	r2, [r3, #20]
 800d29c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800d29e:	4b21      	ldr	r3, [pc, #132]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d2a0:	4a21      	ldr	r2, [pc, #132]	; (800d328 <MX_TIM3_Init+0xac>)
 800d2a2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800d2a4:	4b1f      	ldr	r3, [pc, #124]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2aa:	4b1e      	ldr	r3, [pc, #120]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 80;
 800d2b0:	4b1c      	ldr	r3, [pc, #112]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d2b2:	2250      	movs	r2, #80	; 0x50
 800d2b4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d2b6:	4b1b      	ldr	r3, [pc, #108]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d2bc:	4b19      	ldr	r3, [pc, #100]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800d2c2:	4818      	ldr	r0, [pc, #96]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d2c4:	f7f8 fab3 	bl	800582e <HAL_TIM_PWM_Init>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <MX_TIM3_Init+0x56>
		Error_Handler();
 800d2ce:	f000 f8bb 	bl	800d448 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800d2da:	f107 0320 	add.w	r3, r7, #32
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4810      	ldr	r0, [pc, #64]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d2e2:	f7f9 f9ef 	bl	80066c4 <HAL_TIMEx_MasterConfigSynchronization>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d001      	beq.n	800d2f0 <MX_TIM3_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 800d2ec:	f000 f8ac 	bl	800d448 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d2f0:	2360      	movs	r3, #96	; 0x60
 800d2f2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800d300:	1d3b      	adds	r3, r7, #4
 800d302:	2204      	movs	r2, #4
 800d304:	4619      	mov	r1, r3
 800d306:	4807      	ldr	r0, [pc, #28]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d308:	f7f8 fcca 	bl	8005ca0 <HAL_TIM_PWM_ConfigChannel>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800d312:	f000 f899 	bl	800d448 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800d316:	4803      	ldr	r0, [pc, #12]	; (800d324 <MX_TIM3_Init+0xa8>)
 800d318:	f001 f820 	bl	800e35c <HAL_TIM_MspPostInit>

}
 800d31c:	bf00      	nop
 800d31e:	3728      	adds	r7, #40	; 0x28
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	20000d38 	.word	0x20000d38
 800d328:	40000400 	.word	0x40000400

0800d32c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800d332:	2300      	movs	r3, #0
 800d334:	607b      	str	r3, [r7, #4]
 800d336:	4b10      	ldr	r3, [pc, #64]	; (800d378 <MX_DMA_Init+0x4c>)
 800d338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33a:	4a0f      	ldr	r2, [pc, #60]	; (800d378 <MX_DMA_Init+0x4c>)
 800d33c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d340:	6313      	str	r3, [r2, #48]	; 0x30
 800d342:	4b0d      	ldr	r3, [pc, #52]	; (800d378 <MX_DMA_Init+0x4c>)
 800d344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d34a:	607b      	str	r3, [r7, #4]
 800d34c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800d34e:	2200      	movs	r2, #0
 800d350:	2100      	movs	r1, #0
 800d352:	200f      	movs	r0, #15
 800d354:	f7f4 fb25 	bl	80019a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800d358:	200f      	movs	r0, #15
 800d35a:	f7f4 fb3e 	bl	80019da <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800d35e:	2200      	movs	r2, #0
 800d360:	2100      	movs	r1, #0
 800d362:	2010      	movs	r0, #16
 800d364:	f7f4 fb1d 	bl	80019a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800d368:	2010      	movs	r0, #16
 800d36a:	f7f4 fb36 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 800d36e:	bf00      	nop
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	40023800 	.word	0x40023800

0800d37c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b08a      	sub	sp, #40	; 0x28
 800d380:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d382:	f107 0314 	add.w	r3, r7, #20
 800d386:	2200      	movs	r2, #0
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	605a      	str	r2, [r3, #4]
 800d38c:	609a      	str	r2, [r3, #8]
 800d38e:	60da      	str	r2, [r3, #12]
 800d390:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800d392:	2300      	movs	r3, #0
 800d394:	613b      	str	r3, [r7, #16]
 800d396:	4b2a      	ldr	r3, [pc, #168]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d39a:	4a29      	ldr	r2, [pc, #164]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3a0:	6313      	str	r3, [r2, #48]	; 0x30
 800d3a2:	4b27      	ldr	r3, [pc, #156]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3aa:	613b      	str	r3, [r7, #16]
 800d3ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	60fb      	str	r3, [r7, #12]
 800d3b2:	4b23      	ldr	r3, [pc, #140]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3b6:	4a22      	ldr	r2, [pc, #136]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3b8:	f043 0304 	orr.w	r3, r3, #4
 800d3bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d3be:	4b20      	ldr	r3, [pc, #128]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3c2:	f003 0304 	and.w	r3, r3, #4
 800d3c6:	60fb      	str	r3, [r7, #12]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	60bb      	str	r3, [r7, #8]
 800d3ce:	4b1c      	ldr	r3, [pc, #112]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d2:	4a1b      	ldr	r2, [pc, #108]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3d4:	f043 0301 	orr.w	r3, r3, #1
 800d3d8:	6313      	str	r3, [r2, #48]	; 0x30
 800d3da:	4b19      	ldr	r3, [pc, #100]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	60bb      	str	r3, [r7, #8]
 800d3e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	607b      	str	r3, [r7, #4]
 800d3ea:	4b15      	ldr	r3, [pc, #84]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ee:	4a14      	ldr	r2, [pc, #80]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3f0:	f043 0302 	orr.w	r3, r3, #2
 800d3f4:	6313      	str	r3, [r2, #48]	; 0x30
 800d3f6:	4b12      	ldr	r3, [pc, #72]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3fa:	f003 0302 	and.w	r3, r3, #2
 800d3fe:	607b      	str	r3, [r7, #4]
 800d400:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800d402:	2300      	movs	r3, #0
 800d404:	603b      	str	r3, [r7, #0]
 800d406:	4b0e      	ldr	r3, [pc, #56]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d40a:	4a0d      	ldr	r2, [pc, #52]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d40c:	f043 0308 	orr.w	r3, r3, #8
 800d410:	6313      	str	r3, [r2, #48]	; 0x30
 800d412:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <MX_GPIO_Init+0xc4>)
 800d414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d416:	f003 0308 	and.w	r3, r3, #8
 800d41a:	603b      	str	r3, [r7, #0]
 800d41c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : CardDet_Pin */
	GPIO_InitStruct.Pin = CardDet_Pin;
 800d41e:	2380      	movs	r3, #128	; 0x80
 800d420:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d422:	2300      	movs	r3, #0
 800d424:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d426:	2301      	movs	r3, #1
 800d428:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CardDet_GPIO_Port, &GPIO_InitStruct);
 800d42a:	f107 0314 	add.w	r3, r7, #20
 800d42e:	4619      	mov	r1, r3
 800d430:	4804      	ldr	r0, [pc, #16]	; (800d444 <MX_GPIO_Init+0xc8>)
 800d432:	f7f4 fe5b 	bl	80020ec <HAL_GPIO_Init>

}
 800d436:	bf00      	nop
 800d438:	3728      	adds	r7, #40	; 0x28
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	40023800 	.word	0x40023800
 800d444:	40020800 	.word	0x40020800

0800d448 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800d448:	b480      	push	{r7}
 800d44a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800d44c:	bf00      	nop
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr
	...

0800d458 <init>:
volatile uint16_t *signal_read_buff = NULL;
volatile uint16_t signal_buff1[4096];
volatile uint16_t signal_buff2[4096];
volatile int adccnt = 0;

void init() {
 800d458:	b580      	push	{r7, lr}
 800d45a:	b0dc      	sub	sp, #368	; 0x170
 800d45c:	af00      	add	r7, sp, #0
	FRESULT res;
	printf("hello\n");
 800d45e:	486c      	ldr	r0, [pc, #432]	; (800d610 <init+0x1b8>)
 800d460:	f001 fd5c 	bl	800ef1c <puts>
	printf("Ready!\r\n");
 800d464:	486b      	ldr	r0, [pc, #428]	; (800d614 <init+0x1bc>)
 800d466:	f001 fd59 	bl	800ef1c <puts>
	printf("CardDetect : %d!\r\n",
			HAL_GPIO_ReadPin(CardDet_GPIO_Port, CardDet_Pin));
 800d46a:	2180      	movs	r1, #128	; 0x80
 800d46c:	486a      	ldr	r0, [pc, #424]	; (800d618 <init+0x1c0>)
 800d46e:	f7f4 ffbf 	bl	80023f0 <HAL_GPIO_ReadPin>
 800d472:	4603      	mov	r3, r0
	printf("CardDetect : %d!\r\n",
 800d474:	4619      	mov	r1, r3
 800d476:	4869      	ldr	r0, [pc, #420]	; (800d61c <init+0x1c4>)
 800d478:	f001 fcdc 	bl	800ee34 <iprintf>

	// mount the default drive
	res = f_mount(&fs, "", 1);
 800d47c:	2201      	movs	r2, #1
 800d47e:	4968      	ldr	r1, [pc, #416]	; (800d620 <init+0x1c8>)
 800d480:	4868      	ldr	r0, [pc, #416]	; (800d624 <init+0x1cc>)
 800d482:	f7fe fa35 	bl	800b8f0 <f_mount>
 800d486:	4603      	mov	r3, r0
 800d488:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 800d48c:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d490:	2b00      	cmp	r3, #0
 800d492:	d006      	beq.n	800d4a2 <init+0x4a>
		printf("f_mount() failed, res = %d\r\n", res);
 800d494:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d498:	4619      	mov	r1, r3
 800d49a:	4863      	ldr	r0, [pc, #396]	; (800d628 <init+0x1d0>)
 800d49c:	f001 fcca 	bl	800ee34 <iprintf>
		return;
 800d4a0:	e0b2      	b.n	800d608 <init+0x1b0>
	}

	printf("f_mount() done!\r\n");
 800d4a2:	4862      	ldr	r0, [pc, #392]	; (800d62c <init+0x1d4>)
 800d4a4:	f001 fd3a 	bl	800ef1c <puts>

	uint32_t freeClust;
	FATFS *fs_ptr = &fs;
 800d4a8:	4b5e      	ldr	r3, [pc, #376]	; (800d624 <init+0x1cc>)
 800d4aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	// Warning! This fills fs.n_fatent and fs.csize!
	res = f_getfree("", &freeClust, &fs_ptr);
 800d4ae:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800d4b2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	4859      	ldr	r0, [pc, #356]	; (800d620 <init+0x1c8>)
 800d4ba:	f7ff f895 	bl	800c5e8 <f_getfree>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 800d4c4:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d006      	beq.n	800d4da <init+0x82>
		printf("f_getfree() failed, res = %d\r\n", res);
 800d4cc:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4857      	ldr	r0, [pc, #348]	; (800d630 <init+0x1d8>)
 800d4d4:	f001 fcae 	bl	800ee34 <iprintf>
		return;
 800d4d8:	e096      	b.n	800d608 <init+0x1b0>
	}

	printf("f_getfree() done!\r\n");
 800d4da:	4856      	ldr	r0, [pc, #344]	; (800d634 <init+0x1dc>)
 800d4dc:	f001 fd1e 	bl	800ef1c <puts>

	uint32_t totalBlocks = (fs.n_fatent - 2) * fs.csize;
 800d4e0:	4b50      	ldr	r3, [pc, #320]	; (800d624 <init+0x1cc>)
 800d4e2:	699b      	ldr	r3, [r3, #24]
 800d4e4:	3b02      	subs	r3, #2
 800d4e6:	4a4f      	ldr	r2, [pc, #316]	; (800d624 <init+0x1cc>)
 800d4e8:	8952      	ldrh	r2, [r2, #10]
 800d4ea:	fb02 f303 	mul.w	r3, r2, r3
 800d4ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	uint32_t freeBlocks = freeClust * fs.csize;
 800d4f2:	4b4c      	ldr	r3, [pc, #304]	; (800d624 <init+0x1cc>)
 800d4f4:	895b      	ldrh	r3, [r3, #10]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d4fc:	fb03 f302 	mul.w	r3, r3, r2
 800d500:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

	printf("Total blocks: %lu (%lu Mb)\r\n", totalBlocks, totalBlocks / 2000);
 800d504:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d508:	4a4b      	ldr	r2, [pc, #300]	; (800d638 <init+0x1e0>)
 800d50a:	fba2 2303 	umull	r2, r3, r2, r3
 800d50e:	09db      	lsrs	r3, r3, #7
 800d510:	461a      	mov	r2, r3
 800d512:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 800d516:	4849      	ldr	r0, [pc, #292]	; (800d63c <init+0x1e4>)
 800d518:	f001 fc8c 	bl	800ee34 <iprintf>
	printf("Free blocks: %lu (%lu Mb)\r\n", freeBlocks, freeBlocks / 2000);
 800d51c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d520:	4a45      	ldr	r2, [pc, #276]	; (800d638 <init+0x1e0>)
 800d522:	fba2 2303 	umull	r2, r3, r2, r3
 800d526:	09db      	lsrs	r3, r3, #7
 800d528:	461a      	mov	r2, r3
 800d52a:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800d52e:	4844      	ldr	r0, [pc, #272]	; (800d640 <init+0x1e8>)
 800d530:	f001 fc80 	bl	800ee34 <iprintf>

	DIR dir;
	res = f_opendir(&dir, "/");
 800d534:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800d538:	4942      	ldr	r1, [pc, #264]	; (800d644 <init+0x1ec>)
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe ff38 	bl	800c3b0 <f_opendir>
 800d540:	4603      	mov	r3, r0
 800d542:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 800d546:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d006      	beq.n	800d55c <init+0x104>
		printf("f_opendir() failed, res = %d\r\n", res);
 800d54e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d552:	4619      	mov	r1, r3
 800d554:	483c      	ldr	r0, [pc, #240]	; (800d648 <init+0x1f0>)
 800d556:	f001 fc6d 	bl	800ee34 <iprintf>
		return;
 800d55a:	e055      	b.n	800d608 <init+0x1b0>
	}

	FILINFO fileInfo;
	uint32_t totalFiles = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	uint32_t totalDirs = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	printf("--------\r\nRoot directory:\r\n");
 800d568:	4838      	ldr	r0, [pc, #224]	; (800d64c <init+0x1f4>)
 800d56a:	f001 fcd7 	bl	800ef1c <puts>
	for (;;) {
		res = f_readdir(&dir, &fileInfo);
 800d56e:	1d3a      	adds	r2, r7, #4
 800d570:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800d574:	4611      	mov	r1, r2
 800d576:	4618      	mov	r0, r3
 800d578:	f7fe ffb3 	bl	800c4e2 <f_readdir>
 800d57c:	4603      	mov	r3, r0
 800d57e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		if ((res != FR_OK) || (fileInfo.fname[0] == '\0')) {
 800d582:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d586:	2b00      	cmp	r3, #0
 800d588:	d121      	bne.n	800d5ce <init+0x176>
 800d58a:	1d3b      	adds	r3, r7, #4
 800d58c:	7d9b      	ldrb	r3, [r3, #22]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d01d      	beq.n	800d5ce <init+0x176>
			break;
		}

		if (fileInfo.fattrib & AM_DIR) {
 800d592:	1d3b      	adds	r3, r7, #4
 800d594:	7a1b      	ldrb	r3, [r3, #8]
 800d596:	f003 0310 	and.w	r3, r3, #16
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00b      	beq.n	800d5b6 <init+0x15e>
			printf("  DIR  %s\r\n", fileInfo.fname);
 800d59e:	1d3b      	adds	r3, r7, #4
 800d5a0:	3316      	adds	r3, #22
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	482a      	ldr	r0, [pc, #168]	; (800d650 <init+0x1f8>)
 800d5a6:	f001 fc45 	bl	800ee34 <iprintf>
			totalDirs++;
 800d5aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800d5b4:	e7db      	b.n	800d56e <init+0x116>
		} else {
			printf("  FILE %s\r\n", fileInfo.fname);
 800d5b6:	1d3b      	adds	r3, r7, #4
 800d5b8:	3316      	adds	r3, #22
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4825      	ldr	r0, [pc, #148]	; (800d654 <init+0x1fc>)
 800d5be:	f001 fc39 	bl	800ee34 <iprintf>
			totalFiles++;
 800d5c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		res = f_readdir(&dir, &fileInfo);
 800d5cc:	e7cf      	b.n	800d56e <init+0x116>
		}
	}

	printf("(total: %lu dirs, %lu files)\r\n--------\r\n", totalDirs,
 800d5ce:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800d5d2:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800d5d6:	4820      	ldr	r0, [pc, #128]	; (800d658 <init+0x200>)
 800d5d8:	f001 fc2c 	bl	800ee34 <iprintf>
			totalFiles);

	res = f_closedir(&dir);
 800d5dc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fe ff58 	bl	800c496 <f_closedir>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 800d5ec:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d006      	beq.n	800d602 <init+0x1aa>
		printf("f_closedir() failed, res = %d\r\n", res);
 800d5f4:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	4818      	ldr	r0, [pc, #96]	; (800d65c <init+0x204>)
 800d5fc:	f001 fc1a 	bl	800ee34 <iprintf>
		return;
 800d600:	e002      	b.n	800d608 <init+0x1b0>
	}

	printf("Done!\r\n");
 800d602:	4817      	ldr	r0, [pc, #92]	; (800d660 <init+0x208>)
 800d604:	f001 fc8a 	bl	800ef1c <puts>
}
 800d608:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	08010f98 	.word	0x08010f98
 800d614:	08010fa0 	.word	0x08010fa0
 800d618:	40020800 	.word	0x40020800
 800d61c:	08010fa8 	.word	0x08010fa8
 800d620:	08010fbc 	.word	0x08010fbc
 800d624:	20003060 	.word	0x20003060
 800d628:	08010fc0 	.word	0x08010fc0
 800d62c:	08010fe0 	.word	0x08010fe0
 800d630:	08010ff4 	.word	0x08010ff4
 800d634:	08011014 	.word	0x08011014
 800d638:	10624dd3 	.word	0x10624dd3
 800d63c:	08011028 	.word	0x08011028
 800d640:	08011048 	.word	0x08011048
 800d644:	08011064 	.word	0x08011064
 800d648:	08011068 	.word	0x08011068
 800d64c:	08011088 	.word	0x08011088
 800d650:	080110a4 	.word	0x080110a4
 800d654:	080110b0 	.word	0x080110b0
 800d658:	080110bc 	.word	0x080110bc
 800d65c:	080110e8 	.word	0x080110e8
 800d660:	08011108 	.word	0x08011108

0800d664 <player>:

void player() {
 800d664:	b580      	push	{r7, lr}
 800d666:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
 800d66a:	af00      	add	r7, sp, #0
	///
	FRESULT fr; /* Return value */
	DIR dj; /* Directory object */
	FILINFO fno; /* File information */

	fr = f_findfirst(&dj, &fno, "", "*.wav"); /* Start to search for photo files */
 800d66c:	1d39      	adds	r1, r7, #4
 800d66e:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 800d672:	4b14      	ldr	r3, [pc, #80]	; (800d6c4 <player+0x60>)
 800d674:	4a14      	ldr	r2, [pc, #80]	; (800d6c8 <player+0x64>)
 800d676:	f7fe ff99 	bl	800c5ac <f_findfirst>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387

	if (fno.fsize < 1) {
 800d680:	1d3b      	adds	r3, r7, #4
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d10a      	bne.n	800d69e <player+0x3a>
		printf("file not found %s\n", fno.fname);
 800d688:	1d3b      	adds	r3, r7, #4
 800d68a:	3316      	adds	r3, #22
 800d68c:	4619      	mov	r1, r3
 800d68e:	480f      	ldr	r0, [pc, #60]	; (800d6cc <player+0x68>)
 800d690:	f001 fbd0 	bl	800ee34 <iprintf>
		HAL_Delay(1000);
 800d694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d698:	f7f3 fcba 	bl	8001010 <HAL_Delay>
			playWavFile(fno.fname);

		}
	}

}
 800d69c:	e00e      	b.n	800d6bc <player+0x58>
		printf("found %s\n", fno.fname);
 800d69e:	1d3b      	adds	r3, r7, #4
 800d6a0:	3316      	adds	r3, #22
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	480a      	ldr	r0, [pc, #40]	; (800d6d0 <player+0x6c>)
 800d6a6:	f001 fbc5 	bl	800ee34 <iprintf>
		printf("Start loop\n");
 800d6aa:	480a      	ldr	r0, [pc, #40]	; (800d6d4 <player+0x70>)
 800d6ac:	f001 fc36 	bl	800ef1c <puts>
			playWavFile(fno.fname);
 800d6b0:	1d3b      	adds	r3, r7, #4
 800d6b2:	3316      	adds	r3, #22
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f000 f83f 	bl	800d738 <playWavFile>
 800d6ba:	e7f9      	b.n	800d6b0 <player+0x4c>
}
 800d6bc:	f507 7762 	add.w	r7, r7, #904	; 0x388
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	08011110 	.word	0x08011110
 800d6c8:	08010fbc 	.word	0x08010fbc
 800d6cc:	08011118 	.word	0x08011118
 800d6d0:	0801112c 	.word	0x0801112c
 800d6d4:	08011138 	.word	0x08011138

0800d6d8 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
	if (end_of_file_reached) {
 800d6e0:	4b10      	ldr	r3, [pc, #64]	; (800d724 <HAL_I2S_TxCpltCallback+0x4c>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d118      	bne.n	800d71a <HAL_I2S_TxCpltCallback+0x42>
		return;
	}

	volatile uint16_t *temp = signal_play_buff;
 800d6e8:	4b0f      	ldr	r3, [pc, #60]	; (800d728 <HAL_I2S_TxCpltCallback+0x50>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	60fb      	str	r3, [r7, #12]
	signal_play_buff = signal_read_buff;
 800d6ee:	4b0f      	ldr	r3, [pc, #60]	; (800d72c <HAL_I2S_TxCpltCallback+0x54>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a0d      	ldr	r2, [pc, #52]	; (800d728 <HAL_I2S_TxCpltCallback+0x50>)
 800d6f4:	6013      	str	r3, [r2, #0]
	signal_read_buff = temp;
 800d6f6:	4a0d      	ldr	r2, [pc, #52]	; (800d72c <HAL_I2S_TxCpltCallback+0x54>)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6013      	str	r3, [r2, #0]

	int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 800d6fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d700:	60bb      	str	r3, [r7, #8]
	HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*) signal_play_buff, nsamples);
 800d702:	4b09      	ldr	r3, [pc, #36]	; (800d728 <HAL_I2S_TxCpltCallback+0x50>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	b292      	uxth	r2, r2
 800d70a:	4619      	mov	r1, r3
 800d70c:	4808      	ldr	r0, [pc, #32]	; (800d730 <HAL_I2S_TxCpltCallback+0x58>)
 800d70e:	f7f4 ffc7 	bl	80026a0 <HAL_I2S_Transmit_IT>
	read_next_chunk = true;
 800d712:	4b08      	ldr	r3, [pc, #32]	; (800d734 <HAL_I2S_TxCpltCallback+0x5c>)
 800d714:	2201      	movs	r2, #1
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	e000      	b.n	800d71c <HAL_I2S_TxCpltCallback+0x44>
		return;
 800d71a:	bf00      	nop
}
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	200002e0 	.word	0x200002e0
 800d728:	200002e8 	.word	0x200002e8
 800d72c:	200002ec 	.word	0x200002ec
 800d730:	20001018 	.word	0x20001018
 800d734:	200002e4 	.word	0x200002e4

0800d738 <playWavFile>:

int playWavFile(const char *fname) {
 800d738:	b580      	push	{r7, lr}
 800d73a:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
 800d73e:	af06      	add	r7, sp, #24
 800d740:	1d3b      	adds	r3, r7, #4
 800d742:	6018      	str	r0, [r3, #0]
	printf("Openning %s...\r\n", fname);
 800d744:	1d3b      	adds	r3, r7, #4
 800d746:	6819      	ldr	r1, [r3, #0]
 800d748:	489e      	ldr	r0, [pc, #632]	; (800d9c4 <playWavFile+0x28c>)
 800d74a:	f001 fb73 	bl	800ee34 <iprintf>
	FIL file;
	FRESULT res = f_open(&file, fname, FA_READ);
 800d74e:	1d3b      	adds	r3, r7, #4
 800d750:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800d754:	2201      	movs	r2, #1
 800d756:	6819      	ldr	r1, [r3, #0]
 800d758:	f7fe f910 	bl	800b97c <f_open>
 800d75c:	4603      	mov	r3, r0
 800d75e:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
	if (res != FR_OK) {
 800d762:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800d766:	2b00      	cmp	r3, #0
 800d768:	d008      	beq.n	800d77c <playWavFile+0x44>
		printf("f_open() failed, res = %d\r\n", res);
 800d76a:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800d76e:	4619      	mov	r1, r3
 800d770:	4895      	ldr	r0, [pc, #596]	; (800d9c8 <playWavFile+0x290>)
 800d772:	f001 fb5f 	bl	800ee34 <iprintf>
		return -1;
 800d776:	f04f 33ff 	mov.w	r3, #4294967295
 800d77a:	e247      	b.n	800dc0c <playWavFile+0x4d4>
	}

	printf("File opened, reading...\r\n");
 800d77c:	4893      	ldr	r0, [pc, #588]	; (800d9cc <playWavFile+0x294>)
 800d77e:	f001 fbcd 	bl	800ef1c <puts>

	//-------------------------Read RIFF Header-------------------------
	unsigned int bytesRead;
	uint8_t riff_header[12];
	res = f_read(&file, riff_header, sizeof(riff_header), &bytesRead);
 800d782:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d786:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800d78a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800d78e:	220c      	movs	r2, #12
 800d790:	f7fe fab2 	bl	800bcf8 <f_read>
 800d794:	4603      	mov	r3, r0
 800d796:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
	if (res != FR_OK) {
 800d79a:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d005      	beq.n	800d7ae <playWavFile+0x76>
		printf("f_read() failed, res = %d\r\n", res);
 800d7a2:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4889      	ldr	r0, [pc, #548]	; (800d9d0 <playWavFile+0x298>)
 800d7aa:	f001 fb43 	bl	800ee34 <iprintf>
		//f_close(&file);
		//return -2;
	}

	if (memcmp((const char*) riff_header, "RIFF", 4) != 0) {
 800d7ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d7b2:	2204      	movs	r2, #4
 800d7b4:	4987      	ldr	r1, [pc, #540]	; (800d9d4 <playWavFile+0x29c>)
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 fa72 	bl	800eca0 <memcmp>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d013      	beq.n	800d7ea <playWavFile+0xb2>
		printf("Wrong WAV signature at offset 0: "
				"0x%02X 0x%02X 0x%02X 0x%02X\r\n", riff_header[0],
 800d7c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d7c6:	781b      	ldrb	r3, [r3, #0]
		printf("Wrong WAV signature at offset 0: "
 800d7c8:	4619      	mov	r1, r3
				riff_header[1], riff_header[2], riff_header[3]);
 800d7ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d7ce:	785b      	ldrb	r3, [r3, #1]
		printf("Wrong WAV signature at offset 0: "
 800d7d0:	461a      	mov	r2, r3
				riff_header[1], riff_header[2], riff_header[3]);
 800d7d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d7d6:	789b      	ldrb	r3, [r3, #2]
		printf("Wrong WAV signature at offset 0: "
 800d7d8:	4618      	mov	r0, r3
				riff_header[1], riff_header[2], riff_header[3]);
 800d7da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d7de:	78db      	ldrb	r3, [r3, #3]
		printf("Wrong WAV signature at offset 0: "
 800d7e0:	9300      	str	r3, [sp, #0]
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	487c      	ldr	r0, [pc, #496]	; (800d9d8 <playWavFile+0x2a0>)
 800d7e6:	f001 fb25 	bl	800ee34 <iprintf>
		//f_close(&file);
		//return -3;
	}
	uint32_t fileSize = 8
			+ (riff_header[4] | (riff_header[5] << 8) | (riff_header[6] << 16)
 800d7ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d7ee:	791b      	ldrb	r3, [r3, #4]
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d7f6:	795b      	ldrb	r3, [r3, #5]
 800d7f8:	021b      	lsls	r3, r3, #8
 800d7fa:	431a      	orrs	r2, r3
 800d7fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d800:	799b      	ldrb	r3, [r3, #6]
 800d802:	041b      	lsls	r3, r3, #16
 800d804:	431a      	orrs	r2, r3
					| (riff_header[7] << 24));
 800d806:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d80a:	79db      	ldrb	r3, [r3, #7]
 800d80c:	061b      	lsls	r3, r3, #24
 800d80e:	4313      	orrs	r3, r2
			+ (riff_header[4] | (riff_header[5] << 8) | (riff_header[6] << 16)
 800d810:	3308      	adds	r3, #8
	uint32_t fileSize = 8
 800d812:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

	//-------------------------Read fmt Header-------------------------
	uint8_t fmt_header[24];
	res = f_read(&file, fmt_header, sizeof(fmt_header), &bytesRead);
 800d816:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d81a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800d81e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800d822:	2218      	movs	r2, #24
 800d824:	f7fe fa68 	bl	800bcf8 <f_read>
 800d828:	4603      	mov	r3, r0
 800d82a:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
	if (res != FR_OK) {
 800d82e:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800d832:	2b00      	cmp	r3, #0
 800d834:	d005      	beq.n	800d842 <playWavFile+0x10a>
		printf("f_read() failed, res = %d\r\n", res);
 800d836:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800d83a:	4619      	mov	r1, r3
 800d83c:	4864      	ldr	r0, [pc, #400]	; (800d9d0 <playWavFile+0x298>)
 800d83e:	f001 faf9 	bl	800ee34 <iprintf>
		//f_close(&file);
		//return -2;
	}

	if (memcmp((const char*) fmt_header, "fmt ", 4) != 0) {
 800d842:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d846:	2204      	movs	r2, #4
 800d848:	4964      	ldr	r1, [pc, #400]	; (800d9dc <playWavFile+0x2a4>)
 800d84a:	4618      	mov	r0, r3
 800d84c:	f001 fa28 	bl	800eca0 <memcmp>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d002      	beq.n	800d85c <playWavFile+0x124>
		printf("Wrong WAV signature at offset 8!\r\n");
 800d856:	4862      	ldr	r0, [pc, #392]	; (800d9e0 <playWavFile+0x2a8>)
 800d858:	f001 fb60 	bl	800ef1c <puts>
		//f_close(&file);
		//return -4;
	}

	uint32_t headerSizeLeft = fmt_header[4] | (fmt_header[5] << 8)
 800d85c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d860:	791b      	ldrb	r3, [r3, #4]
 800d862:	461a      	mov	r2, r3
 800d864:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d868:	795b      	ldrb	r3, [r3, #5]
 800d86a:	021b      	lsls	r3, r3, #8
 800d86c:	431a      	orrs	r2, r3
			| (fmt_header[6] << 16) | (fmt_header[7] << 24);
 800d86e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d872:	799b      	ldrb	r3, [r3, #6]
 800d874:	041b      	lsls	r3, r3, #16
 800d876:	431a      	orrs	r2, r3
 800d878:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d87c:	79db      	ldrb	r3, [r3, #7]
 800d87e:	061b      	lsls	r3, r3, #24
 800d880:	4313      	orrs	r3, r2
	uint32_t headerSizeLeft = fmt_header[4] | (fmt_header[5] << 8)
 800d882:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
	uint16_t compression = fmt_header[8] | (fmt_header[9] << 8);
 800d886:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d88a:	7a1b      	ldrb	r3, [r3, #8]
 800d88c:	b21a      	sxth	r2, r3
 800d88e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d892:	7a5b      	ldrb	r3, [r3, #9]
 800d894:	021b      	lsls	r3, r3, #8
 800d896:	b21b      	sxth	r3, r3
 800d898:	4313      	orrs	r3, r2
 800d89a:	b21b      	sxth	r3, r3
 800d89c:	f8a7 32d2 	strh.w	r3, [r7, #722]	; 0x2d2
	uint16_t channelsNum = fmt_header[10] | (fmt_header[11] << 8);
 800d8a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8a4:	7a9b      	ldrb	r3, [r3, #10]
 800d8a6:	b21a      	sxth	r2, r3
 800d8a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8ac:	7adb      	ldrb	r3, [r3, #11]
 800d8ae:	021b      	lsls	r3, r3, #8
 800d8b0:	b21b      	sxth	r3, r3
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	b21b      	sxth	r3, r3
 800d8b6:	f8a7 32d0 	strh.w	r3, [r7, #720]	; 0x2d0
	uint32_t sampleRate = fmt_header[12] | (fmt_header[13] << 8)
 800d8ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8be:	7b1b      	ldrb	r3, [r3, #12]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8c6:	7b5b      	ldrb	r3, [r3, #13]
 800d8c8:	021b      	lsls	r3, r3, #8
 800d8ca:	431a      	orrs	r2, r3
			| (fmt_header[14] << 16) | (fmt_header[15] << 24);
 800d8cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8d0:	7b9b      	ldrb	r3, [r3, #14]
 800d8d2:	041b      	lsls	r3, r3, #16
 800d8d4:	431a      	orrs	r2, r3
 800d8d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8da:	7bdb      	ldrb	r3, [r3, #15]
 800d8dc:	061b      	lsls	r3, r3, #24
 800d8de:	4313      	orrs	r3, r2
	uint32_t sampleRate = fmt_header[12] | (fmt_header[13] << 8)
 800d8e0:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
	uint32_t bytesPerSecond = fmt_header[16] | (fmt_header[17] << 8)
 800d8e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8e8:	7c1b      	ldrb	r3, [r3, #16]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8f0:	7c5b      	ldrb	r3, [r3, #17]
 800d8f2:	021b      	lsls	r3, r3, #8
 800d8f4:	431a      	orrs	r2, r3
			| (fmt_header[18] << 16) | (fmt_header[19] << 24);
 800d8f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8fa:	7c9b      	ldrb	r3, [r3, #18]
 800d8fc:	041b      	lsls	r3, r3, #16
 800d8fe:	431a      	orrs	r2, r3
 800d900:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d904:	7cdb      	ldrb	r3, [r3, #19]
 800d906:	061b      	lsls	r3, r3, #24
 800d908:	4313      	orrs	r3, r2
	uint32_t bytesPerSecond = fmt_header[16] | (fmt_header[17] << 8)
 800d90a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	uint16_t bytesPerSample = fmt_header[22] | (fmt_header[23] << 8);
 800d90e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d912:	7d9b      	ldrb	r3, [r3, #22]
 800d914:	b21a      	sxth	r2, r3
 800d916:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d91a:	7ddb      	ldrb	r3, [r3, #23]
 800d91c:	021b      	lsls	r3, r3, #8
 800d91e:	b21b      	sxth	r3, r3
 800d920:	4313      	orrs	r3, r2
 800d922:	b21b      	sxth	r3, r3
 800d924:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6

	//-------------------------finde and Read data Header-------------------------
	uint8_t data_header[8];
	uint32_t dataSize;

	for (int i = 1; i < 6; i++) {
 800d928:	2301      	movs	r3, #1
 800d92a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800d92e:	e043      	b.n	800d9b8 <playWavFile+0x280>
		res = f_read(&file, data_header, sizeof(data_header), &bytesRead);
 800d930:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d934:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800d938:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800d93c:	2208      	movs	r2, #8
 800d93e:	f7fe f9db 	bl	800bcf8 <f_read>
 800d942:	4603      	mov	r3, r0
 800d944:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
		if (res != FR_OK) {
 800d948:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d005      	beq.n	800d95c <playWavFile+0x224>
			printf("f_read() failed, res = %d\r\n", res);
 800d950:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800d954:	4619      	mov	r1, r3
 800d956:	481e      	ldr	r0, [pc, #120]	; (800d9d0 <playWavFile+0x298>)
 800d958:	f001 fa6c 	bl	800ee34 <iprintf>
			//f_close(&file);
			//return -2;
		}

		dataSize = data_header[4] | (data_header[5] << 8)
 800d95c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d960:	791b      	ldrb	r3, [r3, #4]
 800d962:	461a      	mov	r2, r3
 800d964:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d968:	795b      	ldrb	r3, [r3, #5]
 800d96a:	021b      	lsls	r3, r3, #8
 800d96c:	431a      	orrs	r2, r3
				| (data_header[6] << 16) | (data_header[7] << 24);
 800d96e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d972:	799b      	ldrb	r3, [r3, #6]
 800d974:	041b      	lsls	r3, r3, #16
 800d976:	431a      	orrs	r2, r3
 800d978:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d97c:	79db      	ldrb	r3, [r3, #7]
 800d97e:	061b      	lsls	r3, r3, #24
 800d980:	4313      	orrs	r3, r2
		dataSize = data_header[4] | (data_header[5] << 8)
 800d982:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

		if (memcmp((const char*) data_header, "data", 4) != 0) {
 800d986:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d98a:	2204      	movs	r2, #4
 800d98c:	4915      	ldr	r1, [pc, #84]	; (800d9e4 <playWavFile+0x2ac>)
 800d98e:	4618      	mov	r0, r3
 800d990:	f001 f986 	bl	800eca0 <memcmp>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d026      	beq.n	800d9e8 <playWavFile+0x2b0>
			f_read(&file, data_header, dataSize, &bytesRead);
 800d99a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d99e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800d9a2:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800d9a6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800d9aa:	f7fe f9a5 	bl	800bcf8 <f_read>
	for (int i = 1; i < 6; i++) {
 800d9ae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800d9b8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800d9bc:	2b05      	cmp	r3, #5
 800d9be:	ddb7      	ble.n	800d930 <playWavFile+0x1f8>
 800d9c0:	e013      	b.n	800d9ea <playWavFile+0x2b2>
 800d9c2:	bf00      	nop
 800d9c4:	08011144 	.word	0x08011144
 800d9c8:	08011158 	.word	0x08011158
 800d9cc:	08011174 	.word	0x08011174
 800d9d0:	08011190 	.word	0x08011190
 800d9d4:	080111ac 	.word	0x080111ac
 800d9d8:	080111b4 	.word	0x080111b4
 800d9dc:	080111f4 	.word	0x080111f4
 800d9e0:	080111fc 	.word	0x080111fc
 800d9e4:	08011220 	.word	0x08011220
			//dataSize = fileSize - 8 - 24 - (8 * i);
		} else {
			break;
 800d9e8:	bf00      	nop

		}
	}

	printf("--- WAV header ---\r\n"
 800d9ea:	f8b7 02d2 	ldrh.w	r0, [r7, #722]	; 0x2d2
 800d9ee:	f8b7 32d0 	ldrh.w	r3, [r7, #720]	; 0x2d0
 800d9f2:	f8b7 22c6 	ldrh.w	r2, [r7, #710]	; 0x2c6
 800d9f6:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 800d9fa:	9104      	str	r1, [sp, #16]
 800d9fc:	9203      	str	r2, [sp, #12]
 800d9fe:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 800da02:	9202      	str	r2, [sp, #8]
 800da04:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 800da08:	9201      	str	r2, [sp, #4]
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	4603      	mov	r3, r0
 800da0e:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 800da12:	f8d7 12d8 	ldr.w	r1, [r7, #728]	; 0x2d8
 800da16:	4880      	ldr	r0, [pc, #512]	; (800dc18 <playWavFile+0x4e0>)
 800da18:	f001 fa0c 	bl	800ee34 <iprintf>
			"Bytes per sample: %d\r\n"
			"Data size: %ld\r\n"
			"------------------\r\n", fileSize, headerSizeLeft, compression,
			channelsNum, sampleRate, bytesPerSecond, bytesPerSample, dataSize);

	if (headerSizeLeft != 16) {
 800da1c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800da20:	2b10      	cmp	r3, #16
 800da22:	d002      	beq.n	800da2a <playWavFile+0x2f2>
		printf("Wrong `headerSizeLeft` value, 16 expected\r\n");
 800da24:	487d      	ldr	r0, [pc, #500]	; (800dc1c <playWavFile+0x4e4>)
 800da26:	f001 fa79 	bl	800ef1c <puts>
		//f_close(&file);
		//return -6;
	}

	if (compression != 1) {
 800da2a:	f8b7 32d2 	ldrh.w	r3, [r7, #722]	; 0x2d2
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d002      	beq.n	800da38 <playWavFile+0x300>
		printf("Wrong `compression` value, 1 expected\r\n");
 800da32:	487b      	ldr	r0, [pc, #492]	; (800dc20 <playWavFile+0x4e8>)
 800da34:	f001 fa72 	bl	800ef1c <puts>
		//f_close(&file);
		//return -7;
	}

	if (channelsNum != 2) {
 800da38:	f8b7 32d0 	ldrh.w	r3, [r7, #720]	; 0x2d0
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d002      	beq.n	800da46 <playWavFile+0x30e>
		printf("Wrong `channelsNum` value, 2 expected\r\n");
 800da40:	4878      	ldr	r0, [pc, #480]	; (800dc24 <playWavFile+0x4ec>)
 800da42:	f001 fa6b 	bl	800ef1c <puts>
		//f_close(&file);
		//return -8;
	}

	if ((sampleRate != 48000) || (bytesPerSample != 16)
 800da46:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800da4a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800da4e:	4293      	cmp	r3, r2
 800da50:	d10d      	bne.n	800da6e <playWavFile+0x336>
 800da52:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 800da56:	2b10      	cmp	r3, #16
 800da58:	d109      	bne.n	800da6e <playWavFile+0x336>
			|| (bytesPerSecond != 48000 * 2 * 2)
 800da5a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800da5e:	4a72      	ldr	r2, [pc, #456]	; (800dc28 <playWavFile+0x4f0>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d104      	bne.n	800da6e <playWavFile+0x336>
			|| (dataSize < sizeof(signal_buff1) + sizeof(signal_buff2))) {
 800da64:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800da68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da6c:	d21a      	bcs.n	800daa4 <playWavFile+0x36c>
		char tmp[] =
 800da6e:	f107 0308 	add.w	r3, r7, #8
 800da72:	4a6e      	ldr	r2, [pc, #440]	; (800dc2c <playWavFile+0x4f4>)
 800da74:	4618      	mov	r0, r3
 800da76:	4611      	mov	r1, r2
 800da78:	2352      	movs	r3, #82	; 0x52
 800da7a:	461a      	mov	r2, r3
 800da7c:	f001 f91f 	bl	800ecbe <memcpy>
				"Wrong file format! 16 bytesPerSample, stereo, with sample rate 48000Hz expected\r\n";

		printf(tmp);
 800da80:	f107 0308 	add.w	r3, r7, #8
 800da84:	4618      	mov	r0, r3
 800da86:	f001 f9d5 	bl	800ee34 <iprintf>
		writeErrorTxt(tmp, strlen(tmp));
 800da8a:	f107 0308 	add.w	r3, r7, #8
 800da8e:	4618      	mov	r0, r3
 800da90:	f7f2 fba6 	bl	80001e0 <strlen>
 800da94:	4603      	mov	r3, r0
 800da96:	461a      	mov	r2, r3
 800da98:	f107 0308 	add.w	r3, r7, #8
 800da9c:	4611      	mov	r1, r2
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 f8da 	bl	800dc58 <writeErrorTxt>
		//   f_close(&file);
		//   return -9;
	}

	res = f_read(&file, (uint8_t*) signal_buff1, sizeof(signal_buff1),
 800daa4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800daa8:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800daac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dab0:	495f      	ldr	r1, [pc, #380]	; (800dc30 <playWavFile+0x4f8>)
 800dab2:	f7fe f921 	bl	800bcf8 <f_read>
 800dab6:	4603      	mov	r3, r0
 800dab8:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
			&bytesRead);
	if (res != FR_OK) {
 800dabc:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00d      	beq.n	800dae0 <playWavFile+0x3a8>
		printf("f_read() failed, res = %d\r\n", res);
 800dac4:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800dac8:	4619      	mov	r1, r3
 800daca:	485a      	ldr	r0, [pc, #360]	; (800dc34 <playWavFile+0x4fc>)
 800dacc:	f001 f9b2 	bl	800ee34 <iprintf>
		f_close(&file);
 800dad0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7fe fc41 	bl	800c35c <f_close>
		return -10;
 800dada:	f06f 0309 	mvn.w	r3, #9
 800dade:	e095      	b.n	800dc0c <playWavFile+0x4d4>
	}

	res = f_read(&file, (uint8_t*) signal_buff2, sizeof(signal_buff2),
 800dae0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800dae4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800dae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800daec:	4952      	ldr	r1, [pc, #328]	; (800dc38 <playWavFile+0x500>)
 800daee:	f7fe f903 	bl	800bcf8 <f_read>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
			&bytesRead);
	if (res != FR_OK) {
 800daf8:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d00d      	beq.n	800db1c <playWavFile+0x3e4>
		printf("f_read() failed, res = %d\r\n", res);
 800db00:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800db04:	4619      	mov	r1, r3
 800db06:	484b      	ldr	r0, [pc, #300]	; (800dc34 <playWavFile+0x4fc>)
 800db08:	f001 f994 	bl	800ee34 <iprintf>
		f_close(&file);
 800db0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800db10:	4618      	mov	r0, r3
 800db12:	f7fe fc23 	bl	800c35c <f_close>
		return -11;
 800db16:	f06f 030a 	mvn.w	r3, #10
 800db1a:	e077      	b.n	800dc0c <playWavFile+0x4d4>
	}

	read_next_chunk = false;
 800db1c:	4b47      	ldr	r3, [pc, #284]	; (800dc3c <playWavFile+0x504>)
 800db1e:	2200      	movs	r2, #0
 800db20:	601a      	str	r2, [r3, #0]
	end_of_file_reached = false;
 800db22:	4b47      	ldr	r3, [pc, #284]	; (800dc40 <playWavFile+0x508>)
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]
	signal_play_buff = signal_buff1;
 800db28:	4b46      	ldr	r3, [pc, #280]	; (800dc44 <playWavFile+0x50c>)
 800db2a:	4a41      	ldr	r2, [pc, #260]	; (800dc30 <playWavFile+0x4f8>)
 800db2c:	601a      	str	r2, [r3, #0]
	signal_read_buff = signal_buff2;
 800db2e:	4b46      	ldr	r3, [pc, #280]	; (800dc48 <playWavFile+0x510>)
 800db30:	4a41      	ldr	r2, [pc, #260]	; (800dc38 <playWavFile+0x500>)
 800db32:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef hal_res;
	int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 800db34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db38:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
	hal_res = HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*) signal_buff1, nsamples);
 800db3c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800db40:	b29b      	uxth	r3, r3
 800db42:	461a      	mov	r2, r3
 800db44:	493a      	ldr	r1, [pc, #232]	; (800dc30 <playWavFile+0x4f8>)
 800db46:	4841      	ldr	r0, [pc, #260]	; (800dc4c <playWavFile+0x514>)
 800db48:	f7f4 fdaa 	bl	80026a0 <HAL_I2S_Transmit_IT>
 800db4c:	4603      	mov	r3, r0
 800db4e:	f887 32bf 	strb.w	r3, [r7, #703]	; 0x2bf
	if (hal_res != HAL_OK) {
 800db52:	f897 32bf 	ldrb.w	r3, [r7, #703]	; 0x2bf
 800db56:	2b00      	cmp	r3, #0
 800db58:	d03a      	beq.n	800dbd0 <playWavFile+0x498>
		printf("I2S - HAL_I2S_Transmit failed, "
 800db5a:	f897 32bf 	ldrb.w	r3, [r7, #703]	; 0x2bf
 800db5e:	4619      	mov	r1, r3
 800db60:	483b      	ldr	r0, [pc, #236]	; (800dc50 <playWavFile+0x518>)
 800db62:	f001 f967 	bl	800ee34 <iprintf>
				"hal_res = %d!\r\n", hal_res);
		f_close(&file);
 800db66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fbf6 	bl	800c35c <f_close>
		return -12;
 800db70:	f06f 030b 	mvn.w	r3, #11
 800db74:	e04a      	b.n	800dc0c <playWavFile+0x4d4>
	}

	while (dataSize >= sizeof(signal_buff1)) {

		if (!read_next_chunk) {
 800db76:	4b31      	ldr	r3, [pc, #196]	; (800dc3c <playWavFile+0x504>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d100      	bne.n	800db80 <playWavFile+0x448>
			continue;
 800db7e:	e027      	b.n	800dbd0 <playWavFile+0x498>
		}

		read_next_chunk = false;
 800db80:	4b2e      	ldr	r3, [pc, #184]	; (800dc3c <playWavFile+0x504>)
 800db82:	2200      	movs	r2, #0
 800db84:	601a      	str	r2, [r3, #0]

		res = f_read(&file, (uint8_t*) signal_read_buff, sizeof(signal_buff1),
 800db86:	4b30      	ldr	r3, [pc, #192]	; (800dc48 <playWavFile+0x510>)
 800db88:	6819      	ldr	r1, [r3, #0]
 800db8a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800db8e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800db92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800db96:	f7fe f8af 	bl	800bcf8 <f_read>
 800db9a:	4603      	mov	r3, r0
 800db9c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
				&bytesRead);

		if (res != FR_OK) {
 800dba0:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d00d      	beq.n	800dbc4 <playWavFile+0x48c>
			printf("f_read() failed, res = %d\r\n", res);
 800dba8:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800dbac:	4619      	mov	r1, r3
 800dbae:	4821      	ldr	r0, [pc, #132]	; (800dc34 <playWavFile+0x4fc>)
 800dbb0:	f001 f940 	bl	800ee34 <iprintf>
			f_close(&file);
 800dbb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fe fbcf 	bl	800c35c <f_close>
			return -13;
 800dbbe:	f06f 030c 	mvn.w	r3, #12
 800dbc2:	e023      	b.n	800dc0c <playWavFile+0x4d4>
		}

		dataSize -= sizeof(signal_buff1);
 800dbc4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800dbc8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800dbcc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	while (dataSize >= sizeof(signal_buff1)) {
 800dbd0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800dbd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbd8:	d2cd      	bcs.n	800db76 <playWavFile+0x43e>
	}

	end_of_file_reached = true;
 800dbda:	4b19      	ldr	r3, [pc, #100]	; (800dc40 <playWavFile+0x508>)
 800dbdc:	2201      	movs	r2, #1
 800dbde:	601a      	str	r2, [r3, #0]

	res = f_close(&file);
 800dbe0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fe fbb9 	bl	800c35c <f_close>
 800dbea:	4603      	mov	r3, r0
 800dbec:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
	if (res != FR_OK) {
 800dbf0:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d008      	beq.n	800dc0a <playWavFile+0x4d2>
		printf("f_close() failed, res = %d\r\n", res);
 800dbf8:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	4815      	ldr	r0, [pc, #84]	; (800dc54 <playWavFile+0x51c>)
 800dc00:	f001 f918 	bl	800ee34 <iprintf>
		return -14;
 800dc04:	f06f 030d 	mvn.w	r3, #13
 800dc08:	e000      	b.n	800dc0c <playWavFile+0x4d4>
	}

	return 0;
 800dc0a:	2300      	movs	r3, #0
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f507 773a 	add.w	r7, r7, #744	; 0x2e8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	08011228 	.word	0x08011228
 800dc1c:	08011300 	.word	0x08011300
 800dc20:	0801132c 	.word	0x0801132c
 800dc24:	08011354 	.word	0x08011354
 800dc28:	0002ee00 	.word	0x0002ee00
 800dc2c:	080113cc 	.word	0x080113cc
 800dc30:	20003294 	.word	0x20003294
 800dc34:	08011190 	.word	0x08011190
 800dc38:	20001060 	.word	0x20001060
 800dc3c:	200002e4 	.word	0x200002e4
 800dc40:	200002e0 	.word	0x200002e0
 800dc44:	200002e8 	.word	0x200002e8
 800dc48:	200002ec 	.word	0x200002ec
 800dc4c:	20001018 	.word	0x20001018
 800dc50:	0801137c 	.word	0x0801137c
 800dc54:	080113ac 	.word	0x080113ac

0800dc58 <writeErrorTxt>:

void writeErrorTxt(char *buff, int len) {
 800dc58:	b5b0      	push	{r4, r5, r7, lr}
 800dc5a:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	1d3b      	adds	r3, r7, #4
 800dc62:	6018      	str	r0, [r3, #0]
 800dc64:	463b      	mov	r3, r7
 800dc66:	6019      	str	r1, [r3, #0]
 800dc68:	466b      	mov	r3, sp
 800dc6a:	461d      	mov	r5, r3

	FRESULT fr;
	FIL errFile;
	fr = f_open(&errFile, "error.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800dc6c:	f107 030c 	add.w	r3, r7, #12
 800dc70:	220a      	movs	r2, #10
 800dc72:	493c      	ldr	r1, [pc, #240]	; (800dd64 <writeErrorTxt+0x10c>)
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fd fe81 	bl	800b97c <f_open>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	if (fr != FR_OK) {
 800dc80:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d006      	beq.n	800dc96 <writeErrorTxt+0x3e>
		printf("f_open() failed, res = %d\r\n", fr);
 800dc88:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	4836      	ldr	r0, [pc, #216]	; (800dd68 <writeErrorTxt+0x110>)
 800dc90:	f001 f8d0 	bl	800ee34 <iprintf>
		return;
 800dc94:	e060      	b.n	800dd58 <writeErrorTxt+0x100>
	}

	char writeBuff[len];
 800dc96:	463b      	mov	r3, r7
 800dc98:	6818      	ldr	r0, [r3, #0]
 800dc9a:	1e43      	subs	r3, r0, #1
 800dc9c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800dca0:	4603      	mov	r3, r0
 800dca2:	4619      	mov	r1, r3
 800dca4:	f04f 0200 	mov.w	r2, #0
 800dca8:	f04f 0300 	mov.w	r3, #0
 800dcac:	f04f 0400 	mov.w	r4, #0
 800dcb0:	00d4      	lsls	r4, r2, #3
 800dcb2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800dcb6:	00cb      	lsls	r3, r1, #3
 800dcb8:	4603      	mov	r3, r0
 800dcba:	4619      	mov	r1, r3
 800dcbc:	f04f 0200 	mov.w	r2, #0
 800dcc0:	f04f 0300 	mov.w	r3, #0
 800dcc4:	f04f 0400 	mov.w	r4, #0
 800dcc8:	00d4      	lsls	r4, r2, #3
 800dcca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800dcce:	00cb      	lsls	r3, r1, #3
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	3307      	adds	r3, #7
 800dcd4:	08db      	lsrs	r3, r3, #3
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	ebad 0d03 	sub.w	sp, sp, r3
 800dcdc:	466b      	mov	r3, sp
 800dcde:	3300      	adds	r3, #0
 800dce0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	snprintf(writeBuff, sizeof(writeBuff), buff);
 800dce4:	f8d7 423c 	ldr.w	r4, [r7, #572]	; 0x23c
 800dce8:	4601      	mov	r1, r0
 800dcea:	1d3b      	adds	r3, r7, #4
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f001 f92c 	bl	800ef4c <sniprintf>
	unsigned int bytesWritten;
	fr = f_write(&errFile, writeBuff, strlen(writeBuff), &bytesWritten);
 800dcf4:	f8d7 423c 	ldr.w	r4, [r7, #572]	; 0x23c
 800dcf8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7f2 fa6f 	bl	80001e0 <strlen>
 800dd02:	4602      	mov	r2, r0
 800dd04:	f107 0308 	add.w	r3, r7, #8
 800dd08:	f107 000c 	add.w	r0, r7, #12
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	f7fe f932 	bl	800bf76 <f_write>
 800dd12:	4603      	mov	r3, r0
 800dd14:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	if (fr != FR_OK) {
 800dd18:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d006      	beq.n	800dd2e <writeErrorTxt+0xd6>
		printf("f_write() failed, res = %d\r\n", fr);
 800dd20:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800dd24:	4619      	mov	r1, r3
 800dd26:	4811      	ldr	r0, [pc, #68]	; (800dd6c <writeErrorTxt+0x114>)
 800dd28:	f001 f884 	bl	800ee34 <iprintf>
		return;
 800dd2c:	e014      	b.n	800dd58 <writeErrorTxt+0x100>
	}

	fr = f_close(&errFile);
 800dd2e:	f107 030c 	add.w	r3, r7, #12
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe fb12 	bl	800c35c <f_close>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	if (fr != FR_OK) {
 800dd3e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d006      	beq.n	800dd54 <writeErrorTxt+0xfc>
		printf("f_close() failed, res = %d\r\n", fr);
 800dd46:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	4808      	ldr	r0, [pc, #32]	; (800dd70 <writeErrorTxt+0x118>)
 800dd4e:	f001 f871 	bl	800ee34 <iprintf>
		return;
 800dd52:	e001      	b.n	800dd58 <writeErrorTxt+0x100>
 800dd54:	46ad      	mov	sp, r5
 800dd56:	e000      	b.n	800dd5a <writeErrorTxt+0x102>
 800dd58:	46ad      	mov	sp, r5
	}

}
 800dd5a:	f507 7712 	add.w	r7, r7, #584	; 0x248
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bdb0      	pop	{r4, r5, r7, pc}
 800dd62:	bf00      	nop
 800dd64:	08011420 	.word	0x08011420
 800dd68:	08011158 	.word	0x08011158
 800dd6c:	0801142c 	.word	0x0801142c
 800dd70:	080113ac 	.word	0x080113ac

0800dd74 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dd7e:	4b0b      	ldr	r3, [pc, #44]	; (800ddac <SD_CheckStatus+0x38>)
 800dd80:	2201      	movs	r2, #1
 800dd82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dd84:	f7fe fe5c 	bl	800ca40 <BSP_SD_GetCardState>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d107      	bne.n	800dd9e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dd8e:	4b07      	ldr	r3, [pc, #28]	; (800ddac <SD_CheckStatus+0x38>)
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	f023 0301 	bic.w	r3, r3, #1
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	4b04      	ldr	r3, [pc, #16]	; (800ddac <SD_CheckStatus+0x38>)
 800dd9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dd9e:	4b03      	ldr	r3, [pc, #12]	; (800ddac <SD_CheckStatus+0x38>)
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	b2db      	uxtb	r3, r3
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	20000010 	.word	0x20000010

0800ddb0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ddba:	4b0b      	ldr	r3, [pc, #44]	; (800dde8 <SD_initialize+0x38>)
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ddc0:	f7fe fdea 	bl	800c998 <BSP_SD_Init>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d107      	bne.n	800ddda <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ddca:	79fb      	ldrb	r3, [r7, #7]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7ff ffd1 	bl	800dd74 <SD_CheckStatus>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	4b04      	ldr	r3, [pc, #16]	; (800dde8 <SD_initialize+0x38>)
 800ddd8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ddda:	4b03      	ldr	r3, [pc, #12]	; (800dde8 <SD_initialize+0x38>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	b2db      	uxtb	r3, r3
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	20000010 	.word	0x20000010

0800ddec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ddf6:	79fb      	ldrb	r3, [r7, #7]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7ff ffbb 	bl	800dd74 <SD_CheckStatus>
 800ddfe:	4603      	mov	r3, r0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b086      	sub	sp, #24
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60b9      	str	r1, [r7, #8]
 800de10:	607a      	str	r2, [r7, #4]
 800de12:	603b      	str	r3, [r7, #0]
 800de14:	4603      	mov	r3, r0
 800de16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de18:	2301      	movs	r3, #1
 800de1a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800de1c:	f04f 33ff 	mov.w	r3, #4294967295
 800de20:	683a      	ldr	r2, [r7, #0]
 800de22:	6879      	ldr	r1, [r7, #4]
 800de24:	68b8      	ldr	r0, [r7, #8]
 800de26:	f7fe fdcf 	bl	800c9c8 <BSP_SD_ReadBlocks>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d107      	bne.n	800de40 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800de30:	bf00      	nop
 800de32:	f7fe fe05 	bl	800ca40 <BSP_SD_GetCardState>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1fa      	bne.n	800de32 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800de3c:	2300      	movs	r3, #0
 800de3e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800de40:	7dfb      	ldrb	r3, [r7, #23]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3718      	adds	r7, #24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b086      	sub	sp, #24
 800de4e:	af00      	add	r7, sp, #0
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
 800de54:	603b      	str	r3, [r7, #0]
 800de56:	4603      	mov	r3, r0
 800de58:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800de5e:	f04f 33ff 	mov.w	r3, #4294967295
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	6879      	ldr	r1, [r7, #4]
 800de66:	68b8      	ldr	r0, [r7, #8]
 800de68:	f7fe fdcc 	bl	800ca04 <BSP_SD_WriteBlocks>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d107      	bne.n	800de82 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800de72:	bf00      	nop
 800de74:	f7fe fde4 	bl	800ca40 <BSP_SD_GetCardState>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d1fa      	bne.n	800de74 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800de82:	7dfb      	ldrb	r3, [r7, #23]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b08c      	sub	sp, #48	; 0x30
 800de90:	af00      	add	r7, sp, #0
 800de92:	4603      	mov	r3, r0
 800de94:	603a      	str	r2, [r7, #0]
 800de96:	71fb      	strb	r3, [r7, #7]
 800de98:	460b      	mov	r3, r1
 800de9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dea2:	4b25      	ldr	r3, [pc, #148]	; (800df38 <SD_ioctl+0xac>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	f003 0301 	and.w	r3, r3, #1
 800deac:	2b00      	cmp	r3, #0
 800deae:	d001      	beq.n	800deb4 <SD_ioctl+0x28>
 800deb0:	2303      	movs	r3, #3
 800deb2:	e03c      	b.n	800df2e <SD_ioctl+0xa2>

  switch (cmd)
 800deb4:	79bb      	ldrb	r3, [r7, #6]
 800deb6:	2b03      	cmp	r3, #3
 800deb8:	d834      	bhi.n	800df24 <SD_ioctl+0x98>
 800deba:	a201      	add	r2, pc, #4	; (adr r2, 800dec0 <SD_ioctl+0x34>)
 800debc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec0:	0800ded1 	.word	0x0800ded1
 800dec4:	0800ded9 	.word	0x0800ded9
 800dec8:	0800def1 	.word	0x0800def1
 800decc:	0800df0b 	.word	0x0800df0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ded6:	e028      	b.n	800df2a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ded8:	f107 030c 	add.w	r3, r7, #12
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fe fdbf 	bl	800ca60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dee8:	2300      	movs	r3, #0
 800deea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800deee:	e01c      	b.n	800df2a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800def0:	f107 030c 	add.w	r3, r7, #12
 800def4:	4618      	mov	r0, r3
 800def6:	f7fe fdb3 	bl	800ca60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800defa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defc:	b29a      	uxth	r2, r3
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800df02:	2300      	movs	r3, #0
 800df04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df08:	e00f      	b.n	800df2a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df0a:	f107 030c 	add.w	r3, r7, #12
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fe fda6 	bl	800ca60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df16:	0a5a      	lsrs	r2, r3, #9
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df22:	e002      	b.n	800df2a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800df24:	2304      	movs	r3, #4
 800df26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800df2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3730      	adds	r7, #48	; 0x30
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	20000010 	.word	0x20000010

0800df3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800df42:	2300      	movs	r3, #0
 800df44:	607b      	str	r3, [r7, #4]
 800df46:	4b10      	ldr	r3, [pc, #64]	; (800df88 <HAL_MspInit+0x4c>)
 800df48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df4a:	4a0f      	ldr	r2, [pc, #60]	; (800df88 <HAL_MspInit+0x4c>)
 800df4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df50:	6453      	str	r3, [r2, #68]	; 0x44
 800df52:	4b0d      	ldr	r3, [pc, #52]	; (800df88 <HAL_MspInit+0x4c>)
 800df54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df5a:	607b      	str	r3, [r7, #4]
 800df5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800df5e:	2300      	movs	r3, #0
 800df60:	603b      	str	r3, [r7, #0]
 800df62:	4b09      	ldr	r3, [pc, #36]	; (800df88 <HAL_MspInit+0x4c>)
 800df64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df66:	4a08      	ldr	r2, [pc, #32]	; (800df88 <HAL_MspInit+0x4c>)
 800df68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df6c:	6413      	str	r3, [r2, #64]	; 0x40
 800df6e:	4b06      	ldr	r3, [pc, #24]	; (800df88 <HAL_MspInit+0x4c>)
 800df70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df76:	603b      	str	r3, [r7, #0]
 800df78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800df7a:	bf00      	nop
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	40023800 	.word	0x40023800

0800df8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b08a      	sub	sp, #40	; 0x28
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df94:	f107 0314 	add.w	r3, r7, #20
 800df98:	2200      	movs	r2, #0
 800df9a:	601a      	str	r2, [r3, #0]
 800df9c:	605a      	str	r2, [r3, #4]
 800df9e:	609a      	str	r2, [r3, #8]
 800dfa0:	60da      	str	r2, [r3, #12]
 800dfa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4a17      	ldr	r2, [pc, #92]	; (800e008 <HAL_ADC_MspInit+0x7c>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d127      	bne.n	800dffe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800dfae:	2300      	movs	r3, #0
 800dfb0:	613b      	str	r3, [r7, #16]
 800dfb2:	4b16      	ldr	r3, [pc, #88]	; (800e00c <HAL_ADC_MspInit+0x80>)
 800dfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfb6:	4a15      	ldr	r2, [pc, #84]	; (800e00c <HAL_ADC_MspInit+0x80>)
 800dfb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfbc:	6453      	str	r3, [r2, #68]	; 0x44
 800dfbe:	4b13      	ldr	r3, [pc, #76]	; (800e00c <HAL_ADC_MspInit+0x80>)
 800dfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfc6:	613b      	str	r3, [r7, #16]
 800dfc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfca:	2300      	movs	r3, #0
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	4b0f      	ldr	r3, [pc, #60]	; (800e00c <HAL_ADC_MspInit+0x80>)
 800dfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd2:	4a0e      	ldr	r2, [pc, #56]	; (800e00c <HAL_ADC_MspInit+0x80>)
 800dfd4:	f043 0301 	orr.w	r3, r3, #1
 800dfd8:	6313      	str	r3, [r2, #48]	; 0x30
 800dfda:	4b0c      	ldr	r3, [pc, #48]	; (800e00c <HAL_ADC_MspInit+0x80>)
 800dfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 800dfe6:	2308      	movs	r3, #8
 800dfe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dfea:	2303      	movs	r3, #3
 800dfec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfee:	2300      	movs	r3, #0
 800dff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 800dff2:	f107 0314 	add.w	r3, r7, #20
 800dff6:	4619      	mov	r1, r3
 800dff8:	4805      	ldr	r0, [pc, #20]	; (800e010 <HAL_ADC_MspInit+0x84>)
 800dffa:	f7f4 f877 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800dffe:	bf00      	nop
 800e000:	3728      	adds	r7, #40	; 0x28
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	40012000 	.word	0x40012000
 800e00c:	40023800 	.word	0x40023800
 800e010:	40020000 	.word	0x40020000

0800e014 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b08a      	sub	sp, #40	; 0x28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e01c:	f107 0314 	add.w	r3, r7, #20
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	605a      	str	r2, [r3, #4]
 800e026:	609a      	str	r2, [r3, #8]
 800e028:	60da      	str	r2, [r3, #12]
 800e02a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a52      	ldr	r2, [pc, #328]	; (800e17c <HAL_I2S_MspInit+0x168>)
 800e032:	4293      	cmp	r3, r2
 800e034:	f040 809d 	bne.w	800e172 <HAL_I2S_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e038:	2300      	movs	r3, #0
 800e03a:	613b      	str	r3, [r7, #16]
 800e03c:	4b50      	ldr	r3, [pc, #320]	; (800e180 <HAL_I2S_MspInit+0x16c>)
 800e03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e040:	4a4f      	ldr	r2, [pc, #316]	; (800e180 <HAL_I2S_MspInit+0x16c>)
 800e042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e046:	6413      	str	r3, [r2, #64]	; 0x40
 800e048:	4b4d      	ldr	r3, [pc, #308]	; (800e180 <HAL_I2S_MspInit+0x16c>)
 800e04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e04c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e050:	613b      	str	r3, [r7, #16]
 800e052:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e054:	2300      	movs	r3, #0
 800e056:	60fb      	str	r3, [r7, #12]
 800e058:	4b49      	ldr	r3, [pc, #292]	; (800e180 <HAL_I2S_MspInit+0x16c>)
 800e05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e05c:	4a48      	ldr	r2, [pc, #288]	; (800e180 <HAL_I2S_MspInit+0x16c>)
 800e05e:	f043 0304 	orr.w	r3, r3, #4
 800e062:	6313      	str	r3, [r2, #48]	; 0x30
 800e064:	4b46      	ldr	r3, [pc, #280]	; (800e180 <HAL_I2S_MspInit+0x16c>)
 800e066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e068:	f003 0304 	and.w	r3, r3, #4
 800e06c:	60fb      	str	r3, [r7, #12]
 800e06e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e070:	2300      	movs	r3, #0
 800e072:	60bb      	str	r3, [r7, #8]
 800e074:	4b42      	ldr	r3, [pc, #264]	; (800e180 <HAL_I2S_MspInit+0x16c>)
 800e076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e078:	4a41      	ldr	r2, [pc, #260]	; (800e180 <HAL_I2S_MspInit+0x16c>)
 800e07a:	f043 0302 	orr.w	r3, r3, #2
 800e07e:	6313      	str	r3, [r2, #48]	; 0x30
 800e080:	4b3f      	ldr	r3, [pc, #252]	; (800e180 <HAL_I2S_MspInit+0x16c>)
 800e082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e084:	f003 0302 	and.w	r3, r3, #2
 800e088:	60bb      	str	r3, [r7, #8]
 800e08a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e08c:	2308      	movs	r3, #8
 800e08e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e090:	2302      	movs	r3, #2
 800e092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e094:	2300      	movs	r3, #0
 800e096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e098:	2300      	movs	r3, #0
 800e09a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e09c:	2305      	movs	r3, #5
 800e09e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0a0:	f107 0314 	add.w	r3, r7, #20
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4837      	ldr	r0, [pc, #220]	; (800e184 <HAL_I2S_MspInit+0x170>)
 800e0a8:	f7f4 f820 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800e0ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e0b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0b2:	2302      	movs	r3, #2
 800e0b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e0be:	2305      	movs	r3, #5
 800e0c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e0c2:	f107 0314 	add.w	r3, r7, #20
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	482f      	ldr	r0, [pc, #188]	; (800e188 <HAL_I2S_MspInit+0x174>)
 800e0ca:	f7f4 f80f 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e0ce:	2340      	movs	r3, #64	; 0x40
 800e0d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0d2:	2302      	movs	r3, #2
 800e0d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e0de:	2305      	movs	r3, #5
 800e0e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0e2:	f107 0314 	add.w	r3, r7, #20
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4826      	ldr	r0, [pc, #152]	; (800e184 <HAL_I2S_MspInit+0x170>)
 800e0ea:	f7f3 ffff 	bl	80020ec <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800e0ee:	4b27      	ldr	r3, [pc, #156]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e0f0:	4a27      	ldr	r2, [pc, #156]	; (800e190 <HAL_I2S_MspInit+0x17c>)
 800e0f2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800e0f4:	4b25      	ldr	r3, [pc, #148]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e0fa:	4b24      	ldr	r3, [pc, #144]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e0fc:	2240      	movs	r2, #64	; 0x40
 800e0fe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e100:	4b22      	ldr	r3, [pc, #136]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e102:	2200      	movs	r2, #0
 800e104:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e106:	4b21      	ldr	r3, [pc, #132]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e10c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e10e:	4b1f      	ldr	r3, [pc, #124]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e114:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e116:	4b1d      	ldr	r3, [pc, #116]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e118:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e11c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800e11e:	4b1b      	ldr	r3, [pc, #108]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e120:	2200      	movs	r2, #0
 800e122:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800e124:	4b19      	ldr	r3, [pc, #100]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e12a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e12c:	4b17      	ldr	r3, [pc, #92]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e12e:	2204      	movs	r2, #4
 800e130:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e132:	4b16      	ldr	r3, [pc, #88]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e134:	2203      	movs	r2, #3
 800e136:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_INC8;
 800e138:	4b14      	ldr	r3, [pc, #80]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e13a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e13e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800e140:	4b12      	ldr	r3, [pc, #72]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e142:	2200      	movs	r2, #0
 800e144:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800e146:	4811      	ldr	r0, [pc, #68]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e148:	f7f3 fc62 	bl	8001a10 <HAL_DMA_Init>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d001      	beq.n	800e156 <HAL_I2S_MspInit+0x142>
    {
      Error_Handler();
 800e152:	f7ff f979 	bl	800d448 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a0c      	ldr	r2, [pc, #48]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e15a:	639a      	str	r2, [r3, #56]	; 0x38
 800e15c:	4a0b      	ldr	r2, [pc, #44]	; (800e18c <HAL_I2S_MspInit+0x178>)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800e162:	2200      	movs	r2, #0
 800e164:	2100      	movs	r1, #0
 800e166:	2024      	movs	r0, #36	; 0x24
 800e168:	f7f3 fc1b 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800e16c:	2024      	movs	r0, #36	; 0x24
 800e16e:	f7f3 fc34 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e172:	bf00      	nop
 800e174:	3728      	adds	r7, #40	; 0x28
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	40003800 	.word	0x40003800
 800e180:	40023800 	.word	0x40023800
 800e184:	40020800 	.word	0x40020800
 800e188:	40020400 	.word	0x40020400
 800e18c:	20000fb8 	.word	0x20000fb8
 800e190:	40026070 	.word	0x40026070

0800e194 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b08a      	sub	sp, #40	; 0x28
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e19c:	f107 0314 	add.w	r3, r7, #20
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	601a      	str	r2, [r3, #0]
 800e1a4:	605a      	str	r2, [r3, #4]
 800e1a6:	609a      	str	r2, [r3, #8]
 800e1a8:	60da      	str	r2, [r3, #12]
 800e1aa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a28      	ldr	r2, [pc, #160]	; (800e254 <HAL_SD_MspInit+0xc0>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d14a      	bne.n	800e24c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	613b      	str	r3, [r7, #16]
 800e1ba:	4b27      	ldr	r3, [pc, #156]	; (800e258 <HAL_SD_MspInit+0xc4>)
 800e1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1be:	4a26      	ldr	r2, [pc, #152]	; (800e258 <HAL_SD_MspInit+0xc4>)
 800e1c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e1c4:	6453      	str	r3, [r2, #68]	; 0x44
 800e1c6:	4b24      	ldr	r3, [pc, #144]	; (800e258 <HAL_SD_MspInit+0xc4>)
 800e1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1ce:	613b      	str	r3, [r7, #16]
 800e1d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	60fb      	str	r3, [r7, #12]
 800e1d6:	4b20      	ldr	r3, [pc, #128]	; (800e258 <HAL_SD_MspInit+0xc4>)
 800e1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1da:	4a1f      	ldr	r2, [pc, #124]	; (800e258 <HAL_SD_MspInit+0xc4>)
 800e1dc:	f043 0304 	orr.w	r3, r3, #4
 800e1e0:	6313      	str	r3, [r2, #48]	; 0x30
 800e1e2:	4b1d      	ldr	r3, [pc, #116]	; (800e258 <HAL_SD_MspInit+0xc4>)
 800e1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e6:	f003 0304 	and.w	r3, r3, #4
 800e1ea:	60fb      	str	r3, [r7, #12]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60bb      	str	r3, [r7, #8]
 800e1f2:	4b19      	ldr	r3, [pc, #100]	; (800e258 <HAL_SD_MspInit+0xc4>)
 800e1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f6:	4a18      	ldr	r2, [pc, #96]	; (800e258 <HAL_SD_MspInit+0xc4>)
 800e1f8:	f043 0308 	orr.w	r3, r3, #8
 800e1fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e1fe:	4b16      	ldr	r3, [pc, #88]	; (800e258 <HAL_SD_MspInit+0xc4>)
 800e200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e202:	f003 0308 	and.w	r3, r3, #8
 800e206:	60bb      	str	r3, [r7, #8]
 800e208:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800e20a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800e20e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e210:	2302      	movs	r3, #2
 800e212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e214:	2300      	movs	r3, #0
 800e216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e218:	2303      	movs	r3, #3
 800e21a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e21c:	230c      	movs	r3, #12
 800e21e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e220:	f107 0314 	add.w	r3, r7, #20
 800e224:	4619      	mov	r1, r3
 800e226:	480d      	ldr	r0, [pc, #52]	; (800e25c <HAL_SD_MspInit+0xc8>)
 800e228:	f7f3 ff60 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e22c:	2304      	movs	r3, #4
 800e22e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e230:	2302      	movs	r3, #2
 800e232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e234:	2300      	movs	r3, #0
 800e236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e238:	2303      	movs	r3, #3
 800e23a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e23c:	230c      	movs	r3, #12
 800e23e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e240:	f107 0314 	add.w	r3, r7, #20
 800e244:	4619      	mov	r1, r3
 800e246:	4806      	ldr	r0, [pc, #24]	; (800e260 <HAL_SD_MspInit+0xcc>)
 800e248:	f7f3 ff50 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800e24c:	bf00      	nop
 800e24e:	3728      	adds	r7, #40	; 0x28
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	40012c00 	.word	0x40012c00
 800e258:	40023800 	.word	0x40023800
 800e25c:	40020800 	.word	0x40020800
 800e260:	40020c00 	.word	0x40020c00

0800e264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a0e      	ldr	r2, [pc, #56]	; (800e2ac <HAL_TIM_Base_MspInit+0x48>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d115      	bne.n	800e2a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e276:	2300      	movs	r3, #0
 800e278:	60fb      	str	r3, [r7, #12]
 800e27a:	4b0d      	ldr	r3, [pc, #52]	; (800e2b0 <HAL_TIM_Base_MspInit+0x4c>)
 800e27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e27e:	4a0c      	ldr	r2, [pc, #48]	; (800e2b0 <HAL_TIM_Base_MspInit+0x4c>)
 800e280:	f043 0301 	orr.w	r3, r3, #1
 800e284:	6453      	str	r3, [r2, #68]	; 0x44
 800e286:	4b0a      	ldr	r3, [pc, #40]	; (800e2b0 <HAL_TIM_Base_MspInit+0x4c>)
 800e288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e28a:	f003 0301 	and.w	r3, r3, #1
 800e28e:	60fb      	str	r3, [r7, #12]
 800e290:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800e292:	2200      	movs	r2, #0
 800e294:	2100      	movs	r1, #0
 800e296:	2019      	movs	r0, #25
 800e298:	f7f3 fb83 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e29c:	2019      	movs	r0, #25
 800e29e:	f7f3 fb9c 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800e2a2:	bf00      	nop
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	40010000 	.word	0x40010000
 800e2b0:	40023800 	.word	0x40023800

0800e2b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a22      	ldr	r2, [pc, #136]	; (800e34c <HAL_TIM_PWM_MspInit+0x98>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d13d      	bne.n	800e342 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	60fb      	str	r3, [r7, #12]
 800e2ca:	4b21      	ldr	r3, [pc, #132]	; (800e350 <HAL_TIM_PWM_MspInit+0x9c>)
 800e2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ce:	4a20      	ldr	r2, [pc, #128]	; (800e350 <HAL_TIM_PWM_MspInit+0x9c>)
 800e2d0:	f043 0302 	orr.w	r3, r3, #2
 800e2d4:	6413      	str	r3, [r2, #64]	; 0x40
 800e2d6:	4b1e      	ldr	r3, [pc, #120]	; (800e350 <HAL_TIM_PWM_MspInit+0x9c>)
 800e2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2da:	f003 0302 	and.w	r3, r3, #2
 800e2de:	60fb      	str	r3, [r7, #12]
 800e2e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800e2e2:	4b1c      	ldr	r3, [pc, #112]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e2e4:	4a1c      	ldr	r2, [pc, #112]	; (800e358 <HAL_TIM_PWM_MspInit+0xa4>)
 800e2e6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800e2e8:	4b1a      	ldr	r3, [pc, #104]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e2ea:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800e2ee:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e2f0:	4b18      	ldr	r3, [pc, #96]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e2f2:	2240      	movs	r2, #64	; 0x40
 800e2f4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e2f6:	4b17      	ldr	r3, [pc, #92]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800e2fc:	4b15      	ldr	r3, [pc, #84]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e2fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e302:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e304:	4b13      	ldr	r3, [pc, #76]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e30a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e30c:	4b11      	ldr	r3, [pc, #68]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e30e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e312:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800e314:	4b0f      	ldr	r3, [pc, #60]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e316:	2200      	movs	r2, #0
 800e318:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800e31a:	4b0e      	ldr	r3, [pc, #56]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e320:	4b0c      	ldr	r3, [pc, #48]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e322:	2200      	movs	r2, #0
 800e324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800e326:	480b      	ldr	r0, [pc, #44]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e328:	f7f3 fb72 	bl	8001a10 <HAL_DMA_Init>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d001      	beq.n	800e336 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800e332:	f7ff f889 	bl	800d448 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a06      	ldr	r2, [pc, #24]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e33a:	629a      	str	r2, [r3, #40]	; 0x28
 800e33c:	4a05      	ldr	r2, [pc, #20]	; (800e354 <HAL_TIM_PWM_MspInit+0xa0>)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800e342:	bf00      	nop
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	40000400 	.word	0x40000400
 800e350:	40023800 	.word	0x40023800
 800e354:	20000e34 	.word	0x20000e34
 800e358:	40026088 	.word	0x40026088

0800e35c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08a      	sub	sp, #40	; 0x28
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e364:	f107 0314 	add.w	r3, r7, #20
 800e368:	2200      	movs	r2, #0
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	605a      	str	r2, [r3, #4]
 800e36e:	609a      	str	r2, [r3, #8]
 800e370:	60da      	str	r2, [r3, #12]
 800e372:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a24      	ldr	r2, [pc, #144]	; (800e40c <HAL_TIM_MspPostInit+0xb0>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d11f      	bne.n	800e3be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e37e:	2300      	movs	r3, #0
 800e380:	613b      	str	r3, [r7, #16]
 800e382:	4b23      	ldr	r3, [pc, #140]	; (800e410 <HAL_TIM_MspPostInit+0xb4>)
 800e384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e386:	4a22      	ldr	r2, [pc, #136]	; (800e410 <HAL_TIM_MspPostInit+0xb4>)
 800e388:	f043 0302 	orr.w	r3, r3, #2
 800e38c:	6313      	str	r3, [r2, #48]	; 0x30
 800e38e:	4b20      	ldr	r3, [pc, #128]	; (800e410 <HAL_TIM_MspPostInit+0xb4>)
 800e390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e392:	f003 0302 	and.w	r3, r3, #2
 800e396:	613b      	str	r3, [r7, #16]
 800e398:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e39a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e39e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3b0:	f107 0314 	add.w	r3, r7, #20
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	4817      	ldr	r0, [pc, #92]	; (800e414 <HAL_TIM_MspPostInit+0xb8>)
 800e3b8:	f7f3 fe98 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e3bc:	e022      	b.n	800e404 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a15      	ldr	r2, [pc, #84]	; (800e418 <HAL_TIM_MspPostInit+0xbc>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d11d      	bne.n	800e404 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	60fb      	str	r3, [r7, #12]
 800e3cc:	4b10      	ldr	r3, [pc, #64]	; (800e410 <HAL_TIM_MspPostInit+0xb4>)
 800e3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3d0:	4a0f      	ldr	r2, [pc, #60]	; (800e410 <HAL_TIM_MspPostInit+0xb4>)
 800e3d2:	f043 0301 	orr.w	r3, r3, #1
 800e3d6:	6313      	str	r3, [r2, #48]	; 0x30
 800e3d8:	4b0d      	ldr	r3, [pc, #52]	; (800e410 <HAL_TIM_MspPostInit+0xb4>)
 800e3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	60fb      	str	r3, [r7, #12]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800e3e4:	2380      	movs	r3, #128	; 0x80
 800e3e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e3f4:	2302      	movs	r3, #2
 800e3f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3f8:	f107 0314 	add.w	r3, r7, #20
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	4807      	ldr	r0, [pc, #28]	; (800e41c <HAL_TIM_MspPostInit+0xc0>)
 800e400:	f7f3 fe74 	bl	80020ec <HAL_GPIO_Init>
}
 800e404:	bf00      	nop
 800e406:	3728      	adds	r7, #40	; 0x28
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	40010000 	.word	0x40010000
 800e410:	40023800 	.word	0x40023800
 800e414:	40020400 	.word	0x40020400
 800e418:	40000400 	.word	0x40000400
 800e41c:	40020000 	.word	0x40020000

0800e420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e420:	b480      	push	{r7}
 800e422:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e424:	bf00      	nop
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr

0800e42e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e42e:	b480      	push	{r7}
 800e430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e432:	e7fe      	b.n	800e432 <HardFault_Handler+0x4>

0800e434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e434:	b480      	push	{r7}
 800e436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e438:	e7fe      	b.n	800e438 <MemManage_Handler+0x4>

0800e43a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e43a:	b480      	push	{r7}
 800e43c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e43e:	e7fe      	b.n	800e43e <BusFault_Handler+0x4>

0800e440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e440:	b480      	push	{r7}
 800e442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e444:	e7fe      	b.n	800e444 <UsageFault_Handler+0x4>

0800e446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e446:	b480      	push	{r7}
 800e448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e44a:	bf00      	nop
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e454:	b480      	push	{r7}
 800e456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e458:	bf00      	nop
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e462:	b480      	push	{r7}
 800e464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e466:	bf00      	nop
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e474:	f7f2 fdac 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e478:	bf00      	nop
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800e480:	4802      	ldr	r0, [pc, #8]	; (800e48c <DMA1_Stream4_IRQHandler+0x10>)
 800e482:	f7f3 fbcb 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800e486:	bf00      	nop
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	20000fb8 	.word	0x20000fb8

0800e490 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800e494:	4802      	ldr	r0, [pc, #8]	; (800e4a0 <DMA1_Stream5_IRQHandler+0x10>)
 800e496:	f7f3 fbc1 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800e49a:	bf00      	nop
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	20000e34 	.word	0x20000e34

0800e4a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ledRefresh = 1;
 800e4a8:	4b03      	ldr	r3, [pc, #12]	; (800e4b8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e4ae:	4803      	ldr	r0, [pc, #12]	; (800e4bc <TIM1_UP_TIM10_IRQHandler+0x18>)
 800e4b0:	f7f7 faee 	bl	8005a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e4b4:	bf00      	nop
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	20000008 	.word	0x20000008
 800e4bc:	20000e94 	.word	0x20000e94

0800e4c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800e4c4:	4802      	ldr	r0, [pc, #8]	; (800e4d0 <SPI2_IRQHandler+0x10>)
 800e4c6:	f7f4 f95c 	bl	8002782 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800e4ca:	bf00      	nop
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	20001018 	.word	0x20001018

0800e4d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800e4d8:	4802      	ldr	r0, [pc, #8]	; (800e4e4 <OTG_FS_IRQHandler+0x10>)
 800e4da:	f7f4 fcb3 	bl	8002e44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800e4de:	bf00      	nop
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	20005564 	.word	0x20005564

0800e4e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	e00a      	b.n	800e510 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e4fa:	f3af 8000 	nop.w
 800e4fe:	4601      	mov	r1, r0
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	60ba      	str	r2, [r7, #8]
 800e506:	b2ca      	uxtb	r2, r1
 800e508:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	3301      	adds	r3, #1
 800e50e:	617b      	str	r3, [r7, #20]
 800e510:	697a      	ldr	r2, [r7, #20]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	429a      	cmp	r2, r3
 800e516:	dbf0      	blt.n	800e4fa <_read+0x12>
	}

return len;
 800e518:	687b      	ldr	r3, [r7, #4]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3718      	adds	r7, #24
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <_close>:
}



int _close(int file)
{
 800e522:	b480      	push	{r7}
 800e524:	b083      	sub	sp, #12
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
	return -1;
 800e52a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e52e:	4618      	mov	r0, r3
 800e530:	370c      	adds	r7, #12
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e53a:	b480      	push	{r7}
 800e53c:	b083      	sub	sp, #12
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e54a:	605a      	str	r2, [r3, #4]
	return 0;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	370c      	adds	r7, #12
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <_isatty>:

int _isatty(int file)
{
 800e55a:	b480      	push	{r7}
 800e55c:	b083      	sub	sp, #12
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
	return 1;
 800e562:	2301      	movs	r3, #1
}
 800e564:	4618      	mov	r0, r3
 800e566:	370c      	adds	r7, #12
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
	return 0;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3714      	adds	r7, #20
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
	...

0800e58c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]

	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e594:	4b11      	ldr	r3, [pc, #68]	; (800e5dc <_sbrk+0x50>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d102      	bne.n	800e5a2 <_sbrk+0x16>
		heap_end = &end;
 800e59c:	4b0f      	ldr	r3, [pc, #60]	; (800e5dc <_sbrk+0x50>)
 800e59e:	4a10      	ldr	r2, [pc, #64]	; (800e5e0 <_sbrk+0x54>)
 800e5a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e5a2:	4b0e      	ldr	r3, [pc, #56]	; (800e5dc <_sbrk+0x50>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e5a8:	4b0c      	ldr	r3, [pc, #48]	; (800e5dc <_sbrk+0x50>)
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	466a      	mov	r2, sp
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d907      	bls.n	800e5c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e5b6:	f000 fb49 	bl	800ec4c <__errno>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	230c      	movs	r3, #12
 800e5be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c4:	e006      	b.n	800e5d4 <_sbrk+0x48>
	}

	heap_end += incr;
 800e5c6:	4b05      	ldr	r3, [pc, #20]	; (800e5dc <_sbrk+0x50>)
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	4a03      	ldr	r2, [pc, #12]	; (800e5dc <_sbrk+0x50>)
 800e5d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e5d2:	68fb      	ldr	r3, [r7, #12]

}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	200002f0 	.word	0x200002f0
 800e5e0:	20005970 	.word	0x20005970

0800e5e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e5e8:	4b08      	ldr	r3, [pc, #32]	; (800e60c <SystemInit+0x28>)
 800e5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ee:	4a07      	ldr	r2, [pc, #28]	; (800e60c <SystemInit+0x28>)
 800e5f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e5f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e5f8:	4b04      	ldr	r3, [pc, #16]	; (800e60c <SystemInit+0x28>)
 800e5fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e5fe:	609a      	str	r2, [r3, #8]
#endif
}
 800e600:	bf00      	nop
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	e000ed00 	.word	0xe000ed00

0800e610 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e624:	4619      	mov	r1, r3
 800e626:	4610      	mov	r0, r2
 800e628:	f7f9 fdd9 	bl	80081de <USBD_LL_SetupStage>
}
 800e62c:	bf00      	nop
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e646:	78fa      	ldrb	r2, [r7, #3]
 800e648:	6879      	ldr	r1, [r7, #4]
 800e64a:	4613      	mov	r3, r2
 800e64c:	00db      	lsls	r3, r3, #3
 800e64e:	1a9b      	subs	r3, r3, r2
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	440b      	add	r3, r1
 800e654:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	78fb      	ldrb	r3, [r7, #3]
 800e65c:	4619      	mov	r1, r3
 800e65e:	f7f9 fe11 	bl	8008284 <USBD_LL_DataOutStage>
}
 800e662:	bf00      	nop
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b082      	sub	sp, #8
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
 800e672:	460b      	mov	r3, r1
 800e674:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e67c:	78fa      	ldrb	r2, [r7, #3]
 800e67e:	6879      	ldr	r1, [r7, #4]
 800e680:	4613      	mov	r3, r2
 800e682:	00db      	lsls	r3, r3, #3
 800e684:	1a9b      	subs	r3, r3, r2
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	440b      	add	r3, r1
 800e68a:	3348      	adds	r3, #72	; 0x48
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	78fb      	ldrb	r3, [r7, #3]
 800e690:	4619      	mov	r1, r3
 800e692:	f7f9 fe5a 	bl	800834a <USBD_LL_DataInStage>
}
 800e696:	bf00      	nop
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b082      	sub	sp, #8
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7f9 ff5e 	bl	800856e <USBD_LL_SOF>
}
 800e6b2:	bf00      	nop
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b084      	sub	sp, #16
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d102      	bne.n	800e6d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	73fb      	strb	r3, [r7, #15]
 800e6d2:	e008      	b.n	800e6e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	2b02      	cmp	r3, #2
 800e6da:	d102      	bne.n	800e6e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	73fb      	strb	r3, [r7, #15]
 800e6e0:	e001      	b.n	800e6e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e6e2:	f7fe feb1 	bl	800d448 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e6ec:	7bfa      	ldrb	r2, [r7, #15]
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7f9 ff01 	bl	80084f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f9 feba 	bl	8008476 <USBD_LL_Reset>
}
 800e702:	bf00      	nop
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
	...

0800e70c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7f9 fefc 	bl	8008518 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	6812      	ldr	r2, [r2, #0]
 800e72e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e732:	f043 0301 	orr.w	r3, r3, #1
 800e736:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6a1b      	ldr	r3, [r3, #32]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d005      	beq.n	800e74c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e740:	4b04      	ldr	r3, [pc, #16]	; (800e754 <HAL_PCD_SuspendCallback+0x48>)
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	4a03      	ldr	r2, [pc, #12]	; (800e754 <HAL_PCD_SuspendCallback+0x48>)
 800e746:	f043 0306 	orr.w	r3, r3, #6
 800e74a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e74c:	bf00      	nop
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	e000ed00 	.word	0xe000ed00

0800e758 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e766:	4618      	mov	r0, r3
 800e768:	f7f9 feeb 	bl	8008542 <USBD_LL_Resume>
}
 800e76c:	bf00      	nop
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e786:	78fa      	ldrb	r2, [r7, #3]
 800e788:	4611      	mov	r1, r2
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7f9 ff16 	bl	80085bc <USBD_LL_IsoOUTIncomplete>
}
 800e790:	bf00      	nop
 800e792:	3708      	adds	r7, #8
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e7aa:	78fa      	ldrb	r2, [r7, #3]
 800e7ac:	4611      	mov	r1, r2
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7f9 fef7 	bl	80085a2 <USBD_LL_IsoINIncomplete>
}
 800e7b4:	bf00      	nop
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7f9 ff03 	bl	80085d6 <USBD_LL_DevConnected>
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7f9 ff00 	bl	80085ec <USBD_LL_DevDisconnected>
}
 800e7ec:	bf00      	nop
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	4608      	mov	r0, r1
 800e7fe:	4611      	mov	r1, r2
 800e800:	461a      	mov	r2, r3
 800e802:	4603      	mov	r3, r0
 800e804:	70fb      	strb	r3, [r7, #3]
 800e806:	460b      	mov	r3, r1
 800e808:	70bb      	strb	r3, [r7, #2]
 800e80a:	4613      	mov	r3, r2
 800e80c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e80e:	2300      	movs	r3, #0
 800e810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e812:	2300      	movs	r3, #0
 800e814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e81c:	78bb      	ldrb	r3, [r7, #2]
 800e81e:	883a      	ldrh	r2, [r7, #0]
 800e820:	78f9      	ldrb	r1, [r7, #3]
 800e822:	f7f4 fee6 	bl	80035f2 <HAL_PCD_EP_Open>
 800e826:	4603      	mov	r3, r0
 800e828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 f8d3 	bl	800e9d8 <USBD_Get_USB_Status>
 800e832:	4603      	mov	r3, r0
 800e834:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e836:	7bbb      	ldrb	r3, [r7, #14]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	460b      	mov	r3, r1
 800e84a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e84c:	2300      	movs	r3, #0
 800e84e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e850:	2300      	movs	r3, #0
 800e852:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e85a:	78fa      	ldrb	r2, [r7, #3]
 800e85c:	4611      	mov	r1, r2
 800e85e:	4618      	mov	r0, r3
 800e860:	f7f4 ffc4 	bl	80037ec <HAL_PCD_EP_SetStall>
 800e864:	4603      	mov	r3, r0
 800e866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e868:	7bfb      	ldrb	r3, [r7, #15]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f000 f8b4 	bl	800e9d8 <USBD_Get_USB_Status>
 800e870:	4603      	mov	r3, r0
 800e872:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e874:	7bbb      	ldrb	r3, [r7, #14]
}
 800e876:	4618      	mov	r0, r3
 800e878:	3710      	adds	r7, #16
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b084      	sub	sp, #16
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	460b      	mov	r3, r1
 800e888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e88a:	2300      	movs	r3, #0
 800e88c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e88e:	2300      	movs	r3, #0
 800e890:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e898:	78fa      	ldrb	r2, [r7, #3]
 800e89a:	4611      	mov	r1, r2
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7f5 f809 	bl	80038b4 <HAL_PCD_EP_ClrStall>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800e8a6:	7bfb      	ldrb	r3, [r7, #15]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f000 f895 	bl	800e9d8 <USBD_Get_USB_Status>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800e8b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8ce:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e8d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	da0b      	bge.n	800e8f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e8d8:	78fb      	ldrb	r3, [r7, #3]
 800e8da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8de:	68f9      	ldr	r1, [r7, #12]
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	00db      	lsls	r3, r3, #3
 800e8e4:	1a9b      	subs	r3, r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	440b      	add	r3, r1
 800e8ea:	333e      	adds	r3, #62	; 0x3e
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	e00b      	b.n	800e908 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e8f0:	78fb      	ldrb	r3, [r7, #3]
 800e8f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8f6:	68f9      	ldr	r1, [r7, #12]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	00db      	lsls	r3, r3, #3
 800e8fc:	1a9b      	subs	r3, r3, r2
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	440b      	add	r3, r1
 800e902:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e906:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3714      	adds	r7, #20
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	460b      	mov	r3, r1
 800e91e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e920:	2300      	movs	r3, #0
 800e922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e924:	2300      	movs	r3, #0
 800e926:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e92e:	78fa      	ldrb	r2, [r7, #3]
 800e930:	4611      	mov	r1, r2
 800e932:	4618      	mov	r0, r3
 800e934:	f7f4 fe38 	bl	80035a8 <HAL_PCD_SetAddress>
 800e938:	4603      	mov	r3, r0
 800e93a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e93c:	7bfb      	ldrb	r3, [r7, #15]
 800e93e:	4618      	mov	r0, r3
 800e940:	f000 f84a 	bl	800e9d8 <USBD_Get_USB_Status>
 800e944:	4603      	mov	r3, r0
 800e946:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e948:	7bbb      	ldrb	r3, [r7, #14]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b086      	sub	sp, #24
 800e956:	af00      	add	r7, sp, #0
 800e958:	60f8      	str	r0, [r7, #12]
 800e95a:	607a      	str	r2, [r7, #4]
 800e95c:	603b      	str	r3, [r7, #0]
 800e95e:	460b      	mov	r3, r1
 800e960:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e962:	2300      	movs	r3, #0
 800e964:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e966:	2300      	movs	r3, #0
 800e968:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e970:	7af9      	ldrb	r1, [r7, #11]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	f7f4 feef 	bl	8003758 <HAL_PCD_EP_Transmit>
 800e97a:	4603      	mov	r3, r0
 800e97c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800e97e:	7dfb      	ldrb	r3, [r7, #23]
 800e980:	4618      	mov	r0, r3
 800e982:	f000 f829 	bl	800e9d8 <USBD_Get_USB_Status>
 800e986:	4603      	mov	r3, r0
 800e988:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e98a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3718      	adds	r7, #24
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	607a      	str	r2, [r7, #4]
 800e99e:	603b      	str	r3, [r7, #0]
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9b2:	7af9      	ldrb	r1, [r7, #11]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	f7f4 fe83 	bl	80036c2 <HAL_PCD_EP_Receive>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800e9c0:	7dfb      	ldrb	r3, [r7, #23]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f000 f808 	bl	800e9d8 <USBD_Get_USB_Status>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800e9cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3718      	adds	r7, #24
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
	...

0800e9d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	4603      	mov	r3, r0
 800e9e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e9e6:	79fb      	ldrb	r3, [r7, #7]
 800e9e8:	2b03      	cmp	r3, #3
 800e9ea:	d817      	bhi.n	800ea1c <USBD_Get_USB_Status+0x44>
 800e9ec:	a201      	add	r2, pc, #4	; (adr r2, 800e9f4 <USBD_Get_USB_Status+0x1c>)
 800e9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f2:	bf00      	nop
 800e9f4:	0800ea05 	.word	0x0800ea05
 800e9f8:	0800ea0b 	.word	0x0800ea0b
 800e9fc:	0800ea11 	.word	0x0800ea11
 800ea00:	0800ea17 	.word	0x0800ea17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea04:	2300      	movs	r3, #0
 800ea06:	73fb      	strb	r3, [r7, #15]
    break;
 800ea08:	e00b      	b.n	800ea22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea0e:	e008      	b.n	800ea22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea10:	2301      	movs	r3, #1
 800ea12:	73fb      	strb	r3, [r7, #15]
    break;
 800ea14:	e005      	b.n	800ea22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea16:	2303      	movs	r3, #3
 800ea18:	73fb      	strb	r3, [r7, #15]
    break;
 800ea1a:	e002      	b.n	800ea22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea1c:	2303      	movs	r3, #3
 800ea1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea20:	bf00      	nop
  }
  return usb_status;
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3714      	adds	r7, #20
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <ws2812_init>:
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
//------------------------------------------------------------------


void ws2812_init(void)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 800ea36:	2350      	movs	r3, #80	; 0x50
 800ea38:	607b      	str	r3, [r7, #4]
 800ea3a:	e007      	b.n	800ea4c <ws2812_init+0x1c>
	  BUF_DMA[i] = LOW;
 800ea3c:	4a08      	ldr	r2, [pc, #32]	; (800ea60 <ws2812_init+0x30>)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2119      	movs	r1, #25
 800ea42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	607b      	str	r3, [r7, #4]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ea52:	dbf3      	blt.n	800ea3c <ws2812_init+0xc>

  }
}
 800ea54:	bf00      	nop
 800ea56:	370c      	adds	r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr
 800ea60:	200002f4 	.word	0x200002f4

0800ea64 <ws2812_setPixel_gammaCorrection>:
	for( int i; i<LED_COUNT; i++){
		ws2812_pixel_rgb_to_buf_dma(0,0,0,i);
	}
}

void ws2812_setPixel_gammaCorrection(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t pos){
 800ea64:	b590      	push	{r4, r7, lr}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	4611      	mov	r1, r2
 800ea70:	461a      	mov	r2, r3
 800ea72:	4623      	mov	r3, r4
 800ea74:	71fb      	strb	r3, [r7, #7]
 800ea76:	4603      	mov	r3, r0
 800ea78:	71bb      	strb	r3, [r7, #6]
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	717b      	strb	r3, [r7, #5]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	807b      	strh	r3, [r7, #2]
	ws2812_pixel_rgb_to_buf_dma(gamma8[Rpixel],gamma8[Gpixel],gamma8[Bpixel],pos);
 800ea82:	79fb      	ldrb	r3, [r7, #7]
 800ea84:	4a07      	ldr	r2, [pc, #28]	; (800eaa4 <ws2812_setPixel_gammaCorrection+0x40>)
 800ea86:	5cd0      	ldrb	r0, [r2, r3]
 800ea88:	79bb      	ldrb	r3, [r7, #6]
 800ea8a:	4a06      	ldr	r2, [pc, #24]	; (800eaa4 <ws2812_setPixel_gammaCorrection+0x40>)
 800ea8c:	5cd1      	ldrb	r1, [r2, r3]
 800ea8e:	797b      	ldrb	r3, [r7, #5]
 800ea90:	4a04      	ldr	r2, [pc, #16]	; (800eaa4 <ws2812_setPixel_gammaCorrection+0x40>)
 800ea92:	5cd2      	ldrb	r2, [r2, r3]
 800ea94:	887b      	ldrh	r3, [r7, #2]
 800ea96:	f000 f807 	bl	800eaa8 <ws2812_pixel_rgb_to_buf_dma>
}
 800ea9a:	bf00      	nop
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd90      	pop	{r4, r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	080118b8 	.word	0x080118b8

0800eaa8 <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 800eaa8:	b490      	push	{r4, r7}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	4604      	mov	r4, r0
 800eab0:	4608      	mov	r0, r1
 800eab2:	4611      	mov	r1, r2
 800eab4:	461a      	mov	r2, r3
 800eab6:	4623      	mov	r3, r4
 800eab8:	71fb      	strb	r3, [r7, #7]
 800eaba:	4603      	mov	r3, r0
 800eabc:	71bb      	strb	r3, [r7, #6]
 800eabe:	460b      	mov	r3, r1
 800eac0:	717b      	strb	r3, [r7, #5]
 800eac2:	4613      	mov	r3, r2
 800eac4:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 800eac6:	2300      	movs	r3, #0
 800eac8:	81fb      	strh	r3, [r7, #14]
 800eaca:	e07a      	b.n	800ebc2 <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 800eacc:	79fa      	ldrb	r2, [r7, #7]
 800eace:	89fb      	ldrh	r3, [r7, #14]
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	f1c3 0307 	rsb	r3, r3, #7
 800ead6:	fa42 f303 	asr.w	r3, r2, r3
 800eada:	f003 0301 	and.w	r3, r3, #1
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00e      	beq.n	800eb00 <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 800eae2:	887a      	ldrh	r2, [r7, #2]
 800eae4:	4613      	mov	r3, r2
 800eae6:	005b      	lsls	r3, r3, #1
 800eae8:	4413      	add	r3, r2
 800eaea:	00db      	lsls	r3, r3, #3
 800eaec:	3350      	adds	r3, #80	; 0x50
 800eaee:	89fa      	ldrh	r2, [r7, #14]
 800eaf0:	b292      	uxth	r2, r2
 800eaf2:	4413      	add	r3, r2
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	4a37      	ldr	r2, [pc, #220]	; (800ebd4 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800eaf8:	2141      	movs	r1, #65	; 0x41
 800eafa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800eafe:	e00d      	b.n	800eb1c <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 800eb00:	887a      	ldrh	r2, [r7, #2]
 800eb02:	4613      	mov	r3, r2
 800eb04:	005b      	lsls	r3, r3, #1
 800eb06:	4413      	add	r3, r2
 800eb08:	00db      	lsls	r3, r3, #3
 800eb0a:	3350      	adds	r3, #80	; 0x50
 800eb0c:	89fa      	ldrh	r2, [r7, #14]
 800eb0e:	b292      	uxth	r2, r2
 800eb10:	4413      	add	r3, r2
 800eb12:	3308      	adds	r3, #8
 800eb14:	4a2f      	ldr	r2, [pc, #188]	; (800ebd4 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800eb16:	2119      	movs	r1, #25
 800eb18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 800eb1c:	79ba      	ldrb	r2, [r7, #6]
 800eb1e:	89fb      	ldrh	r3, [r7, #14]
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	f1c3 0307 	rsb	r3, r3, #7
 800eb26:	fa42 f303 	asr.w	r3, r2, r3
 800eb2a:	f003 0301 	and.w	r3, r3, #1
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d00d      	beq.n	800eb4e <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 800eb32:	887a      	ldrh	r2, [r7, #2]
 800eb34:	4613      	mov	r3, r2
 800eb36:	005b      	lsls	r3, r3, #1
 800eb38:	4413      	add	r3, r2
 800eb3a:	00db      	lsls	r3, r3, #3
 800eb3c:	3350      	adds	r3, #80	; 0x50
 800eb3e:	89fa      	ldrh	r2, [r7, #14]
 800eb40:	b292      	uxth	r2, r2
 800eb42:	4413      	add	r3, r2
 800eb44:	4a23      	ldr	r2, [pc, #140]	; (800ebd4 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800eb46:	2141      	movs	r1, #65	; 0x41
 800eb48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800eb4c:	e00c      	b.n	800eb68 <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 800eb4e:	887a      	ldrh	r2, [r7, #2]
 800eb50:	4613      	mov	r3, r2
 800eb52:	005b      	lsls	r3, r3, #1
 800eb54:	4413      	add	r3, r2
 800eb56:	00db      	lsls	r3, r3, #3
 800eb58:	3350      	adds	r3, #80	; 0x50
 800eb5a:	89fa      	ldrh	r2, [r7, #14]
 800eb5c:	b292      	uxth	r2, r2
 800eb5e:	4413      	add	r3, r2
 800eb60:	4a1c      	ldr	r2, [pc, #112]	; (800ebd4 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800eb62:	2119      	movs	r1, #25
 800eb64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 800eb68:	797a      	ldrb	r2, [r7, #5]
 800eb6a:	89fb      	ldrh	r3, [r7, #14]
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	f1c3 0307 	rsb	r3, r3, #7
 800eb72:	fa42 f303 	asr.w	r3, r2, r3
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00e      	beq.n	800eb9c <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 800eb7e:	887a      	ldrh	r2, [r7, #2]
 800eb80:	4613      	mov	r3, r2
 800eb82:	005b      	lsls	r3, r3, #1
 800eb84:	4413      	add	r3, r2
 800eb86:	00db      	lsls	r3, r3, #3
 800eb88:	3350      	adds	r3, #80	; 0x50
 800eb8a:	89fa      	ldrh	r2, [r7, #14]
 800eb8c:	b292      	uxth	r2, r2
 800eb8e:	4413      	add	r3, r2
 800eb90:	3310      	adds	r3, #16
 800eb92:	4a10      	ldr	r2, [pc, #64]	; (800ebd4 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800eb94:	2141      	movs	r1, #65	; 0x41
 800eb96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800eb9a:	e00d      	b.n	800ebb8 <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 800eb9c:	887a      	ldrh	r2, [r7, #2]
 800eb9e:	4613      	mov	r3, r2
 800eba0:	005b      	lsls	r3, r3, #1
 800eba2:	4413      	add	r3, r2
 800eba4:	00db      	lsls	r3, r3, #3
 800eba6:	3350      	adds	r3, #80	; 0x50
 800eba8:	89fa      	ldrh	r2, [r7, #14]
 800ebaa:	b292      	uxth	r2, r2
 800ebac:	4413      	add	r3, r2
 800ebae:	3310      	adds	r3, #16
 800ebb0:	4a08      	ldr	r2, [pc, #32]	; (800ebd4 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800ebb2:	2119      	movs	r1, #25
 800ebb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 800ebb8:	89fb      	ldrh	r3, [r7, #14]
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	81fb      	strh	r3, [r7, #14]
 800ebc2:	89fb      	ldrh	r3, [r7, #14]
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	2b07      	cmp	r3, #7
 800ebc8:	d980      	bls.n	800eacc <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bc90      	pop	{r4, r7}
 800ebd2:	4770      	bx	lr
 800ebd4:	200002f4 	.word	0x200002f4

0800ebd8 <ws2812_light>:



//------------------------------------------------------------------
void ws2812_light(void)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim3,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA,ARRAY_LEN*2);
 800ebdc:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800ebe0:	4a03      	ldr	r2, [pc, #12]	; (800ebf0 <ws2812_light+0x18>)
 800ebe2:	2104      	movs	r1, #4
 800ebe4:	4803      	ldr	r0, [pc, #12]	; (800ebf4 <ws2812_light+0x1c>)
 800ebe6:	f7f6 fe4d 	bl	8005884 <HAL_TIM_PWM_Start_DMA>
}
 800ebea:	bf00      	nop
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	200002f4 	.word	0x200002f4
 800ebf4:	20000d38 	.word	0x20000d38

0800ebf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800ebf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ec30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ebfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ebfe:	e003      	b.n	800ec08 <LoopCopyDataInit>

0800ec00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ec00:	4b0c      	ldr	r3, [pc, #48]	; (800ec34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ec02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ec04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ec06:	3104      	adds	r1, #4

0800ec08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ec08:	480b      	ldr	r0, [pc, #44]	; (800ec38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ec0a:	4b0c      	ldr	r3, [pc, #48]	; (800ec3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ec0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ec0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ec10:	d3f6      	bcc.n	800ec00 <CopyDataInit>
  ldr  r2, =_sbss
 800ec12:	4a0b      	ldr	r2, [pc, #44]	; (800ec40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ec14:	e002      	b.n	800ec1c <LoopFillZerobss>

0800ec16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ec16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ec18:	f842 3b04 	str.w	r3, [r2], #4

0800ec1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ec1c:	4b09      	ldr	r3, [pc, #36]	; (800ec44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ec1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ec20:	d3f9      	bcc.n	800ec16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ec22:	f7ff fcdf 	bl	800e5e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ec26:	f000 f817 	bl	800ec58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec2a:	f7fe f801 	bl	800cc30 <main>
  bx  lr    
 800ec2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800ec30:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800ec34:	08011c38 	.word	0x08011c38
  ldr  r0, =_sdata
 800ec38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ec3c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800ec40:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800ec44:	20005970 	.word	0x20005970

0800ec48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ec48:	e7fe      	b.n	800ec48 <ADC_IRQHandler>
	...

0800ec4c <__errno>:
 800ec4c:	4b01      	ldr	r3, [pc, #4]	; (800ec54 <__errno+0x8>)
 800ec4e:	6818      	ldr	r0, [r3, #0]
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	20000018 	.word	0x20000018

0800ec58 <__libc_init_array>:
 800ec58:	b570      	push	{r4, r5, r6, lr}
 800ec5a:	4e0d      	ldr	r6, [pc, #52]	; (800ec90 <__libc_init_array+0x38>)
 800ec5c:	4c0d      	ldr	r4, [pc, #52]	; (800ec94 <__libc_init_array+0x3c>)
 800ec5e:	1ba4      	subs	r4, r4, r6
 800ec60:	10a4      	asrs	r4, r4, #2
 800ec62:	2500      	movs	r5, #0
 800ec64:	42a5      	cmp	r5, r4
 800ec66:	d109      	bne.n	800ec7c <__libc_init_array+0x24>
 800ec68:	4e0b      	ldr	r6, [pc, #44]	; (800ec98 <__libc_init_array+0x40>)
 800ec6a:	4c0c      	ldr	r4, [pc, #48]	; (800ec9c <__libc_init_array+0x44>)
 800ec6c:	f002 f962 	bl	8010f34 <_init>
 800ec70:	1ba4      	subs	r4, r4, r6
 800ec72:	10a4      	asrs	r4, r4, #2
 800ec74:	2500      	movs	r5, #0
 800ec76:	42a5      	cmp	r5, r4
 800ec78:	d105      	bne.n	800ec86 <__libc_init_array+0x2e>
 800ec7a:	bd70      	pop	{r4, r5, r6, pc}
 800ec7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ec80:	4798      	blx	r3
 800ec82:	3501      	adds	r5, #1
 800ec84:	e7ee      	b.n	800ec64 <__libc_init_array+0xc>
 800ec86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ec8a:	4798      	blx	r3
 800ec8c:	3501      	adds	r5, #1
 800ec8e:	e7f2      	b.n	800ec76 <__libc_init_array+0x1e>
 800ec90:	08011c30 	.word	0x08011c30
 800ec94:	08011c30 	.word	0x08011c30
 800ec98:	08011c30 	.word	0x08011c30
 800ec9c:	08011c34 	.word	0x08011c34

0800eca0 <memcmp>:
 800eca0:	b530      	push	{r4, r5, lr}
 800eca2:	2400      	movs	r4, #0
 800eca4:	42a2      	cmp	r2, r4
 800eca6:	d101      	bne.n	800ecac <memcmp+0xc>
 800eca8:	2000      	movs	r0, #0
 800ecaa:	e007      	b.n	800ecbc <memcmp+0x1c>
 800ecac:	5d03      	ldrb	r3, [r0, r4]
 800ecae:	3401      	adds	r4, #1
 800ecb0:	190d      	adds	r5, r1, r4
 800ecb2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ecb6:	42ab      	cmp	r3, r5
 800ecb8:	d0f4      	beq.n	800eca4 <memcmp+0x4>
 800ecba:	1b58      	subs	r0, r3, r5
 800ecbc:	bd30      	pop	{r4, r5, pc}

0800ecbe <memcpy>:
 800ecbe:	b510      	push	{r4, lr}
 800ecc0:	1e43      	subs	r3, r0, #1
 800ecc2:	440a      	add	r2, r1
 800ecc4:	4291      	cmp	r1, r2
 800ecc6:	d100      	bne.n	800ecca <memcpy+0xc>
 800ecc8:	bd10      	pop	{r4, pc}
 800ecca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecd2:	e7f7      	b.n	800ecc4 <memcpy+0x6>

0800ecd4 <memset>:
 800ecd4:	4402      	add	r2, r0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d100      	bne.n	800ecde <memset+0xa>
 800ecdc:	4770      	bx	lr
 800ecde:	f803 1b01 	strb.w	r1, [r3], #1
 800ece2:	e7f9      	b.n	800ecd8 <memset+0x4>

0800ece4 <_free_r>:
 800ece4:	b538      	push	{r3, r4, r5, lr}
 800ece6:	4605      	mov	r5, r0
 800ece8:	2900      	cmp	r1, #0
 800ecea:	d045      	beq.n	800ed78 <_free_r+0x94>
 800ecec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecf0:	1f0c      	subs	r4, r1, #4
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	bfb8      	it	lt
 800ecf6:	18e4      	addlt	r4, r4, r3
 800ecf8:	f000 fbfa 	bl	800f4f0 <__malloc_lock>
 800ecfc:	4a1f      	ldr	r2, [pc, #124]	; (800ed7c <_free_r+0x98>)
 800ecfe:	6813      	ldr	r3, [r2, #0]
 800ed00:	4610      	mov	r0, r2
 800ed02:	b933      	cbnz	r3, 800ed12 <_free_r+0x2e>
 800ed04:	6063      	str	r3, [r4, #4]
 800ed06:	6014      	str	r4, [r2, #0]
 800ed08:	4628      	mov	r0, r5
 800ed0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed0e:	f000 bbf0 	b.w	800f4f2 <__malloc_unlock>
 800ed12:	42a3      	cmp	r3, r4
 800ed14:	d90c      	bls.n	800ed30 <_free_r+0x4c>
 800ed16:	6821      	ldr	r1, [r4, #0]
 800ed18:	1862      	adds	r2, r4, r1
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	bf04      	itt	eq
 800ed1e:	681a      	ldreq	r2, [r3, #0]
 800ed20:	685b      	ldreq	r3, [r3, #4]
 800ed22:	6063      	str	r3, [r4, #4]
 800ed24:	bf04      	itt	eq
 800ed26:	1852      	addeq	r2, r2, r1
 800ed28:	6022      	streq	r2, [r4, #0]
 800ed2a:	6004      	str	r4, [r0, #0]
 800ed2c:	e7ec      	b.n	800ed08 <_free_r+0x24>
 800ed2e:	4613      	mov	r3, r2
 800ed30:	685a      	ldr	r2, [r3, #4]
 800ed32:	b10a      	cbz	r2, 800ed38 <_free_r+0x54>
 800ed34:	42a2      	cmp	r2, r4
 800ed36:	d9fa      	bls.n	800ed2e <_free_r+0x4a>
 800ed38:	6819      	ldr	r1, [r3, #0]
 800ed3a:	1858      	adds	r0, r3, r1
 800ed3c:	42a0      	cmp	r0, r4
 800ed3e:	d10b      	bne.n	800ed58 <_free_r+0x74>
 800ed40:	6820      	ldr	r0, [r4, #0]
 800ed42:	4401      	add	r1, r0
 800ed44:	1858      	adds	r0, r3, r1
 800ed46:	4282      	cmp	r2, r0
 800ed48:	6019      	str	r1, [r3, #0]
 800ed4a:	d1dd      	bne.n	800ed08 <_free_r+0x24>
 800ed4c:	6810      	ldr	r0, [r2, #0]
 800ed4e:	6852      	ldr	r2, [r2, #4]
 800ed50:	605a      	str	r2, [r3, #4]
 800ed52:	4401      	add	r1, r0
 800ed54:	6019      	str	r1, [r3, #0]
 800ed56:	e7d7      	b.n	800ed08 <_free_r+0x24>
 800ed58:	d902      	bls.n	800ed60 <_free_r+0x7c>
 800ed5a:	230c      	movs	r3, #12
 800ed5c:	602b      	str	r3, [r5, #0]
 800ed5e:	e7d3      	b.n	800ed08 <_free_r+0x24>
 800ed60:	6820      	ldr	r0, [r4, #0]
 800ed62:	1821      	adds	r1, r4, r0
 800ed64:	428a      	cmp	r2, r1
 800ed66:	bf04      	itt	eq
 800ed68:	6811      	ldreq	r1, [r2, #0]
 800ed6a:	6852      	ldreq	r2, [r2, #4]
 800ed6c:	6062      	str	r2, [r4, #4]
 800ed6e:	bf04      	itt	eq
 800ed70:	1809      	addeq	r1, r1, r0
 800ed72:	6021      	streq	r1, [r4, #0]
 800ed74:	605c      	str	r4, [r3, #4]
 800ed76:	e7c7      	b.n	800ed08 <_free_r+0x24>
 800ed78:	bd38      	pop	{r3, r4, r5, pc}
 800ed7a:	bf00      	nop
 800ed7c:	200008b4 	.word	0x200008b4

0800ed80 <_malloc_r>:
 800ed80:	b570      	push	{r4, r5, r6, lr}
 800ed82:	1ccd      	adds	r5, r1, #3
 800ed84:	f025 0503 	bic.w	r5, r5, #3
 800ed88:	3508      	adds	r5, #8
 800ed8a:	2d0c      	cmp	r5, #12
 800ed8c:	bf38      	it	cc
 800ed8e:	250c      	movcc	r5, #12
 800ed90:	2d00      	cmp	r5, #0
 800ed92:	4606      	mov	r6, r0
 800ed94:	db01      	blt.n	800ed9a <_malloc_r+0x1a>
 800ed96:	42a9      	cmp	r1, r5
 800ed98:	d903      	bls.n	800eda2 <_malloc_r+0x22>
 800ed9a:	230c      	movs	r3, #12
 800ed9c:	6033      	str	r3, [r6, #0]
 800ed9e:	2000      	movs	r0, #0
 800eda0:	bd70      	pop	{r4, r5, r6, pc}
 800eda2:	f000 fba5 	bl	800f4f0 <__malloc_lock>
 800eda6:	4a21      	ldr	r2, [pc, #132]	; (800ee2c <_malloc_r+0xac>)
 800eda8:	6814      	ldr	r4, [r2, #0]
 800edaa:	4621      	mov	r1, r4
 800edac:	b991      	cbnz	r1, 800edd4 <_malloc_r+0x54>
 800edae:	4c20      	ldr	r4, [pc, #128]	; (800ee30 <_malloc_r+0xb0>)
 800edb0:	6823      	ldr	r3, [r4, #0]
 800edb2:	b91b      	cbnz	r3, 800edbc <_malloc_r+0x3c>
 800edb4:	4630      	mov	r0, r6
 800edb6:	f000 f8b9 	bl	800ef2c <_sbrk_r>
 800edba:	6020      	str	r0, [r4, #0]
 800edbc:	4629      	mov	r1, r5
 800edbe:	4630      	mov	r0, r6
 800edc0:	f000 f8b4 	bl	800ef2c <_sbrk_r>
 800edc4:	1c43      	adds	r3, r0, #1
 800edc6:	d124      	bne.n	800ee12 <_malloc_r+0x92>
 800edc8:	230c      	movs	r3, #12
 800edca:	6033      	str	r3, [r6, #0]
 800edcc:	4630      	mov	r0, r6
 800edce:	f000 fb90 	bl	800f4f2 <__malloc_unlock>
 800edd2:	e7e4      	b.n	800ed9e <_malloc_r+0x1e>
 800edd4:	680b      	ldr	r3, [r1, #0]
 800edd6:	1b5b      	subs	r3, r3, r5
 800edd8:	d418      	bmi.n	800ee0c <_malloc_r+0x8c>
 800edda:	2b0b      	cmp	r3, #11
 800eddc:	d90f      	bls.n	800edfe <_malloc_r+0x7e>
 800edde:	600b      	str	r3, [r1, #0]
 800ede0:	50cd      	str	r5, [r1, r3]
 800ede2:	18cc      	adds	r4, r1, r3
 800ede4:	4630      	mov	r0, r6
 800ede6:	f000 fb84 	bl	800f4f2 <__malloc_unlock>
 800edea:	f104 000b 	add.w	r0, r4, #11
 800edee:	1d23      	adds	r3, r4, #4
 800edf0:	f020 0007 	bic.w	r0, r0, #7
 800edf4:	1ac3      	subs	r3, r0, r3
 800edf6:	d0d3      	beq.n	800eda0 <_malloc_r+0x20>
 800edf8:	425a      	negs	r2, r3
 800edfa:	50e2      	str	r2, [r4, r3]
 800edfc:	e7d0      	b.n	800eda0 <_malloc_r+0x20>
 800edfe:	428c      	cmp	r4, r1
 800ee00:	684b      	ldr	r3, [r1, #4]
 800ee02:	bf16      	itet	ne
 800ee04:	6063      	strne	r3, [r4, #4]
 800ee06:	6013      	streq	r3, [r2, #0]
 800ee08:	460c      	movne	r4, r1
 800ee0a:	e7eb      	b.n	800ede4 <_malloc_r+0x64>
 800ee0c:	460c      	mov	r4, r1
 800ee0e:	6849      	ldr	r1, [r1, #4]
 800ee10:	e7cc      	b.n	800edac <_malloc_r+0x2c>
 800ee12:	1cc4      	adds	r4, r0, #3
 800ee14:	f024 0403 	bic.w	r4, r4, #3
 800ee18:	42a0      	cmp	r0, r4
 800ee1a:	d005      	beq.n	800ee28 <_malloc_r+0xa8>
 800ee1c:	1a21      	subs	r1, r4, r0
 800ee1e:	4630      	mov	r0, r6
 800ee20:	f000 f884 	bl	800ef2c <_sbrk_r>
 800ee24:	3001      	adds	r0, #1
 800ee26:	d0cf      	beq.n	800edc8 <_malloc_r+0x48>
 800ee28:	6025      	str	r5, [r4, #0]
 800ee2a:	e7db      	b.n	800ede4 <_malloc_r+0x64>
 800ee2c:	200008b4 	.word	0x200008b4
 800ee30:	200008b8 	.word	0x200008b8

0800ee34 <iprintf>:
 800ee34:	b40f      	push	{r0, r1, r2, r3}
 800ee36:	4b0a      	ldr	r3, [pc, #40]	; (800ee60 <iprintf+0x2c>)
 800ee38:	b513      	push	{r0, r1, r4, lr}
 800ee3a:	681c      	ldr	r4, [r3, #0]
 800ee3c:	b124      	cbz	r4, 800ee48 <iprintf+0x14>
 800ee3e:	69a3      	ldr	r3, [r4, #24]
 800ee40:	b913      	cbnz	r3, 800ee48 <iprintf+0x14>
 800ee42:	4620      	mov	r0, r4
 800ee44:	f000 fa66 	bl	800f314 <__sinit>
 800ee48:	ab05      	add	r3, sp, #20
 800ee4a:	9a04      	ldr	r2, [sp, #16]
 800ee4c:	68a1      	ldr	r1, [r4, #8]
 800ee4e:	9301      	str	r3, [sp, #4]
 800ee50:	4620      	mov	r0, r4
 800ee52:	f000 fccb 	bl	800f7ec <_vfiprintf_r>
 800ee56:	b002      	add	sp, #8
 800ee58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee5c:	b004      	add	sp, #16
 800ee5e:	4770      	bx	lr
 800ee60:	20000018 	.word	0x20000018

0800ee64 <_puts_r>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	460e      	mov	r6, r1
 800ee68:	4605      	mov	r5, r0
 800ee6a:	b118      	cbz	r0, 800ee74 <_puts_r+0x10>
 800ee6c:	6983      	ldr	r3, [r0, #24]
 800ee6e:	b90b      	cbnz	r3, 800ee74 <_puts_r+0x10>
 800ee70:	f000 fa50 	bl	800f314 <__sinit>
 800ee74:	69ab      	ldr	r3, [r5, #24]
 800ee76:	68ac      	ldr	r4, [r5, #8]
 800ee78:	b913      	cbnz	r3, 800ee80 <_puts_r+0x1c>
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	f000 fa4a 	bl	800f314 <__sinit>
 800ee80:	4b23      	ldr	r3, [pc, #140]	; (800ef10 <_puts_r+0xac>)
 800ee82:	429c      	cmp	r4, r3
 800ee84:	d117      	bne.n	800eeb6 <_puts_r+0x52>
 800ee86:	686c      	ldr	r4, [r5, #4]
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	071b      	lsls	r3, r3, #28
 800ee8c:	d51d      	bpl.n	800eeca <_puts_r+0x66>
 800ee8e:	6923      	ldr	r3, [r4, #16]
 800ee90:	b1db      	cbz	r3, 800eeca <_puts_r+0x66>
 800ee92:	3e01      	subs	r6, #1
 800ee94:	68a3      	ldr	r3, [r4, #8]
 800ee96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	60a3      	str	r3, [r4, #8]
 800ee9e:	b9e9      	cbnz	r1, 800eedc <_puts_r+0x78>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	da2e      	bge.n	800ef02 <_puts_r+0x9e>
 800eea4:	4622      	mov	r2, r4
 800eea6:	210a      	movs	r1, #10
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f000 f883 	bl	800efb4 <__swbuf_r>
 800eeae:	3001      	adds	r0, #1
 800eeb0:	d011      	beq.n	800eed6 <_puts_r+0x72>
 800eeb2:	200a      	movs	r0, #10
 800eeb4:	e011      	b.n	800eeda <_puts_r+0x76>
 800eeb6:	4b17      	ldr	r3, [pc, #92]	; (800ef14 <_puts_r+0xb0>)
 800eeb8:	429c      	cmp	r4, r3
 800eeba:	d101      	bne.n	800eec0 <_puts_r+0x5c>
 800eebc:	68ac      	ldr	r4, [r5, #8]
 800eebe:	e7e3      	b.n	800ee88 <_puts_r+0x24>
 800eec0:	4b15      	ldr	r3, [pc, #84]	; (800ef18 <_puts_r+0xb4>)
 800eec2:	429c      	cmp	r4, r3
 800eec4:	bf08      	it	eq
 800eec6:	68ec      	ldreq	r4, [r5, #12]
 800eec8:	e7de      	b.n	800ee88 <_puts_r+0x24>
 800eeca:	4621      	mov	r1, r4
 800eecc:	4628      	mov	r0, r5
 800eece:	f000 f8c3 	bl	800f058 <__swsetup_r>
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d0dd      	beq.n	800ee92 <_puts_r+0x2e>
 800eed6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeda:	bd70      	pop	{r4, r5, r6, pc}
 800eedc:	2b00      	cmp	r3, #0
 800eede:	da04      	bge.n	800eeea <_puts_r+0x86>
 800eee0:	69a2      	ldr	r2, [r4, #24]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	dc06      	bgt.n	800eef4 <_puts_r+0x90>
 800eee6:	290a      	cmp	r1, #10
 800eee8:	d004      	beq.n	800eef4 <_puts_r+0x90>
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	1c5a      	adds	r2, r3, #1
 800eeee:	6022      	str	r2, [r4, #0]
 800eef0:	7019      	strb	r1, [r3, #0]
 800eef2:	e7cf      	b.n	800ee94 <_puts_r+0x30>
 800eef4:	4622      	mov	r2, r4
 800eef6:	4628      	mov	r0, r5
 800eef8:	f000 f85c 	bl	800efb4 <__swbuf_r>
 800eefc:	3001      	adds	r0, #1
 800eefe:	d1c9      	bne.n	800ee94 <_puts_r+0x30>
 800ef00:	e7e9      	b.n	800eed6 <_puts_r+0x72>
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	200a      	movs	r0, #10
 800ef06:	1c5a      	adds	r2, r3, #1
 800ef08:	6022      	str	r2, [r4, #0]
 800ef0a:	7018      	strb	r0, [r3, #0]
 800ef0c:	e7e5      	b.n	800eeda <_puts_r+0x76>
 800ef0e:	bf00      	nop
 800ef10:	080119dc 	.word	0x080119dc
 800ef14:	080119fc 	.word	0x080119fc
 800ef18:	080119bc 	.word	0x080119bc

0800ef1c <puts>:
 800ef1c:	4b02      	ldr	r3, [pc, #8]	; (800ef28 <puts+0xc>)
 800ef1e:	4601      	mov	r1, r0
 800ef20:	6818      	ldr	r0, [r3, #0]
 800ef22:	f7ff bf9f 	b.w	800ee64 <_puts_r>
 800ef26:	bf00      	nop
 800ef28:	20000018 	.word	0x20000018

0800ef2c <_sbrk_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	4c06      	ldr	r4, [pc, #24]	; (800ef48 <_sbrk_r+0x1c>)
 800ef30:	2300      	movs	r3, #0
 800ef32:	4605      	mov	r5, r0
 800ef34:	4608      	mov	r0, r1
 800ef36:	6023      	str	r3, [r4, #0]
 800ef38:	f7ff fb28 	bl	800e58c <_sbrk>
 800ef3c:	1c43      	adds	r3, r0, #1
 800ef3e:	d102      	bne.n	800ef46 <_sbrk_r+0x1a>
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	b103      	cbz	r3, 800ef46 <_sbrk_r+0x1a>
 800ef44:	602b      	str	r3, [r5, #0]
 800ef46:	bd38      	pop	{r3, r4, r5, pc}
 800ef48:	2000596c 	.word	0x2000596c

0800ef4c <sniprintf>:
 800ef4c:	b40c      	push	{r2, r3}
 800ef4e:	b530      	push	{r4, r5, lr}
 800ef50:	4b17      	ldr	r3, [pc, #92]	; (800efb0 <sniprintf+0x64>)
 800ef52:	1e0c      	subs	r4, r1, #0
 800ef54:	b09d      	sub	sp, #116	; 0x74
 800ef56:	681d      	ldr	r5, [r3, #0]
 800ef58:	da08      	bge.n	800ef6c <sniprintf+0x20>
 800ef5a:	238b      	movs	r3, #139	; 0x8b
 800ef5c:	602b      	str	r3, [r5, #0]
 800ef5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef62:	b01d      	add	sp, #116	; 0x74
 800ef64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef68:	b002      	add	sp, #8
 800ef6a:	4770      	bx	lr
 800ef6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef70:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef74:	bf14      	ite	ne
 800ef76:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ef7a:	4623      	moveq	r3, r4
 800ef7c:	9304      	str	r3, [sp, #16]
 800ef7e:	9307      	str	r3, [sp, #28]
 800ef80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef84:	9002      	str	r0, [sp, #8]
 800ef86:	9006      	str	r0, [sp, #24]
 800ef88:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef8e:	ab21      	add	r3, sp, #132	; 0x84
 800ef90:	a902      	add	r1, sp, #8
 800ef92:	4628      	mov	r0, r5
 800ef94:	9301      	str	r3, [sp, #4]
 800ef96:	f000 fb07 	bl	800f5a8 <_svfiprintf_r>
 800ef9a:	1c43      	adds	r3, r0, #1
 800ef9c:	bfbc      	itt	lt
 800ef9e:	238b      	movlt	r3, #139	; 0x8b
 800efa0:	602b      	strlt	r3, [r5, #0]
 800efa2:	2c00      	cmp	r4, #0
 800efa4:	d0dd      	beq.n	800ef62 <sniprintf+0x16>
 800efa6:	9b02      	ldr	r3, [sp, #8]
 800efa8:	2200      	movs	r2, #0
 800efaa:	701a      	strb	r2, [r3, #0]
 800efac:	e7d9      	b.n	800ef62 <sniprintf+0x16>
 800efae:	bf00      	nop
 800efb0:	20000018 	.word	0x20000018

0800efb4 <__swbuf_r>:
 800efb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb6:	460e      	mov	r6, r1
 800efb8:	4614      	mov	r4, r2
 800efba:	4605      	mov	r5, r0
 800efbc:	b118      	cbz	r0, 800efc6 <__swbuf_r+0x12>
 800efbe:	6983      	ldr	r3, [r0, #24]
 800efc0:	b90b      	cbnz	r3, 800efc6 <__swbuf_r+0x12>
 800efc2:	f000 f9a7 	bl	800f314 <__sinit>
 800efc6:	4b21      	ldr	r3, [pc, #132]	; (800f04c <__swbuf_r+0x98>)
 800efc8:	429c      	cmp	r4, r3
 800efca:	d12a      	bne.n	800f022 <__swbuf_r+0x6e>
 800efcc:	686c      	ldr	r4, [r5, #4]
 800efce:	69a3      	ldr	r3, [r4, #24]
 800efd0:	60a3      	str	r3, [r4, #8]
 800efd2:	89a3      	ldrh	r3, [r4, #12]
 800efd4:	071a      	lsls	r2, r3, #28
 800efd6:	d52e      	bpl.n	800f036 <__swbuf_r+0x82>
 800efd8:	6923      	ldr	r3, [r4, #16]
 800efda:	b363      	cbz	r3, 800f036 <__swbuf_r+0x82>
 800efdc:	6923      	ldr	r3, [r4, #16]
 800efde:	6820      	ldr	r0, [r4, #0]
 800efe0:	1ac0      	subs	r0, r0, r3
 800efe2:	6963      	ldr	r3, [r4, #20]
 800efe4:	b2f6      	uxtb	r6, r6
 800efe6:	4283      	cmp	r3, r0
 800efe8:	4637      	mov	r7, r6
 800efea:	dc04      	bgt.n	800eff6 <__swbuf_r+0x42>
 800efec:	4621      	mov	r1, r4
 800efee:	4628      	mov	r0, r5
 800eff0:	f000 f926 	bl	800f240 <_fflush_r>
 800eff4:	bb28      	cbnz	r0, 800f042 <__swbuf_r+0x8e>
 800eff6:	68a3      	ldr	r3, [r4, #8]
 800eff8:	3b01      	subs	r3, #1
 800effa:	60a3      	str	r3, [r4, #8]
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	6022      	str	r2, [r4, #0]
 800f002:	701e      	strb	r6, [r3, #0]
 800f004:	6963      	ldr	r3, [r4, #20]
 800f006:	3001      	adds	r0, #1
 800f008:	4283      	cmp	r3, r0
 800f00a:	d004      	beq.n	800f016 <__swbuf_r+0x62>
 800f00c:	89a3      	ldrh	r3, [r4, #12]
 800f00e:	07db      	lsls	r3, r3, #31
 800f010:	d519      	bpl.n	800f046 <__swbuf_r+0x92>
 800f012:	2e0a      	cmp	r6, #10
 800f014:	d117      	bne.n	800f046 <__swbuf_r+0x92>
 800f016:	4621      	mov	r1, r4
 800f018:	4628      	mov	r0, r5
 800f01a:	f000 f911 	bl	800f240 <_fflush_r>
 800f01e:	b190      	cbz	r0, 800f046 <__swbuf_r+0x92>
 800f020:	e00f      	b.n	800f042 <__swbuf_r+0x8e>
 800f022:	4b0b      	ldr	r3, [pc, #44]	; (800f050 <__swbuf_r+0x9c>)
 800f024:	429c      	cmp	r4, r3
 800f026:	d101      	bne.n	800f02c <__swbuf_r+0x78>
 800f028:	68ac      	ldr	r4, [r5, #8]
 800f02a:	e7d0      	b.n	800efce <__swbuf_r+0x1a>
 800f02c:	4b09      	ldr	r3, [pc, #36]	; (800f054 <__swbuf_r+0xa0>)
 800f02e:	429c      	cmp	r4, r3
 800f030:	bf08      	it	eq
 800f032:	68ec      	ldreq	r4, [r5, #12]
 800f034:	e7cb      	b.n	800efce <__swbuf_r+0x1a>
 800f036:	4621      	mov	r1, r4
 800f038:	4628      	mov	r0, r5
 800f03a:	f000 f80d 	bl	800f058 <__swsetup_r>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d0cc      	beq.n	800efdc <__swbuf_r+0x28>
 800f042:	f04f 37ff 	mov.w	r7, #4294967295
 800f046:	4638      	mov	r0, r7
 800f048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f04a:	bf00      	nop
 800f04c:	080119dc 	.word	0x080119dc
 800f050:	080119fc 	.word	0x080119fc
 800f054:	080119bc 	.word	0x080119bc

0800f058 <__swsetup_r>:
 800f058:	4b32      	ldr	r3, [pc, #200]	; (800f124 <__swsetup_r+0xcc>)
 800f05a:	b570      	push	{r4, r5, r6, lr}
 800f05c:	681d      	ldr	r5, [r3, #0]
 800f05e:	4606      	mov	r6, r0
 800f060:	460c      	mov	r4, r1
 800f062:	b125      	cbz	r5, 800f06e <__swsetup_r+0x16>
 800f064:	69ab      	ldr	r3, [r5, #24]
 800f066:	b913      	cbnz	r3, 800f06e <__swsetup_r+0x16>
 800f068:	4628      	mov	r0, r5
 800f06a:	f000 f953 	bl	800f314 <__sinit>
 800f06e:	4b2e      	ldr	r3, [pc, #184]	; (800f128 <__swsetup_r+0xd0>)
 800f070:	429c      	cmp	r4, r3
 800f072:	d10f      	bne.n	800f094 <__swsetup_r+0x3c>
 800f074:	686c      	ldr	r4, [r5, #4]
 800f076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	0715      	lsls	r5, r2, #28
 800f07e:	d42c      	bmi.n	800f0da <__swsetup_r+0x82>
 800f080:	06d0      	lsls	r0, r2, #27
 800f082:	d411      	bmi.n	800f0a8 <__swsetup_r+0x50>
 800f084:	2209      	movs	r2, #9
 800f086:	6032      	str	r2, [r6, #0]
 800f088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f08c:	81a3      	strh	r3, [r4, #12]
 800f08e:	f04f 30ff 	mov.w	r0, #4294967295
 800f092:	e03e      	b.n	800f112 <__swsetup_r+0xba>
 800f094:	4b25      	ldr	r3, [pc, #148]	; (800f12c <__swsetup_r+0xd4>)
 800f096:	429c      	cmp	r4, r3
 800f098:	d101      	bne.n	800f09e <__swsetup_r+0x46>
 800f09a:	68ac      	ldr	r4, [r5, #8]
 800f09c:	e7eb      	b.n	800f076 <__swsetup_r+0x1e>
 800f09e:	4b24      	ldr	r3, [pc, #144]	; (800f130 <__swsetup_r+0xd8>)
 800f0a0:	429c      	cmp	r4, r3
 800f0a2:	bf08      	it	eq
 800f0a4:	68ec      	ldreq	r4, [r5, #12]
 800f0a6:	e7e6      	b.n	800f076 <__swsetup_r+0x1e>
 800f0a8:	0751      	lsls	r1, r2, #29
 800f0aa:	d512      	bpl.n	800f0d2 <__swsetup_r+0x7a>
 800f0ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0ae:	b141      	cbz	r1, 800f0c2 <__swsetup_r+0x6a>
 800f0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0b4:	4299      	cmp	r1, r3
 800f0b6:	d002      	beq.n	800f0be <__swsetup_r+0x66>
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f7ff fe13 	bl	800ece4 <_free_r>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	6363      	str	r3, [r4, #52]	; 0x34
 800f0c2:	89a3      	ldrh	r3, [r4, #12]
 800f0c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f0c8:	81a3      	strh	r3, [r4, #12]
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	6063      	str	r3, [r4, #4]
 800f0ce:	6923      	ldr	r3, [r4, #16]
 800f0d0:	6023      	str	r3, [r4, #0]
 800f0d2:	89a3      	ldrh	r3, [r4, #12]
 800f0d4:	f043 0308 	orr.w	r3, r3, #8
 800f0d8:	81a3      	strh	r3, [r4, #12]
 800f0da:	6923      	ldr	r3, [r4, #16]
 800f0dc:	b94b      	cbnz	r3, 800f0f2 <__swsetup_r+0x9a>
 800f0de:	89a3      	ldrh	r3, [r4, #12]
 800f0e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0e8:	d003      	beq.n	800f0f2 <__swsetup_r+0x9a>
 800f0ea:	4621      	mov	r1, r4
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	f000 f9bf 	bl	800f470 <__smakebuf_r>
 800f0f2:	89a2      	ldrh	r2, [r4, #12]
 800f0f4:	f012 0301 	ands.w	r3, r2, #1
 800f0f8:	d00c      	beq.n	800f114 <__swsetup_r+0xbc>
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	60a3      	str	r3, [r4, #8]
 800f0fe:	6963      	ldr	r3, [r4, #20]
 800f100:	425b      	negs	r3, r3
 800f102:	61a3      	str	r3, [r4, #24]
 800f104:	6923      	ldr	r3, [r4, #16]
 800f106:	b953      	cbnz	r3, 800f11e <__swsetup_r+0xc6>
 800f108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f10c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f110:	d1ba      	bne.n	800f088 <__swsetup_r+0x30>
 800f112:	bd70      	pop	{r4, r5, r6, pc}
 800f114:	0792      	lsls	r2, r2, #30
 800f116:	bf58      	it	pl
 800f118:	6963      	ldrpl	r3, [r4, #20]
 800f11a:	60a3      	str	r3, [r4, #8]
 800f11c:	e7f2      	b.n	800f104 <__swsetup_r+0xac>
 800f11e:	2000      	movs	r0, #0
 800f120:	e7f7      	b.n	800f112 <__swsetup_r+0xba>
 800f122:	bf00      	nop
 800f124:	20000018 	.word	0x20000018
 800f128:	080119dc 	.word	0x080119dc
 800f12c:	080119fc 	.word	0x080119fc
 800f130:	080119bc 	.word	0x080119bc

0800f134 <__sflush_r>:
 800f134:	898a      	ldrh	r2, [r1, #12]
 800f136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f13a:	4605      	mov	r5, r0
 800f13c:	0710      	lsls	r0, r2, #28
 800f13e:	460c      	mov	r4, r1
 800f140:	d458      	bmi.n	800f1f4 <__sflush_r+0xc0>
 800f142:	684b      	ldr	r3, [r1, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	dc05      	bgt.n	800f154 <__sflush_r+0x20>
 800f148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	dc02      	bgt.n	800f154 <__sflush_r+0x20>
 800f14e:	2000      	movs	r0, #0
 800f150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f156:	2e00      	cmp	r6, #0
 800f158:	d0f9      	beq.n	800f14e <__sflush_r+0x1a>
 800f15a:	2300      	movs	r3, #0
 800f15c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f160:	682f      	ldr	r7, [r5, #0]
 800f162:	6a21      	ldr	r1, [r4, #32]
 800f164:	602b      	str	r3, [r5, #0]
 800f166:	d032      	beq.n	800f1ce <__sflush_r+0x9a>
 800f168:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f16a:	89a3      	ldrh	r3, [r4, #12]
 800f16c:	075a      	lsls	r2, r3, #29
 800f16e:	d505      	bpl.n	800f17c <__sflush_r+0x48>
 800f170:	6863      	ldr	r3, [r4, #4]
 800f172:	1ac0      	subs	r0, r0, r3
 800f174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f176:	b10b      	cbz	r3, 800f17c <__sflush_r+0x48>
 800f178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f17a:	1ac0      	subs	r0, r0, r3
 800f17c:	2300      	movs	r3, #0
 800f17e:	4602      	mov	r2, r0
 800f180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f182:	6a21      	ldr	r1, [r4, #32]
 800f184:	4628      	mov	r0, r5
 800f186:	47b0      	blx	r6
 800f188:	1c43      	adds	r3, r0, #1
 800f18a:	89a3      	ldrh	r3, [r4, #12]
 800f18c:	d106      	bne.n	800f19c <__sflush_r+0x68>
 800f18e:	6829      	ldr	r1, [r5, #0]
 800f190:	291d      	cmp	r1, #29
 800f192:	d848      	bhi.n	800f226 <__sflush_r+0xf2>
 800f194:	4a29      	ldr	r2, [pc, #164]	; (800f23c <__sflush_r+0x108>)
 800f196:	40ca      	lsrs	r2, r1
 800f198:	07d6      	lsls	r6, r2, #31
 800f19a:	d544      	bpl.n	800f226 <__sflush_r+0xf2>
 800f19c:	2200      	movs	r2, #0
 800f19e:	6062      	str	r2, [r4, #4]
 800f1a0:	04d9      	lsls	r1, r3, #19
 800f1a2:	6922      	ldr	r2, [r4, #16]
 800f1a4:	6022      	str	r2, [r4, #0]
 800f1a6:	d504      	bpl.n	800f1b2 <__sflush_r+0x7e>
 800f1a8:	1c42      	adds	r2, r0, #1
 800f1aa:	d101      	bne.n	800f1b0 <__sflush_r+0x7c>
 800f1ac:	682b      	ldr	r3, [r5, #0]
 800f1ae:	b903      	cbnz	r3, 800f1b2 <__sflush_r+0x7e>
 800f1b0:	6560      	str	r0, [r4, #84]	; 0x54
 800f1b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1b4:	602f      	str	r7, [r5, #0]
 800f1b6:	2900      	cmp	r1, #0
 800f1b8:	d0c9      	beq.n	800f14e <__sflush_r+0x1a>
 800f1ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1be:	4299      	cmp	r1, r3
 800f1c0:	d002      	beq.n	800f1c8 <__sflush_r+0x94>
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f7ff fd8e 	bl	800ece4 <_free_r>
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	6360      	str	r0, [r4, #52]	; 0x34
 800f1cc:	e7c0      	b.n	800f150 <__sflush_r+0x1c>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	47b0      	blx	r6
 800f1d4:	1c41      	adds	r1, r0, #1
 800f1d6:	d1c8      	bne.n	800f16a <__sflush_r+0x36>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d0c5      	beq.n	800f16a <__sflush_r+0x36>
 800f1de:	2b1d      	cmp	r3, #29
 800f1e0:	d001      	beq.n	800f1e6 <__sflush_r+0xb2>
 800f1e2:	2b16      	cmp	r3, #22
 800f1e4:	d101      	bne.n	800f1ea <__sflush_r+0xb6>
 800f1e6:	602f      	str	r7, [r5, #0]
 800f1e8:	e7b1      	b.n	800f14e <__sflush_r+0x1a>
 800f1ea:	89a3      	ldrh	r3, [r4, #12]
 800f1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1f0:	81a3      	strh	r3, [r4, #12]
 800f1f2:	e7ad      	b.n	800f150 <__sflush_r+0x1c>
 800f1f4:	690f      	ldr	r7, [r1, #16]
 800f1f6:	2f00      	cmp	r7, #0
 800f1f8:	d0a9      	beq.n	800f14e <__sflush_r+0x1a>
 800f1fa:	0793      	lsls	r3, r2, #30
 800f1fc:	680e      	ldr	r6, [r1, #0]
 800f1fe:	bf08      	it	eq
 800f200:	694b      	ldreq	r3, [r1, #20]
 800f202:	600f      	str	r7, [r1, #0]
 800f204:	bf18      	it	ne
 800f206:	2300      	movne	r3, #0
 800f208:	eba6 0807 	sub.w	r8, r6, r7
 800f20c:	608b      	str	r3, [r1, #8]
 800f20e:	f1b8 0f00 	cmp.w	r8, #0
 800f212:	dd9c      	ble.n	800f14e <__sflush_r+0x1a>
 800f214:	4643      	mov	r3, r8
 800f216:	463a      	mov	r2, r7
 800f218:	6a21      	ldr	r1, [r4, #32]
 800f21a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f21c:	4628      	mov	r0, r5
 800f21e:	47b0      	blx	r6
 800f220:	2800      	cmp	r0, #0
 800f222:	dc06      	bgt.n	800f232 <__sflush_r+0xfe>
 800f224:	89a3      	ldrh	r3, [r4, #12]
 800f226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f22a:	81a3      	strh	r3, [r4, #12]
 800f22c:	f04f 30ff 	mov.w	r0, #4294967295
 800f230:	e78e      	b.n	800f150 <__sflush_r+0x1c>
 800f232:	4407      	add	r7, r0
 800f234:	eba8 0800 	sub.w	r8, r8, r0
 800f238:	e7e9      	b.n	800f20e <__sflush_r+0xda>
 800f23a:	bf00      	nop
 800f23c:	20400001 	.word	0x20400001

0800f240 <_fflush_r>:
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	690b      	ldr	r3, [r1, #16]
 800f244:	4605      	mov	r5, r0
 800f246:	460c      	mov	r4, r1
 800f248:	b1db      	cbz	r3, 800f282 <_fflush_r+0x42>
 800f24a:	b118      	cbz	r0, 800f254 <_fflush_r+0x14>
 800f24c:	6983      	ldr	r3, [r0, #24]
 800f24e:	b90b      	cbnz	r3, 800f254 <_fflush_r+0x14>
 800f250:	f000 f860 	bl	800f314 <__sinit>
 800f254:	4b0c      	ldr	r3, [pc, #48]	; (800f288 <_fflush_r+0x48>)
 800f256:	429c      	cmp	r4, r3
 800f258:	d109      	bne.n	800f26e <_fflush_r+0x2e>
 800f25a:	686c      	ldr	r4, [r5, #4]
 800f25c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f260:	b17b      	cbz	r3, 800f282 <_fflush_r+0x42>
 800f262:	4621      	mov	r1, r4
 800f264:	4628      	mov	r0, r5
 800f266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f26a:	f7ff bf63 	b.w	800f134 <__sflush_r>
 800f26e:	4b07      	ldr	r3, [pc, #28]	; (800f28c <_fflush_r+0x4c>)
 800f270:	429c      	cmp	r4, r3
 800f272:	d101      	bne.n	800f278 <_fflush_r+0x38>
 800f274:	68ac      	ldr	r4, [r5, #8]
 800f276:	e7f1      	b.n	800f25c <_fflush_r+0x1c>
 800f278:	4b05      	ldr	r3, [pc, #20]	; (800f290 <_fflush_r+0x50>)
 800f27a:	429c      	cmp	r4, r3
 800f27c:	bf08      	it	eq
 800f27e:	68ec      	ldreq	r4, [r5, #12]
 800f280:	e7ec      	b.n	800f25c <_fflush_r+0x1c>
 800f282:	2000      	movs	r0, #0
 800f284:	bd38      	pop	{r3, r4, r5, pc}
 800f286:	bf00      	nop
 800f288:	080119dc 	.word	0x080119dc
 800f28c:	080119fc 	.word	0x080119fc
 800f290:	080119bc 	.word	0x080119bc

0800f294 <std>:
 800f294:	2300      	movs	r3, #0
 800f296:	b510      	push	{r4, lr}
 800f298:	4604      	mov	r4, r0
 800f29a:	e9c0 3300 	strd	r3, r3, [r0]
 800f29e:	6083      	str	r3, [r0, #8]
 800f2a0:	8181      	strh	r1, [r0, #12]
 800f2a2:	6643      	str	r3, [r0, #100]	; 0x64
 800f2a4:	81c2      	strh	r2, [r0, #14]
 800f2a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2aa:	6183      	str	r3, [r0, #24]
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	2208      	movs	r2, #8
 800f2b0:	305c      	adds	r0, #92	; 0x5c
 800f2b2:	f7ff fd0f 	bl	800ecd4 <memset>
 800f2b6:	4b05      	ldr	r3, [pc, #20]	; (800f2cc <std+0x38>)
 800f2b8:	6263      	str	r3, [r4, #36]	; 0x24
 800f2ba:	4b05      	ldr	r3, [pc, #20]	; (800f2d0 <std+0x3c>)
 800f2bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2be:	4b05      	ldr	r3, [pc, #20]	; (800f2d4 <std+0x40>)
 800f2c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2c2:	4b05      	ldr	r3, [pc, #20]	; (800f2d8 <std+0x44>)
 800f2c4:	6224      	str	r4, [r4, #32]
 800f2c6:	6323      	str	r3, [r4, #48]	; 0x30
 800f2c8:	bd10      	pop	{r4, pc}
 800f2ca:	bf00      	nop
 800f2cc:	0800fd29 	.word	0x0800fd29
 800f2d0:	0800fd4b 	.word	0x0800fd4b
 800f2d4:	0800fd83 	.word	0x0800fd83
 800f2d8:	0800fda7 	.word	0x0800fda7

0800f2dc <_cleanup_r>:
 800f2dc:	4901      	ldr	r1, [pc, #4]	; (800f2e4 <_cleanup_r+0x8>)
 800f2de:	f000 b885 	b.w	800f3ec <_fwalk_reent>
 800f2e2:	bf00      	nop
 800f2e4:	0800f241 	.word	0x0800f241

0800f2e8 <__sfmoreglue>:
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	1e4a      	subs	r2, r1, #1
 800f2ec:	2568      	movs	r5, #104	; 0x68
 800f2ee:	4355      	muls	r5, r2
 800f2f0:	460e      	mov	r6, r1
 800f2f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f2f6:	f7ff fd43 	bl	800ed80 <_malloc_r>
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	b140      	cbz	r0, 800f310 <__sfmoreglue+0x28>
 800f2fe:	2100      	movs	r1, #0
 800f300:	e9c0 1600 	strd	r1, r6, [r0]
 800f304:	300c      	adds	r0, #12
 800f306:	60a0      	str	r0, [r4, #8]
 800f308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f30c:	f7ff fce2 	bl	800ecd4 <memset>
 800f310:	4620      	mov	r0, r4
 800f312:	bd70      	pop	{r4, r5, r6, pc}

0800f314 <__sinit>:
 800f314:	6983      	ldr	r3, [r0, #24]
 800f316:	b510      	push	{r4, lr}
 800f318:	4604      	mov	r4, r0
 800f31a:	bb33      	cbnz	r3, 800f36a <__sinit+0x56>
 800f31c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f320:	6503      	str	r3, [r0, #80]	; 0x50
 800f322:	4b12      	ldr	r3, [pc, #72]	; (800f36c <__sinit+0x58>)
 800f324:	4a12      	ldr	r2, [pc, #72]	; (800f370 <__sinit+0x5c>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	6282      	str	r2, [r0, #40]	; 0x28
 800f32a:	4298      	cmp	r0, r3
 800f32c:	bf04      	itt	eq
 800f32e:	2301      	moveq	r3, #1
 800f330:	6183      	streq	r3, [r0, #24]
 800f332:	f000 f81f 	bl	800f374 <__sfp>
 800f336:	6060      	str	r0, [r4, #4]
 800f338:	4620      	mov	r0, r4
 800f33a:	f000 f81b 	bl	800f374 <__sfp>
 800f33e:	60a0      	str	r0, [r4, #8]
 800f340:	4620      	mov	r0, r4
 800f342:	f000 f817 	bl	800f374 <__sfp>
 800f346:	2200      	movs	r2, #0
 800f348:	60e0      	str	r0, [r4, #12]
 800f34a:	2104      	movs	r1, #4
 800f34c:	6860      	ldr	r0, [r4, #4]
 800f34e:	f7ff ffa1 	bl	800f294 <std>
 800f352:	2201      	movs	r2, #1
 800f354:	2109      	movs	r1, #9
 800f356:	68a0      	ldr	r0, [r4, #8]
 800f358:	f7ff ff9c 	bl	800f294 <std>
 800f35c:	2202      	movs	r2, #2
 800f35e:	2112      	movs	r1, #18
 800f360:	68e0      	ldr	r0, [r4, #12]
 800f362:	f7ff ff97 	bl	800f294 <std>
 800f366:	2301      	movs	r3, #1
 800f368:	61a3      	str	r3, [r4, #24]
 800f36a:	bd10      	pop	{r4, pc}
 800f36c:	080119b8 	.word	0x080119b8
 800f370:	0800f2dd 	.word	0x0800f2dd

0800f374 <__sfp>:
 800f374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f376:	4b1b      	ldr	r3, [pc, #108]	; (800f3e4 <__sfp+0x70>)
 800f378:	681e      	ldr	r6, [r3, #0]
 800f37a:	69b3      	ldr	r3, [r6, #24]
 800f37c:	4607      	mov	r7, r0
 800f37e:	b913      	cbnz	r3, 800f386 <__sfp+0x12>
 800f380:	4630      	mov	r0, r6
 800f382:	f7ff ffc7 	bl	800f314 <__sinit>
 800f386:	3648      	adds	r6, #72	; 0x48
 800f388:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f38c:	3b01      	subs	r3, #1
 800f38e:	d503      	bpl.n	800f398 <__sfp+0x24>
 800f390:	6833      	ldr	r3, [r6, #0]
 800f392:	b133      	cbz	r3, 800f3a2 <__sfp+0x2e>
 800f394:	6836      	ldr	r6, [r6, #0]
 800f396:	e7f7      	b.n	800f388 <__sfp+0x14>
 800f398:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f39c:	b16d      	cbz	r5, 800f3ba <__sfp+0x46>
 800f39e:	3468      	adds	r4, #104	; 0x68
 800f3a0:	e7f4      	b.n	800f38c <__sfp+0x18>
 800f3a2:	2104      	movs	r1, #4
 800f3a4:	4638      	mov	r0, r7
 800f3a6:	f7ff ff9f 	bl	800f2e8 <__sfmoreglue>
 800f3aa:	6030      	str	r0, [r6, #0]
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d1f1      	bne.n	800f394 <__sfp+0x20>
 800f3b0:	230c      	movs	r3, #12
 800f3b2:	603b      	str	r3, [r7, #0]
 800f3b4:	4604      	mov	r4, r0
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3ba:	4b0b      	ldr	r3, [pc, #44]	; (800f3e8 <__sfp+0x74>)
 800f3bc:	6665      	str	r5, [r4, #100]	; 0x64
 800f3be:	e9c4 5500 	strd	r5, r5, [r4]
 800f3c2:	60a5      	str	r5, [r4, #8]
 800f3c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f3c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f3cc:	2208      	movs	r2, #8
 800f3ce:	4629      	mov	r1, r5
 800f3d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f3d4:	f7ff fc7e 	bl	800ecd4 <memset>
 800f3d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f3dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f3e0:	e7e9      	b.n	800f3b6 <__sfp+0x42>
 800f3e2:	bf00      	nop
 800f3e4:	080119b8 	.word	0x080119b8
 800f3e8:	ffff0001 	.word	0xffff0001

0800f3ec <_fwalk_reent>:
 800f3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3f0:	4680      	mov	r8, r0
 800f3f2:	4689      	mov	r9, r1
 800f3f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f3f8:	2600      	movs	r6, #0
 800f3fa:	b914      	cbnz	r4, 800f402 <_fwalk_reent+0x16>
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f402:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f406:	3f01      	subs	r7, #1
 800f408:	d501      	bpl.n	800f40e <_fwalk_reent+0x22>
 800f40a:	6824      	ldr	r4, [r4, #0]
 800f40c:	e7f5      	b.n	800f3fa <_fwalk_reent+0xe>
 800f40e:	89ab      	ldrh	r3, [r5, #12]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d907      	bls.n	800f424 <_fwalk_reent+0x38>
 800f414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f418:	3301      	adds	r3, #1
 800f41a:	d003      	beq.n	800f424 <_fwalk_reent+0x38>
 800f41c:	4629      	mov	r1, r5
 800f41e:	4640      	mov	r0, r8
 800f420:	47c8      	blx	r9
 800f422:	4306      	orrs	r6, r0
 800f424:	3568      	adds	r5, #104	; 0x68
 800f426:	e7ee      	b.n	800f406 <_fwalk_reent+0x1a>

0800f428 <__swhatbuf_r>:
 800f428:	b570      	push	{r4, r5, r6, lr}
 800f42a:	460e      	mov	r6, r1
 800f42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f430:	2900      	cmp	r1, #0
 800f432:	b096      	sub	sp, #88	; 0x58
 800f434:	4614      	mov	r4, r2
 800f436:	461d      	mov	r5, r3
 800f438:	da07      	bge.n	800f44a <__swhatbuf_r+0x22>
 800f43a:	2300      	movs	r3, #0
 800f43c:	602b      	str	r3, [r5, #0]
 800f43e:	89b3      	ldrh	r3, [r6, #12]
 800f440:	061a      	lsls	r2, r3, #24
 800f442:	d410      	bmi.n	800f466 <__swhatbuf_r+0x3e>
 800f444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f448:	e00e      	b.n	800f468 <__swhatbuf_r+0x40>
 800f44a:	466a      	mov	r2, sp
 800f44c:	f000 fcd2 	bl	800fdf4 <_fstat_r>
 800f450:	2800      	cmp	r0, #0
 800f452:	dbf2      	blt.n	800f43a <__swhatbuf_r+0x12>
 800f454:	9a01      	ldr	r2, [sp, #4]
 800f456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f45a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f45e:	425a      	negs	r2, r3
 800f460:	415a      	adcs	r2, r3
 800f462:	602a      	str	r2, [r5, #0]
 800f464:	e7ee      	b.n	800f444 <__swhatbuf_r+0x1c>
 800f466:	2340      	movs	r3, #64	; 0x40
 800f468:	2000      	movs	r0, #0
 800f46a:	6023      	str	r3, [r4, #0]
 800f46c:	b016      	add	sp, #88	; 0x58
 800f46e:	bd70      	pop	{r4, r5, r6, pc}

0800f470 <__smakebuf_r>:
 800f470:	898b      	ldrh	r3, [r1, #12]
 800f472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f474:	079d      	lsls	r5, r3, #30
 800f476:	4606      	mov	r6, r0
 800f478:	460c      	mov	r4, r1
 800f47a:	d507      	bpl.n	800f48c <__smakebuf_r+0x1c>
 800f47c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f480:	6023      	str	r3, [r4, #0]
 800f482:	6123      	str	r3, [r4, #16]
 800f484:	2301      	movs	r3, #1
 800f486:	6163      	str	r3, [r4, #20]
 800f488:	b002      	add	sp, #8
 800f48a:	bd70      	pop	{r4, r5, r6, pc}
 800f48c:	ab01      	add	r3, sp, #4
 800f48e:	466a      	mov	r2, sp
 800f490:	f7ff ffca 	bl	800f428 <__swhatbuf_r>
 800f494:	9900      	ldr	r1, [sp, #0]
 800f496:	4605      	mov	r5, r0
 800f498:	4630      	mov	r0, r6
 800f49a:	f7ff fc71 	bl	800ed80 <_malloc_r>
 800f49e:	b948      	cbnz	r0, 800f4b4 <__smakebuf_r+0x44>
 800f4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4a4:	059a      	lsls	r2, r3, #22
 800f4a6:	d4ef      	bmi.n	800f488 <__smakebuf_r+0x18>
 800f4a8:	f023 0303 	bic.w	r3, r3, #3
 800f4ac:	f043 0302 	orr.w	r3, r3, #2
 800f4b0:	81a3      	strh	r3, [r4, #12]
 800f4b2:	e7e3      	b.n	800f47c <__smakebuf_r+0xc>
 800f4b4:	4b0d      	ldr	r3, [pc, #52]	; (800f4ec <__smakebuf_r+0x7c>)
 800f4b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f4b8:	89a3      	ldrh	r3, [r4, #12]
 800f4ba:	6020      	str	r0, [r4, #0]
 800f4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4c0:	81a3      	strh	r3, [r4, #12]
 800f4c2:	9b00      	ldr	r3, [sp, #0]
 800f4c4:	6163      	str	r3, [r4, #20]
 800f4c6:	9b01      	ldr	r3, [sp, #4]
 800f4c8:	6120      	str	r0, [r4, #16]
 800f4ca:	b15b      	cbz	r3, 800f4e4 <__smakebuf_r+0x74>
 800f4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	f000 fca1 	bl	800fe18 <_isatty_r>
 800f4d6:	b128      	cbz	r0, 800f4e4 <__smakebuf_r+0x74>
 800f4d8:	89a3      	ldrh	r3, [r4, #12]
 800f4da:	f023 0303 	bic.w	r3, r3, #3
 800f4de:	f043 0301 	orr.w	r3, r3, #1
 800f4e2:	81a3      	strh	r3, [r4, #12]
 800f4e4:	89a3      	ldrh	r3, [r4, #12]
 800f4e6:	431d      	orrs	r5, r3
 800f4e8:	81a5      	strh	r5, [r4, #12]
 800f4ea:	e7cd      	b.n	800f488 <__smakebuf_r+0x18>
 800f4ec:	0800f2dd 	.word	0x0800f2dd

0800f4f0 <__malloc_lock>:
 800f4f0:	4770      	bx	lr

0800f4f2 <__malloc_unlock>:
 800f4f2:	4770      	bx	lr

0800f4f4 <__ssputs_r>:
 800f4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f8:	688e      	ldr	r6, [r1, #8]
 800f4fa:	429e      	cmp	r6, r3
 800f4fc:	4682      	mov	sl, r0
 800f4fe:	460c      	mov	r4, r1
 800f500:	4690      	mov	r8, r2
 800f502:	4699      	mov	r9, r3
 800f504:	d837      	bhi.n	800f576 <__ssputs_r+0x82>
 800f506:	898a      	ldrh	r2, [r1, #12]
 800f508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f50c:	d031      	beq.n	800f572 <__ssputs_r+0x7e>
 800f50e:	6825      	ldr	r5, [r4, #0]
 800f510:	6909      	ldr	r1, [r1, #16]
 800f512:	1a6f      	subs	r7, r5, r1
 800f514:	6965      	ldr	r5, [r4, #20]
 800f516:	2302      	movs	r3, #2
 800f518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f51c:	fb95 f5f3 	sdiv	r5, r5, r3
 800f520:	f109 0301 	add.w	r3, r9, #1
 800f524:	443b      	add	r3, r7
 800f526:	429d      	cmp	r5, r3
 800f528:	bf38      	it	cc
 800f52a:	461d      	movcc	r5, r3
 800f52c:	0553      	lsls	r3, r2, #21
 800f52e:	d530      	bpl.n	800f592 <__ssputs_r+0x9e>
 800f530:	4629      	mov	r1, r5
 800f532:	f7ff fc25 	bl	800ed80 <_malloc_r>
 800f536:	4606      	mov	r6, r0
 800f538:	b950      	cbnz	r0, 800f550 <__ssputs_r+0x5c>
 800f53a:	230c      	movs	r3, #12
 800f53c:	f8ca 3000 	str.w	r3, [sl]
 800f540:	89a3      	ldrh	r3, [r4, #12]
 800f542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f546:	81a3      	strh	r3, [r4, #12]
 800f548:	f04f 30ff 	mov.w	r0, #4294967295
 800f54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f550:	463a      	mov	r2, r7
 800f552:	6921      	ldr	r1, [r4, #16]
 800f554:	f7ff fbb3 	bl	800ecbe <memcpy>
 800f558:	89a3      	ldrh	r3, [r4, #12]
 800f55a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f562:	81a3      	strh	r3, [r4, #12]
 800f564:	6126      	str	r6, [r4, #16]
 800f566:	6165      	str	r5, [r4, #20]
 800f568:	443e      	add	r6, r7
 800f56a:	1bed      	subs	r5, r5, r7
 800f56c:	6026      	str	r6, [r4, #0]
 800f56e:	60a5      	str	r5, [r4, #8]
 800f570:	464e      	mov	r6, r9
 800f572:	454e      	cmp	r6, r9
 800f574:	d900      	bls.n	800f578 <__ssputs_r+0x84>
 800f576:	464e      	mov	r6, r9
 800f578:	4632      	mov	r2, r6
 800f57a:	4641      	mov	r1, r8
 800f57c:	6820      	ldr	r0, [r4, #0]
 800f57e:	f000 fc6d 	bl	800fe5c <memmove>
 800f582:	68a3      	ldr	r3, [r4, #8]
 800f584:	1b9b      	subs	r3, r3, r6
 800f586:	60a3      	str	r3, [r4, #8]
 800f588:	6823      	ldr	r3, [r4, #0]
 800f58a:	441e      	add	r6, r3
 800f58c:	6026      	str	r6, [r4, #0]
 800f58e:	2000      	movs	r0, #0
 800f590:	e7dc      	b.n	800f54c <__ssputs_r+0x58>
 800f592:	462a      	mov	r2, r5
 800f594:	f000 fc7b 	bl	800fe8e <_realloc_r>
 800f598:	4606      	mov	r6, r0
 800f59a:	2800      	cmp	r0, #0
 800f59c:	d1e2      	bne.n	800f564 <__ssputs_r+0x70>
 800f59e:	6921      	ldr	r1, [r4, #16]
 800f5a0:	4650      	mov	r0, sl
 800f5a2:	f7ff fb9f 	bl	800ece4 <_free_r>
 800f5a6:	e7c8      	b.n	800f53a <__ssputs_r+0x46>

0800f5a8 <_svfiprintf_r>:
 800f5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ac:	461d      	mov	r5, r3
 800f5ae:	898b      	ldrh	r3, [r1, #12]
 800f5b0:	061f      	lsls	r7, r3, #24
 800f5b2:	b09d      	sub	sp, #116	; 0x74
 800f5b4:	4680      	mov	r8, r0
 800f5b6:	460c      	mov	r4, r1
 800f5b8:	4616      	mov	r6, r2
 800f5ba:	d50f      	bpl.n	800f5dc <_svfiprintf_r+0x34>
 800f5bc:	690b      	ldr	r3, [r1, #16]
 800f5be:	b96b      	cbnz	r3, 800f5dc <_svfiprintf_r+0x34>
 800f5c0:	2140      	movs	r1, #64	; 0x40
 800f5c2:	f7ff fbdd 	bl	800ed80 <_malloc_r>
 800f5c6:	6020      	str	r0, [r4, #0]
 800f5c8:	6120      	str	r0, [r4, #16]
 800f5ca:	b928      	cbnz	r0, 800f5d8 <_svfiprintf_r+0x30>
 800f5cc:	230c      	movs	r3, #12
 800f5ce:	f8c8 3000 	str.w	r3, [r8]
 800f5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d6:	e0c8      	b.n	800f76a <_svfiprintf_r+0x1c2>
 800f5d8:	2340      	movs	r3, #64	; 0x40
 800f5da:	6163      	str	r3, [r4, #20]
 800f5dc:	2300      	movs	r3, #0
 800f5de:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e0:	2320      	movs	r3, #32
 800f5e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5e6:	2330      	movs	r3, #48	; 0x30
 800f5e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5ec:	9503      	str	r5, [sp, #12]
 800f5ee:	f04f 0b01 	mov.w	fp, #1
 800f5f2:	4637      	mov	r7, r6
 800f5f4:	463d      	mov	r5, r7
 800f5f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f5fa:	b10b      	cbz	r3, 800f600 <_svfiprintf_r+0x58>
 800f5fc:	2b25      	cmp	r3, #37	; 0x25
 800f5fe:	d13e      	bne.n	800f67e <_svfiprintf_r+0xd6>
 800f600:	ebb7 0a06 	subs.w	sl, r7, r6
 800f604:	d00b      	beq.n	800f61e <_svfiprintf_r+0x76>
 800f606:	4653      	mov	r3, sl
 800f608:	4632      	mov	r2, r6
 800f60a:	4621      	mov	r1, r4
 800f60c:	4640      	mov	r0, r8
 800f60e:	f7ff ff71 	bl	800f4f4 <__ssputs_r>
 800f612:	3001      	adds	r0, #1
 800f614:	f000 80a4 	beq.w	800f760 <_svfiprintf_r+0x1b8>
 800f618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f61a:	4453      	add	r3, sl
 800f61c:	9309      	str	r3, [sp, #36]	; 0x24
 800f61e:	783b      	ldrb	r3, [r7, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 809d 	beq.w	800f760 <_svfiprintf_r+0x1b8>
 800f626:	2300      	movs	r3, #0
 800f628:	f04f 32ff 	mov.w	r2, #4294967295
 800f62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f630:	9304      	str	r3, [sp, #16]
 800f632:	9307      	str	r3, [sp, #28]
 800f634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f638:	931a      	str	r3, [sp, #104]	; 0x68
 800f63a:	462f      	mov	r7, r5
 800f63c:	2205      	movs	r2, #5
 800f63e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f642:	4850      	ldr	r0, [pc, #320]	; (800f784 <_svfiprintf_r+0x1dc>)
 800f644:	f7f0 fdd4 	bl	80001f0 <memchr>
 800f648:	9b04      	ldr	r3, [sp, #16]
 800f64a:	b9d0      	cbnz	r0, 800f682 <_svfiprintf_r+0xda>
 800f64c:	06d9      	lsls	r1, r3, #27
 800f64e:	bf44      	itt	mi
 800f650:	2220      	movmi	r2, #32
 800f652:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f656:	071a      	lsls	r2, r3, #28
 800f658:	bf44      	itt	mi
 800f65a:	222b      	movmi	r2, #43	; 0x2b
 800f65c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f660:	782a      	ldrb	r2, [r5, #0]
 800f662:	2a2a      	cmp	r2, #42	; 0x2a
 800f664:	d015      	beq.n	800f692 <_svfiprintf_r+0xea>
 800f666:	9a07      	ldr	r2, [sp, #28]
 800f668:	462f      	mov	r7, r5
 800f66a:	2000      	movs	r0, #0
 800f66c:	250a      	movs	r5, #10
 800f66e:	4639      	mov	r1, r7
 800f670:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f674:	3b30      	subs	r3, #48	; 0x30
 800f676:	2b09      	cmp	r3, #9
 800f678:	d94d      	bls.n	800f716 <_svfiprintf_r+0x16e>
 800f67a:	b1b8      	cbz	r0, 800f6ac <_svfiprintf_r+0x104>
 800f67c:	e00f      	b.n	800f69e <_svfiprintf_r+0xf6>
 800f67e:	462f      	mov	r7, r5
 800f680:	e7b8      	b.n	800f5f4 <_svfiprintf_r+0x4c>
 800f682:	4a40      	ldr	r2, [pc, #256]	; (800f784 <_svfiprintf_r+0x1dc>)
 800f684:	1a80      	subs	r0, r0, r2
 800f686:	fa0b f000 	lsl.w	r0, fp, r0
 800f68a:	4318      	orrs	r0, r3
 800f68c:	9004      	str	r0, [sp, #16]
 800f68e:	463d      	mov	r5, r7
 800f690:	e7d3      	b.n	800f63a <_svfiprintf_r+0x92>
 800f692:	9a03      	ldr	r2, [sp, #12]
 800f694:	1d11      	adds	r1, r2, #4
 800f696:	6812      	ldr	r2, [r2, #0]
 800f698:	9103      	str	r1, [sp, #12]
 800f69a:	2a00      	cmp	r2, #0
 800f69c:	db01      	blt.n	800f6a2 <_svfiprintf_r+0xfa>
 800f69e:	9207      	str	r2, [sp, #28]
 800f6a0:	e004      	b.n	800f6ac <_svfiprintf_r+0x104>
 800f6a2:	4252      	negs	r2, r2
 800f6a4:	f043 0302 	orr.w	r3, r3, #2
 800f6a8:	9207      	str	r2, [sp, #28]
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	783b      	ldrb	r3, [r7, #0]
 800f6ae:	2b2e      	cmp	r3, #46	; 0x2e
 800f6b0:	d10c      	bne.n	800f6cc <_svfiprintf_r+0x124>
 800f6b2:	787b      	ldrb	r3, [r7, #1]
 800f6b4:	2b2a      	cmp	r3, #42	; 0x2a
 800f6b6:	d133      	bne.n	800f720 <_svfiprintf_r+0x178>
 800f6b8:	9b03      	ldr	r3, [sp, #12]
 800f6ba:	1d1a      	adds	r2, r3, #4
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	9203      	str	r2, [sp, #12]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	bfb8      	it	lt
 800f6c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6c8:	3702      	adds	r7, #2
 800f6ca:	9305      	str	r3, [sp, #20]
 800f6cc:	4d2e      	ldr	r5, [pc, #184]	; (800f788 <_svfiprintf_r+0x1e0>)
 800f6ce:	7839      	ldrb	r1, [r7, #0]
 800f6d0:	2203      	movs	r2, #3
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	f7f0 fd8c 	bl	80001f0 <memchr>
 800f6d8:	b138      	cbz	r0, 800f6ea <_svfiprintf_r+0x142>
 800f6da:	2340      	movs	r3, #64	; 0x40
 800f6dc:	1b40      	subs	r0, r0, r5
 800f6de:	fa03 f000 	lsl.w	r0, r3, r0
 800f6e2:	9b04      	ldr	r3, [sp, #16]
 800f6e4:	4303      	orrs	r3, r0
 800f6e6:	3701      	adds	r7, #1
 800f6e8:	9304      	str	r3, [sp, #16]
 800f6ea:	7839      	ldrb	r1, [r7, #0]
 800f6ec:	4827      	ldr	r0, [pc, #156]	; (800f78c <_svfiprintf_r+0x1e4>)
 800f6ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6f2:	2206      	movs	r2, #6
 800f6f4:	1c7e      	adds	r6, r7, #1
 800f6f6:	f7f0 fd7b 	bl	80001f0 <memchr>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	d038      	beq.n	800f770 <_svfiprintf_r+0x1c8>
 800f6fe:	4b24      	ldr	r3, [pc, #144]	; (800f790 <_svfiprintf_r+0x1e8>)
 800f700:	bb13      	cbnz	r3, 800f748 <_svfiprintf_r+0x1a0>
 800f702:	9b03      	ldr	r3, [sp, #12]
 800f704:	3307      	adds	r3, #7
 800f706:	f023 0307 	bic.w	r3, r3, #7
 800f70a:	3308      	adds	r3, #8
 800f70c:	9303      	str	r3, [sp, #12]
 800f70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f710:	444b      	add	r3, r9
 800f712:	9309      	str	r3, [sp, #36]	; 0x24
 800f714:	e76d      	b.n	800f5f2 <_svfiprintf_r+0x4a>
 800f716:	fb05 3202 	mla	r2, r5, r2, r3
 800f71a:	2001      	movs	r0, #1
 800f71c:	460f      	mov	r7, r1
 800f71e:	e7a6      	b.n	800f66e <_svfiprintf_r+0xc6>
 800f720:	2300      	movs	r3, #0
 800f722:	3701      	adds	r7, #1
 800f724:	9305      	str	r3, [sp, #20]
 800f726:	4619      	mov	r1, r3
 800f728:	250a      	movs	r5, #10
 800f72a:	4638      	mov	r0, r7
 800f72c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f730:	3a30      	subs	r2, #48	; 0x30
 800f732:	2a09      	cmp	r2, #9
 800f734:	d903      	bls.n	800f73e <_svfiprintf_r+0x196>
 800f736:	2b00      	cmp	r3, #0
 800f738:	d0c8      	beq.n	800f6cc <_svfiprintf_r+0x124>
 800f73a:	9105      	str	r1, [sp, #20]
 800f73c:	e7c6      	b.n	800f6cc <_svfiprintf_r+0x124>
 800f73e:	fb05 2101 	mla	r1, r5, r1, r2
 800f742:	2301      	movs	r3, #1
 800f744:	4607      	mov	r7, r0
 800f746:	e7f0      	b.n	800f72a <_svfiprintf_r+0x182>
 800f748:	ab03      	add	r3, sp, #12
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	4622      	mov	r2, r4
 800f74e:	4b11      	ldr	r3, [pc, #68]	; (800f794 <_svfiprintf_r+0x1ec>)
 800f750:	a904      	add	r1, sp, #16
 800f752:	4640      	mov	r0, r8
 800f754:	f3af 8000 	nop.w
 800f758:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f75c:	4681      	mov	r9, r0
 800f75e:	d1d6      	bne.n	800f70e <_svfiprintf_r+0x166>
 800f760:	89a3      	ldrh	r3, [r4, #12]
 800f762:	065b      	lsls	r3, r3, #25
 800f764:	f53f af35 	bmi.w	800f5d2 <_svfiprintf_r+0x2a>
 800f768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f76a:	b01d      	add	sp, #116	; 0x74
 800f76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f770:	ab03      	add	r3, sp, #12
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	4622      	mov	r2, r4
 800f776:	4b07      	ldr	r3, [pc, #28]	; (800f794 <_svfiprintf_r+0x1ec>)
 800f778:	a904      	add	r1, sp, #16
 800f77a:	4640      	mov	r0, r8
 800f77c:	f000 f9c2 	bl	800fb04 <_printf_i>
 800f780:	e7ea      	b.n	800f758 <_svfiprintf_r+0x1b0>
 800f782:	bf00      	nop
 800f784:	08011a1c 	.word	0x08011a1c
 800f788:	08011a22 	.word	0x08011a22
 800f78c:	08011a26 	.word	0x08011a26
 800f790:	00000000 	.word	0x00000000
 800f794:	0800f4f5 	.word	0x0800f4f5

0800f798 <__sfputc_r>:
 800f798:	6893      	ldr	r3, [r2, #8]
 800f79a:	3b01      	subs	r3, #1
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	b410      	push	{r4}
 800f7a0:	6093      	str	r3, [r2, #8]
 800f7a2:	da08      	bge.n	800f7b6 <__sfputc_r+0x1e>
 800f7a4:	6994      	ldr	r4, [r2, #24]
 800f7a6:	42a3      	cmp	r3, r4
 800f7a8:	db01      	blt.n	800f7ae <__sfputc_r+0x16>
 800f7aa:	290a      	cmp	r1, #10
 800f7ac:	d103      	bne.n	800f7b6 <__sfputc_r+0x1e>
 800f7ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7b2:	f7ff bbff 	b.w	800efb4 <__swbuf_r>
 800f7b6:	6813      	ldr	r3, [r2, #0]
 800f7b8:	1c58      	adds	r0, r3, #1
 800f7ba:	6010      	str	r0, [r2, #0]
 800f7bc:	7019      	strb	r1, [r3, #0]
 800f7be:	4608      	mov	r0, r1
 800f7c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7c4:	4770      	bx	lr

0800f7c6 <__sfputs_r>:
 800f7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	460f      	mov	r7, r1
 800f7cc:	4614      	mov	r4, r2
 800f7ce:	18d5      	adds	r5, r2, r3
 800f7d0:	42ac      	cmp	r4, r5
 800f7d2:	d101      	bne.n	800f7d8 <__sfputs_r+0x12>
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	e007      	b.n	800f7e8 <__sfputs_r+0x22>
 800f7d8:	463a      	mov	r2, r7
 800f7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7de:	4630      	mov	r0, r6
 800f7e0:	f7ff ffda 	bl	800f798 <__sfputc_r>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d1f3      	bne.n	800f7d0 <__sfputs_r+0xa>
 800f7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7ec <_vfiprintf_r>:
 800f7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f0:	460c      	mov	r4, r1
 800f7f2:	b09d      	sub	sp, #116	; 0x74
 800f7f4:	4617      	mov	r7, r2
 800f7f6:	461d      	mov	r5, r3
 800f7f8:	4606      	mov	r6, r0
 800f7fa:	b118      	cbz	r0, 800f804 <_vfiprintf_r+0x18>
 800f7fc:	6983      	ldr	r3, [r0, #24]
 800f7fe:	b90b      	cbnz	r3, 800f804 <_vfiprintf_r+0x18>
 800f800:	f7ff fd88 	bl	800f314 <__sinit>
 800f804:	4b7c      	ldr	r3, [pc, #496]	; (800f9f8 <_vfiprintf_r+0x20c>)
 800f806:	429c      	cmp	r4, r3
 800f808:	d158      	bne.n	800f8bc <_vfiprintf_r+0xd0>
 800f80a:	6874      	ldr	r4, [r6, #4]
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	0718      	lsls	r0, r3, #28
 800f810:	d55e      	bpl.n	800f8d0 <_vfiprintf_r+0xe4>
 800f812:	6923      	ldr	r3, [r4, #16]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d05b      	beq.n	800f8d0 <_vfiprintf_r+0xe4>
 800f818:	2300      	movs	r3, #0
 800f81a:	9309      	str	r3, [sp, #36]	; 0x24
 800f81c:	2320      	movs	r3, #32
 800f81e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f822:	2330      	movs	r3, #48	; 0x30
 800f824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f828:	9503      	str	r5, [sp, #12]
 800f82a:	f04f 0b01 	mov.w	fp, #1
 800f82e:	46b8      	mov	r8, r7
 800f830:	4645      	mov	r5, r8
 800f832:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f836:	b10b      	cbz	r3, 800f83c <_vfiprintf_r+0x50>
 800f838:	2b25      	cmp	r3, #37	; 0x25
 800f83a:	d154      	bne.n	800f8e6 <_vfiprintf_r+0xfa>
 800f83c:	ebb8 0a07 	subs.w	sl, r8, r7
 800f840:	d00b      	beq.n	800f85a <_vfiprintf_r+0x6e>
 800f842:	4653      	mov	r3, sl
 800f844:	463a      	mov	r2, r7
 800f846:	4621      	mov	r1, r4
 800f848:	4630      	mov	r0, r6
 800f84a:	f7ff ffbc 	bl	800f7c6 <__sfputs_r>
 800f84e:	3001      	adds	r0, #1
 800f850:	f000 80c2 	beq.w	800f9d8 <_vfiprintf_r+0x1ec>
 800f854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f856:	4453      	add	r3, sl
 800f858:	9309      	str	r3, [sp, #36]	; 0x24
 800f85a:	f898 3000 	ldrb.w	r3, [r8]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	f000 80ba 	beq.w	800f9d8 <_vfiprintf_r+0x1ec>
 800f864:	2300      	movs	r3, #0
 800f866:	f04f 32ff 	mov.w	r2, #4294967295
 800f86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f86e:	9304      	str	r3, [sp, #16]
 800f870:	9307      	str	r3, [sp, #28]
 800f872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f876:	931a      	str	r3, [sp, #104]	; 0x68
 800f878:	46a8      	mov	r8, r5
 800f87a:	2205      	movs	r2, #5
 800f87c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f880:	485e      	ldr	r0, [pc, #376]	; (800f9fc <_vfiprintf_r+0x210>)
 800f882:	f7f0 fcb5 	bl	80001f0 <memchr>
 800f886:	9b04      	ldr	r3, [sp, #16]
 800f888:	bb78      	cbnz	r0, 800f8ea <_vfiprintf_r+0xfe>
 800f88a:	06d9      	lsls	r1, r3, #27
 800f88c:	bf44      	itt	mi
 800f88e:	2220      	movmi	r2, #32
 800f890:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f894:	071a      	lsls	r2, r3, #28
 800f896:	bf44      	itt	mi
 800f898:	222b      	movmi	r2, #43	; 0x2b
 800f89a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f89e:	782a      	ldrb	r2, [r5, #0]
 800f8a0:	2a2a      	cmp	r2, #42	; 0x2a
 800f8a2:	d02a      	beq.n	800f8fa <_vfiprintf_r+0x10e>
 800f8a4:	9a07      	ldr	r2, [sp, #28]
 800f8a6:	46a8      	mov	r8, r5
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	250a      	movs	r5, #10
 800f8ac:	4641      	mov	r1, r8
 800f8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8b2:	3b30      	subs	r3, #48	; 0x30
 800f8b4:	2b09      	cmp	r3, #9
 800f8b6:	d969      	bls.n	800f98c <_vfiprintf_r+0x1a0>
 800f8b8:	b360      	cbz	r0, 800f914 <_vfiprintf_r+0x128>
 800f8ba:	e024      	b.n	800f906 <_vfiprintf_r+0x11a>
 800f8bc:	4b50      	ldr	r3, [pc, #320]	; (800fa00 <_vfiprintf_r+0x214>)
 800f8be:	429c      	cmp	r4, r3
 800f8c0:	d101      	bne.n	800f8c6 <_vfiprintf_r+0xda>
 800f8c2:	68b4      	ldr	r4, [r6, #8]
 800f8c4:	e7a2      	b.n	800f80c <_vfiprintf_r+0x20>
 800f8c6:	4b4f      	ldr	r3, [pc, #316]	; (800fa04 <_vfiprintf_r+0x218>)
 800f8c8:	429c      	cmp	r4, r3
 800f8ca:	bf08      	it	eq
 800f8cc:	68f4      	ldreq	r4, [r6, #12]
 800f8ce:	e79d      	b.n	800f80c <_vfiprintf_r+0x20>
 800f8d0:	4621      	mov	r1, r4
 800f8d2:	4630      	mov	r0, r6
 800f8d4:	f7ff fbc0 	bl	800f058 <__swsetup_r>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d09d      	beq.n	800f818 <_vfiprintf_r+0x2c>
 800f8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e0:	b01d      	add	sp, #116	; 0x74
 800f8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e6:	46a8      	mov	r8, r5
 800f8e8:	e7a2      	b.n	800f830 <_vfiprintf_r+0x44>
 800f8ea:	4a44      	ldr	r2, [pc, #272]	; (800f9fc <_vfiprintf_r+0x210>)
 800f8ec:	1a80      	subs	r0, r0, r2
 800f8ee:	fa0b f000 	lsl.w	r0, fp, r0
 800f8f2:	4318      	orrs	r0, r3
 800f8f4:	9004      	str	r0, [sp, #16]
 800f8f6:	4645      	mov	r5, r8
 800f8f8:	e7be      	b.n	800f878 <_vfiprintf_r+0x8c>
 800f8fa:	9a03      	ldr	r2, [sp, #12]
 800f8fc:	1d11      	adds	r1, r2, #4
 800f8fe:	6812      	ldr	r2, [r2, #0]
 800f900:	9103      	str	r1, [sp, #12]
 800f902:	2a00      	cmp	r2, #0
 800f904:	db01      	blt.n	800f90a <_vfiprintf_r+0x11e>
 800f906:	9207      	str	r2, [sp, #28]
 800f908:	e004      	b.n	800f914 <_vfiprintf_r+0x128>
 800f90a:	4252      	negs	r2, r2
 800f90c:	f043 0302 	orr.w	r3, r3, #2
 800f910:	9207      	str	r2, [sp, #28]
 800f912:	9304      	str	r3, [sp, #16]
 800f914:	f898 3000 	ldrb.w	r3, [r8]
 800f918:	2b2e      	cmp	r3, #46	; 0x2e
 800f91a:	d10e      	bne.n	800f93a <_vfiprintf_r+0x14e>
 800f91c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f920:	2b2a      	cmp	r3, #42	; 0x2a
 800f922:	d138      	bne.n	800f996 <_vfiprintf_r+0x1aa>
 800f924:	9b03      	ldr	r3, [sp, #12]
 800f926:	1d1a      	adds	r2, r3, #4
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	9203      	str	r2, [sp, #12]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	bfb8      	it	lt
 800f930:	f04f 33ff 	movlt.w	r3, #4294967295
 800f934:	f108 0802 	add.w	r8, r8, #2
 800f938:	9305      	str	r3, [sp, #20]
 800f93a:	4d33      	ldr	r5, [pc, #204]	; (800fa08 <_vfiprintf_r+0x21c>)
 800f93c:	f898 1000 	ldrb.w	r1, [r8]
 800f940:	2203      	movs	r2, #3
 800f942:	4628      	mov	r0, r5
 800f944:	f7f0 fc54 	bl	80001f0 <memchr>
 800f948:	b140      	cbz	r0, 800f95c <_vfiprintf_r+0x170>
 800f94a:	2340      	movs	r3, #64	; 0x40
 800f94c:	1b40      	subs	r0, r0, r5
 800f94e:	fa03 f000 	lsl.w	r0, r3, r0
 800f952:	9b04      	ldr	r3, [sp, #16]
 800f954:	4303      	orrs	r3, r0
 800f956:	f108 0801 	add.w	r8, r8, #1
 800f95a:	9304      	str	r3, [sp, #16]
 800f95c:	f898 1000 	ldrb.w	r1, [r8]
 800f960:	482a      	ldr	r0, [pc, #168]	; (800fa0c <_vfiprintf_r+0x220>)
 800f962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f966:	2206      	movs	r2, #6
 800f968:	f108 0701 	add.w	r7, r8, #1
 800f96c:	f7f0 fc40 	bl	80001f0 <memchr>
 800f970:	2800      	cmp	r0, #0
 800f972:	d037      	beq.n	800f9e4 <_vfiprintf_r+0x1f8>
 800f974:	4b26      	ldr	r3, [pc, #152]	; (800fa10 <_vfiprintf_r+0x224>)
 800f976:	bb1b      	cbnz	r3, 800f9c0 <_vfiprintf_r+0x1d4>
 800f978:	9b03      	ldr	r3, [sp, #12]
 800f97a:	3307      	adds	r3, #7
 800f97c:	f023 0307 	bic.w	r3, r3, #7
 800f980:	3308      	adds	r3, #8
 800f982:	9303      	str	r3, [sp, #12]
 800f984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f986:	444b      	add	r3, r9
 800f988:	9309      	str	r3, [sp, #36]	; 0x24
 800f98a:	e750      	b.n	800f82e <_vfiprintf_r+0x42>
 800f98c:	fb05 3202 	mla	r2, r5, r2, r3
 800f990:	2001      	movs	r0, #1
 800f992:	4688      	mov	r8, r1
 800f994:	e78a      	b.n	800f8ac <_vfiprintf_r+0xc0>
 800f996:	2300      	movs	r3, #0
 800f998:	f108 0801 	add.w	r8, r8, #1
 800f99c:	9305      	str	r3, [sp, #20]
 800f99e:	4619      	mov	r1, r3
 800f9a0:	250a      	movs	r5, #10
 800f9a2:	4640      	mov	r0, r8
 800f9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9a8:	3a30      	subs	r2, #48	; 0x30
 800f9aa:	2a09      	cmp	r2, #9
 800f9ac:	d903      	bls.n	800f9b6 <_vfiprintf_r+0x1ca>
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d0c3      	beq.n	800f93a <_vfiprintf_r+0x14e>
 800f9b2:	9105      	str	r1, [sp, #20]
 800f9b4:	e7c1      	b.n	800f93a <_vfiprintf_r+0x14e>
 800f9b6:	fb05 2101 	mla	r1, r5, r1, r2
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	4680      	mov	r8, r0
 800f9be:	e7f0      	b.n	800f9a2 <_vfiprintf_r+0x1b6>
 800f9c0:	ab03      	add	r3, sp, #12
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	4622      	mov	r2, r4
 800f9c6:	4b13      	ldr	r3, [pc, #76]	; (800fa14 <_vfiprintf_r+0x228>)
 800f9c8:	a904      	add	r1, sp, #16
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f3af 8000 	nop.w
 800f9d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f9d4:	4681      	mov	r9, r0
 800f9d6:	d1d5      	bne.n	800f984 <_vfiprintf_r+0x198>
 800f9d8:	89a3      	ldrh	r3, [r4, #12]
 800f9da:	065b      	lsls	r3, r3, #25
 800f9dc:	f53f af7e 	bmi.w	800f8dc <_vfiprintf_r+0xf0>
 800f9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9e2:	e77d      	b.n	800f8e0 <_vfiprintf_r+0xf4>
 800f9e4:	ab03      	add	r3, sp, #12
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	4622      	mov	r2, r4
 800f9ea:	4b0a      	ldr	r3, [pc, #40]	; (800fa14 <_vfiprintf_r+0x228>)
 800f9ec:	a904      	add	r1, sp, #16
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f000 f888 	bl	800fb04 <_printf_i>
 800f9f4:	e7ec      	b.n	800f9d0 <_vfiprintf_r+0x1e4>
 800f9f6:	bf00      	nop
 800f9f8:	080119dc 	.word	0x080119dc
 800f9fc:	08011a1c 	.word	0x08011a1c
 800fa00:	080119fc 	.word	0x080119fc
 800fa04:	080119bc 	.word	0x080119bc
 800fa08:	08011a22 	.word	0x08011a22
 800fa0c:	08011a26 	.word	0x08011a26
 800fa10:	00000000 	.word	0x00000000
 800fa14:	0800f7c7 	.word	0x0800f7c7

0800fa18 <_printf_common>:
 800fa18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa1c:	4691      	mov	r9, r2
 800fa1e:	461f      	mov	r7, r3
 800fa20:	688a      	ldr	r2, [r1, #8]
 800fa22:	690b      	ldr	r3, [r1, #16]
 800fa24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	bfb8      	it	lt
 800fa2c:	4613      	movlt	r3, r2
 800fa2e:	f8c9 3000 	str.w	r3, [r9]
 800fa32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa36:	4606      	mov	r6, r0
 800fa38:	460c      	mov	r4, r1
 800fa3a:	b112      	cbz	r2, 800fa42 <_printf_common+0x2a>
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	f8c9 3000 	str.w	r3, [r9]
 800fa42:	6823      	ldr	r3, [r4, #0]
 800fa44:	0699      	lsls	r1, r3, #26
 800fa46:	bf42      	ittt	mi
 800fa48:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fa4c:	3302      	addmi	r3, #2
 800fa4e:	f8c9 3000 	strmi.w	r3, [r9]
 800fa52:	6825      	ldr	r5, [r4, #0]
 800fa54:	f015 0506 	ands.w	r5, r5, #6
 800fa58:	d107      	bne.n	800fa6a <_printf_common+0x52>
 800fa5a:	f104 0a19 	add.w	sl, r4, #25
 800fa5e:	68e3      	ldr	r3, [r4, #12]
 800fa60:	f8d9 2000 	ldr.w	r2, [r9]
 800fa64:	1a9b      	subs	r3, r3, r2
 800fa66:	42ab      	cmp	r3, r5
 800fa68:	dc28      	bgt.n	800fabc <_printf_common+0xa4>
 800fa6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fa6e:	6822      	ldr	r2, [r4, #0]
 800fa70:	3300      	adds	r3, #0
 800fa72:	bf18      	it	ne
 800fa74:	2301      	movne	r3, #1
 800fa76:	0692      	lsls	r2, r2, #26
 800fa78:	d42d      	bmi.n	800fad6 <_printf_common+0xbe>
 800fa7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa7e:	4639      	mov	r1, r7
 800fa80:	4630      	mov	r0, r6
 800fa82:	47c0      	blx	r8
 800fa84:	3001      	adds	r0, #1
 800fa86:	d020      	beq.n	800faca <_printf_common+0xb2>
 800fa88:	6823      	ldr	r3, [r4, #0]
 800fa8a:	68e5      	ldr	r5, [r4, #12]
 800fa8c:	f8d9 2000 	ldr.w	r2, [r9]
 800fa90:	f003 0306 	and.w	r3, r3, #6
 800fa94:	2b04      	cmp	r3, #4
 800fa96:	bf08      	it	eq
 800fa98:	1aad      	subeq	r5, r5, r2
 800fa9a:	68a3      	ldr	r3, [r4, #8]
 800fa9c:	6922      	ldr	r2, [r4, #16]
 800fa9e:	bf0c      	ite	eq
 800faa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800faa4:	2500      	movne	r5, #0
 800faa6:	4293      	cmp	r3, r2
 800faa8:	bfc4      	itt	gt
 800faaa:	1a9b      	subgt	r3, r3, r2
 800faac:	18ed      	addgt	r5, r5, r3
 800faae:	f04f 0900 	mov.w	r9, #0
 800fab2:	341a      	adds	r4, #26
 800fab4:	454d      	cmp	r5, r9
 800fab6:	d11a      	bne.n	800faee <_printf_common+0xd6>
 800fab8:	2000      	movs	r0, #0
 800faba:	e008      	b.n	800face <_printf_common+0xb6>
 800fabc:	2301      	movs	r3, #1
 800fabe:	4652      	mov	r2, sl
 800fac0:	4639      	mov	r1, r7
 800fac2:	4630      	mov	r0, r6
 800fac4:	47c0      	blx	r8
 800fac6:	3001      	adds	r0, #1
 800fac8:	d103      	bne.n	800fad2 <_printf_common+0xba>
 800faca:	f04f 30ff 	mov.w	r0, #4294967295
 800face:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad2:	3501      	adds	r5, #1
 800fad4:	e7c3      	b.n	800fa5e <_printf_common+0x46>
 800fad6:	18e1      	adds	r1, r4, r3
 800fad8:	1c5a      	adds	r2, r3, #1
 800fada:	2030      	movs	r0, #48	; 0x30
 800fadc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fae0:	4422      	add	r2, r4
 800fae2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fae6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800faea:	3302      	adds	r3, #2
 800faec:	e7c5      	b.n	800fa7a <_printf_common+0x62>
 800faee:	2301      	movs	r3, #1
 800faf0:	4622      	mov	r2, r4
 800faf2:	4639      	mov	r1, r7
 800faf4:	4630      	mov	r0, r6
 800faf6:	47c0      	blx	r8
 800faf8:	3001      	adds	r0, #1
 800fafa:	d0e6      	beq.n	800faca <_printf_common+0xb2>
 800fafc:	f109 0901 	add.w	r9, r9, #1
 800fb00:	e7d8      	b.n	800fab4 <_printf_common+0x9c>
	...

0800fb04 <_printf_i>:
 800fb04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fb0c:	460c      	mov	r4, r1
 800fb0e:	7e09      	ldrb	r1, [r1, #24]
 800fb10:	b085      	sub	sp, #20
 800fb12:	296e      	cmp	r1, #110	; 0x6e
 800fb14:	4617      	mov	r7, r2
 800fb16:	4606      	mov	r6, r0
 800fb18:	4698      	mov	r8, r3
 800fb1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb1c:	f000 80b3 	beq.w	800fc86 <_printf_i+0x182>
 800fb20:	d822      	bhi.n	800fb68 <_printf_i+0x64>
 800fb22:	2963      	cmp	r1, #99	; 0x63
 800fb24:	d036      	beq.n	800fb94 <_printf_i+0x90>
 800fb26:	d80a      	bhi.n	800fb3e <_printf_i+0x3a>
 800fb28:	2900      	cmp	r1, #0
 800fb2a:	f000 80b9 	beq.w	800fca0 <_printf_i+0x19c>
 800fb2e:	2958      	cmp	r1, #88	; 0x58
 800fb30:	f000 8083 	beq.w	800fc3a <_printf_i+0x136>
 800fb34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fb3c:	e032      	b.n	800fba4 <_printf_i+0xa0>
 800fb3e:	2964      	cmp	r1, #100	; 0x64
 800fb40:	d001      	beq.n	800fb46 <_printf_i+0x42>
 800fb42:	2969      	cmp	r1, #105	; 0x69
 800fb44:	d1f6      	bne.n	800fb34 <_printf_i+0x30>
 800fb46:	6820      	ldr	r0, [r4, #0]
 800fb48:	6813      	ldr	r3, [r2, #0]
 800fb4a:	0605      	lsls	r5, r0, #24
 800fb4c:	f103 0104 	add.w	r1, r3, #4
 800fb50:	d52a      	bpl.n	800fba8 <_printf_i+0xa4>
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	6011      	str	r1, [r2, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	da03      	bge.n	800fb62 <_printf_i+0x5e>
 800fb5a:	222d      	movs	r2, #45	; 0x2d
 800fb5c:	425b      	negs	r3, r3
 800fb5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fb62:	486f      	ldr	r0, [pc, #444]	; (800fd20 <_printf_i+0x21c>)
 800fb64:	220a      	movs	r2, #10
 800fb66:	e039      	b.n	800fbdc <_printf_i+0xd8>
 800fb68:	2973      	cmp	r1, #115	; 0x73
 800fb6a:	f000 809d 	beq.w	800fca8 <_printf_i+0x1a4>
 800fb6e:	d808      	bhi.n	800fb82 <_printf_i+0x7e>
 800fb70:	296f      	cmp	r1, #111	; 0x6f
 800fb72:	d020      	beq.n	800fbb6 <_printf_i+0xb2>
 800fb74:	2970      	cmp	r1, #112	; 0x70
 800fb76:	d1dd      	bne.n	800fb34 <_printf_i+0x30>
 800fb78:	6823      	ldr	r3, [r4, #0]
 800fb7a:	f043 0320 	orr.w	r3, r3, #32
 800fb7e:	6023      	str	r3, [r4, #0]
 800fb80:	e003      	b.n	800fb8a <_printf_i+0x86>
 800fb82:	2975      	cmp	r1, #117	; 0x75
 800fb84:	d017      	beq.n	800fbb6 <_printf_i+0xb2>
 800fb86:	2978      	cmp	r1, #120	; 0x78
 800fb88:	d1d4      	bne.n	800fb34 <_printf_i+0x30>
 800fb8a:	2378      	movs	r3, #120	; 0x78
 800fb8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb90:	4864      	ldr	r0, [pc, #400]	; (800fd24 <_printf_i+0x220>)
 800fb92:	e055      	b.n	800fc40 <_printf_i+0x13c>
 800fb94:	6813      	ldr	r3, [r2, #0]
 800fb96:	1d19      	adds	r1, r3, #4
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	6011      	str	r1, [r2, #0]
 800fb9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fba4:	2301      	movs	r3, #1
 800fba6:	e08c      	b.n	800fcc2 <_printf_i+0x1be>
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	6011      	str	r1, [r2, #0]
 800fbac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fbb0:	bf18      	it	ne
 800fbb2:	b21b      	sxthne	r3, r3
 800fbb4:	e7cf      	b.n	800fb56 <_printf_i+0x52>
 800fbb6:	6813      	ldr	r3, [r2, #0]
 800fbb8:	6825      	ldr	r5, [r4, #0]
 800fbba:	1d18      	adds	r0, r3, #4
 800fbbc:	6010      	str	r0, [r2, #0]
 800fbbe:	0628      	lsls	r0, r5, #24
 800fbc0:	d501      	bpl.n	800fbc6 <_printf_i+0xc2>
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	e002      	b.n	800fbcc <_printf_i+0xc8>
 800fbc6:	0668      	lsls	r0, r5, #25
 800fbc8:	d5fb      	bpl.n	800fbc2 <_printf_i+0xbe>
 800fbca:	881b      	ldrh	r3, [r3, #0]
 800fbcc:	4854      	ldr	r0, [pc, #336]	; (800fd20 <_printf_i+0x21c>)
 800fbce:	296f      	cmp	r1, #111	; 0x6f
 800fbd0:	bf14      	ite	ne
 800fbd2:	220a      	movne	r2, #10
 800fbd4:	2208      	moveq	r2, #8
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbdc:	6865      	ldr	r5, [r4, #4]
 800fbde:	60a5      	str	r5, [r4, #8]
 800fbe0:	2d00      	cmp	r5, #0
 800fbe2:	f2c0 8095 	blt.w	800fd10 <_printf_i+0x20c>
 800fbe6:	6821      	ldr	r1, [r4, #0]
 800fbe8:	f021 0104 	bic.w	r1, r1, #4
 800fbec:	6021      	str	r1, [r4, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d13d      	bne.n	800fc6e <_printf_i+0x16a>
 800fbf2:	2d00      	cmp	r5, #0
 800fbf4:	f040 808e 	bne.w	800fd14 <_printf_i+0x210>
 800fbf8:	4665      	mov	r5, ip
 800fbfa:	2a08      	cmp	r2, #8
 800fbfc:	d10b      	bne.n	800fc16 <_printf_i+0x112>
 800fbfe:	6823      	ldr	r3, [r4, #0]
 800fc00:	07db      	lsls	r3, r3, #31
 800fc02:	d508      	bpl.n	800fc16 <_printf_i+0x112>
 800fc04:	6923      	ldr	r3, [r4, #16]
 800fc06:	6862      	ldr	r2, [r4, #4]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	bfde      	ittt	le
 800fc0c:	2330      	movle	r3, #48	; 0x30
 800fc0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc12:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc16:	ebac 0305 	sub.w	r3, ip, r5
 800fc1a:	6123      	str	r3, [r4, #16]
 800fc1c:	f8cd 8000 	str.w	r8, [sp]
 800fc20:	463b      	mov	r3, r7
 800fc22:	aa03      	add	r2, sp, #12
 800fc24:	4621      	mov	r1, r4
 800fc26:	4630      	mov	r0, r6
 800fc28:	f7ff fef6 	bl	800fa18 <_printf_common>
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	d14d      	bne.n	800fccc <_printf_i+0x1c8>
 800fc30:	f04f 30ff 	mov.w	r0, #4294967295
 800fc34:	b005      	add	sp, #20
 800fc36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc3a:	4839      	ldr	r0, [pc, #228]	; (800fd20 <_printf_i+0x21c>)
 800fc3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fc40:	6813      	ldr	r3, [r2, #0]
 800fc42:	6821      	ldr	r1, [r4, #0]
 800fc44:	1d1d      	adds	r5, r3, #4
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	6015      	str	r5, [r2, #0]
 800fc4a:	060a      	lsls	r2, r1, #24
 800fc4c:	d50b      	bpl.n	800fc66 <_printf_i+0x162>
 800fc4e:	07ca      	lsls	r2, r1, #31
 800fc50:	bf44      	itt	mi
 800fc52:	f041 0120 	orrmi.w	r1, r1, #32
 800fc56:	6021      	strmi	r1, [r4, #0]
 800fc58:	b91b      	cbnz	r3, 800fc62 <_printf_i+0x15e>
 800fc5a:	6822      	ldr	r2, [r4, #0]
 800fc5c:	f022 0220 	bic.w	r2, r2, #32
 800fc60:	6022      	str	r2, [r4, #0]
 800fc62:	2210      	movs	r2, #16
 800fc64:	e7b7      	b.n	800fbd6 <_printf_i+0xd2>
 800fc66:	064d      	lsls	r5, r1, #25
 800fc68:	bf48      	it	mi
 800fc6a:	b29b      	uxthmi	r3, r3
 800fc6c:	e7ef      	b.n	800fc4e <_printf_i+0x14a>
 800fc6e:	4665      	mov	r5, ip
 800fc70:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc74:	fb02 3311 	mls	r3, r2, r1, r3
 800fc78:	5cc3      	ldrb	r3, [r0, r3]
 800fc7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fc7e:	460b      	mov	r3, r1
 800fc80:	2900      	cmp	r1, #0
 800fc82:	d1f5      	bne.n	800fc70 <_printf_i+0x16c>
 800fc84:	e7b9      	b.n	800fbfa <_printf_i+0xf6>
 800fc86:	6813      	ldr	r3, [r2, #0]
 800fc88:	6825      	ldr	r5, [r4, #0]
 800fc8a:	6961      	ldr	r1, [r4, #20]
 800fc8c:	1d18      	adds	r0, r3, #4
 800fc8e:	6010      	str	r0, [r2, #0]
 800fc90:	0628      	lsls	r0, r5, #24
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	d501      	bpl.n	800fc9a <_printf_i+0x196>
 800fc96:	6019      	str	r1, [r3, #0]
 800fc98:	e002      	b.n	800fca0 <_printf_i+0x19c>
 800fc9a:	066a      	lsls	r2, r5, #25
 800fc9c:	d5fb      	bpl.n	800fc96 <_printf_i+0x192>
 800fc9e:	8019      	strh	r1, [r3, #0]
 800fca0:	2300      	movs	r3, #0
 800fca2:	6123      	str	r3, [r4, #16]
 800fca4:	4665      	mov	r5, ip
 800fca6:	e7b9      	b.n	800fc1c <_printf_i+0x118>
 800fca8:	6813      	ldr	r3, [r2, #0]
 800fcaa:	1d19      	adds	r1, r3, #4
 800fcac:	6011      	str	r1, [r2, #0]
 800fcae:	681d      	ldr	r5, [r3, #0]
 800fcb0:	6862      	ldr	r2, [r4, #4]
 800fcb2:	2100      	movs	r1, #0
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	f7f0 fa9b 	bl	80001f0 <memchr>
 800fcba:	b108      	cbz	r0, 800fcc0 <_printf_i+0x1bc>
 800fcbc:	1b40      	subs	r0, r0, r5
 800fcbe:	6060      	str	r0, [r4, #4]
 800fcc0:	6863      	ldr	r3, [r4, #4]
 800fcc2:	6123      	str	r3, [r4, #16]
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcca:	e7a7      	b.n	800fc1c <_printf_i+0x118>
 800fccc:	6923      	ldr	r3, [r4, #16]
 800fcce:	462a      	mov	r2, r5
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	47c0      	blx	r8
 800fcd6:	3001      	adds	r0, #1
 800fcd8:	d0aa      	beq.n	800fc30 <_printf_i+0x12c>
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	079b      	lsls	r3, r3, #30
 800fcde:	d413      	bmi.n	800fd08 <_printf_i+0x204>
 800fce0:	68e0      	ldr	r0, [r4, #12]
 800fce2:	9b03      	ldr	r3, [sp, #12]
 800fce4:	4298      	cmp	r0, r3
 800fce6:	bfb8      	it	lt
 800fce8:	4618      	movlt	r0, r3
 800fcea:	e7a3      	b.n	800fc34 <_printf_i+0x130>
 800fcec:	2301      	movs	r3, #1
 800fcee:	464a      	mov	r2, r9
 800fcf0:	4639      	mov	r1, r7
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	47c0      	blx	r8
 800fcf6:	3001      	adds	r0, #1
 800fcf8:	d09a      	beq.n	800fc30 <_printf_i+0x12c>
 800fcfa:	3501      	adds	r5, #1
 800fcfc:	68e3      	ldr	r3, [r4, #12]
 800fcfe:	9a03      	ldr	r2, [sp, #12]
 800fd00:	1a9b      	subs	r3, r3, r2
 800fd02:	42ab      	cmp	r3, r5
 800fd04:	dcf2      	bgt.n	800fcec <_printf_i+0x1e8>
 800fd06:	e7eb      	b.n	800fce0 <_printf_i+0x1dc>
 800fd08:	2500      	movs	r5, #0
 800fd0a:	f104 0919 	add.w	r9, r4, #25
 800fd0e:	e7f5      	b.n	800fcfc <_printf_i+0x1f8>
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d1ac      	bne.n	800fc6e <_printf_i+0x16a>
 800fd14:	7803      	ldrb	r3, [r0, #0]
 800fd16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd1e:	e76c      	b.n	800fbfa <_printf_i+0xf6>
 800fd20:	08011a2d 	.word	0x08011a2d
 800fd24:	08011a3e 	.word	0x08011a3e

0800fd28 <__sread>:
 800fd28:	b510      	push	{r4, lr}
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd30:	f000 f8d4 	bl	800fedc <_read_r>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	bfab      	itete	ge
 800fd38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd3a:	89a3      	ldrhlt	r3, [r4, #12]
 800fd3c:	181b      	addge	r3, r3, r0
 800fd3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd42:	bfac      	ite	ge
 800fd44:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd46:	81a3      	strhlt	r3, [r4, #12]
 800fd48:	bd10      	pop	{r4, pc}

0800fd4a <__swrite>:
 800fd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd4e:	461f      	mov	r7, r3
 800fd50:	898b      	ldrh	r3, [r1, #12]
 800fd52:	05db      	lsls	r3, r3, #23
 800fd54:	4605      	mov	r5, r0
 800fd56:	460c      	mov	r4, r1
 800fd58:	4616      	mov	r6, r2
 800fd5a:	d505      	bpl.n	800fd68 <__swrite+0x1e>
 800fd5c:	2302      	movs	r3, #2
 800fd5e:	2200      	movs	r2, #0
 800fd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd64:	f000 f868 	bl	800fe38 <_lseek_r>
 800fd68:	89a3      	ldrh	r3, [r4, #12]
 800fd6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd72:	81a3      	strh	r3, [r4, #12]
 800fd74:	4632      	mov	r2, r6
 800fd76:	463b      	mov	r3, r7
 800fd78:	4628      	mov	r0, r5
 800fd7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd7e:	f000 b817 	b.w	800fdb0 <_write_r>

0800fd82 <__sseek>:
 800fd82:	b510      	push	{r4, lr}
 800fd84:	460c      	mov	r4, r1
 800fd86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd8a:	f000 f855 	bl	800fe38 <_lseek_r>
 800fd8e:	1c43      	adds	r3, r0, #1
 800fd90:	89a3      	ldrh	r3, [r4, #12]
 800fd92:	bf15      	itete	ne
 800fd94:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd9e:	81a3      	strheq	r3, [r4, #12]
 800fda0:	bf18      	it	ne
 800fda2:	81a3      	strhne	r3, [r4, #12]
 800fda4:	bd10      	pop	{r4, pc}

0800fda6 <__sclose>:
 800fda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdaa:	f000 b813 	b.w	800fdd4 <_close_r>
	...

0800fdb0 <_write_r>:
 800fdb0:	b538      	push	{r3, r4, r5, lr}
 800fdb2:	4c07      	ldr	r4, [pc, #28]	; (800fdd0 <_write_r+0x20>)
 800fdb4:	4605      	mov	r5, r0
 800fdb6:	4608      	mov	r0, r1
 800fdb8:	4611      	mov	r1, r2
 800fdba:	2200      	movs	r2, #0
 800fdbc:	6022      	str	r2, [r4, #0]
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	f7fc fec5 	bl	800cb4e <_write>
 800fdc4:	1c43      	adds	r3, r0, #1
 800fdc6:	d102      	bne.n	800fdce <_write_r+0x1e>
 800fdc8:	6823      	ldr	r3, [r4, #0]
 800fdca:	b103      	cbz	r3, 800fdce <_write_r+0x1e>
 800fdcc:	602b      	str	r3, [r5, #0]
 800fdce:	bd38      	pop	{r3, r4, r5, pc}
 800fdd0:	2000596c 	.word	0x2000596c

0800fdd4 <_close_r>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	4c06      	ldr	r4, [pc, #24]	; (800fdf0 <_close_r+0x1c>)
 800fdd8:	2300      	movs	r3, #0
 800fdda:	4605      	mov	r5, r0
 800fddc:	4608      	mov	r0, r1
 800fdde:	6023      	str	r3, [r4, #0]
 800fde0:	f7fe fb9f 	bl	800e522 <_close>
 800fde4:	1c43      	adds	r3, r0, #1
 800fde6:	d102      	bne.n	800fdee <_close_r+0x1a>
 800fde8:	6823      	ldr	r3, [r4, #0]
 800fdea:	b103      	cbz	r3, 800fdee <_close_r+0x1a>
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	bd38      	pop	{r3, r4, r5, pc}
 800fdf0:	2000596c 	.word	0x2000596c

0800fdf4 <_fstat_r>:
 800fdf4:	b538      	push	{r3, r4, r5, lr}
 800fdf6:	4c07      	ldr	r4, [pc, #28]	; (800fe14 <_fstat_r+0x20>)
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	4605      	mov	r5, r0
 800fdfc:	4608      	mov	r0, r1
 800fdfe:	4611      	mov	r1, r2
 800fe00:	6023      	str	r3, [r4, #0]
 800fe02:	f7fe fb9a 	bl	800e53a <_fstat>
 800fe06:	1c43      	adds	r3, r0, #1
 800fe08:	d102      	bne.n	800fe10 <_fstat_r+0x1c>
 800fe0a:	6823      	ldr	r3, [r4, #0]
 800fe0c:	b103      	cbz	r3, 800fe10 <_fstat_r+0x1c>
 800fe0e:	602b      	str	r3, [r5, #0]
 800fe10:	bd38      	pop	{r3, r4, r5, pc}
 800fe12:	bf00      	nop
 800fe14:	2000596c 	.word	0x2000596c

0800fe18 <_isatty_r>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	4c06      	ldr	r4, [pc, #24]	; (800fe34 <_isatty_r+0x1c>)
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	4605      	mov	r5, r0
 800fe20:	4608      	mov	r0, r1
 800fe22:	6023      	str	r3, [r4, #0]
 800fe24:	f7fe fb99 	bl	800e55a <_isatty>
 800fe28:	1c43      	adds	r3, r0, #1
 800fe2a:	d102      	bne.n	800fe32 <_isatty_r+0x1a>
 800fe2c:	6823      	ldr	r3, [r4, #0]
 800fe2e:	b103      	cbz	r3, 800fe32 <_isatty_r+0x1a>
 800fe30:	602b      	str	r3, [r5, #0]
 800fe32:	bd38      	pop	{r3, r4, r5, pc}
 800fe34:	2000596c 	.word	0x2000596c

0800fe38 <_lseek_r>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	4c07      	ldr	r4, [pc, #28]	; (800fe58 <_lseek_r+0x20>)
 800fe3c:	4605      	mov	r5, r0
 800fe3e:	4608      	mov	r0, r1
 800fe40:	4611      	mov	r1, r2
 800fe42:	2200      	movs	r2, #0
 800fe44:	6022      	str	r2, [r4, #0]
 800fe46:	461a      	mov	r2, r3
 800fe48:	f7fe fb92 	bl	800e570 <_lseek>
 800fe4c:	1c43      	adds	r3, r0, #1
 800fe4e:	d102      	bne.n	800fe56 <_lseek_r+0x1e>
 800fe50:	6823      	ldr	r3, [r4, #0]
 800fe52:	b103      	cbz	r3, 800fe56 <_lseek_r+0x1e>
 800fe54:	602b      	str	r3, [r5, #0]
 800fe56:	bd38      	pop	{r3, r4, r5, pc}
 800fe58:	2000596c 	.word	0x2000596c

0800fe5c <memmove>:
 800fe5c:	4288      	cmp	r0, r1
 800fe5e:	b510      	push	{r4, lr}
 800fe60:	eb01 0302 	add.w	r3, r1, r2
 800fe64:	d807      	bhi.n	800fe76 <memmove+0x1a>
 800fe66:	1e42      	subs	r2, r0, #1
 800fe68:	4299      	cmp	r1, r3
 800fe6a:	d00a      	beq.n	800fe82 <memmove+0x26>
 800fe6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe70:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fe74:	e7f8      	b.n	800fe68 <memmove+0xc>
 800fe76:	4283      	cmp	r3, r0
 800fe78:	d9f5      	bls.n	800fe66 <memmove+0xa>
 800fe7a:	1881      	adds	r1, r0, r2
 800fe7c:	1ad2      	subs	r2, r2, r3
 800fe7e:	42d3      	cmn	r3, r2
 800fe80:	d100      	bne.n	800fe84 <memmove+0x28>
 800fe82:	bd10      	pop	{r4, pc}
 800fe84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fe8c:	e7f7      	b.n	800fe7e <memmove+0x22>

0800fe8e <_realloc_r>:
 800fe8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe90:	4607      	mov	r7, r0
 800fe92:	4614      	mov	r4, r2
 800fe94:	460e      	mov	r6, r1
 800fe96:	b921      	cbnz	r1, 800fea2 <_realloc_r+0x14>
 800fe98:	4611      	mov	r1, r2
 800fe9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe9e:	f7fe bf6f 	b.w	800ed80 <_malloc_r>
 800fea2:	b922      	cbnz	r2, 800feae <_realloc_r+0x20>
 800fea4:	f7fe ff1e 	bl	800ece4 <_free_r>
 800fea8:	4625      	mov	r5, r4
 800feaa:	4628      	mov	r0, r5
 800feac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feae:	f000 f827 	bl	800ff00 <_malloc_usable_size_r>
 800feb2:	42a0      	cmp	r0, r4
 800feb4:	d20f      	bcs.n	800fed6 <_realloc_r+0x48>
 800feb6:	4621      	mov	r1, r4
 800feb8:	4638      	mov	r0, r7
 800feba:	f7fe ff61 	bl	800ed80 <_malloc_r>
 800febe:	4605      	mov	r5, r0
 800fec0:	2800      	cmp	r0, #0
 800fec2:	d0f2      	beq.n	800feaa <_realloc_r+0x1c>
 800fec4:	4631      	mov	r1, r6
 800fec6:	4622      	mov	r2, r4
 800fec8:	f7fe fef9 	bl	800ecbe <memcpy>
 800fecc:	4631      	mov	r1, r6
 800fece:	4638      	mov	r0, r7
 800fed0:	f7fe ff08 	bl	800ece4 <_free_r>
 800fed4:	e7e9      	b.n	800feaa <_realloc_r+0x1c>
 800fed6:	4635      	mov	r5, r6
 800fed8:	e7e7      	b.n	800feaa <_realloc_r+0x1c>
	...

0800fedc <_read_r>:
 800fedc:	b538      	push	{r3, r4, r5, lr}
 800fede:	4c07      	ldr	r4, [pc, #28]	; (800fefc <_read_r+0x20>)
 800fee0:	4605      	mov	r5, r0
 800fee2:	4608      	mov	r0, r1
 800fee4:	4611      	mov	r1, r2
 800fee6:	2200      	movs	r2, #0
 800fee8:	6022      	str	r2, [r4, #0]
 800feea:	461a      	mov	r2, r3
 800feec:	f7fe fafc 	bl	800e4e8 <_read>
 800fef0:	1c43      	adds	r3, r0, #1
 800fef2:	d102      	bne.n	800fefa <_read_r+0x1e>
 800fef4:	6823      	ldr	r3, [r4, #0]
 800fef6:	b103      	cbz	r3, 800fefa <_read_r+0x1e>
 800fef8:	602b      	str	r3, [r5, #0]
 800fefa:	bd38      	pop	{r3, r4, r5, pc}
 800fefc:	2000596c 	.word	0x2000596c

0800ff00 <_malloc_usable_size_r>:
 800ff00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff04:	1f18      	subs	r0, r3, #4
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	bfbc      	itt	lt
 800ff0a:	580b      	ldrlt	r3, [r1, r0]
 800ff0c:	18c0      	addlt	r0, r0, r3
 800ff0e:	4770      	bx	lr

0800ff10 <sin>:
 800ff10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff12:	ec51 0b10 	vmov	r0, r1, d0
 800ff16:	4a20      	ldr	r2, [pc, #128]	; (800ff98 <sin+0x88>)
 800ff18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	dc07      	bgt.n	800ff30 <sin+0x20>
 800ff20:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ff90 <sin+0x80>
 800ff24:	2000      	movs	r0, #0
 800ff26:	f000 fe37 	bl	8010b98 <__kernel_sin>
 800ff2a:	ec51 0b10 	vmov	r0, r1, d0
 800ff2e:	e007      	b.n	800ff40 <sin+0x30>
 800ff30:	4a1a      	ldr	r2, [pc, #104]	; (800ff9c <sin+0x8c>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	dd09      	ble.n	800ff4a <sin+0x3a>
 800ff36:	ee10 2a10 	vmov	r2, s0
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	f7f0 f9ac 	bl	8000298 <__aeabi_dsub>
 800ff40:	ec41 0b10 	vmov	d0, r0, r1
 800ff44:	b005      	add	sp, #20
 800ff46:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff4a:	4668      	mov	r0, sp
 800ff4c:	f000 f828 	bl	800ffa0 <__ieee754_rem_pio2>
 800ff50:	f000 0003 	and.w	r0, r0, #3
 800ff54:	2801      	cmp	r0, #1
 800ff56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff5a:	ed9d 0b00 	vldr	d0, [sp]
 800ff5e:	d004      	beq.n	800ff6a <sin+0x5a>
 800ff60:	2802      	cmp	r0, #2
 800ff62:	d005      	beq.n	800ff70 <sin+0x60>
 800ff64:	b970      	cbnz	r0, 800ff84 <sin+0x74>
 800ff66:	2001      	movs	r0, #1
 800ff68:	e7dd      	b.n	800ff26 <sin+0x16>
 800ff6a:	f000 fa0d 	bl	8010388 <__kernel_cos>
 800ff6e:	e7dc      	b.n	800ff2a <sin+0x1a>
 800ff70:	2001      	movs	r0, #1
 800ff72:	f000 fe11 	bl	8010b98 <__kernel_sin>
 800ff76:	ec53 2b10 	vmov	r2, r3, d0
 800ff7a:	ee10 0a10 	vmov	r0, s0
 800ff7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ff82:	e7dd      	b.n	800ff40 <sin+0x30>
 800ff84:	f000 fa00 	bl	8010388 <__kernel_cos>
 800ff88:	e7f5      	b.n	800ff76 <sin+0x66>
 800ff8a:	bf00      	nop
 800ff8c:	f3af 8000 	nop.w
	...
 800ff98:	3fe921fb 	.word	0x3fe921fb
 800ff9c:	7fefffff 	.word	0x7fefffff

0800ffa0 <__ieee754_rem_pio2>:
 800ffa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa4:	ec57 6b10 	vmov	r6, r7, d0
 800ffa8:	4bc3      	ldr	r3, [pc, #780]	; (80102b8 <__ieee754_rem_pio2+0x318>)
 800ffaa:	b08d      	sub	sp, #52	; 0x34
 800ffac:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ffb0:	4598      	cmp	r8, r3
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	9704      	str	r7, [sp, #16]
 800ffb6:	dc07      	bgt.n	800ffc8 <__ieee754_rem_pio2+0x28>
 800ffb8:	2200      	movs	r2, #0
 800ffba:	2300      	movs	r3, #0
 800ffbc:	ed84 0b00 	vstr	d0, [r4]
 800ffc0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ffc4:	2500      	movs	r5, #0
 800ffc6:	e027      	b.n	8010018 <__ieee754_rem_pio2+0x78>
 800ffc8:	4bbc      	ldr	r3, [pc, #752]	; (80102bc <__ieee754_rem_pio2+0x31c>)
 800ffca:	4598      	cmp	r8, r3
 800ffcc:	dc75      	bgt.n	80100ba <__ieee754_rem_pio2+0x11a>
 800ffce:	9b04      	ldr	r3, [sp, #16]
 800ffd0:	4dbb      	ldr	r5, [pc, #748]	; (80102c0 <__ieee754_rem_pio2+0x320>)
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	ee10 0a10 	vmov	r0, s0
 800ffd8:	a3a9      	add	r3, pc, #676	; (adr r3, 8010280 <__ieee754_rem_pio2+0x2e0>)
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	4639      	mov	r1, r7
 800ffe0:	dd36      	ble.n	8010050 <__ieee754_rem_pio2+0xb0>
 800ffe2:	f7f0 f959 	bl	8000298 <__aeabi_dsub>
 800ffe6:	45a8      	cmp	r8, r5
 800ffe8:	4606      	mov	r6, r0
 800ffea:	460f      	mov	r7, r1
 800ffec:	d018      	beq.n	8010020 <__ieee754_rem_pio2+0x80>
 800ffee:	a3a6      	add	r3, pc, #664	; (adr r3, 8010288 <__ieee754_rem_pio2+0x2e8>)
 800fff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff4:	f7f0 f950 	bl	8000298 <__aeabi_dsub>
 800fff8:	4602      	mov	r2, r0
 800fffa:	460b      	mov	r3, r1
 800fffc:	e9c4 2300 	strd	r2, r3, [r4]
 8010000:	4630      	mov	r0, r6
 8010002:	4639      	mov	r1, r7
 8010004:	f7f0 f948 	bl	8000298 <__aeabi_dsub>
 8010008:	a39f      	add	r3, pc, #636	; (adr r3, 8010288 <__ieee754_rem_pio2+0x2e8>)
 801000a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000e:	f7f0 f943 	bl	8000298 <__aeabi_dsub>
 8010012:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010016:	2501      	movs	r5, #1
 8010018:	4628      	mov	r0, r5
 801001a:	b00d      	add	sp, #52	; 0x34
 801001c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010020:	a39b      	add	r3, pc, #620	; (adr r3, 8010290 <__ieee754_rem_pio2+0x2f0>)
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	f7f0 f937 	bl	8000298 <__aeabi_dsub>
 801002a:	a39b      	add	r3, pc, #620	; (adr r3, 8010298 <__ieee754_rem_pio2+0x2f8>)
 801002c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010030:	4606      	mov	r6, r0
 8010032:	460f      	mov	r7, r1
 8010034:	f7f0 f930 	bl	8000298 <__aeabi_dsub>
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	e9c4 2300 	strd	r2, r3, [r4]
 8010040:	4630      	mov	r0, r6
 8010042:	4639      	mov	r1, r7
 8010044:	f7f0 f928 	bl	8000298 <__aeabi_dsub>
 8010048:	a393      	add	r3, pc, #588	; (adr r3, 8010298 <__ieee754_rem_pio2+0x2f8>)
 801004a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004e:	e7de      	b.n	801000e <__ieee754_rem_pio2+0x6e>
 8010050:	f7f0 f924 	bl	800029c <__adddf3>
 8010054:	45a8      	cmp	r8, r5
 8010056:	4606      	mov	r6, r0
 8010058:	460f      	mov	r7, r1
 801005a:	d016      	beq.n	801008a <__ieee754_rem_pio2+0xea>
 801005c:	a38a      	add	r3, pc, #552	; (adr r3, 8010288 <__ieee754_rem_pio2+0x2e8>)
 801005e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010062:	f7f0 f91b 	bl	800029c <__adddf3>
 8010066:	4602      	mov	r2, r0
 8010068:	460b      	mov	r3, r1
 801006a:	e9c4 2300 	strd	r2, r3, [r4]
 801006e:	4630      	mov	r0, r6
 8010070:	4639      	mov	r1, r7
 8010072:	f7f0 f911 	bl	8000298 <__aeabi_dsub>
 8010076:	a384      	add	r3, pc, #528	; (adr r3, 8010288 <__ieee754_rem_pio2+0x2e8>)
 8010078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007c:	f7f0 f90e 	bl	800029c <__adddf3>
 8010080:	f04f 35ff 	mov.w	r5, #4294967295
 8010084:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010088:	e7c6      	b.n	8010018 <__ieee754_rem_pio2+0x78>
 801008a:	a381      	add	r3, pc, #516	; (adr r3, 8010290 <__ieee754_rem_pio2+0x2f0>)
 801008c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010090:	f7f0 f904 	bl	800029c <__adddf3>
 8010094:	a380      	add	r3, pc, #512	; (adr r3, 8010298 <__ieee754_rem_pio2+0x2f8>)
 8010096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009a:	4606      	mov	r6, r0
 801009c:	460f      	mov	r7, r1
 801009e:	f7f0 f8fd 	bl	800029c <__adddf3>
 80100a2:	4602      	mov	r2, r0
 80100a4:	460b      	mov	r3, r1
 80100a6:	e9c4 2300 	strd	r2, r3, [r4]
 80100aa:	4630      	mov	r0, r6
 80100ac:	4639      	mov	r1, r7
 80100ae:	f7f0 f8f3 	bl	8000298 <__aeabi_dsub>
 80100b2:	a379      	add	r3, pc, #484	; (adr r3, 8010298 <__ieee754_rem_pio2+0x2f8>)
 80100b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b8:	e7e0      	b.n	801007c <__ieee754_rem_pio2+0xdc>
 80100ba:	4b82      	ldr	r3, [pc, #520]	; (80102c4 <__ieee754_rem_pio2+0x324>)
 80100bc:	4598      	cmp	r8, r3
 80100be:	f300 80d0 	bgt.w	8010262 <__ieee754_rem_pio2+0x2c2>
 80100c2:	f000 fe23 	bl	8010d0c <fabs>
 80100c6:	ec57 6b10 	vmov	r6, r7, d0
 80100ca:	ee10 0a10 	vmov	r0, s0
 80100ce:	a374      	add	r3, pc, #464	; (adr r3, 80102a0 <__ieee754_rem_pio2+0x300>)
 80100d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d4:	4639      	mov	r1, r7
 80100d6:	f7f0 fa97 	bl	8000608 <__aeabi_dmul>
 80100da:	2200      	movs	r2, #0
 80100dc:	4b7a      	ldr	r3, [pc, #488]	; (80102c8 <__ieee754_rem_pio2+0x328>)
 80100de:	f7f0 f8dd 	bl	800029c <__adddf3>
 80100e2:	f7f0 fd2b 	bl	8000b3c <__aeabi_d2iz>
 80100e6:	4605      	mov	r5, r0
 80100e8:	f7f0 fa24 	bl	8000534 <__aeabi_i2d>
 80100ec:	a364      	add	r3, pc, #400	; (adr r3, 8010280 <__ieee754_rem_pio2+0x2e0>)
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100f6:	f7f0 fa87 	bl	8000608 <__aeabi_dmul>
 80100fa:	4602      	mov	r2, r0
 80100fc:	460b      	mov	r3, r1
 80100fe:	4630      	mov	r0, r6
 8010100:	4639      	mov	r1, r7
 8010102:	f7f0 f8c9 	bl	8000298 <__aeabi_dsub>
 8010106:	a360      	add	r3, pc, #384	; (adr r3, 8010288 <__ieee754_rem_pio2+0x2e8>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	4682      	mov	sl, r0
 801010e:	468b      	mov	fp, r1
 8010110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010114:	f7f0 fa78 	bl	8000608 <__aeabi_dmul>
 8010118:	2d1f      	cmp	r5, #31
 801011a:	4606      	mov	r6, r0
 801011c:	460f      	mov	r7, r1
 801011e:	dc0c      	bgt.n	801013a <__ieee754_rem_pio2+0x19a>
 8010120:	1e6a      	subs	r2, r5, #1
 8010122:	4b6a      	ldr	r3, [pc, #424]	; (80102cc <__ieee754_rem_pio2+0x32c>)
 8010124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010128:	4543      	cmp	r3, r8
 801012a:	d006      	beq.n	801013a <__ieee754_rem_pio2+0x19a>
 801012c:	4632      	mov	r2, r6
 801012e:	463b      	mov	r3, r7
 8010130:	4650      	mov	r0, sl
 8010132:	4659      	mov	r1, fp
 8010134:	f7f0 f8b0 	bl	8000298 <__aeabi_dsub>
 8010138:	e00e      	b.n	8010158 <__ieee754_rem_pio2+0x1b8>
 801013a:	4632      	mov	r2, r6
 801013c:	463b      	mov	r3, r7
 801013e:	4650      	mov	r0, sl
 8010140:	4659      	mov	r1, fp
 8010142:	f7f0 f8a9 	bl	8000298 <__aeabi_dsub>
 8010146:	ea4f 5328 	mov.w	r3, r8, asr #20
 801014a:	9305      	str	r3, [sp, #20]
 801014c:	9a05      	ldr	r2, [sp, #20]
 801014e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010152:	1ad3      	subs	r3, r2, r3
 8010154:	2b10      	cmp	r3, #16
 8010156:	dc02      	bgt.n	801015e <__ieee754_rem_pio2+0x1be>
 8010158:	e9c4 0100 	strd	r0, r1, [r4]
 801015c:	e039      	b.n	80101d2 <__ieee754_rem_pio2+0x232>
 801015e:	a34c      	add	r3, pc, #304	; (adr r3, 8010290 <__ieee754_rem_pio2+0x2f0>)
 8010160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010168:	f7f0 fa4e 	bl	8000608 <__aeabi_dmul>
 801016c:	4606      	mov	r6, r0
 801016e:	460f      	mov	r7, r1
 8010170:	4602      	mov	r2, r0
 8010172:	460b      	mov	r3, r1
 8010174:	4650      	mov	r0, sl
 8010176:	4659      	mov	r1, fp
 8010178:	f7f0 f88e 	bl	8000298 <__aeabi_dsub>
 801017c:	4602      	mov	r2, r0
 801017e:	460b      	mov	r3, r1
 8010180:	4680      	mov	r8, r0
 8010182:	4689      	mov	r9, r1
 8010184:	4650      	mov	r0, sl
 8010186:	4659      	mov	r1, fp
 8010188:	f7f0 f886 	bl	8000298 <__aeabi_dsub>
 801018c:	4632      	mov	r2, r6
 801018e:	463b      	mov	r3, r7
 8010190:	f7f0 f882 	bl	8000298 <__aeabi_dsub>
 8010194:	a340      	add	r3, pc, #256	; (adr r3, 8010298 <__ieee754_rem_pio2+0x2f8>)
 8010196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019a:	4606      	mov	r6, r0
 801019c:	460f      	mov	r7, r1
 801019e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101a2:	f7f0 fa31 	bl	8000608 <__aeabi_dmul>
 80101a6:	4632      	mov	r2, r6
 80101a8:	463b      	mov	r3, r7
 80101aa:	f7f0 f875 	bl	8000298 <__aeabi_dsub>
 80101ae:	4602      	mov	r2, r0
 80101b0:	460b      	mov	r3, r1
 80101b2:	4606      	mov	r6, r0
 80101b4:	460f      	mov	r7, r1
 80101b6:	4640      	mov	r0, r8
 80101b8:	4649      	mov	r1, r9
 80101ba:	f7f0 f86d 	bl	8000298 <__aeabi_dsub>
 80101be:	9a05      	ldr	r2, [sp, #20]
 80101c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80101c4:	1ad3      	subs	r3, r2, r3
 80101c6:	2b31      	cmp	r3, #49	; 0x31
 80101c8:	dc20      	bgt.n	801020c <__ieee754_rem_pio2+0x26c>
 80101ca:	e9c4 0100 	strd	r0, r1, [r4]
 80101ce:	46c2      	mov	sl, r8
 80101d0:	46cb      	mov	fp, r9
 80101d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80101d6:	4650      	mov	r0, sl
 80101d8:	4642      	mov	r2, r8
 80101da:	464b      	mov	r3, r9
 80101dc:	4659      	mov	r1, fp
 80101de:	f7f0 f85b 	bl	8000298 <__aeabi_dsub>
 80101e2:	463b      	mov	r3, r7
 80101e4:	4632      	mov	r2, r6
 80101e6:	f7f0 f857 	bl	8000298 <__aeabi_dsub>
 80101ea:	9b04      	ldr	r3, [sp, #16]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80101f2:	f6bf af11 	bge.w	8010018 <__ieee754_rem_pio2+0x78>
 80101f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80101fa:	6063      	str	r3, [r4, #4]
 80101fc:	f8c4 8000 	str.w	r8, [r4]
 8010200:	60a0      	str	r0, [r4, #8]
 8010202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010206:	60e3      	str	r3, [r4, #12]
 8010208:	426d      	negs	r5, r5
 801020a:	e705      	b.n	8010018 <__ieee754_rem_pio2+0x78>
 801020c:	a326      	add	r3, pc, #152	; (adr r3, 80102a8 <__ieee754_rem_pio2+0x308>)
 801020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010216:	f7f0 f9f7 	bl	8000608 <__aeabi_dmul>
 801021a:	4606      	mov	r6, r0
 801021c:	460f      	mov	r7, r1
 801021e:	4602      	mov	r2, r0
 8010220:	460b      	mov	r3, r1
 8010222:	4640      	mov	r0, r8
 8010224:	4649      	mov	r1, r9
 8010226:	f7f0 f837 	bl	8000298 <__aeabi_dsub>
 801022a:	4602      	mov	r2, r0
 801022c:	460b      	mov	r3, r1
 801022e:	4682      	mov	sl, r0
 8010230:	468b      	mov	fp, r1
 8010232:	4640      	mov	r0, r8
 8010234:	4649      	mov	r1, r9
 8010236:	f7f0 f82f 	bl	8000298 <__aeabi_dsub>
 801023a:	4632      	mov	r2, r6
 801023c:	463b      	mov	r3, r7
 801023e:	f7f0 f82b 	bl	8000298 <__aeabi_dsub>
 8010242:	a31b      	add	r3, pc, #108	; (adr r3, 80102b0 <__ieee754_rem_pio2+0x310>)
 8010244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010248:	4606      	mov	r6, r0
 801024a:	460f      	mov	r7, r1
 801024c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010250:	f7f0 f9da 	bl	8000608 <__aeabi_dmul>
 8010254:	4632      	mov	r2, r6
 8010256:	463b      	mov	r3, r7
 8010258:	f7f0 f81e 	bl	8000298 <__aeabi_dsub>
 801025c:	4606      	mov	r6, r0
 801025e:	460f      	mov	r7, r1
 8010260:	e764      	b.n	801012c <__ieee754_rem_pio2+0x18c>
 8010262:	4b1b      	ldr	r3, [pc, #108]	; (80102d0 <__ieee754_rem_pio2+0x330>)
 8010264:	4598      	cmp	r8, r3
 8010266:	dd35      	ble.n	80102d4 <__ieee754_rem_pio2+0x334>
 8010268:	ee10 2a10 	vmov	r2, s0
 801026c:	463b      	mov	r3, r7
 801026e:	4630      	mov	r0, r6
 8010270:	4639      	mov	r1, r7
 8010272:	f7f0 f811 	bl	8000298 <__aeabi_dsub>
 8010276:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801027a:	e9c4 0100 	strd	r0, r1, [r4]
 801027e:	e6a1      	b.n	800ffc4 <__ieee754_rem_pio2+0x24>
 8010280:	54400000 	.word	0x54400000
 8010284:	3ff921fb 	.word	0x3ff921fb
 8010288:	1a626331 	.word	0x1a626331
 801028c:	3dd0b461 	.word	0x3dd0b461
 8010290:	1a600000 	.word	0x1a600000
 8010294:	3dd0b461 	.word	0x3dd0b461
 8010298:	2e037073 	.word	0x2e037073
 801029c:	3ba3198a 	.word	0x3ba3198a
 80102a0:	6dc9c883 	.word	0x6dc9c883
 80102a4:	3fe45f30 	.word	0x3fe45f30
 80102a8:	2e000000 	.word	0x2e000000
 80102ac:	3ba3198a 	.word	0x3ba3198a
 80102b0:	252049c1 	.word	0x252049c1
 80102b4:	397b839a 	.word	0x397b839a
 80102b8:	3fe921fb 	.word	0x3fe921fb
 80102bc:	4002d97b 	.word	0x4002d97b
 80102c0:	3ff921fb 	.word	0x3ff921fb
 80102c4:	413921fb 	.word	0x413921fb
 80102c8:	3fe00000 	.word	0x3fe00000
 80102cc:	08011a50 	.word	0x08011a50
 80102d0:	7fefffff 	.word	0x7fefffff
 80102d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80102d8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80102dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80102e0:	4630      	mov	r0, r6
 80102e2:	460f      	mov	r7, r1
 80102e4:	f7f0 fc2a 	bl	8000b3c <__aeabi_d2iz>
 80102e8:	f7f0 f924 	bl	8000534 <__aeabi_i2d>
 80102ec:	4602      	mov	r2, r0
 80102ee:	460b      	mov	r3, r1
 80102f0:	4630      	mov	r0, r6
 80102f2:	4639      	mov	r1, r7
 80102f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80102f8:	f7ef ffce 	bl	8000298 <__aeabi_dsub>
 80102fc:	2200      	movs	r2, #0
 80102fe:	4b1f      	ldr	r3, [pc, #124]	; (801037c <__ieee754_rem_pio2+0x3dc>)
 8010300:	f7f0 f982 	bl	8000608 <__aeabi_dmul>
 8010304:	460f      	mov	r7, r1
 8010306:	4606      	mov	r6, r0
 8010308:	f7f0 fc18 	bl	8000b3c <__aeabi_d2iz>
 801030c:	f7f0 f912 	bl	8000534 <__aeabi_i2d>
 8010310:	4602      	mov	r2, r0
 8010312:	460b      	mov	r3, r1
 8010314:	4630      	mov	r0, r6
 8010316:	4639      	mov	r1, r7
 8010318:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801031c:	f7ef ffbc 	bl	8000298 <__aeabi_dsub>
 8010320:	2200      	movs	r2, #0
 8010322:	4b16      	ldr	r3, [pc, #88]	; (801037c <__ieee754_rem_pio2+0x3dc>)
 8010324:	f7f0 f970 	bl	8000608 <__aeabi_dmul>
 8010328:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801032c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8010330:	f04f 0803 	mov.w	r8, #3
 8010334:	2600      	movs	r6, #0
 8010336:	2700      	movs	r7, #0
 8010338:	4632      	mov	r2, r6
 801033a:	463b      	mov	r3, r7
 801033c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010340:	f108 3aff 	add.w	sl, r8, #4294967295
 8010344:	f7f0 fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8010348:	b9b0      	cbnz	r0, 8010378 <__ieee754_rem_pio2+0x3d8>
 801034a:	4b0d      	ldr	r3, [pc, #52]	; (8010380 <__ieee754_rem_pio2+0x3e0>)
 801034c:	9301      	str	r3, [sp, #4]
 801034e:	2302      	movs	r3, #2
 8010350:	9300      	str	r3, [sp, #0]
 8010352:	462a      	mov	r2, r5
 8010354:	4643      	mov	r3, r8
 8010356:	4621      	mov	r1, r4
 8010358:	a806      	add	r0, sp, #24
 801035a:	f000 f8dd 	bl	8010518 <__kernel_rem_pio2>
 801035e:	9b04      	ldr	r3, [sp, #16]
 8010360:	2b00      	cmp	r3, #0
 8010362:	4605      	mov	r5, r0
 8010364:	f6bf ae58 	bge.w	8010018 <__ieee754_rem_pio2+0x78>
 8010368:	6863      	ldr	r3, [r4, #4]
 801036a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801036e:	6063      	str	r3, [r4, #4]
 8010370:	68e3      	ldr	r3, [r4, #12]
 8010372:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010376:	e746      	b.n	8010206 <__ieee754_rem_pio2+0x266>
 8010378:	46d0      	mov	r8, sl
 801037a:	e7dd      	b.n	8010338 <__ieee754_rem_pio2+0x398>
 801037c:	41700000 	.word	0x41700000
 8010380:	08011ad0 	.word	0x08011ad0
 8010384:	00000000 	.word	0x00000000

08010388 <__kernel_cos>:
 8010388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801038c:	ec59 8b10 	vmov	r8, r9, d0
 8010390:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8010394:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8010398:	ed2d 8b02 	vpush	{d8}
 801039c:	eeb0 8a41 	vmov.f32	s16, s2
 80103a0:	eef0 8a61 	vmov.f32	s17, s3
 80103a4:	da07      	bge.n	80103b6 <__kernel_cos+0x2e>
 80103a6:	ee10 0a10 	vmov	r0, s0
 80103aa:	4649      	mov	r1, r9
 80103ac:	f7f0 fbc6 	bl	8000b3c <__aeabi_d2iz>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	f000 8089 	beq.w	80104c8 <__kernel_cos+0x140>
 80103b6:	4642      	mov	r2, r8
 80103b8:	464b      	mov	r3, r9
 80103ba:	4640      	mov	r0, r8
 80103bc:	4649      	mov	r1, r9
 80103be:	f7f0 f923 	bl	8000608 <__aeabi_dmul>
 80103c2:	2200      	movs	r2, #0
 80103c4:	4b4e      	ldr	r3, [pc, #312]	; (8010500 <__kernel_cos+0x178>)
 80103c6:	4604      	mov	r4, r0
 80103c8:	460d      	mov	r5, r1
 80103ca:	f7f0 f91d 	bl	8000608 <__aeabi_dmul>
 80103ce:	a340      	add	r3, pc, #256	; (adr r3, 80104d0 <__kernel_cos+0x148>)
 80103d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d4:	4682      	mov	sl, r0
 80103d6:	468b      	mov	fp, r1
 80103d8:	4620      	mov	r0, r4
 80103da:	4629      	mov	r1, r5
 80103dc:	f7f0 f914 	bl	8000608 <__aeabi_dmul>
 80103e0:	a33d      	add	r3, pc, #244	; (adr r3, 80104d8 <__kernel_cos+0x150>)
 80103e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e6:	f7ef ff59 	bl	800029c <__adddf3>
 80103ea:	4622      	mov	r2, r4
 80103ec:	462b      	mov	r3, r5
 80103ee:	f7f0 f90b 	bl	8000608 <__aeabi_dmul>
 80103f2:	a33b      	add	r3, pc, #236	; (adr r3, 80104e0 <__kernel_cos+0x158>)
 80103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f8:	f7ef ff4e 	bl	8000298 <__aeabi_dsub>
 80103fc:	4622      	mov	r2, r4
 80103fe:	462b      	mov	r3, r5
 8010400:	f7f0 f902 	bl	8000608 <__aeabi_dmul>
 8010404:	a338      	add	r3, pc, #224	; (adr r3, 80104e8 <__kernel_cos+0x160>)
 8010406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040a:	f7ef ff47 	bl	800029c <__adddf3>
 801040e:	4622      	mov	r2, r4
 8010410:	462b      	mov	r3, r5
 8010412:	f7f0 f8f9 	bl	8000608 <__aeabi_dmul>
 8010416:	a336      	add	r3, pc, #216	; (adr r3, 80104f0 <__kernel_cos+0x168>)
 8010418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041c:	f7ef ff3c 	bl	8000298 <__aeabi_dsub>
 8010420:	4622      	mov	r2, r4
 8010422:	462b      	mov	r3, r5
 8010424:	f7f0 f8f0 	bl	8000608 <__aeabi_dmul>
 8010428:	a333      	add	r3, pc, #204	; (adr r3, 80104f8 <__kernel_cos+0x170>)
 801042a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042e:	f7ef ff35 	bl	800029c <__adddf3>
 8010432:	4622      	mov	r2, r4
 8010434:	462b      	mov	r3, r5
 8010436:	f7f0 f8e7 	bl	8000608 <__aeabi_dmul>
 801043a:	4622      	mov	r2, r4
 801043c:	462b      	mov	r3, r5
 801043e:	f7f0 f8e3 	bl	8000608 <__aeabi_dmul>
 8010442:	ec53 2b18 	vmov	r2, r3, d8
 8010446:	4604      	mov	r4, r0
 8010448:	460d      	mov	r5, r1
 801044a:	4640      	mov	r0, r8
 801044c:	4649      	mov	r1, r9
 801044e:	f7f0 f8db 	bl	8000608 <__aeabi_dmul>
 8010452:	460b      	mov	r3, r1
 8010454:	4602      	mov	r2, r0
 8010456:	4629      	mov	r1, r5
 8010458:	4620      	mov	r0, r4
 801045a:	f7ef ff1d 	bl	8000298 <__aeabi_dsub>
 801045e:	4b29      	ldr	r3, [pc, #164]	; (8010504 <__kernel_cos+0x17c>)
 8010460:	429e      	cmp	r6, r3
 8010462:	4680      	mov	r8, r0
 8010464:	4689      	mov	r9, r1
 8010466:	dc11      	bgt.n	801048c <__kernel_cos+0x104>
 8010468:	4602      	mov	r2, r0
 801046a:	460b      	mov	r3, r1
 801046c:	4650      	mov	r0, sl
 801046e:	4659      	mov	r1, fp
 8010470:	f7ef ff12 	bl	8000298 <__aeabi_dsub>
 8010474:	460b      	mov	r3, r1
 8010476:	4924      	ldr	r1, [pc, #144]	; (8010508 <__kernel_cos+0x180>)
 8010478:	4602      	mov	r2, r0
 801047a:	2000      	movs	r0, #0
 801047c:	f7ef ff0c 	bl	8000298 <__aeabi_dsub>
 8010480:	ecbd 8b02 	vpop	{d8}
 8010484:	ec41 0b10 	vmov	d0, r0, r1
 8010488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048c:	4b1f      	ldr	r3, [pc, #124]	; (801050c <__kernel_cos+0x184>)
 801048e:	491e      	ldr	r1, [pc, #120]	; (8010508 <__kernel_cos+0x180>)
 8010490:	429e      	cmp	r6, r3
 8010492:	bfcc      	ite	gt
 8010494:	4d1e      	ldrgt	r5, [pc, #120]	; (8010510 <__kernel_cos+0x188>)
 8010496:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801049a:	2400      	movs	r4, #0
 801049c:	4622      	mov	r2, r4
 801049e:	462b      	mov	r3, r5
 80104a0:	2000      	movs	r0, #0
 80104a2:	f7ef fef9 	bl	8000298 <__aeabi_dsub>
 80104a6:	4622      	mov	r2, r4
 80104a8:	4606      	mov	r6, r0
 80104aa:	460f      	mov	r7, r1
 80104ac:	462b      	mov	r3, r5
 80104ae:	4650      	mov	r0, sl
 80104b0:	4659      	mov	r1, fp
 80104b2:	f7ef fef1 	bl	8000298 <__aeabi_dsub>
 80104b6:	4642      	mov	r2, r8
 80104b8:	464b      	mov	r3, r9
 80104ba:	f7ef feed 	bl	8000298 <__aeabi_dsub>
 80104be:	4602      	mov	r2, r0
 80104c0:	460b      	mov	r3, r1
 80104c2:	4630      	mov	r0, r6
 80104c4:	4639      	mov	r1, r7
 80104c6:	e7d9      	b.n	801047c <__kernel_cos+0xf4>
 80104c8:	2000      	movs	r0, #0
 80104ca:	490f      	ldr	r1, [pc, #60]	; (8010508 <__kernel_cos+0x180>)
 80104cc:	e7d8      	b.n	8010480 <__kernel_cos+0xf8>
 80104ce:	bf00      	nop
 80104d0:	be8838d4 	.word	0xbe8838d4
 80104d4:	bda8fae9 	.word	0xbda8fae9
 80104d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80104dc:	3e21ee9e 	.word	0x3e21ee9e
 80104e0:	809c52ad 	.word	0x809c52ad
 80104e4:	3e927e4f 	.word	0x3e927e4f
 80104e8:	19cb1590 	.word	0x19cb1590
 80104ec:	3efa01a0 	.word	0x3efa01a0
 80104f0:	16c15177 	.word	0x16c15177
 80104f4:	3f56c16c 	.word	0x3f56c16c
 80104f8:	5555554c 	.word	0x5555554c
 80104fc:	3fa55555 	.word	0x3fa55555
 8010500:	3fe00000 	.word	0x3fe00000
 8010504:	3fd33332 	.word	0x3fd33332
 8010508:	3ff00000 	.word	0x3ff00000
 801050c:	3fe90000 	.word	0x3fe90000
 8010510:	3fd20000 	.word	0x3fd20000
 8010514:	00000000 	.word	0x00000000

08010518 <__kernel_rem_pio2>:
 8010518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051c:	ed2d 8b02 	vpush	{d8}
 8010520:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8010524:	1ed4      	subs	r4, r2, #3
 8010526:	9308      	str	r3, [sp, #32]
 8010528:	9101      	str	r1, [sp, #4]
 801052a:	4bc5      	ldr	r3, [pc, #788]	; (8010840 <__kernel_rem_pio2+0x328>)
 801052c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801052e:	9009      	str	r0, [sp, #36]	; 0x24
 8010530:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010534:	9304      	str	r3, [sp, #16]
 8010536:	9b08      	ldr	r3, [sp, #32]
 8010538:	3b01      	subs	r3, #1
 801053a:	9307      	str	r3, [sp, #28]
 801053c:	2318      	movs	r3, #24
 801053e:	fb94 f4f3 	sdiv	r4, r4, r3
 8010542:	f06f 0317 	mvn.w	r3, #23
 8010546:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801054a:	fb04 3303 	mla	r3, r4, r3, r3
 801054e:	eb03 0a02 	add.w	sl, r3, r2
 8010552:	9b04      	ldr	r3, [sp, #16]
 8010554:	9a07      	ldr	r2, [sp, #28]
 8010556:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010830 <__kernel_rem_pio2+0x318>
 801055a:	eb03 0802 	add.w	r8, r3, r2
 801055e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010560:	1aa7      	subs	r7, r4, r2
 8010562:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010566:	ae22      	add	r6, sp, #136	; 0x88
 8010568:	2500      	movs	r5, #0
 801056a:	4545      	cmp	r5, r8
 801056c:	dd13      	ble.n	8010596 <__kernel_rem_pio2+0x7e>
 801056e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8010830 <__kernel_rem_pio2+0x318>
 8010572:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8010576:	2600      	movs	r6, #0
 8010578:	9b04      	ldr	r3, [sp, #16]
 801057a:	429e      	cmp	r6, r3
 801057c:	dc32      	bgt.n	80105e4 <__kernel_rem_pio2+0xcc>
 801057e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010580:	9302      	str	r3, [sp, #8]
 8010582:	9b08      	ldr	r3, [sp, #32]
 8010584:	199d      	adds	r5, r3, r6
 8010586:	ab22      	add	r3, sp, #136	; 0x88
 8010588:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801058c:	9306      	str	r3, [sp, #24]
 801058e:	ec59 8b18 	vmov	r8, r9, d8
 8010592:	2700      	movs	r7, #0
 8010594:	e01f      	b.n	80105d6 <__kernel_rem_pio2+0xbe>
 8010596:	42ef      	cmn	r7, r5
 8010598:	d407      	bmi.n	80105aa <__kernel_rem_pio2+0x92>
 801059a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801059e:	f7ef ffc9 	bl	8000534 <__aeabi_i2d>
 80105a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80105a6:	3501      	adds	r5, #1
 80105a8:	e7df      	b.n	801056a <__kernel_rem_pio2+0x52>
 80105aa:	ec51 0b18 	vmov	r0, r1, d8
 80105ae:	e7f8      	b.n	80105a2 <__kernel_rem_pio2+0x8a>
 80105b0:	9906      	ldr	r1, [sp, #24]
 80105b2:	9d02      	ldr	r5, [sp, #8]
 80105b4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80105b8:	9106      	str	r1, [sp, #24]
 80105ba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80105be:	9502      	str	r5, [sp, #8]
 80105c0:	f7f0 f822 	bl	8000608 <__aeabi_dmul>
 80105c4:	4602      	mov	r2, r0
 80105c6:	460b      	mov	r3, r1
 80105c8:	4640      	mov	r0, r8
 80105ca:	4649      	mov	r1, r9
 80105cc:	f7ef fe66 	bl	800029c <__adddf3>
 80105d0:	3701      	adds	r7, #1
 80105d2:	4680      	mov	r8, r0
 80105d4:	4689      	mov	r9, r1
 80105d6:	9b07      	ldr	r3, [sp, #28]
 80105d8:	429f      	cmp	r7, r3
 80105da:	dde9      	ble.n	80105b0 <__kernel_rem_pio2+0x98>
 80105dc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80105e0:	3601      	adds	r6, #1
 80105e2:	e7c9      	b.n	8010578 <__kernel_rem_pio2+0x60>
 80105e4:	9b04      	ldr	r3, [sp, #16]
 80105e6:	aa0e      	add	r2, sp, #56	; 0x38
 80105e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80105ec:	930c      	str	r3, [sp, #48]	; 0x30
 80105ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80105f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80105f4:	9c04      	ldr	r4, [sp, #16]
 80105f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80105f8:	ab9a      	add	r3, sp, #616	; 0x268
 80105fa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80105fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010602:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010606:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801060a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801060e:	ab9a      	add	r3, sp, #616	; 0x268
 8010610:	445b      	add	r3, fp
 8010612:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8010616:	2500      	movs	r5, #0
 8010618:	1b63      	subs	r3, r4, r5
 801061a:	2b00      	cmp	r3, #0
 801061c:	dc78      	bgt.n	8010710 <__kernel_rem_pio2+0x1f8>
 801061e:	4650      	mov	r0, sl
 8010620:	ec49 8b10 	vmov	d0, r8, r9
 8010624:	f000 fc00 	bl	8010e28 <scalbn>
 8010628:	ec57 6b10 	vmov	r6, r7, d0
 801062c:	2200      	movs	r2, #0
 801062e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010632:	ee10 0a10 	vmov	r0, s0
 8010636:	4639      	mov	r1, r7
 8010638:	f7ef ffe6 	bl	8000608 <__aeabi_dmul>
 801063c:	ec41 0b10 	vmov	d0, r0, r1
 8010640:	f000 fb6e 	bl	8010d20 <floor>
 8010644:	2200      	movs	r2, #0
 8010646:	ec51 0b10 	vmov	r0, r1, d0
 801064a:	4b7e      	ldr	r3, [pc, #504]	; (8010844 <__kernel_rem_pio2+0x32c>)
 801064c:	f7ef ffdc 	bl	8000608 <__aeabi_dmul>
 8010650:	4602      	mov	r2, r0
 8010652:	460b      	mov	r3, r1
 8010654:	4630      	mov	r0, r6
 8010656:	4639      	mov	r1, r7
 8010658:	f7ef fe1e 	bl	8000298 <__aeabi_dsub>
 801065c:	460f      	mov	r7, r1
 801065e:	4606      	mov	r6, r0
 8010660:	f7f0 fa6c 	bl	8000b3c <__aeabi_d2iz>
 8010664:	9006      	str	r0, [sp, #24]
 8010666:	f7ef ff65 	bl	8000534 <__aeabi_i2d>
 801066a:	4602      	mov	r2, r0
 801066c:	460b      	mov	r3, r1
 801066e:	4630      	mov	r0, r6
 8010670:	4639      	mov	r1, r7
 8010672:	f7ef fe11 	bl	8000298 <__aeabi_dsub>
 8010676:	f1ba 0f00 	cmp.w	sl, #0
 801067a:	4606      	mov	r6, r0
 801067c:	460f      	mov	r7, r1
 801067e:	dd6c      	ble.n	801075a <__kernel_rem_pio2+0x242>
 8010680:	1e62      	subs	r2, r4, #1
 8010682:	ab0e      	add	r3, sp, #56	; 0x38
 8010684:	f1ca 0118 	rsb	r1, sl, #24
 8010688:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801068c:	9d06      	ldr	r5, [sp, #24]
 801068e:	fa40 f301 	asr.w	r3, r0, r1
 8010692:	441d      	add	r5, r3
 8010694:	408b      	lsls	r3, r1
 8010696:	1ac0      	subs	r0, r0, r3
 8010698:	ab0e      	add	r3, sp, #56	; 0x38
 801069a:	9506      	str	r5, [sp, #24]
 801069c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80106a0:	f1ca 0317 	rsb	r3, sl, #23
 80106a4:	fa40 f303 	asr.w	r3, r0, r3
 80106a8:	9302      	str	r3, [sp, #8]
 80106aa:	9b02      	ldr	r3, [sp, #8]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	dd62      	ble.n	8010776 <__kernel_rem_pio2+0x25e>
 80106b0:	9b06      	ldr	r3, [sp, #24]
 80106b2:	2200      	movs	r2, #0
 80106b4:	3301      	adds	r3, #1
 80106b6:	9306      	str	r3, [sp, #24]
 80106b8:	4615      	mov	r5, r2
 80106ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80106be:	4294      	cmp	r4, r2
 80106c0:	f300 8095 	bgt.w	80107ee <__kernel_rem_pio2+0x2d6>
 80106c4:	f1ba 0f00 	cmp.w	sl, #0
 80106c8:	dd07      	ble.n	80106da <__kernel_rem_pio2+0x1c2>
 80106ca:	f1ba 0f01 	cmp.w	sl, #1
 80106ce:	f000 80a2 	beq.w	8010816 <__kernel_rem_pio2+0x2fe>
 80106d2:	f1ba 0f02 	cmp.w	sl, #2
 80106d6:	f000 80c1 	beq.w	801085c <__kernel_rem_pio2+0x344>
 80106da:	9b02      	ldr	r3, [sp, #8]
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d14a      	bne.n	8010776 <__kernel_rem_pio2+0x25e>
 80106e0:	4632      	mov	r2, r6
 80106e2:	463b      	mov	r3, r7
 80106e4:	2000      	movs	r0, #0
 80106e6:	4958      	ldr	r1, [pc, #352]	; (8010848 <__kernel_rem_pio2+0x330>)
 80106e8:	f7ef fdd6 	bl	8000298 <__aeabi_dsub>
 80106ec:	4606      	mov	r6, r0
 80106ee:	460f      	mov	r7, r1
 80106f0:	2d00      	cmp	r5, #0
 80106f2:	d040      	beq.n	8010776 <__kernel_rem_pio2+0x25e>
 80106f4:	4650      	mov	r0, sl
 80106f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010838 <__kernel_rem_pio2+0x320>
 80106fa:	f000 fb95 	bl	8010e28 <scalbn>
 80106fe:	4630      	mov	r0, r6
 8010700:	4639      	mov	r1, r7
 8010702:	ec53 2b10 	vmov	r2, r3, d0
 8010706:	f7ef fdc7 	bl	8000298 <__aeabi_dsub>
 801070a:	4606      	mov	r6, r0
 801070c:	460f      	mov	r7, r1
 801070e:	e032      	b.n	8010776 <__kernel_rem_pio2+0x25e>
 8010710:	2200      	movs	r2, #0
 8010712:	4b4e      	ldr	r3, [pc, #312]	; (801084c <__kernel_rem_pio2+0x334>)
 8010714:	4640      	mov	r0, r8
 8010716:	4649      	mov	r1, r9
 8010718:	f7ef ff76 	bl	8000608 <__aeabi_dmul>
 801071c:	f7f0 fa0e 	bl	8000b3c <__aeabi_d2iz>
 8010720:	f7ef ff08 	bl	8000534 <__aeabi_i2d>
 8010724:	2200      	movs	r2, #0
 8010726:	4b4a      	ldr	r3, [pc, #296]	; (8010850 <__kernel_rem_pio2+0x338>)
 8010728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801072c:	f7ef ff6c 	bl	8000608 <__aeabi_dmul>
 8010730:	4602      	mov	r2, r0
 8010732:	460b      	mov	r3, r1
 8010734:	4640      	mov	r0, r8
 8010736:	4649      	mov	r1, r9
 8010738:	f7ef fdae 	bl	8000298 <__aeabi_dsub>
 801073c:	f7f0 f9fe 	bl	8000b3c <__aeabi_d2iz>
 8010740:	ab0e      	add	r3, sp, #56	; 0x38
 8010742:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8010746:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801074a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801074e:	f7ef fda5 	bl	800029c <__adddf3>
 8010752:	3501      	adds	r5, #1
 8010754:	4680      	mov	r8, r0
 8010756:	4689      	mov	r9, r1
 8010758:	e75e      	b.n	8010618 <__kernel_rem_pio2+0x100>
 801075a:	d105      	bne.n	8010768 <__kernel_rem_pio2+0x250>
 801075c:	1e63      	subs	r3, r4, #1
 801075e:	aa0e      	add	r2, sp, #56	; 0x38
 8010760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010764:	15c3      	asrs	r3, r0, #23
 8010766:	e79f      	b.n	80106a8 <__kernel_rem_pio2+0x190>
 8010768:	2200      	movs	r2, #0
 801076a:	4b3a      	ldr	r3, [pc, #232]	; (8010854 <__kernel_rem_pio2+0x33c>)
 801076c:	f7f0 f9d2 	bl	8000b14 <__aeabi_dcmpge>
 8010770:	2800      	cmp	r0, #0
 8010772:	d139      	bne.n	80107e8 <__kernel_rem_pio2+0x2d0>
 8010774:	9002      	str	r0, [sp, #8]
 8010776:	2200      	movs	r2, #0
 8010778:	2300      	movs	r3, #0
 801077a:	4630      	mov	r0, r6
 801077c:	4639      	mov	r1, r7
 801077e:	f7f0 f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8010782:	2800      	cmp	r0, #0
 8010784:	f000 80c7 	beq.w	8010916 <__kernel_rem_pio2+0x3fe>
 8010788:	1e65      	subs	r5, r4, #1
 801078a:	462b      	mov	r3, r5
 801078c:	2200      	movs	r2, #0
 801078e:	9904      	ldr	r1, [sp, #16]
 8010790:	428b      	cmp	r3, r1
 8010792:	da6a      	bge.n	801086a <__kernel_rem_pio2+0x352>
 8010794:	2a00      	cmp	r2, #0
 8010796:	f000 8088 	beq.w	80108aa <__kernel_rem_pio2+0x392>
 801079a:	ab0e      	add	r3, sp, #56	; 0x38
 801079c:	f1aa 0a18 	sub.w	sl, sl, #24
 80107a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	f000 80b4 	beq.w	8010912 <__kernel_rem_pio2+0x3fa>
 80107aa:	4650      	mov	r0, sl
 80107ac:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8010838 <__kernel_rem_pio2+0x320>
 80107b0:	f000 fb3a 	bl	8010e28 <scalbn>
 80107b4:	00ec      	lsls	r4, r5, #3
 80107b6:	ab72      	add	r3, sp, #456	; 0x1c8
 80107b8:	191e      	adds	r6, r3, r4
 80107ba:	ec59 8b10 	vmov	r8, r9, d0
 80107be:	f106 0a08 	add.w	sl, r6, #8
 80107c2:	462f      	mov	r7, r5
 80107c4:	2f00      	cmp	r7, #0
 80107c6:	f280 80df 	bge.w	8010988 <__kernel_rem_pio2+0x470>
 80107ca:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8010830 <__kernel_rem_pio2+0x318>
 80107ce:	f04f 0a00 	mov.w	sl, #0
 80107d2:	eba5 030a 	sub.w	r3, r5, sl
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f2c0 810a 	blt.w	80109f0 <__kernel_rem_pio2+0x4d8>
 80107dc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8010858 <__kernel_rem_pio2+0x340>
 80107e0:	ec59 8b18 	vmov	r8, r9, d8
 80107e4:	2700      	movs	r7, #0
 80107e6:	e0f5      	b.n	80109d4 <__kernel_rem_pio2+0x4bc>
 80107e8:	2302      	movs	r3, #2
 80107ea:	9302      	str	r3, [sp, #8]
 80107ec:	e760      	b.n	80106b0 <__kernel_rem_pio2+0x198>
 80107ee:	ab0e      	add	r3, sp, #56	; 0x38
 80107f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107f4:	b94d      	cbnz	r5, 801080a <__kernel_rem_pio2+0x2f2>
 80107f6:	b12b      	cbz	r3, 8010804 <__kernel_rem_pio2+0x2ec>
 80107f8:	a80e      	add	r0, sp, #56	; 0x38
 80107fa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80107fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8010802:	2301      	movs	r3, #1
 8010804:	3201      	adds	r2, #1
 8010806:	461d      	mov	r5, r3
 8010808:	e759      	b.n	80106be <__kernel_rem_pio2+0x1a6>
 801080a:	a80e      	add	r0, sp, #56	; 0x38
 801080c:	1acb      	subs	r3, r1, r3
 801080e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8010812:	462b      	mov	r3, r5
 8010814:	e7f6      	b.n	8010804 <__kernel_rem_pio2+0x2ec>
 8010816:	1e62      	subs	r2, r4, #1
 8010818:	ab0e      	add	r3, sp, #56	; 0x38
 801081a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801081e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010822:	a90e      	add	r1, sp, #56	; 0x38
 8010824:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010828:	e757      	b.n	80106da <__kernel_rem_pio2+0x1c2>
 801082a:	bf00      	nop
 801082c:	f3af 8000 	nop.w
	...
 801083c:	3ff00000 	.word	0x3ff00000
 8010840:	08011c18 	.word	0x08011c18
 8010844:	40200000 	.word	0x40200000
 8010848:	3ff00000 	.word	0x3ff00000
 801084c:	3e700000 	.word	0x3e700000
 8010850:	41700000 	.word	0x41700000
 8010854:	3fe00000 	.word	0x3fe00000
 8010858:	08011bd8 	.word	0x08011bd8
 801085c:	1e62      	subs	r2, r4, #1
 801085e:	ab0e      	add	r3, sp, #56	; 0x38
 8010860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010864:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010868:	e7db      	b.n	8010822 <__kernel_rem_pio2+0x30a>
 801086a:	a90e      	add	r1, sp, #56	; 0x38
 801086c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010870:	3b01      	subs	r3, #1
 8010872:	430a      	orrs	r2, r1
 8010874:	e78b      	b.n	801078e <__kernel_rem_pio2+0x276>
 8010876:	3301      	adds	r3, #1
 8010878:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801087c:	2900      	cmp	r1, #0
 801087e:	d0fa      	beq.n	8010876 <__kernel_rem_pio2+0x35e>
 8010880:	9a08      	ldr	r2, [sp, #32]
 8010882:	4422      	add	r2, r4
 8010884:	00d2      	lsls	r2, r2, #3
 8010886:	a922      	add	r1, sp, #136	; 0x88
 8010888:	18e3      	adds	r3, r4, r3
 801088a:	9206      	str	r2, [sp, #24]
 801088c:	440a      	add	r2, r1
 801088e:	9302      	str	r3, [sp, #8]
 8010890:	f10b 0108 	add.w	r1, fp, #8
 8010894:	f102 0308 	add.w	r3, r2, #8
 8010898:	1c66      	adds	r6, r4, #1
 801089a:	910a      	str	r1, [sp, #40]	; 0x28
 801089c:	2500      	movs	r5, #0
 801089e:	930d      	str	r3, [sp, #52]	; 0x34
 80108a0:	9b02      	ldr	r3, [sp, #8]
 80108a2:	42b3      	cmp	r3, r6
 80108a4:	da04      	bge.n	80108b0 <__kernel_rem_pio2+0x398>
 80108a6:	461c      	mov	r4, r3
 80108a8:	e6a6      	b.n	80105f8 <__kernel_rem_pio2+0xe0>
 80108aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108ac:	2301      	movs	r3, #1
 80108ae:	e7e3      	b.n	8010878 <__kernel_rem_pio2+0x360>
 80108b0:	9b06      	ldr	r3, [sp, #24]
 80108b2:	18ef      	adds	r7, r5, r3
 80108b4:	ab22      	add	r3, sp, #136	; 0x88
 80108b6:	441f      	add	r7, r3
 80108b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80108be:	f7ef fe39 	bl	8000534 <__aeabi_i2d>
 80108c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108c4:	461c      	mov	r4, r3
 80108c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108c8:	e9c7 0100 	strd	r0, r1, [r7]
 80108cc:	eb03 0b05 	add.w	fp, r3, r5
 80108d0:	2700      	movs	r7, #0
 80108d2:	f04f 0800 	mov.w	r8, #0
 80108d6:	f04f 0900 	mov.w	r9, #0
 80108da:	9b07      	ldr	r3, [sp, #28]
 80108dc:	429f      	cmp	r7, r3
 80108de:	dd08      	ble.n	80108f2 <__kernel_rem_pio2+0x3da>
 80108e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108e2:	aa72      	add	r2, sp, #456	; 0x1c8
 80108e4:	18eb      	adds	r3, r5, r3
 80108e6:	4413      	add	r3, r2
 80108e8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80108ec:	3601      	adds	r6, #1
 80108ee:	3508      	adds	r5, #8
 80108f0:	e7d6      	b.n	80108a0 <__kernel_rem_pio2+0x388>
 80108f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80108f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80108fa:	f7ef fe85 	bl	8000608 <__aeabi_dmul>
 80108fe:	4602      	mov	r2, r0
 8010900:	460b      	mov	r3, r1
 8010902:	4640      	mov	r0, r8
 8010904:	4649      	mov	r1, r9
 8010906:	f7ef fcc9 	bl	800029c <__adddf3>
 801090a:	3701      	adds	r7, #1
 801090c:	4680      	mov	r8, r0
 801090e:	4689      	mov	r9, r1
 8010910:	e7e3      	b.n	80108da <__kernel_rem_pio2+0x3c2>
 8010912:	3d01      	subs	r5, #1
 8010914:	e741      	b.n	801079a <__kernel_rem_pio2+0x282>
 8010916:	f1ca 0000 	rsb	r0, sl, #0
 801091a:	ec47 6b10 	vmov	d0, r6, r7
 801091e:	f000 fa83 	bl	8010e28 <scalbn>
 8010922:	ec57 6b10 	vmov	r6, r7, d0
 8010926:	2200      	movs	r2, #0
 8010928:	4b99      	ldr	r3, [pc, #612]	; (8010b90 <__kernel_rem_pio2+0x678>)
 801092a:	ee10 0a10 	vmov	r0, s0
 801092e:	4639      	mov	r1, r7
 8010930:	f7f0 f8f0 	bl	8000b14 <__aeabi_dcmpge>
 8010934:	b1f8      	cbz	r0, 8010976 <__kernel_rem_pio2+0x45e>
 8010936:	2200      	movs	r2, #0
 8010938:	4b96      	ldr	r3, [pc, #600]	; (8010b94 <__kernel_rem_pio2+0x67c>)
 801093a:	4630      	mov	r0, r6
 801093c:	4639      	mov	r1, r7
 801093e:	f7ef fe63 	bl	8000608 <__aeabi_dmul>
 8010942:	f7f0 f8fb 	bl	8000b3c <__aeabi_d2iz>
 8010946:	4680      	mov	r8, r0
 8010948:	f7ef fdf4 	bl	8000534 <__aeabi_i2d>
 801094c:	2200      	movs	r2, #0
 801094e:	4b90      	ldr	r3, [pc, #576]	; (8010b90 <__kernel_rem_pio2+0x678>)
 8010950:	f7ef fe5a 	bl	8000608 <__aeabi_dmul>
 8010954:	460b      	mov	r3, r1
 8010956:	4602      	mov	r2, r0
 8010958:	4639      	mov	r1, r7
 801095a:	4630      	mov	r0, r6
 801095c:	f7ef fc9c 	bl	8000298 <__aeabi_dsub>
 8010960:	f7f0 f8ec 	bl	8000b3c <__aeabi_d2iz>
 8010964:	1c65      	adds	r5, r4, #1
 8010966:	ab0e      	add	r3, sp, #56	; 0x38
 8010968:	f10a 0a18 	add.w	sl, sl, #24
 801096c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010970:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010974:	e719      	b.n	80107aa <__kernel_rem_pio2+0x292>
 8010976:	4630      	mov	r0, r6
 8010978:	4639      	mov	r1, r7
 801097a:	f7f0 f8df 	bl	8000b3c <__aeabi_d2iz>
 801097e:	ab0e      	add	r3, sp, #56	; 0x38
 8010980:	4625      	mov	r5, r4
 8010982:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010986:	e710      	b.n	80107aa <__kernel_rem_pio2+0x292>
 8010988:	ab0e      	add	r3, sp, #56	; 0x38
 801098a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801098e:	f7ef fdd1 	bl	8000534 <__aeabi_i2d>
 8010992:	4642      	mov	r2, r8
 8010994:	464b      	mov	r3, r9
 8010996:	f7ef fe37 	bl	8000608 <__aeabi_dmul>
 801099a:	2200      	movs	r2, #0
 801099c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80109a0:	4b7c      	ldr	r3, [pc, #496]	; (8010b94 <__kernel_rem_pio2+0x67c>)
 80109a2:	4640      	mov	r0, r8
 80109a4:	4649      	mov	r1, r9
 80109a6:	f7ef fe2f 	bl	8000608 <__aeabi_dmul>
 80109aa:	3f01      	subs	r7, #1
 80109ac:	4680      	mov	r8, r0
 80109ae:	4689      	mov	r9, r1
 80109b0:	e708      	b.n	80107c4 <__kernel_rem_pio2+0x2ac>
 80109b2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80109be:	f7ef fe23 	bl	8000608 <__aeabi_dmul>
 80109c2:	4602      	mov	r2, r0
 80109c4:	460b      	mov	r3, r1
 80109c6:	4640      	mov	r0, r8
 80109c8:	4649      	mov	r1, r9
 80109ca:	f7ef fc67 	bl	800029c <__adddf3>
 80109ce:	3701      	adds	r7, #1
 80109d0:	4680      	mov	r8, r0
 80109d2:	4689      	mov	r9, r1
 80109d4:	9b04      	ldr	r3, [sp, #16]
 80109d6:	429f      	cmp	r7, r3
 80109d8:	dc01      	bgt.n	80109de <__kernel_rem_pio2+0x4c6>
 80109da:	45ba      	cmp	sl, r7
 80109dc:	dae9      	bge.n	80109b2 <__kernel_rem_pio2+0x49a>
 80109de:	ab4a      	add	r3, sp, #296	; 0x128
 80109e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80109e4:	e9c3 8900 	strd	r8, r9, [r3]
 80109e8:	f10a 0a01 	add.w	sl, sl, #1
 80109ec:	3e08      	subs	r6, #8
 80109ee:	e6f0      	b.n	80107d2 <__kernel_rem_pio2+0x2ba>
 80109f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80109f2:	2b03      	cmp	r3, #3
 80109f4:	d85b      	bhi.n	8010aae <__kernel_rem_pio2+0x596>
 80109f6:	e8df f003 	tbb	[pc, r3]
 80109fa:	264a      	.short	0x264a
 80109fc:	0226      	.short	0x0226
 80109fe:	ab9a      	add	r3, sp, #616	; 0x268
 8010a00:	441c      	add	r4, r3
 8010a02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010a06:	46a2      	mov	sl, r4
 8010a08:	46ab      	mov	fp, r5
 8010a0a:	f1bb 0f00 	cmp.w	fp, #0
 8010a0e:	dc6c      	bgt.n	8010aea <__kernel_rem_pio2+0x5d2>
 8010a10:	46a2      	mov	sl, r4
 8010a12:	46ab      	mov	fp, r5
 8010a14:	f1bb 0f01 	cmp.w	fp, #1
 8010a18:	f300 8086 	bgt.w	8010b28 <__kernel_rem_pio2+0x610>
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	2100      	movs	r1, #0
 8010a20:	2d01      	cmp	r5, #1
 8010a22:	f300 80a0 	bgt.w	8010b66 <__kernel_rem_pio2+0x64e>
 8010a26:	9b02      	ldr	r3, [sp, #8]
 8010a28:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010a2c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	f040 809e 	bne.w	8010b72 <__kernel_rem_pio2+0x65a>
 8010a36:	9b01      	ldr	r3, [sp, #4]
 8010a38:	e9c3 7800 	strd	r7, r8, [r3]
 8010a3c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010a40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010a44:	e033      	b.n	8010aae <__kernel_rem_pio2+0x596>
 8010a46:	3408      	adds	r4, #8
 8010a48:	ab4a      	add	r3, sp, #296	; 0x128
 8010a4a:	441c      	add	r4, r3
 8010a4c:	462e      	mov	r6, r5
 8010a4e:	2000      	movs	r0, #0
 8010a50:	2100      	movs	r1, #0
 8010a52:	2e00      	cmp	r6, #0
 8010a54:	da3a      	bge.n	8010acc <__kernel_rem_pio2+0x5b4>
 8010a56:	9b02      	ldr	r3, [sp, #8]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d03d      	beq.n	8010ad8 <__kernel_rem_pio2+0x5c0>
 8010a5c:	4602      	mov	r2, r0
 8010a5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a62:	9c01      	ldr	r4, [sp, #4]
 8010a64:	e9c4 2300 	strd	r2, r3, [r4]
 8010a68:	4602      	mov	r2, r0
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010a70:	f7ef fc12 	bl	8000298 <__aeabi_dsub>
 8010a74:	ae4c      	add	r6, sp, #304	; 0x130
 8010a76:	2401      	movs	r4, #1
 8010a78:	42a5      	cmp	r5, r4
 8010a7a:	da30      	bge.n	8010ade <__kernel_rem_pio2+0x5c6>
 8010a7c:	9b02      	ldr	r3, [sp, #8]
 8010a7e:	b113      	cbz	r3, 8010a86 <__kernel_rem_pio2+0x56e>
 8010a80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a84:	4619      	mov	r1, r3
 8010a86:	9b01      	ldr	r3, [sp, #4]
 8010a88:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010a8c:	e00f      	b.n	8010aae <__kernel_rem_pio2+0x596>
 8010a8e:	ab9a      	add	r3, sp, #616	; 0x268
 8010a90:	441c      	add	r4, r3
 8010a92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010a96:	2000      	movs	r0, #0
 8010a98:	2100      	movs	r1, #0
 8010a9a:	2d00      	cmp	r5, #0
 8010a9c:	da10      	bge.n	8010ac0 <__kernel_rem_pio2+0x5a8>
 8010a9e:	9b02      	ldr	r3, [sp, #8]
 8010aa0:	b113      	cbz	r3, 8010aa8 <__kernel_rem_pio2+0x590>
 8010aa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	9b01      	ldr	r3, [sp, #4]
 8010aaa:	e9c3 0100 	strd	r0, r1, [r3]
 8010aae:	9b06      	ldr	r3, [sp, #24]
 8010ab0:	f003 0007 	and.w	r0, r3, #7
 8010ab4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010ab8:	ecbd 8b02 	vpop	{d8}
 8010abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010ac4:	f7ef fbea 	bl	800029c <__adddf3>
 8010ac8:	3d01      	subs	r5, #1
 8010aca:	e7e6      	b.n	8010a9a <__kernel_rem_pio2+0x582>
 8010acc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010ad0:	f7ef fbe4 	bl	800029c <__adddf3>
 8010ad4:	3e01      	subs	r6, #1
 8010ad6:	e7bc      	b.n	8010a52 <__kernel_rem_pio2+0x53a>
 8010ad8:	4602      	mov	r2, r0
 8010ada:	460b      	mov	r3, r1
 8010adc:	e7c1      	b.n	8010a62 <__kernel_rem_pio2+0x54a>
 8010ade:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010ae2:	f7ef fbdb 	bl	800029c <__adddf3>
 8010ae6:	3401      	adds	r4, #1
 8010ae8:	e7c6      	b.n	8010a78 <__kernel_rem_pio2+0x560>
 8010aea:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8010aee:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010af2:	4640      	mov	r0, r8
 8010af4:	ec53 2b17 	vmov	r2, r3, d7
 8010af8:	4649      	mov	r1, r9
 8010afa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010afe:	f7ef fbcd 	bl	800029c <__adddf3>
 8010b02:	4602      	mov	r2, r0
 8010b04:	460b      	mov	r3, r1
 8010b06:	4606      	mov	r6, r0
 8010b08:	460f      	mov	r7, r1
 8010b0a:	4640      	mov	r0, r8
 8010b0c:	4649      	mov	r1, r9
 8010b0e:	f7ef fbc3 	bl	8000298 <__aeabi_dsub>
 8010b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b16:	f7ef fbc1 	bl	800029c <__adddf3>
 8010b1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b1e:	e9ca 0100 	strd	r0, r1, [sl]
 8010b22:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8010b26:	e770      	b.n	8010a0a <__kernel_rem_pio2+0x4f2>
 8010b28:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8010b2c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010b30:	4630      	mov	r0, r6
 8010b32:	ec53 2b17 	vmov	r2, r3, d7
 8010b36:	4639      	mov	r1, r7
 8010b38:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010b3c:	f7ef fbae 	bl	800029c <__adddf3>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	4680      	mov	r8, r0
 8010b46:	4689      	mov	r9, r1
 8010b48:	4630      	mov	r0, r6
 8010b4a:	4639      	mov	r1, r7
 8010b4c:	f7ef fba4 	bl	8000298 <__aeabi_dsub>
 8010b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b54:	f7ef fba2 	bl	800029c <__adddf3>
 8010b58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b5c:	e9ca 0100 	strd	r0, r1, [sl]
 8010b60:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8010b64:	e756      	b.n	8010a14 <__kernel_rem_pio2+0x4fc>
 8010b66:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010b6a:	f7ef fb97 	bl	800029c <__adddf3>
 8010b6e:	3d01      	subs	r5, #1
 8010b70:	e756      	b.n	8010a20 <__kernel_rem_pio2+0x508>
 8010b72:	9b01      	ldr	r3, [sp, #4]
 8010b74:	9a01      	ldr	r2, [sp, #4]
 8010b76:	601f      	str	r7, [r3, #0]
 8010b78:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010b7c:	605c      	str	r4, [r3, #4]
 8010b7e:	609d      	str	r5, [r3, #8]
 8010b80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010b84:	60d3      	str	r3, [r2, #12]
 8010b86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b8a:	6110      	str	r0, [r2, #16]
 8010b8c:	6153      	str	r3, [r2, #20]
 8010b8e:	e78e      	b.n	8010aae <__kernel_rem_pio2+0x596>
 8010b90:	41700000 	.word	0x41700000
 8010b94:	3e700000 	.word	0x3e700000

08010b98 <__kernel_sin>:
 8010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	ec55 4b10 	vmov	r4, r5, d0
 8010ba0:	b085      	sub	sp, #20
 8010ba2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010ba6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010baa:	ed8d 1b00 	vstr	d1, [sp]
 8010bae:	9002      	str	r0, [sp, #8]
 8010bb0:	da06      	bge.n	8010bc0 <__kernel_sin+0x28>
 8010bb2:	ee10 0a10 	vmov	r0, s0
 8010bb6:	4629      	mov	r1, r5
 8010bb8:	f7ef ffc0 	bl	8000b3c <__aeabi_d2iz>
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	d051      	beq.n	8010c64 <__kernel_sin+0xcc>
 8010bc0:	4622      	mov	r2, r4
 8010bc2:	462b      	mov	r3, r5
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	4629      	mov	r1, r5
 8010bc8:	f7ef fd1e 	bl	8000608 <__aeabi_dmul>
 8010bcc:	4682      	mov	sl, r0
 8010bce:	468b      	mov	fp, r1
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	f7ef fd16 	bl	8000608 <__aeabi_dmul>
 8010bdc:	a341      	add	r3, pc, #260	; (adr r3, 8010ce4 <__kernel_sin+0x14c>)
 8010bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be2:	4680      	mov	r8, r0
 8010be4:	4689      	mov	r9, r1
 8010be6:	4650      	mov	r0, sl
 8010be8:	4659      	mov	r1, fp
 8010bea:	f7ef fd0d 	bl	8000608 <__aeabi_dmul>
 8010bee:	a33f      	add	r3, pc, #252	; (adr r3, 8010cec <__kernel_sin+0x154>)
 8010bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf4:	f7ef fb50 	bl	8000298 <__aeabi_dsub>
 8010bf8:	4652      	mov	r2, sl
 8010bfa:	465b      	mov	r3, fp
 8010bfc:	f7ef fd04 	bl	8000608 <__aeabi_dmul>
 8010c00:	a33c      	add	r3, pc, #240	; (adr r3, 8010cf4 <__kernel_sin+0x15c>)
 8010c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c06:	f7ef fb49 	bl	800029c <__adddf3>
 8010c0a:	4652      	mov	r2, sl
 8010c0c:	465b      	mov	r3, fp
 8010c0e:	f7ef fcfb 	bl	8000608 <__aeabi_dmul>
 8010c12:	a33a      	add	r3, pc, #232	; (adr r3, 8010cfc <__kernel_sin+0x164>)
 8010c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c18:	f7ef fb3e 	bl	8000298 <__aeabi_dsub>
 8010c1c:	4652      	mov	r2, sl
 8010c1e:	465b      	mov	r3, fp
 8010c20:	f7ef fcf2 	bl	8000608 <__aeabi_dmul>
 8010c24:	a337      	add	r3, pc, #220	; (adr r3, 8010d04 <__kernel_sin+0x16c>)
 8010c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2a:	f7ef fb37 	bl	800029c <__adddf3>
 8010c2e:	9b02      	ldr	r3, [sp, #8]
 8010c30:	4606      	mov	r6, r0
 8010c32:	460f      	mov	r7, r1
 8010c34:	b9db      	cbnz	r3, 8010c6e <__kernel_sin+0xd6>
 8010c36:	4602      	mov	r2, r0
 8010c38:	460b      	mov	r3, r1
 8010c3a:	4650      	mov	r0, sl
 8010c3c:	4659      	mov	r1, fp
 8010c3e:	f7ef fce3 	bl	8000608 <__aeabi_dmul>
 8010c42:	a325      	add	r3, pc, #148	; (adr r3, 8010cd8 <__kernel_sin+0x140>)
 8010c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c48:	f7ef fb26 	bl	8000298 <__aeabi_dsub>
 8010c4c:	4642      	mov	r2, r8
 8010c4e:	464b      	mov	r3, r9
 8010c50:	f7ef fcda 	bl	8000608 <__aeabi_dmul>
 8010c54:	4602      	mov	r2, r0
 8010c56:	460b      	mov	r3, r1
 8010c58:	4620      	mov	r0, r4
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	f7ef fb1e 	bl	800029c <__adddf3>
 8010c60:	4604      	mov	r4, r0
 8010c62:	460d      	mov	r5, r1
 8010c64:	ec45 4b10 	vmov	d0, r4, r5
 8010c68:	b005      	add	sp, #20
 8010c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6e:	2200      	movs	r2, #0
 8010c70:	4b1b      	ldr	r3, [pc, #108]	; (8010ce0 <__kernel_sin+0x148>)
 8010c72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c76:	f7ef fcc7 	bl	8000608 <__aeabi_dmul>
 8010c7a:	4632      	mov	r2, r6
 8010c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c80:	463b      	mov	r3, r7
 8010c82:	4640      	mov	r0, r8
 8010c84:	4649      	mov	r1, r9
 8010c86:	f7ef fcbf 	bl	8000608 <__aeabi_dmul>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c92:	f7ef fb01 	bl	8000298 <__aeabi_dsub>
 8010c96:	4652      	mov	r2, sl
 8010c98:	465b      	mov	r3, fp
 8010c9a:	f7ef fcb5 	bl	8000608 <__aeabi_dmul>
 8010c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ca2:	f7ef faf9 	bl	8000298 <__aeabi_dsub>
 8010ca6:	a30c      	add	r3, pc, #48	; (adr r3, 8010cd8 <__kernel_sin+0x140>)
 8010ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cac:	4606      	mov	r6, r0
 8010cae:	460f      	mov	r7, r1
 8010cb0:	4640      	mov	r0, r8
 8010cb2:	4649      	mov	r1, r9
 8010cb4:	f7ef fca8 	bl	8000608 <__aeabi_dmul>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	460b      	mov	r3, r1
 8010cbc:	4630      	mov	r0, r6
 8010cbe:	4639      	mov	r1, r7
 8010cc0:	f7ef faec 	bl	800029c <__adddf3>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4620      	mov	r0, r4
 8010cca:	4629      	mov	r1, r5
 8010ccc:	f7ef fae4 	bl	8000298 <__aeabi_dsub>
 8010cd0:	e7c6      	b.n	8010c60 <__kernel_sin+0xc8>
 8010cd2:	bf00      	nop
 8010cd4:	f3af 8000 	nop.w
 8010cd8:	55555549 	.word	0x55555549
 8010cdc:	3fc55555 	.word	0x3fc55555
 8010ce0:	3fe00000 	.word	0x3fe00000
 8010ce4:	5acfd57c 	.word	0x5acfd57c
 8010ce8:	3de5d93a 	.word	0x3de5d93a
 8010cec:	8a2b9ceb 	.word	0x8a2b9ceb
 8010cf0:	3e5ae5e6 	.word	0x3e5ae5e6
 8010cf4:	57b1fe7d 	.word	0x57b1fe7d
 8010cf8:	3ec71de3 	.word	0x3ec71de3
 8010cfc:	19c161d5 	.word	0x19c161d5
 8010d00:	3f2a01a0 	.word	0x3f2a01a0
 8010d04:	1110f8a6 	.word	0x1110f8a6
 8010d08:	3f811111 	.word	0x3f811111

08010d0c <fabs>:
 8010d0c:	ec51 0b10 	vmov	r0, r1, d0
 8010d10:	ee10 2a10 	vmov	r2, s0
 8010d14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d18:	ec43 2b10 	vmov	d0, r2, r3
 8010d1c:	4770      	bx	lr
	...

08010d20 <floor>:
 8010d20:	ec51 0b10 	vmov	r0, r1, d0
 8010d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010d2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010d30:	2e13      	cmp	r6, #19
 8010d32:	460c      	mov	r4, r1
 8010d34:	ee10 5a10 	vmov	r5, s0
 8010d38:	4680      	mov	r8, r0
 8010d3a:	dc34      	bgt.n	8010da6 <floor+0x86>
 8010d3c:	2e00      	cmp	r6, #0
 8010d3e:	da16      	bge.n	8010d6e <floor+0x4e>
 8010d40:	a335      	add	r3, pc, #212	; (adr r3, 8010e18 <floor+0xf8>)
 8010d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d46:	f7ef faa9 	bl	800029c <__adddf3>
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	f7ef feeb 	bl	8000b28 <__aeabi_dcmpgt>
 8010d52:	b148      	cbz	r0, 8010d68 <floor+0x48>
 8010d54:	2c00      	cmp	r4, #0
 8010d56:	da59      	bge.n	8010e0c <floor+0xec>
 8010d58:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010d5c:	4a30      	ldr	r2, [pc, #192]	; (8010e20 <floor+0x100>)
 8010d5e:	432b      	orrs	r3, r5
 8010d60:	2500      	movs	r5, #0
 8010d62:	42ab      	cmp	r3, r5
 8010d64:	bf18      	it	ne
 8010d66:	4614      	movne	r4, r2
 8010d68:	4621      	mov	r1, r4
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	e025      	b.n	8010dba <floor+0x9a>
 8010d6e:	4f2d      	ldr	r7, [pc, #180]	; (8010e24 <floor+0x104>)
 8010d70:	4137      	asrs	r7, r6
 8010d72:	ea01 0307 	and.w	r3, r1, r7
 8010d76:	4303      	orrs	r3, r0
 8010d78:	d01f      	beq.n	8010dba <floor+0x9a>
 8010d7a:	a327      	add	r3, pc, #156	; (adr r3, 8010e18 <floor+0xf8>)
 8010d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d80:	f7ef fa8c 	bl	800029c <__adddf3>
 8010d84:	2200      	movs	r2, #0
 8010d86:	2300      	movs	r3, #0
 8010d88:	f7ef fece 	bl	8000b28 <__aeabi_dcmpgt>
 8010d8c:	2800      	cmp	r0, #0
 8010d8e:	d0eb      	beq.n	8010d68 <floor+0x48>
 8010d90:	2c00      	cmp	r4, #0
 8010d92:	bfbe      	ittt	lt
 8010d94:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010d98:	fa43 f606 	asrlt.w	r6, r3, r6
 8010d9c:	19a4      	addlt	r4, r4, r6
 8010d9e:	ea24 0407 	bic.w	r4, r4, r7
 8010da2:	2500      	movs	r5, #0
 8010da4:	e7e0      	b.n	8010d68 <floor+0x48>
 8010da6:	2e33      	cmp	r6, #51	; 0x33
 8010da8:	dd0b      	ble.n	8010dc2 <floor+0xa2>
 8010daa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010dae:	d104      	bne.n	8010dba <floor+0x9a>
 8010db0:	ee10 2a10 	vmov	r2, s0
 8010db4:	460b      	mov	r3, r1
 8010db6:	f7ef fa71 	bl	800029c <__adddf3>
 8010dba:	ec41 0b10 	vmov	d0, r0, r1
 8010dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dca:	fa23 f707 	lsr.w	r7, r3, r7
 8010dce:	4207      	tst	r7, r0
 8010dd0:	d0f3      	beq.n	8010dba <floor+0x9a>
 8010dd2:	a311      	add	r3, pc, #68	; (adr r3, 8010e18 <floor+0xf8>)
 8010dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd8:	f7ef fa60 	bl	800029c <__adddf3>
 8010ddc:	2200      	movs	r2, #0
 8010dde:	2300      	movs	r3, #0
 8010de0:	f7ef fea2 	bl	8000b28 <__aeabi_dcmpgt>
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d0bf      	beq.n	8010d68 <floor+0x48>
 8010de8:	2c00      	cmp	r4, #0
 8010dea:	da02      	bge.n	8010df2 <floor+0xd2>
 8010dec:	2e14      	cmp	r6, #20
 8010dee:	d103      	bne.n	8010df8 <floor+0xd8>
 8010df0:	3401      	adds	r4, #1
 8010df2:	ea25 0507 	bic.w	r5, r5, r7
 8010df6:	e7b7      	b.n	8010d68 <floor+0x48>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010dfe:	fa03 f606 	lsl.w	r6, r3, r6
 8010e02:	4435      	add	r5, r6
 8010e04:	4545      	cmp	r5, r8
 8010e06:	bf38      	it	cc
 8010e08:	18e4      	addcc	r4, r4, r3
 8010e0a:	e7f2      	b.n	8010df2 <floor+0xd2>
 8010e0c:	2500      	movs	r5, #0
 8010e0e:	462c      	mov	r4, r5
 8010e10:	e7aa      	b.n	8010d68 <floor+0x48>
 8010e12:	bf00      	nop
 8010e14:	f3af 8000 	nop.w
 8010e18:	8800759c 	.word	0x8800759c
 8010e1c:	7e37e43c 	.word	0x7e37e43c
 8010e20:	bff00000 	.word	0xbff00000
 8010e24:	000fffff 	.word	0x000fffff

08010e28 <scalbn>:
 8010e28:	b570      	push	{r4, r5, r6, lr}
 8010e2a:	ec55 4b10 	vmov	r4, r5, d0
 8010e2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010e32:	4606      	mov	r6, r0
 8010e34:	462b      	mov	r3, r5
 8010e36:	b9aa      	cbnz	r2, 8010e64 <scalbn+0x3c>
 8010e38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010e3c:	4323      	orrs	r3, r4
 8010e3e:	d03b      	beq.n	8010eb8 <scalbn+0x90>
 8010e40:	4b31      	ldr	r3, [pc, #196]	; (8010f08 <scalbn+0xe0>)
 8010e42:	4629      	mov	r1, r5
 8010e44:	2200      	movs	r2, #0
 8010e46:	ee10 0a10 	vmov	r0, s0
 8010e4a:	f7ef fbdd 	bl	8000608 <__aeabi_dmul>
 8010e4e:	4b2f      	ldr	r3, [pc, #188]	; (8010f0c <scalbn+0xe4>)
 8010e50:	429e      	cmp	r6, r3
 8010e52:	4604      	mov	r4, r0
 8010e54:	460d      	mov	r5, r1
 8010e56:	da12      	bge.n	8010e7e <scalbn+0x56>
 8010e58:	a327      	add	r3, pc, #156	; (adr r3, 8010ef8 <scalbn+0xd0>)
 8010e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5e:	f7ef fbd3 	bl	8000608 <__aeabi_dmul>
 8010e62:	e009      	b.n	8010e78 <scalbn+0x50>
 8010e64:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010e68:	428a      	cmp	r2, r1
 8010e6a:	d10c      	bne.n	8010e86 <scalbn+0x5e>
 8010e6c:	ee10 2a10 	vmov	r2, s0
 8010e70:	4620      	mov	r0, r4
 8010e72:	4629      	mov	r1, r5
 8010e74:	f7ef fa12 	bl	800029c <__adddf3>
 8010e78:	4604      	mov	r4, r0
 8010e7a:	460d      	mov	r5, r1
 8010e7c:	e01c      	b.n	8010eb8 <scalbn+0x90>
 8010e7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010e82:	460b      	mov	r3, r1
 8010e84:	3a36      	subs	r2, #54	; 0x36
 8010e86:	4432      	add	r2, r6
 8010e88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010e8c:	428a      	cmp	r2, r1
 8010e8e:	dd0b      	ble.n	8010ea8 <scalbn+0x80>
 8010e90:	ec45 4b11 	vmov	d1, r4, r5
 8010e94:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010f00 <scalbn+0xd8>
 8010e98:	f000 f83c 	bl	8010f14 <copysign>
 8010e9c:	a318      	add	r3, pc, #96	; (adr r3, 8010f00 <scalbn+0xd8>)
 8010e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea2:	ec51 0b10 	vmov	r0, r1, d0
 8010ea6:	e7da      	b.n	8010e5e <scalbn+0x36>
 8010ea8:	2a00      	cmp	r2, #0
 8010eaa:	dd08      	ble.n	8010ebe <scalbn+0x96>
 8010eac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010eb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010eb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010eb8:	ec45 4b10 	vmov	d0, r4, r5
 8010ebc:	bd70      	pop	{r4, r5, r6, pc}
 8010ebe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010ec2:	da0d      	bge.n	8010ee0 <scalbn+0xb8>
 8010ec4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010ec8:	429e      	cmp	r6, r3
 8010eca:	ec45 4b11 	vmov	d1, r4, r5
 8010ece:	dce1      	bgt.n	8010e94 <scalbn+0x6c>
 8010ed0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8010ef8 <scalbn+0xd0>
 8010ed4:	f000 f81e 	bl	8010f14 <copysign>
 8010ed8:	a307      	add	r3, pc, #28	; (adr r3, 8010ef8 <scalbn+0xd0>)
 8010eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ede:	e7e0      	b.n	8010ea2 <scalbn+0x7a>
 8010ee0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010ee4:	3236      	adds	r2, #54	; 0x36
 8010ee6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010eea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010eee:	4620      	mov	r0, r4
 8010ef0:	4629      	mov	r1, r5
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	4b06      	ldr	r3, [pc, #24]	; (8010f10 <scalbn+0xe8>)
 8010ef6:	e7b2      	b.n	8010e5e <scalbn+0x36>
 8010ef8:	c2f8f359 	.word	0xc2f8f359
 8010efc:	01a56e1f 	.word	0x01a56e1f
 8010f00:	8800759c 	.word	0x8800759c
 8010f04:	7e37e43c 	.word	0x7e37e43c
 8010f08:	43500000 	.word	0x43500000
 8010f0c:	ffff3cb0 	.word	0xffff3cb0
 8010f10:	3c900000 	.word	0x3c900000

08010f14 <copysign>:
 8010f14:	ec51 0b10 	vmov	r0, r1, d0
 8010f18:	ee11 0a90 	vmov	r0, s3
 8010f1c:	ee10 2a10 	vmov	r2, s0
 8010f20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010f24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010f28:	ea41 0300 	orr.w	r3, r1, r0
 8010f2c:	ec43 2b10 	vmov	d0, r2, r3
 8010f30:	4770      	bx	lr
	...

08010f34 <_init>:
 8010f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f36:	bf00      	nop
 8010f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f3a:	bc08      	pop	{r3}
 8010f3c:	469e      	mov	lr, r3
 8010f3e:	4770      	bx	lr

08010f40 <_fini>:
 8010f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f42:	bf00      	nop
 8010f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f46:	bc08      	pop	{r3}
 8010f48:	469e      	mov	lr, r3
 8010f4a:	4770      	bx	lr
