
monofon_USB_sk6812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ea4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08011040  08011040  00021040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112a0  080112a0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  080112a0  080112a0  000212a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112a8  080112a8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112a8  080112a8  000212a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080112ac  080112ac  000212ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080112b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b74  200001fc  080114ac  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00009000  20001d70  080114ac  00031d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e3f  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052cc  00000000  00000000  0005806b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b90  00000000  00000000  0005d338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001948  00000000  00000000  0005eec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d83e  00000000  00000000  00060810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bd50  00000000  00000000  0007e04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000993c5  00000000  00000000  00099d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007874  00000000  00000000  001331e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001fc 	.word	0x200001fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08011024 	.word	0x08011024

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000200 	.word	0x20000200
 80001d4:	08011024 	.word	0x08011024

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f94d 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f00d fbd6 	bl	800e6c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f965 	bl	8001212 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f92d 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000124 	.word	0x20000124
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	20000820 	.word	0x20000820

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000820 	.word	0x20000820

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_Delay+0x40>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000004 	.word	0x20000004

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff3e 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff31 	bl	800106c <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa2 	bl	8001164 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff feb8 	bl	8000fac <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e099      	b.n	800137c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001268:	e00f      	b.n	800128a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800126a:	f7ff fe9f 	bl	8000fac <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b05      	cmp	r3, #5
 8001276:	d908      	bls.n	800128a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2220      	movs	r2, #32
 800127c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2203      	movs	r2, #3
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e078      	b.n	800137c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e8      	bne.n	800126a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <HAL_DMA_Init+0x158>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4313      	orrs	r3, r2
 80012da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d107      	bne.n	80012f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4313      	orrs	r3, r2
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f023 0307 	bic.w	r3, r3, #7
 800130a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	4313      	orrs	r3, r2
 8001314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	2b04      	cmp	r3, #4
 800131c:	d117      	bne.n	800134e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4313      	orrs	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00e      	beq.n	800134e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fb0f 	bl	8001954 <DMA_CheckFifoParam>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2240      	movs	r2, #64	; 0x40
 8001340:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800134a:	2301      	movs	r3, #1
 800134c:	e016      	b.n	800137c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fac6 	bl	80018e8 <DMA_CalcBaseAndBitshift>
 800135c:	4603      	mov	r3, r0
 800135e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001364:	223f      	movs	r2, #63	; 0x3f
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	f010803f 	.word	0xf010803f

08001388 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HAL_DMA_Start_IT+0x26>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e040      	b.n	8001430 <HAL_DMA_Start_IT+0xa8>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d12f      	bne.n	8001422 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2202      	movs	r2, #2
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 fa58 	bl	800188c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e0:	223f      	movs	r2, #63	; 0x3f
 80013e2:	409a      	lsls	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0216 	orr.w	r2, r2, #22
 80013f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d007      	beq.n	8001410 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0208 	orr.w	r2, r2, #8
 800140e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e005      	b.n	800142e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800142a:	2302      	movs	r3, #2
 800142c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800142e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001446:	f7ff fdb1 	bl	8000fac <HAL_GetTick>
 800144a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d008      	beq.n	800146a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e052      	b.n	8001510 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0216 	bic.w	r2, r2, #22
 8001478:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001488:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <HAL_DMA_Abort+0x62>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0208 	bic.w	r2, r2, #8
 80014a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0201 	bic.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ba:	e013      	b.n	80014e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014bc:	f7ff fd76 	bl	8000fac <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d90c      	bls.n	80014e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2220      	movs	r2, #32
 80014ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2203      	movs	r2, #3
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e015      	b.n	8001510 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1e4      	bne.n	80014bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f6:	223f      	movs	r2, #63	; 0x3f
 80014f8:	409a      	lsls	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d004      	beq.n	8001536 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00c      	b.n	8001550 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001568:	4b92      	ldr	r3, [pc, #584]	; (80017b4 <HAL_DMA_IRQHandler+0x258>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a92      	ldr	r2, [pc, #584]	; (80017b8 <HAL_DMA_IRQHandler+0x25c>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0a9b      	lsrs	r3, r3, #10
 8001574:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	2208      	movs	r2, #8
 8001588:	409a      	lsls	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d01a      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d013      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2208      	movs	r2, #8
 80015b6:	409a      	lsls	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2201      	movs	r2, #1
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d012      	beq.n	80015fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	2201      	movs	r2, #1
 80015ec:	409a      	lsls	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f043 0202 	orr.w	r2, r3, #2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2204      	movs	r2, #4
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d012      	beq.n	8001634 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00b      	beq.n	8001634 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2204      	movs	r2, #4
 8001622:	409a      	lsls	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	f043 0204 	orr.w	r2, r3, #4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	2210      	movs	r2, #16
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d043      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03c      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2210      	movs	r2, #16
 8001658:	409a      	lsls	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d018      	beq.n	800169e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d108      	bne.n	800168c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d024      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	4798      	blx	r3
 800168a:	e01f      	b.n	80016cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01b      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
 800169c:	e016      	b.n	80016cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d107      	bne.n	80016bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0208 	bic.w	r2, r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d0:	2220      	movs	r2, #32
 80016d2:	409a      	lsls	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 808e 	beq.w	80017fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8086 	beq.w	80017fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	2220      	movs	r2, #32
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b05      	cmp	r3, #5
 8001704:	d136      	bne.n	8001774 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0216 	bic.w	r2, r2, #22
 8001714:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001724:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <HAL_DMA_IRQHandler+0x1da>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0208 	bic.w	r2, r2, #8
 8001744:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	223f      	movs	r2, #63	; 0x3f
 800174c:	409a      	lsls	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001766:	2b00      	cmp	r3, #0
 8001768:	d07d      	beq.n	8001866 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
        }
        return;
 8001772:	e078      	b.n	8001866 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01c      	beq.n	80017bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d108      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	2b00      	cmp	r3, #0
 8001796:	d030      	beq.n	80017fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
 80017a0:	e02b      	b.n	80017fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d027      	beq.n	80017fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
 80017b2:	e022      	b.n	80017fa <HAL_DMA_IRQHandler+0x29e>
 80017b4:	20000124 	.word	0x20000124
 80017b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0210 	bic.w	r2, r2, #16
 80017d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d032      	beq.n	8001868 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d022      	beq.n	8001854 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2205      	movs	r2, #5
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0201 	bic.w	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3301      	adds	r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	429a      	cmp	r2, r3
 8001830:	d307      	bcc.n	8001842 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f2      	bne.n	8001826 <HAL_DMA_IRQHandler+0x2ca>
 8001840:	e000      	b.n	8001844 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001842:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
 8001864:	e000      	b.n	8001868 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001866:	bf00      	nop
    }
  }
}
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop

08001870 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187e:	b2db      	uxtb	r3, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b40      	cmp	r3, #64	; 0x40
 80018b8:	d108      	bne.n	80018cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018ca:	e007      	b.n	80018dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3b10      	subs	r3, #16
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <DMA_CalcBaseAndBitshift+0x64>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <DMA_CalcBaseAndBitshift+0x68>)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d909      	bls.n	800192a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	1d1a      	adds	r2, r3, #4
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	659a      	str	r2, [r3, #88]	; 0x58
 8001928:	e007      	b.n	800193a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001932:	f023 0303 	bic.w	r3, r3, #3
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	aaaaaaab 	.word	0xaaaaaaab
 8001950:	0801107c 	.word	0x0801107c

08001954 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d11f      	bne.n	80019ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d855      	bhi.n	8001a20 <DMA_CheckFifoParam+0xcc>
 8001974:	a201      	add	r2, pc, #4	; (adr r2, 800197c <DMA_CheckFifoParam+0x28>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	0800198d 	.word	0x0800198d
 8001980:	0800199f 	.word	0x0800199f
 8001984:	0800198d 	.word	0x0800198d
 8001988:	08001a21 	.word	0x08001a21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d045      	beq.n	8001a24 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800199c:	e042      	b.n	8001a24 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019a6:	d13f      	bne.n	8001a28 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ac:	e03c      	b.n	8001a28 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b6:	d121      	bne.n	80019fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d836      	bhi.n	8001a2c <DMA_CheckFifoParam+0xd8>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <DMA_CheckFifoParam+0x70>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019db 	.word	0x080019db
 80019cc:	080019d5 	.word	0x080019d5
 80019d0:	080019ed 	.word	0x080019ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
      break;
 80019d8:	e02f      	b.n	8001a3a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d024      	beq.n	8001a30 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ea:	e021      	b.n	8001a30 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019f4:	d11e      	bne.n	8001a34 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019fa:	e01b      	b.n	8001a34 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d902      	bls.n	8001a08 <DMA_CheckFifoParam+0xb4>
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d003      	beq.n	8001a0e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a06:	e018      	b.n	8001a3a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0c:	e015      	b.n	8001a3a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00e      	beq.n	8001a38 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a1e:	e00b      	b.n	8001a38 <DMA_CheckFifoParam+0xe4>
      break;
 8001a20:	bf00      	nop
 8001a22:	e00a      	b.n	8001a3a <DMA_CheckFifoParam+0xe6>
      break;
 8001a24:	bf00      	nop
 8001a26:	e008      	b.n	8001a3a <DMA_CheckFifoParam+0xe6>
      break;
 8001a28:	bf00      	nop
 8001a2a:	e006      	b.n	8001a3a <DMA_CheckFifoParam+0xe6>
      break;
 8001a2c:	bf00      	nop
 8001a2e:	e004      	b.n	8001a3a <DMA_CheckFifoParam+0xe6>
      break;
 8001a30:	bf00      	nop
 8001a32:	e002      	b.n	8001a3a <DMA_CheckFifoParam+0xe6>
      break;   
 8001a34:	bf00      	nop
 8001a36:	e000      	b.n	8001a3a <DMA_CheckFifoParam+0xe6>
      break;
 8001a38:	bf00      	nop
    }
  } 
  
  return status; 
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	e159      	b.n	8001d18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8148 	bne.w	8001d12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d00b      	beq.n	8001aa2 <HAL_GPIO_Init+0x5a>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a96:	2b11      	cmp	r3, #17
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b12      	cmp	r3, #18
 8001aa0:	d130      	bne.n	8001b04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 0201 	and.w	r2, r3, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0xfc>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b12      	cmp	r3, #18
 8001b42:	d123      	bne.n	8001b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	08da      	lsrs	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3208      	adds	r2, #8
 8001b86:	69b9      	ldr	r1, [r7, #24]
 8001b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a2 	beq.w	8001d12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <HAL_GPIO_Init+0x2e4>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <HAL_GPIO_Init+0x2e4>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_GPIO_Init+0x2e4>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bea:	4a51      	ldr	r2, [pc, #324]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a48      	ldr	r2, [pc, #288]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d019      	beq.n	8001c4a <HAL_GPIO_Init+0x202>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a47      	ldr	r2, [pc, #284]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0x1fe>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a46      	ldr	r2, [pc, #280]	; (8001d3c <HAL_GPIO_Init+0x2f4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00d      	beq.n	8001c42 <HAL_GPIO_Init+0x1fa>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a45      	ldr	r2, [pc, #276]	; (8001d40 <HAL_GPIO_Init+0x2f8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <HAL_GPIO_Init+0x1f6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a44      	ldr	r2, [pc, #272]	; (8001d44 <HAL_GPIO_Init+0x2fc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_GPIO_Init+0x1f2>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c5c:	4934      	ldr	r1, [pc, #208]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6a:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c8e:	4a2e      	ldr	r2, [pc, #184]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb8:	4a23      	ldr	r2, [pc, #140]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbe:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce2:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b0f      	cmp	r3, #15
 8001d1c:	f67f aea2 	bls.w	8001a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	3724      	adds	r7, #36	; 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e001      	b.n	8001d6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e11f      	b.n	8001fce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f00c fcb6 	bl	800e714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2224      	movs	r2, #36	; 0x24
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001de0:	f005 f90e 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 8001de4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a7b      	ldr	r2, [pc, #492]	; (8001fd8 <HAL_I2C_Init+0x25c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d807      	bhi.n	8001e00 <HAL_I2C_Init+0x84>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a7a      	ldr	r2, [pc, #488]	; (8001fdc <HAL_I2C_Init+0x260>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	bf94      	ite	ls
 8001df8:	2301      	movls	r3, #1
 8001dfa:	2300      	movhi	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e006      	b.n	8001e0e <HAL_I2C_Init+0x92>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4a77      	ldr	r2, [pc, #476]	; (8001fe0 <HAL_I2C_Init+0x264>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	bf94      	ite	ls
 8001e08:	2301      	movls	r3, #1
 8001e0a:	2300      	movhi	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0db      	b.n	8001fce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4a72      	ldr	r2, [pc, #456]	; (8001fe4 <HAL_I2C_Init+0x268>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	0c9b      	lsrs	r3, r3, #18
 8001e20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a64      	ldr	r2, [pc, #400]	; (8001fd8 <HAL_I2C_Init+0x25c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d802      	bhi.n	8001e50 <HAL_I2C_Init+0xd4>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	e009      	b.n	8001e64 <HAL_I2C_Init+0xe8>
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	4a63      	ldr	r2, [pc, #396]	; (8001fe8 <HAL_I2C_Init+0x26c>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	3301      	adds	r3, #1
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4956      	ldr	r1, [pc, #344]	; (8001fd8 <HAL_I2C_Init+0x25c>)
 8001e80:	428b      	cmp	r3, r1
 8001e82:	d80d      	bhi.n	8001ea0 <HAL_I2C_Init+0x124>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e59      	subs	r1, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	bf38      	it	cc
 8001e9c:	2304      	movcc	r3, #4
 8001e9e:	e04f      	b.n	8001f40 <HAL_I2C_Init+0x1c4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d111      	bne.n	8001ecc <HAL_I2C_Init+0x150>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	440b      	add	r3, r1
 8001eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e012      	b.n	8001ef2 <HAL_I2C_Init+0x176>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	0099      	lsls	r1, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Init+0x17e>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e022      	b.n	8001f40 <HAL_I2C_Init+0x1c4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10e      	bne.n	8001f20 <HAL_I2C_Init+0x1a4>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1e58      	subs	r0, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	440b      	add	r3, r1
 8001f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1e:	e00f      	b.n	8001f40 <HAL_I2C_Init+0x1c4>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	0099      	lsls	r1, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	6809      	ldr	r1, [r1, #0]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6911      	ldr	r1, [r2, #16]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68d2      	ldr	r2, [r2, #12]
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	000186a0 	.word	0x000186a0
 8001fdc:	001e847f 	.word	0x001e847f
 8001fe0:	003d08ff 	.word	0x003d08ff
 8001fe4:	431bde83 	.word	0x431bde83
 8001fe8:	10624dd3 	.word	0x10624dd3

08001fec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	817b      	strh	r3, [r7, #10]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7fe ffd4 	bl	8000fac <HAL_GetTick>
 8002004:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	f040 80e0 	bne.w	80021d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2319      	movs	r3, #25
 800201a:	2201      	movs	r2, #1
 800201c:	4970      	ldr	r1, [pc, #448]	; (80021e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f002 f87b 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
 800202c:	e0d3      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_I2C_Master_Transmit+0x50>
 8002038:	2302      	movs	r3, #2
 800203a:	e0cc      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d007      	beq.n	8002062 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002070:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2221      	movs	r2, #33	; 0x21
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2210      	movs	r2, #16
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	893a      	ldrh	r2, [r7, #8]
 8002092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a50      	ldr	r2, [pc, #320]	; (80021e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020a4:	8979      	ldrh	r1, [r7, #10]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f001 fe4e 	bl	8003d4c <I2C_MasterRequestWrite>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e08d      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020d0:	e066      	b.n	80021a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f002 f8f5 	bl	80042c6 <I2C_WaitOnTXEFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00d      	beq.n	80020fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d107      	bne.n	80020fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06b      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d11b      	bne.n	8002174 <HAL_I2C_Master_Transmit+0x188>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	d017      	beq.n	8002174 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	6a39      	ldr	r1, [r7, #32]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f002 f8e5 	bl	8004348 <I2C_WaitOnBTFFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00d      	beq.n	80021a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	2b04      	cmp	r3, #4
 800218a:	d107      	bne.n	800219c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e01a      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d194      	bne.n	80020d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	00100002 	.word	0x00100002
 80021e4:	ffff0000 	.word	0xffff0000

080021e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	817b      	strh	r3, [r7, #10]
 80021fa:	460b      	mov	r3, r1
 80021fc:	813b      	strh	r3, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002202:	f7fe fed3 	bl	8000fac <HAL_GetTick>
 8002206:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b20      	cmp	r3, #32
 8002212:	f040 8208 	bne.w	8002626 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2319      	movs	r3, #25
 800221c:	2201      	movs	r2, #1
 800221e:	497b      	ldr	r1, [pc, #492]	; (800240c <HAL_I2C_Mem_Read+0x224>)
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f001 ff7a 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800222c:	2302      	movs	r3, #2
 800222e:	e1fb      	b.n	8002628 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_I2C_Mem_Read+0x56>
 800223a:	2302      	movs	r3, #2
 800223c:	e1f4      	b.n	8002628 <HAL_I2C_Mem_Read+0x440>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d007      	beq.n	8002264 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2222      	movs	r2, #34	; 0x22
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a5b      	ldr	r2, [pc, #364]	; (8002410 <HAL_I2C_Mem_Read+0x228>)
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a6:	88f8      	ldrh	r0, [r7, #6]
 80022a8:	893a      	ldrh	r2, [r7, #8]
 80022aa:	8979      	ldrh	r1, [r7, #10]
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	4603      	mov	r3, r0
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f001 fdca 	bl	8003e50 <I2C_RequestMemoryRead>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e1b0      	b.n	8002628 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d113      	bne.n	80022f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	623b      	str	r3, [r7, #32]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	623b      	str	r3, [r7, #32]
 80022e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e184      	b.n	8002600 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d11b      	bne.n	8002336 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e164      	b.n	8002600 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	2b02      	cmp	r3, #2
 800233c:	d11b      	bne.n	8002376 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800235c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	e144      	b.n	8002600 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800238c:	e138      	b.n	8002600 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002392:	2b03      	cmp	r3, #3
 8002394:	f200 80f1 	bhi.w	800257a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b01      	cmp	r3, #1
 800239e:	d123      	bne.n	80023e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f002 f810 	bl	80043ca <I2C_WaitOnRXNEFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e139      	b.n	8002628 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023e6:	e10b      	b.n	8002600 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d14e      	bne.n	800248e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	2200      	movs	r2, #0
 80023f8:	4906      	ldr	r1, [pc, #24]	; (8002414 <HAL_I2C_Mem_Read+0x22c>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f001 fe8d 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e10e      	b.n	8002628 <HAL_I2C_Mem_Read+0x440>
 800240a:	bf00      	nop
 800240c:	00100002 	.word	0x00100002
 8002410:	ffff0000 	.word	0xffff0000
 8002414:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800248c:	e0b8      	b.n	8002600 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	2200      	movs	r2, #0
 8002496:	4966      	ldr	r1, [pc, #408]	; (8002630 <HAL_I2C_Mem_Read+0x448>)
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f001 fe3e 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0bf      	b.n	8002628 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	2200      	movs	r2, #0
 80024f2:	494f      	ldr	r1, [pc, #316]	; (8002630 <HAL_I2C_Mem_Read+0x448>)
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f001 fe10 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e091      	b.n	8002628 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002578:	e042      	b.n	8002600 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f001 ff23 	bl	80043ca <I2C_WaitOnRXNEFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e04c      	b.n	8002628 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d118      	bne.n	8002600 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	f47f aec2 	bne.w	800238e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3728      	adds	r7, #40	; 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	00010004 	.word	0x00010004

08002634 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	460b      	mov	r3, r1
 8002642:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002644:	f7fe fcb2 	bl	8000fac <HAL_GetTick>
 8002648:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800264a:	2301      	movs	r3, #1
 800264c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	f040 8110 	bne.w	800287c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2319      	movs	r3, #25
 8002662:	2201      	movs	r2, #1
 8002664:	4988      	ldr	r1, [pc, #544]	; (8002888 <HAL_I2C_IsDeviceReady+0x254>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f001 fd57 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002672:	2302      	movs	r3, #2
 8002674:	e103      	b.n	800287e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_I2C_IsDeviceReady+0x50>
 8002680:	2302      	movs	r3, #2
 8002682:	e0fc      	b.n	800287e <HAL_I2C_IsDeviceReady+0x24a>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d007      	beq.n	80026aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2224      	movs	r2, #36	; 0x24
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a70      	ldr	r2, [pc, #448]	; (800288c <HAL_I2C_IsDeviceReady+0x258>)
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f001 fd15 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0b6      	b.n	800287e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002710:	897b      	ldrh	r3, [r7, #10]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800271e:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fc44 	bl	8000fac <HAL_GetTick>
 8002724:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002754:	e025      	b.n	80027a2 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002756:	f7fe fc29 	bl	8000fac <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d302      	bcc.n	800276c <HAL_I2C_IsDeviceReady+0x138>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	22a0      	movs	r2, #160	; 0xa0
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2ba0      	cmp	r3, #160	; 0xa0
 80027ac:	d005      	beq.n	80027ba <HAL_I2C_IsDeviceReady+0x186>
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <HAL_I2C_IsDeviceReady+0x186>
 80027b4:	7dbb      	ldrb	r3, [r7, #22]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0cd      	beq.n	8002756 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d129      	bne.n	8002824 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027de:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2319      	movs	r3, #25
 80027fc:	2201      	movs	r2, #1
 80027fe:	4922      	ldr	r1, [pc, #136]	; (8002888 <HAL_I2C_IsDeviceReady+0x254>)
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f001 fc8a 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e036      	b.n	800287e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e02c      	b.n	800287e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002832:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800283c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2319      	movs	r3, #25
 8002844:	2201      	movs	r2, #1
 8002846:	4910      	ldr	r1, [pc, #64]	; (8002888 <HAL_I2C_IsDeviceReady+0x254>)
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f001 fc66 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e012      	b.n	800287e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	3301      	adds	r3, #1
 800285c:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	f4ff af33 	bcc.w	80026ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	00100002 	.word	0x00100002
 800288c:	ffff0000 	.word	0xffff0000

08002890 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d003      	beq.n	80028c8 <HAL_I2C_EV_IRQHandler+0x38>
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	f040 80b6 	bne.w	8002a34 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10d      	bne.n	80028fe <HAL_I2C_EV_IRQHandler+0x6e>
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80028e8:	d003      	beq.n	80028f2 <HAL_I2C_EV_IRQHandler+0x62>
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80028f0:	d101      	bne.n	80028f6 <HAL_I2C_EV_IRQHandler+0x66>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_I2C_EV_IRQHandler+0x68>
 80028f6:	2300      	movs	r3, #0
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	f000 8127 	beq.w	8002b4c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00c      	beq.n	8002922 <HAL_I2C_EV_IRQHandler+0x92>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	0a5b      	lsrs	r3, r3, #9
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f001 fddd 	bl	80044d4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fc75 	bl	800320a <I2C_Master_SB>
 8002920:	e087      	b.n	8002a32 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_I2C_EV_IRQHandler+0xb2>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	0a5b      	lsrs	r3, r3, #9
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fceb 	bl	8003316 <I2C_Master_ADD10>
 8002940:	e077      	b.n	8002a32 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	085b      	lsrs	r3, r3, #1
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_I2C_EV_IRQHandler+0xd2>
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	0a5b      	lsrs	r3, r3, #9
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fd05 	bl	800336a <I2C_Master_ADDR>
 8002960:	e067      	b.n	8002a32 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d030      	beq.n	80029d0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800297c:	f000 80e8 	beq.w	8002b50 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	09db      	lsrs	r3, r3, #7
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00f      	beq.n	80029ac <HAL_I2C_EV_IRQHandler+0x11c>
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	0a9b      	lsrs	r3, r3, #10
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <HAL_I2C_EV_IRQHandler+0x11c>
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d103      	bne.n	80029ac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f941 	bl	8002c2c <I2C_MasterTransmit_TXE>
 80029aa:	e042      	b.n	8002a32 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80cb 	beq.w	8002b50 <HAL_I2C_EV_IRQHandler+0x2c0>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	0a5b      	lsrs	r3, r3, #9
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80c4 	beq.w	8002b50 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f9cb 	bl	8002d64 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ce:	e0bf      	b.n	8002b50 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029de:	f000 80b7 	beq.w	8002b50 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00f      	beq.n	8002a0e <HAL_I2C_EV_IRQHandler+0x17e>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	0a9b      	lsrs	r3, r3, #10
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_I2C_EV_IRQHandler+0x17e>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa93 	bl	8002f32 <I2C_MasterReceive_RXNE>
 8002a0c:	e011      	b.n	8002a32 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 809a 	beq.w	8002b50 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	0a5b      	lsrs	r3, r3, #9
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8093 	beq.w	8002b50 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fb03 	bl	8003036 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a30:	e08e      	b.n	8002b50 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002a32:	e08d      	b.n	8002b50 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	e007      	b.n	8002a56 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_I2C_EV_IRQHandler+0x1f8>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	0a5b      	lsrs	r3, r3, #9
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fec1 	bl	8003808 <I2C_Slave_ADDR>
 8002a86:	e066      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x218>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	0a5b      	lsrs	r3, r3, #9
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fef5 	bl	8003890 <I2C_Slave_STOPF>
 8002aa6:	e056      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aa8:	7bbb      	ldrb	r3, [r7, #14]
 8002aaa:	2b21      	cmp	r3, #33	; 0x21
 8002aac:	d002      	beq.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x224>
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
 8002ab0:	2b29      	cmp	r3, #41	; 0x29
 8002ab2:	d125      	bne.n	8002b00 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	09db      	lsrs	r3, r3, #7
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00f      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x250>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	0a9b      	lsrs	r3, r3, #10
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x250>
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d103      	bne.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fdd7 	bl	800368c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ade:	e039      	b.n	8002b54 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d033      	beq.n	8002b54 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	0a5b      	lsrs	r3, r3, #9
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d02d      	beq.n	8002b54 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fe04 	bl	8003706 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002afe:	e029      	b.n	8002b54 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00f      	beq.n	8002b2c <HAL_I2C_EV_IRQHandler+0x29c>
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	0a9b      	lsrs	r3, r3, #10
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <HAL_I2C_EV_IRQHandler+0x29c>
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fe0f 	bl	8003748 <I2C_SlaveReceive_RXNE>
 8002b2a:	e014      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00e      	beq.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	0a5b      	lsrs	r3, r3, #9
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fe3d 	bl	80037c4 <I2C_SlaveReceive_BTF>
 8002b4a:	e004      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002b4c:	bf00      	nop
 8002b4e:	e002      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b50:	bf00      	nop
 8002b52:	e000      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b54:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d150      	bne.n	8002cf4 <I2C_MasterTransmit_TXE+0xc8>
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b21      	cmp	r3, #33	; 0x21
 8002c56:	d14d      	bne.n	8002cf4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d01d      	beq.n	8002c9a <I2C_MasterTransmit_TXE+0x6e>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d01a      	beq.n	8002c9a <I2C_MasterTransmit_TXE+0x6e>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c6a:	d016      	beq.n	8002c9a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c7a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2211      	movs	r2, #17
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ff62 	bl	8002b5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c98:	e060      	b.n	8002d5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ca8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b40      	cmp	r3, #64	; 0x40
 8002cd2:	d107      	bne.n	8002ce4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff7d 	bl	8002bdc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ce2:	e03b      	b.n	8002d5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff35 	bl	8002b5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cf2:	e033      	b.n	8002d5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b21      	cmp	r3, #33	; 0x21
 8002cf8:	d005      	beq.n	8002d06 <I2C_MasterTransmit_TXE+0xda>
 8002cfa:	7bbb      	ldrb	r3, [r7, #14]
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d12d      	bne.n	8002d5c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b22      	cmp	r3, #34	; 0x22
 8002d04:	d12a      	bne.n	8002d5c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d108      	bne.n	8002d22 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d20:	e01c      	b.n	8002d5c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d103      	bne.n	8002d36 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f898 	bl	8002e64 <I2C_MemoryTransmit_TXE_BTF>
}
 8002d34:	e012      	b.n	8002d5c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d5a:	e7ff      	b.n	8002d5c <I2C_MasterTransmit_TXE+0x130>
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b21      	cmp	r3, #33	; 0x21
 8002d7c:	d165      	bne.n	8002e4a <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002dac:	e056      	b.n	8002e5c <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d01d      	beq.n	8002df0 <I2C_MasterTransmit_BTF+0x8c>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d01a      	beq.n	8002df0 <I2C_MasterTransmit_BTF+0x8c>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dc0:	d016      	beq.n	8002df0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dd0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2211      	movs	r2, #17
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff feb7 	bl	8002b5c <HAL_I2C_MasterTxCpltCallback>
}
 8002dee:	e035      	b.n	8002e5c <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dfe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d107      	bne.n	8002e3a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff fed2 	bl	8002bdc <HAL_I2C_MemTxCpltCallback>
}
 8002e38:	e010      	b.n	8002e5c <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fe8a 	bl	8002b5c <HAL_I2C_MasterTxCpltCallback>
}
 8002e48:	e008      	b.n	8002e5c <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d102      	bne.n	8002e5c <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f804 	bl	8002e64 <I2C_MemoryTransmit_TXE_BTF>
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11d      	bne.n	8002eb0 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10b      	bne.n	8002e94 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002e92:	e048      	b.n	8002f26 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	121b      	asrs	r3, r3, #8
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002eae:	e03a      	b.n	8002f26 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10b      	bne.n	8002ed0 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ece:	e02a      	b.n	8002f26 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d126      	bne.n	8002f26 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b22      	cmp	r3, #34	; 0x22
 8002ee2:	d108      	bne.n	8002ef6 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef2:	601a      	str	r2, [r3, #0]
}
 8002ef4:	e017      	b.n	8002f26 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b21      	cmp	r3, #33	; 0x21
 8002f00:	d111      	bne.n	8002f26 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b22      	cmp	r3, #34	; 0x22
 8002f44:	d173      	bne.n	800302e <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d920      	bls.n	8002f96 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d154      	bne.n	800302e <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f92:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002f94:	e04b      	b.n	800302e <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d047      	beq.n	800302e <I2C_MasterReceive_RXNE+0xfc>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d002      	beq.n	8002faa <I2C_MasterReceive_RXNE+0x78>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d141      	bne.n	800302e <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fc8:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d10a      	bne.n	800301a <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fdec 	bl	8002bf0 <HAL_I2C_MemRxCpltCallback>
}
 8003018:	e009      	b.n	800302e <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2212      	movs	r2, #18
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fda1 	bl	8002b70 <HAL_I2C_MasterRxCpltCallback>
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b04      	cmp	r3, #4
 800304c:	d11b      	bne.n	8003086 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003084:	e0bd      	b.n	8003202 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d129      	bne.n	80030e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d00a      	beq.n	80030bc <I2C_MasterReceive_BTF+0x86>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d007      	beq.n	80030bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030e2:	e08e      	b.n	8003202 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d176      	bne.n	80031dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d002      	beq.n	80030fa <I2C_MasterReceive_BTF+0xc4>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b10      	cmp	r3, #16
 80030f8:	d108      	bne.n	800310c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	e019      	b.n	8003140 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b04      	cmp	r3, #4
 8003110:	d002      	beq.n	8003118 <I2C_MasterReceive_BTF+0xe2>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d108      	bne.n	800312a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e00a      	b.n	8003140 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b10      	cmp	r3, #16
 800312e:	d007      	beq.n	8003140 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800319a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d10a      	bne.n	80031c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fd16 	bl	8002bf0 <HAL_I2C_MemRxCpltCallback>
}
 80031c4:	e01d      	b.n	8003202 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2212      	movs	r2, #18
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fccb 	bl	8002b70 <HAL_I2C_MasterRxCpltCallback>
}
 80031da:	e012      	b.n	8003202 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d117      	bne.n	800324e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003236:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003238:	e067      	b.n	800330a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	611a      	str	r2, [r3, #16]
}
 800324c:	e05d      	b.n	800330a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003256:	d133      	bne.n	80032c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b21      	cmp	r3, #33	; 0x21
 8003262:	d109      	bne.n	8003278 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	e008      	b.n	800328a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	b2da      	uxtb	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <I2C_Master_SB+0x92>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d108      	bne.n	80032ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d032      	beq.n	800330a <I2C_Master_SB+0x100>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d02d      	beq.n	800330a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032bc:	605a      	str	r2, [r3, #4]
}
 80032be:	e024      	b.n	800330a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10e      	bne.n	80032e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	11db      	asrs	r3, r3, #7
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 0306 	and.w	r3, r3, #6
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f063 030f 	orn	r3, r3, #15
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]
}
 80032e4:	e011      	b.n	800330a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d10d      	bne.n	800330a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	11db      	asrs	r3, r3, #7
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f003 0306 	and.w	r3, r3, #6
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f063 030e 	orn	r3, r3, #14
 8003302:	b2da      	uxtb	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	611a      	str	r2, [r3, #16]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	b2da      	uxtb	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <I2C_Master_ADD10+0x24>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	2b00      	cmp	r3, #0
 8003338:	d011      	beq.n	800335e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <I2C_Master_ADD10+0x38>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800335c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800336a:	b480      	push	{r7}
 800336c:	b091      	sub	sp, #68	; 0x44
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003378:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b22      	cmp	r3, #34	; 0x22
 8003392:	f040 8169 	bne.w	8003668 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10f      	bne.n	80033be <I2C_Master_ADDR+0x54>
 800339e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d10b      	bne.n	80033be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a6:	2300      	movs	r3, #0
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	e160      	b.n	8003680 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11d      	bne.n	8003402 <I2C_Master_ADDR+0x98>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033ce:	d118      	bne.n	8003402 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003400:	e13e      	b.n	8003680 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d113      	bne.n	8003434 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340c:	2300      	movs	r3, #0
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e115      	b.n	8003660 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	f040 808a 	bne.w	8003554 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003446:	d137      	bne.n	80034b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003456:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003466:	d113      	bne.n	8003490 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	e0e7      	b.n	8003660 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003490:	2300      	movs	r3, #0
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e0d3      	b.n	8003660 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d02e      	beq.n	800351c <I2C_Master_ADDR+0x1b2>
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d02b      	beq.n	800351c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80034c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c6:	2b12      	cmp	r3, #18
 80034c8:	d102      	bne.n	80034d0 <I2C_Master_ADDR+0x166>
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d125      	bne.n	800351c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d00e      	beq.n	80034f4 <I2C_Master_ADDR+0x18a>
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d00b      	beq.n	80034f4 <I2C_Master_ADDR+0x18a>
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d008      	beq.n	80034f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	e007      	b.n	8003504 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003502:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	e0a1      	b.n	8003660 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	61bb      	str	r3, [r7, #24]
 8003540:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e085      	b.n	8003660 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d14d      	bne.n	80035fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	2b04      	cmp	r3, #4
 8003562:	d016      	beq.n	8003592 <I2C_Master_ADDR+0x228>
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	2b02      	cmp	r3, #2
 8003568:	d013      	beq.n	8003592 <I2C_Master_ADDR+0x228>
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	2b10      	cmp	r3, #16
 800356e:	d010      	beq.n	8003592 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e007      	b.n	80035a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b0:	d117      	bne.n	80035e2 <I2C_Master_ADDR+0x278>
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035b8:	d00b      	beq.n	80035d2 <I2C_Master_ADDR+0x268>
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d008      	beq.n	80035d2 <I2C_Master_ADDR+0x268>
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d005      	beq.n	80035d2 <I2C_Master_ADDR+0x268>
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d002      	beq.n	80035d2 <I2C_Master_ADDR+0x268>
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d107      	bne.n	80035e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	e032      	b.n	8003660 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003608:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003618:	d117      	bne.n	800364a <I2C_Master_ADDR+0x2e0>
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003620:	d00b      	beq.n	800363a <I2C_Master_ADDR+0x2d0>
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	2b01      	cmp	r3, #1
 8003626:	d008      	beq.n	800363a <I2C_Master_ADDR+0x2d0>
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	2b08      	cmp	r3, #8
 800362c:	d005      	beq.n	800363a <I2C_Master_ADDR+0x2d0>
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	2b10      	cmp	r3, #16
 8003632:	d002      	beq.n	800363a <I2C_Master_ADDR+0x2d0>
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	2b20      	cmp	r3, #32
 8003638:	d107      	bne.n	800364a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003648:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003666:	e00b      	b.n	8003680 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
}
 800367e:	e7ff      	b.n	8003680 <I2C_Master_ADDR+0x316>
 8003680:	bf00      	nop
 8003682:	3744      	adds	r7, #68	; 0x44
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02b      	beq.n	80036fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d114      	bne.n	80036fe <I2C_SlaveTransmit_TXE+0x72>
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b29      	cmp	r3, #41	; 0x29
 80036d8:	d111      	bne.n	80036fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2221      	movs	r2, #33	; 0x21
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2228      	movs	r2, #40	; 0x28
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff fa43 	bl	8002b84 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d011      	beq.n	800373c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d02c      	beq.n	80037bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d114      	bne.n	80037bc <I2C_SlaveReceive_RXNE+0x74>
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b2a      	cmp	r3, #42	; 0x2a
 8003796:	d111      	bne.n	80037bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2222      	movs	r2, #34	; 0x22
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2228      	movs	r2, #40	; 0x28
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff f9ee 	bl	8002b98 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003822:	2b28      	cmp	r3, #40	; 0x28
 8003824:	d127      	bne.n	8003876 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003834:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	09db      	lsrs	r3, r3, #7
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	81bb      	strh	r3, [r7, #12]
 8003858:	e002      	b.n	8003860 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003868:	89ba      	ldrh	r2, [r7, #12]
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	4619      	mov	r1, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff f99c 	bl	8002bac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003874:	e008      	b.n	8003888 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f06f 0202 	mvn.w	r2, #2
 800387e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ec:	d172      	bne.n	80039d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b22      	cmp	r3, #34	; 0x22
 80038f2:	d002      	beq.n	80038fa <I2C_Slave_STOPF+0x6a>
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b2a      	cmp	r3, #42	; 0x2a
 80038f8:	d135      	bne.n	8003966 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f043 0204 	orr.w	r2, r3, #4
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800392c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd ff9c 	bl	8001870 <HAL_DMA_GetState>
 8003938:	4603      	mov	r3, r0
 800393a:	2b01      	cmp	r3, #1
 800393c:	d049      	beq.n	80039d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	4a69      	ldr	r2, [pc, #420]	; (8003ae8 <I2C_Slave_STOPF+0x258>)
 8003944:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd fde4 	bl	8001518 <HAL_DMA_Abort_IT>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d03d      	beq.n	80039d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003960:	4610      	mov	r0, r2
 8003962:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003964:	e035      	b.n	80039d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f043 0204 	orr.w	r2, r3, #4
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003998:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd ff66 	bl	8001870 <HAL_DMA_GetState>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d014      	beq.n	80039d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ae:	4a4e      	ldr	r2, [pc, #312]	; (8003ae8 <I2C_Slave_STOPF+0x258>)
 80039b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fdae 	bl	8001518 <HAL_DMA_Abort_IT>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039cc:	4610      	mov	r0, r2
 80039ce:	4798      	blx	r3
 80039d0:	e000      	b.n	80039d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d03e      	beq.n	8003a5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d112      	bne.n	8003a12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d112      	bne.n	8003a46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f043 0204 	orr.w	r2, r3, #4
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f843 	bl	8003af0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003a6a:	e039      	b.n	8003ae0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a70:	d109      	bne.n	8003a86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2228      	movs	r2, #40	; 0x28
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff f889 	bl	8002b98 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b28      	cmp	r3, #40	; 0x28
 8003a90:	d111      	bne.n	8003ab6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a15      	ldr	r2, [pc, #84]	; (8003aec <I2C_Slave_STOPF+0x25c>)
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff f88a 	bl	8002bc8 <HAL_I2C_ListenCpltCallback>
}
 8003ab4:	e014      	b.n	8003ae0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	2b22      	cmp	r3, #34	; 0x22
 8003abc:	d002      	beq.n	8003ac4 <I2C_Slave_STOPF+0x234>
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2b22      	cmp	r3, #34	; 0x22
 8003ac2:	d10d      	bne.n	8003ae0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff f85c 	bl	8002b98 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	0800401d 	.word	0x0800401d
 8003aec:	ffff0000 	.word	0xffff0000

08003af0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d10a      	bne.n	8003b22 <I2C_ITError+0x32>
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b22      	cmp	r3, #34	; 0x22
 8003b10:	d107      	bne.n	8003b22 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b20:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b28:	2b28      	cmp	r3, #40	; 0x28
 8003b2a:	d107      	bne.n	8003b3c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2228      	movs	r2, #40	; 0x28
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b3a:	e015      	b.n	8003b68 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4a:	d006      	beq.n	8003b5a <I2C_ITError+0x6a>
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b60      	cmp	r3, #96	; 0x60
 8003b50:	d003      	beq.n	8003b5a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b76:	d162      	bne.n	8003c3e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b86:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d020      	beq.n	8003bd8 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	4a6a      	ldr	r2, [pc, #424]	; (8003d44 <I2C_ITError+0x254>)
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fcb8 	bl	8001518 <HAL_DMA_Abort_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8089 	beq.w	8003cc2 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4798      	blx	r3
 8003bd6:	e074      	b.n	8003cc2 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	4a59      	ldr	r2, [pc, #356]	; (8003d44 <I2C_ITError+0x254>)
 8003bde:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd fc97 	bl	8001518 <HAL_DMA_Abort_IT>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d068      	beq.n	8003cc2 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d10b      	bne.n	8003c16 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4798      	blx	r3
 8003c3c:	e041      	b.n	8003cc2 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b60      	cmp	r3, #96	; 0x60
 8003c48:	d125      	bne.n	8003c96 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d10b      	bne.n	8003c7e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fe ffc2 	bl	8002c18 <HAL_I2C_AbortCpltCallback>
 8003c94:	e015      	b.n	8003cc2 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d10b      	bne.n	8003cbc <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fe ffa1 	bl	8002c04 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10e      	bne.n	8003cf0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cfe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d06:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d113      	bne.n	8003d3c <I2C_ITError+0x24c>
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b28      	cmp	r3, #40	; 0x28
 8003d18:	d110      	bne.n	8003d3c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <I2C_ITError+0x258>)
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fe ff46 	bl	8002bc8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	0800401d 	.word	0x0800401d
 8003d48:	ffff0000 	.word	0xffff0000

08003d4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d006      	beq.n	8003d76 <I2C_MasterRequestWrite+0x2a>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d003      	beq.n	8003d76 <I2C_MasterRequestWrite+0x2a>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d74:	d108      	bne.n	8003d88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e00b      	b.n	8003da0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	2b12      	cmp	r3, #18
 8003d8e:	d107      	bne.n	8003da0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f9b4 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00c      	beq.n	8003dd2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e035      	b.n	8003e3e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dda:	d108      	bne.n	8003dee <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ddc:	897b      	ldrh	r3, [r7, #10]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dea:	611a      	str	r2, [r3, #16]
 8003dec:	e01b      	b.n	8003e26 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003dee:	897b      	ldrh	r3, [r7, #10]
 8003df0:	11db      	asrs	r3, r3, #7
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f003 0306 	and.w	r3, r3, #6
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f063 030f 	orn	r3, r3, #15
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	490f      	ldr	r1, [pc, #60]	; (8003e48 <I2C_MasterRequestWrite+0xfc>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f9db 	bl	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e010      	b.n	8003e3e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e1c:	897b      	ldrh	r3, [r7, #10]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4908      	ldr	r1, [pc, #32]	; (8003e4c <I2C_MasterRequestWrite+0x100>)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f9cb 	bl	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	00010008 	.word	0x00010008
 8003e4c:	00010002 	.word	0x00010002

08003e50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	4608      	mov	r0, r1
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	817b      	strh	r3, [r7, #10]
 8003e62:	460b      	mov	r3, r1
 8003e64:	813b      	strh	r3, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f93f 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00c      	beq.n	8003ebc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e0a9      	b.n	8004010 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ebc:	897b      	ldrh	r3, [r7, #10]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	6a3a      	ldr	r2, [r7, #32]
 8003ed0:	4951      	ldr	r1, [pc, #324]	; (8004018 <I2C_RequestMemoryRead+0x1c8>)
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f978 	bl	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e096      	b.n	8004010 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	6a39      	ldr	r1, [r7, #32]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f9e2 	bl	80042c6 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d107      	bne.n	8003f20 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e075      	b.n	8004010 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2a:	893b      	ldrh	r3, [r7, #8]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]
 8003f34:	e021      	b.n	8003f7a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f36:	893b      	ldrh	r3, [r7, #8]
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	6a39      	ldr	r1, [r7, #32]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f9bc 	bl	80042c6 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d107      	bne.n	8003f6c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e04f      	b.n	8004010 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f70:	893b      	ldrh	r3, [r7, #8]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	6a39      	ldr	r1, [r7, #32]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f9a1 	bl	80042c6 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d107      	bne.n	8003fa2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e034      	b.n	8004010 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f8a9 	bl	800411a <I2C_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e013      	b.n	8004010 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fe8:	897b      	ldrh	r3, [r7, #10]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	6a3a      	ldr	r2, [r7, #32]
 8003ffc:	4906      	ldr	r1, [pc, #24]	; (8004018 <I2C_RequestMemoryRead+0x1c8>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f8e2 	bl	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	00010002 	.word	0x00010002

0800401c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	2200      	movs	r2, #0
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	2200      	movs	r2, #0
 8004050:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004060:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	2200      	movs	r2, #0
 8004076:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	2200      	movs	r2, #0
 8004086:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b60      	cmp	r3, #96	; 0x60
 80040a2:	d10e      	bne.n	80040c2 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7fe fdac 	bl	8002c18 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040c0:	e027      	b.n	8004112 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040c2:	7afb      	ldrb	r3, [r7, #11]
 80040c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c8:	2b28      	cmp	r3, #40	; 0x28
 80040ca:	d117      	bne.n	80040fc <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2228      	movs	r2, #40	; 0x28
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040fa:	e007      	b.n	800410c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7fe fd79 	bl	8002c04 <HAL_I2C_ErrorCallback>
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	603b      	str	r3, [r7, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800412a:	e025      	b.n	8004178 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d021      	beq.n	8004178 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004134:	f7fc ff3a 	bl	8000fac <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d302      	bcc.n	800414a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d116      	bne.n	8004178 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e023      	b.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	0c1b      	lsrs	r3, r3, #16
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d10d      	bne.n	800419e <I2C_WaitOnFlagUntilTimeout+0x84>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	43da      	mvns	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4013      	ands	r3, r2
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	e00c      	b.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d0b6      	beq.n	800412c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041d6:	e051      	b.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d123      	bne.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004200:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f043 0204 	orr.w	r2, r3, #4
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e046      	b.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d021      	beq.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004238:	f7fc feb8 	bl	8000fac <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e020      	b.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	0c1b      	lsrs	r3, r3, #16
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d10c      	bne.n	80042a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	43da      	mvns	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e00b      	b.n	80042b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4013      	ands	r3, r2
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bf14      	ite	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	2300      	moveq	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d18d      	bne.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042d2:	e02d      	b.n	8004330 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f8ce 	bl	8004476 <I2C_IsAcknowledgeFailed>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e02d      	b.n	8004340 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d021      	beq.n	8004330 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ec:	f7fc fe5e 	bl	8000fac <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d302      	bcc.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d116      	bne.n	8004330 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e007      	b.n	8004340 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d1ca      	bne.n	80042d4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004354:	e02d      	b.n	80043b2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f88d 	bl	8004476 <I2C_IsAcknowledgeFailed>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e02d      	b.n	80043c2 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d021      	beq.n	80043b2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436e:	f7fc fe1d 	bl	8000fac <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d116      	bne.n	80043b2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e007      	b.n	80043c2 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d1ca      	bne.n	8004356 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043d6:	e042      	b.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d119      	bne.n	800441a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f06f 0210 	mvn.w	r2, #16
 80043ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e029      	b.n	800446e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441a:	f7fc fdc7 	bl	8000fac <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d116      	bne.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e007      	b.n	800446e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d1b5      	bne.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448c:	d11b      	bne.n	80044c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004496:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f043 0204 	orr.w	r2, r3, #4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044e4:	d103      	bne.n	80044ee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80044ec:	e007      	b.n	80044fe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044f6:	d102      	bne.n	80044fe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2208      	movs	r2, #8
 80044fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e128      	b.n	8004770 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a90      	ldr	r2, [pc, #576]	; (8004778 <HAL_I2S_Init+0x26c>)
 8004536:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f00a f93b 	bl	800e7b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004554:	f023 030f 	bic.w	r3, r3, #15
 8004558:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2202      	movs	r2, #2
 8004560:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d060      	beq.n	800462c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004572:	2310      	movs	r3, #16
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e001      	b.n	800457c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004578:	2320      	movs	r3, #32
 800457a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b20      	cmp	r3, #32
 8004582:	d802      	bhi.n	800458a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800458a:	2001      	movs	r0, #1
 800458c:	f002 fe3a 	bl	8007204 <HAL_RCCEx_GetPeriphCLKFreq>
 8004590:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800459a:	d125      	bne.n	80045e8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	461a      	mov	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	3305      	adds	r3, #5
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e01f      	b.n	8004606 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	3305      	adds	r3, #5
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	e00e      	b.n	8004606 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	3305      	adds	r3, #5
 8004604:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4a5c      	ldr	r2, [pc, #368]	; (800477c <HAL_I2S_Init+0x270>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	08db      	lsrs	r3, r3, #3
 8004610:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e003      	b.n	8004634 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800462c:	2302      	movs	r3, #2
 800462e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d902      	bls.n	8004640 <HAL_I2S_Init+0x134>
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2bff      	cmp	r3, #255	; 0xff
 800463e:	d907      	bls.n	8004650 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	f043 0210 	orr.w	r2, r3, #16
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e08f      	b.n	8004770 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	ea42 0103 	orr.w	r1, r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	430a      	orrs	r2, r1
 8004662:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800466e:	f023 030f 	bic.w	r3, r3, #15
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6851      	ldr	r1, [r2, #4]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6892      	ldr	r2, [r2, #8]
 800467a:	4311      	orrs	r1, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68d2      	ldr	r2, [r2, #12]
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6992      	ldr	r2, [r2, #24]
 8004686:	430a      	orrs	r2, r1
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004692:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d161      	bne.n	8004760 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a38      	ldr	r2, [pc, #224]	; (8004780 <HAL_I2S_Init+0x274>)
 80046a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a37      	ldr	r2, [pc, #220]	; (8004784 <HAL_I2S_Init+0x278>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d101      	bne.n	80046b0 <HAL_I2S_Init+0x1a4>
 80046ac:	4b36      	ldr	r3, [pc, #216]	; (8004788 <HAL_I2S_Init+0x27c>)
 80046ae:	e001      	b.n	80046b4 <HAL_I2S_Init+0x1a8>
 80046b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	4932      	ldr	r1, [pc, #200]	; (8004784 <HAL_I2S_Init+0x278>)
 80046bc:	428a      	cmp	r2, r1
 80046be:	d101      	bne.n	80046c4 <HAL_I2S_Init+0x1b8>
 80046c0:	4a31      	ldr	r2, [pc, #196]	; (8004788 <HAL_I2S_Init+0x27c>)
 80046c2:	e001      	b.n	80046c8 <HAL_I2S_Init+0x1bc>
 80046c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80046c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80046cc:	f023 030f 	bic.w	r3, r3, #15
 80046d0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2b      	ldr	r2, [pc, #172]	; (8004784 <HAL_I2S_Init+0x278>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_I2S_Init+0x1d4>
 80046dc:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <HAL_I2S_Init+0x27c>)
 80046de:	e001      	b.n	80046e4 <HAL_I2S_Init+0x1d8>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e4:	2202      	movs	r2, #2
 80046e6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a25      	ldr	r2, [pc, #148]	; (8004784 <HAL_I2S_Init+0x278>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <HAL_I2S_Init+0x1ea>
 80046f2:	4b25      	ldr	r3, [pc, #148]	; (8004788 <HAL_I2S_Init+0x27c>)
 80046f4:	e001      	b.n	80046fa <HAL_I2S_Init+0x1ee>
 80046f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004706:	d003      	beq.n	8004710 <HAL_I2S_Init+0x204>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d103      	bne.n	8004718 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	e001      	b.n	800471c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	b299      	uxth	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004732:	4303      	orrs	r3, r0
 8004734:	b29b      	uxth	r3, r3
 8004736:	430b      	orrs	r3, r1
 8004738:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800473a:	4313      	orrs	r3, r2
 800473c:	b29a      	uxth	r2, r3
 800473e:	897b      	ldrh	r3, [r7, #10]
 8004740:	4313      	orrs	r3, r2
 8004742:	b29b      	uxth	r3, r3
 8004744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004748:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <HAL_I2S_Init+0x278>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d101      	bne.n	8004758 <HAL_I2S_Init+0x24c>
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_I2S_Init+0x27c>)
 8004756:	e001      	b.n	800475c <HAL_I2S_Init+0x250>
 8004758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800475c:	897a      	ldrh	r2, [r7, #10]
 800475e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3720      	adds	r7, #32
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	08004e35 	.word	0x08004e35
 800477c:	cccccccd 	.word	0xcccccccd
 8004780:	08004fbd 	.word	0x08004fbd
 8004784:	40003800 	.word	0x40003800
 8004788:	40003400 	.word	0x40003400

0800478c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_I2S_Transmit_DMA+0x1a>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e08e      	b.n	80048c8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_I2S_Transmit_DMA+0x2e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e086      	b.n	80048c8 <HAL_I2S_Transmit_DMA+0x13c>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d005      	beq.n	80047da <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
 80047d8:	e076      	b.n	80048c8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2203      	movs	r2, #3
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d002      	beq.n	8004806 <HAL_I2S_Transmit_DMA+0x7a>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d10a      	bne.n	800481c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	855a      	strh	r2, [r3, #42]	; 0x2a
 800481a:	e005      	b.n	8004828 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	4a28      	ldr	r2, [pc, #160]	; (80048d0 <HAL_I2S_Transmit_DMA+0x144>)
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	4a27      	ldr	r2, [pc, #156]	; (80048d4 <HAL_I2S_Transmit_DMA+0x148>)
 8004836:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	4a26      	ldr	r2, [pc, #152]	; (80048d8 <HAL_I2S_Transmit_DMA+0x14c>)
 800483e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004848:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004850:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004858:	f7fc fd96 	bl	8001388 <HAL_DMA_Start_IT>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00f      	beq.n	8004882 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	f043 0208 	orr.w	r2, r3, #8
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e022      	b.n	80048c8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d107      	bne.n	80048a0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800489e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0202 	orr.w	r2, r2, #2
 80048bc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	08004d13 	.word	0x08004d13
 80048d4:	08004cd1 	.word	0x08004cd1
 80048d8:	08004d2f 	.word	0x08004d2f

080048dc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f0:	d004      	beq.n	80048fc <HAL_I2S_DMAStop+0x20>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 80d1 	bne.w	8004a9e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00f      	beq.n	8004924 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	4618      	mov	r0, r3
 800490a:	f7fc fd95 	bl	8001438 <HAL_DMA_Abort>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	f043 0208 	orr.w	r2, r3, #8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004924:	2364      	movs	r3, #100	; 0x64
 8004926:	2201      	movs	r2, #1
 8004928:	2102      	movs	r1, #2
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fb0c 	bl	8004f48 <I2S_WaitFlagStateUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00b      	beq.n	800494e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	f043 0201 	orr.w	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800494e:	2364      	movs	r3, #100	; 0x64
 8004950:	2200      	movs	r2, #0
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 faf7 	bl	8004f48 <I2S_WaitFlagStateUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004964:	f043 0201 	orr.w	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004986:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0202 	bic.w	r2, r2, #2
 80049a4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	f040 8165 	bne.w	8004c7e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00f      	beq.n	80049dc <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fc fd39 	bl	8001438 <HAL_DMA_Abort>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	f043 0208 	orr.w	r2, r3, #8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a8a      	ldr	r2, [pc, #552]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <HAL_I2S_DMAStop+0x10e>
 80049e6:	4b8a      	ldr	r3, [pc, #552]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 80049e8:	e001      	b.n	80049ee <HAL_I2S_DMAStop+0x112>
 80049ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4985      	ldr	r1, [pc, #532]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 80049f6:	428b      	cmp	r3, r1
 80049f8:	d101      	bne.n	80049fe <HAL_I2S_DMAStop+0x122>
 80049fa:	4b85      	ldr	r3, [pc, #532]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 80049fc:	e001      	b.n	8004a02 <HAL_I2S_DMAStop+0x126>
 80049fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a06:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a7e      	ldr	r2, [pc, #504]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d101      	bne.n	8004a1a <HAL_I2S_DMAStop+0x13e>
 8004a16:	4b7e      	ldr	r3, [pc, #504]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004a18:	e001      	b.n	8004a1e <HAL_I2S_DMAStop+0x142>
 8004a1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a79      	ldr	r2, [pc, #484]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <HAL_I2S_DMAStop+0x154>
 8004a2c:	4b78      	ldr	r3, [pc, #480]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004a2e:	e001      	b.n	8004a34 <HAL_I2S_DMAStop+0x158>
 8004a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a73      	ldr	r2, [pc, #460]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_I2S_DMAStop+0x16c>
 8004a44:	4b72      	ldr	r3, [pc, #456]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004a46:	e001      	b.n	8004a4c <HAL_I2S_DMAStop+0x170>
 8004a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	496e      	ldr	r1, [pc, #440]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004a54:	428b      	cmp	r3, r1
 8004a56:	d101      	bne.n	8004a5c <HAL_I2S_DMAStop+0x180>
 8004a58:	4b6d      	ldr	r3, [pc, #436]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004a5a:	e001      	b.n	8004a60 <HAL_I2S_DMAStop+0x184>
 8004a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10c      	bne.n	8004a88 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004a86:	e0fa      	b.n	8004c7e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5f      	ldr	r2, [pc, #380]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_I2S_DMAStop+0x1ba>
 8004a92:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004a94:	e001      	b.n	8004a9a <HAL_I2S_DMAStop+0x1be>
 8004a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a9a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004a9c:	e0ef      	b.n	8004c7e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa6:	d005      	beq.n	8004ab4 <HAL_I2S_DMAStop+0x1d8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab0:	f040 80e5 	bne.w	8004c7e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00f      	beq.n	8004adc <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fc fcb9 	bl	8001438 <HAL_DMA_Abort>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad0:	f043 0208 	orr.w	r2, r3, #8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	f040 809a 	bne.w	8004c1e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00f      	beq.n	8004b12 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fc fc9e 	bl	8001438 <HAL_DMA_Abort>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f043 0208 	orr.w	r2, r3, #8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8004b12:	f7fc fa4b 	bl	8000fac <HAL_GetTick>
 8004b16:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004b18:	e012      	b.n	8004b40 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004b1a:	f7fc fa47 	bl	8000fac <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b64      	cmp	r3, #100	; 0x64
 8004b26:	d90b      	bls.n	8004b40 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a31      	ldr	r2, [pc, #196]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_I2S_DMAStop+0x272>
 8004b4a:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004b4c:	e001      	b.n	8004b52 <HAL_I2S_DMAStop+0x276>
 8004b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d1de      	bne.n	8004b1a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004b5c:	e012      	b.n	8004b84 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004b5e:	f7fc fa25 	bl	8000fac <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b64      	cmp	r3, #100	; 0x64
 8004b6a:	d90b      	bls.n	8004b84 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	f043 0201 	orr.w	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a20      	ldr	r2, [pc, #128]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_I2S_DMAStop+0x2b6>
 8004b8e:	4b20      	ldr	r3, [pc, #128]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004b90:	e001      	b.n	8004b96 <HAL_I2S_DMAStop+0x2ba>
 8004b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d0de      	beq.n	8004b5e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d101      	bne.n	8004bae <HAL_I2S_DMAStop+0x2d2>
 8004baa:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004bac:	e001      	b.n	8004bb2 <HAL_I2S_DMAStop+0x2d6>
 8004bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4914      	ldr	r1, [pc, #80]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004bba:	428b      	cmp	r3, r1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2S_DMAStop+0x2e6>
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004bc0:	e001      	b.n	8004bc6 <HAL_I2S_DMAStop+0x2ea>
 8004bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bca:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <HAL_I2S_DMAStop+0x302>
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004bdc:	e001      	b.n	8004be2 <HAL_I2S_DMAStop+0x306>
 8004bde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a07      	ldr	r2, [pc, #28]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2S_DMAStop+0x31a>
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004bf4:	e001      	b.n	8004bfa <HAL_I2S_DMAStop+0x31e>
 8004bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4902      	ldr	r1, [pc, #8]	; (8004c0c <HAL_I2S_DMAStop+0x330>)
 8004c02:	428b      	cmp	r3, r1
 8004c04:	d106      	bne.n	8004c14 <HAL_I2S_DMAStop+0x338>
 8004c06:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <HAL_I2S_DMAStop+0x334>)
 8004c08:	e006      	b.n	8004c18 <HAL_I2S_DMAStop+0x33c>
 8004c0a:	bf00      	nop
 8004c0c:	40003800 	.word	0x40003800
 8004c10:	40003400 	.word	0x40003400
 8004c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c18:	f022 0202 	bic.w	r2, r2, #2
 8004c1c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5c:	d10c      	bne.n	8004c78 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e002      	b.n	8004c7e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8004c86:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10e      	bne.n	8004d04 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0202 	bic.w	r2, r2, #2
 8004cf4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f009 fbcd 	bl	800e4a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f009 fbd1 	bl	800e4c8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0203 	bic.w	r2, r2, #3
 8004d4a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	f043 0208 	orr.w	r2, r3, #8
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff ffa5 	bl	8004cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	881a      	ldrh	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	1c9a      	adds	r2, r3, #2
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10e      	bne.n	8004dce <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dbe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f009 fb6b 	bl	800e4a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	b292      	uxth	r2, r2
 8004dea:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10e      	bne.n	8004e2c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e1c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ff3e 	bl	8004ca8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d13a      	bne.n	8004ec6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d109      	bne.n	8004e6e <I2S_IRQHandler+0x3a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d102      	bne.n	8004e6e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ffb4 	bl	8004dd6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d126      	bne.n	8004ec6 <I2S_IRQHandler+0x92>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d11f      	bne.n	8004ec6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e94:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e96:	2300      	movs	r3, #0
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	f043 0202 	orr.w	r2, r3, #2
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff fefb 	bl	8004cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d136      	bne.n	8004f40 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d109      	bne.n	8004ef0 <I2S_IRQHandler+0xbc>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b80      	cmp	r3, #128	; 0x80
 8004ee8:	d102      	bne.n	8004ef0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ff45 	bl	8004d7a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d122      	bne.n	8004f40 <I2S_IRQHandler+0x10c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d11b      	bne.n	8004f40 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f16:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	f043 0204 	orr.w	r2, r3, #4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff febe 	bl	8004cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f40:	bf00      	nop
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f58:	f7fc f828 	bl	8000fac <HAL_GetTick>
 8004f5c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004f5e:	e018      	b.n	8004f92 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d014      	beq.n	8004f92 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004f68:	f7fc f820 	bl	8000fac <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d902      	bls.n	8004f7e <I2S_WaitFlagStateUntilTimeout+0x36>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e00f      	b.n	8004fb2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d1d7      	bne.n	8004f60 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4aa2      	ldr	r2, [pc, #648]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004fd6:	4ba2      	ldr	r3, [pc, #648]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fd8:	e001      	b.n	8004fde <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a9b      	ldr	r2, [pc, #620]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d101      	bne.n	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ff4:	4b9a      	ldr	r3, [pc, #616]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ff6:	e001      	b.n	8004ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005008:	d004      	beq.n	8005014 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 8099 	bne.w	8005146 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b02      	cmp	r3, #2
 800501c:	d107      	bne.n	800502e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f925 	bl	8005278 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	d107      	bne.n	8005048 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9c8 	bl	80053d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d13a      	bne.n	80050c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d035      	beq.n	80050c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a7e      	ldr	r2, [pc, #504]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d101      	bne.n	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005066:	4b7e      	ldr	r3, [pc, #504]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005068:	e001      	b.n	800506e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800506a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4979      	ldr	r1, [pc, #484]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005076:	428b      	cmp	r3, r1
 8005078:	d101      	bne.n	800507e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800507a:	4b79      	ldr	r3, [pc, #484]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800507c:	e001      	b.n	8005082 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800507e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005082:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005086:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005096:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	f043 0202 	orr.w	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff fdfa 	bl	8004cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	f040 80be 	bne.w	8005250 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80b8 	beq.w	8005250 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a59      	ldr	r2, [pc, #356]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80050fa:	4b59      	ldr	r3, [pc, #356]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050fc:	e001      	b.n	8005102 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80050fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4954      	ldr	r1, [pc, #336]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800510a:	428b      	cmp	r3, r1
 800510c:	d101      	bne.n	8005112 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800510e:	4b54      	ldr	r3, [pc, #336]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005110:	e001      	b.n	8005116 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005116:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800511a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	f043 0204 	orr.w	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fdbc 	bl	8004cbc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005144:	e084      	b.n	8005250 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b02      	cmp	r3, #2
 800514e:	d107      	bne.n	8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8be 	bl	80052dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b01      	cmp	r3, #1
 8005168:	d107      	bne.n	800517a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8fd 	bl	8005374 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d12f      	bne.n	80051e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d02a      	beq.n	80051e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800519c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2e      	ldr	r2, [pc, #184]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d101      	bne.n	80051ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80051a8:	4b2d      	ldr	r3, [pc, #180]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051aa:	e001      	b.n	80051b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80051ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4929      	ldr	r1, [pc, #164]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051b8:	428b      	cmp	r3, r1
 80051ba:	d101      	bne.n	80051c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80051bc:	4b28      	ldr	r3, [pc, #160]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051be:	e001      	b.n	80051c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80051c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	f043 0202 	orr.w	r2, r3, #2
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fd6c 	bl	8004cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d131      	bne.n	8005252 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d02c      	beq.n	8005252 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a17      	ldr	r2, [pc, #92]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d101      	bne.n	8005206 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005204:	e001      	b.n	800520a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4912      	ldr	r1, [pc, #72]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005212:	428b      	cmp	r3, r1
 8005214:	d101      	bne.n	800521a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005218:	e001      	b.n	800521e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800521a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800521e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005222:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005232:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	f043 0204 	orr.w	r2, r3, #4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fd37 	bl	8004cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800524e:	e000      	b.n	8005252 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005250:	bf00      	nop
}
 8005252:	bf00      	nop
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40003800 	.word	0x40003800
 8005260:	40003400 	.word	0x40003400

08005264 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	1c99      	adds	r1, r3, #2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6251      	str	r1, [r2, #36]	; 0x24
 800528a:	881a      	ldrh	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d113      	bne.n	80052d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff ffc9 	bl	8005264 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	1c99      	adds	r1, r3, #2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6251      	str	r1, [r2, #36]	; 0x24
 80052ee:	8819      	ldrh	r1, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1d      	ldr	r2, [pc, #116]	; (800536c <I2SEx_TxISR_I2SExt+0x90>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d101      	bne.n	80052fe <I2SEx_TxISR_I2SExt+0x22>
 80052fa:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <I2SEx_TxISR_I2SExt+0x94>)
 80052fc:	e001      	b.n	8005302 <I2SEx_TxISR_I2SExt+0x26>
 80052fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005302:	460a      	mov	r2, r1
 8005304:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d121      	bne.n	8005362 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a12      	ldr	r2, [pc, #72]	; (800536c <I2SEx_TxISR_I2SExt+0x90>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d101      	bne.n	800532c <I2SEx_TxISR_I2SExt+0x50>
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <I2SEx_TxISR_I2SExt+0x94>)
 800532a:	e001      	b.n	8005330 <I2SEx_TxISR_I2SExt+0x54>
 800532c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	490d      	ldr	r1, [pc, #52]	; (800536c <I2SEx_TxISR_I2SExt+0x90>)
 8005338:	428b      	cmp	r3, r1
 800533a:	d101      	bne.n	8005340 <I2SEx_TxISR_I2SExt+0x64>
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <I2SEx_TxISR_I2SExt+0x94>)
 800533e:	e001      	b.n	8005344 <I2SEx_TxISR_I2SExt+0x68>
 8005340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005344:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005348:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ff81 	bl	8005264 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40003800 	.word	0x40003800
 8005370:	40003400 	.word	0x40003400

08005374 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68d8      	ldr	r0, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	1c99      	adds	r1, r3, #2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800538c:	b282      	uxth	r2, r0
 800538e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d113      	bne.n	80053d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ff4a 	bl	8005264 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a20      	ldr	r2, [pc, #128]	; (8005468 <I2SEx_RxISR_I2SExt+0x90>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <I2SEx_RxISR_I2SExt+0x16>
 80053ea:	4b20      	ldr	r3, [pc, #128]	; (800546c <I2SEx_RxISR_I2SExt+0x94>)
 80053ec:	e001      	b.n	80053f2 <I2SEx_RxISR_I2SExt+0x1a>
 80053ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053f2:	68d8      	ldr	r0, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	1c99      	adds	r1, r3, #2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80053fe:	b282      	uxth	r2, r0
 8005400:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d121      	bne.n	800545e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a12      	ldr	r2, [pc, #72]	; (8005468 <I2SEx_RxISR_I2SExt+0x90>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d101      	bne.n	8005428 <I2SEx_RxISR_I2SExt+0x50>
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <I2SEx_RxISR_I2SExt+0x94>)
 8005426:	e001      	b.n	800542c <I2SEx_RxISR_I2SExt+0x54>
 8005428:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	490d      	ldr	r1, [pc, #52]	; (8005468 <I2SEx_RxISR_I2SExt+0x90>)
 8005434:	428b      	cmp	r3, r1
 8005436:	d101      	bne.n	800543c <I2SEx_RxISR_I2SExt+0x64>
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <I2SEx_RxISR_I2SExt+0x94>)
 800543a:	e001      	b.n	8005440 <I2SEx_RxISR_I2SExt+0x68>
 800543c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005440:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005444:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ff03 	bl	8005264 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40003800 	.word	0x40003800
 800546c:	40003400 	.word	0x40003400

08005470 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005472:	b08f      	sub	sp, #60	; 0x3c
 8005474:	af0a      	add	r7, sp, #40	; 0x28
 8005476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e10f      	b.n	80056a2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d106      	bne.n	80054a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f009 fdfd 	bl	800f09c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2203      	movs	r2, #3
 80054a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f004 ffb0 	bl	800a426 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	687e      	ldr	r6, [r7, #4]
 80054ce:	466d      	mov	r5, sp
 80054d0:	f106 0410 	add.w	r4, r6, #16
 80054d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80054e4:	1d33      	adds	r3, r6, #4
 80054e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054e8:	6838      	ldr	r0, [r7, #0]
 80054ea:	f004 fe87 	bl	800a1fc <USB_CoreInit>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0d0      	b.n	80056a2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2100      	movs	r1, #0
 8005506:	4618      	mov	r0, r3
 8005508:	f004 ff9e 	bl	800a448 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	e04a      	b.n	80055a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005512:	7bfa      	ldrb	r2, [r7, #15]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	333d      	adds	r3, #61	; 0x3d
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005526:	7bfa      	ldrb	r2, [r7, #15]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	333c      	adds	r3, #60	; 0x3c
 8005536:	7bfa      	ldrb	r2, [r7, #15]
 8005538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800553a:	7bfa      	ldrb	r2, [r7, #15]
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	b298      	uxth	r0, r3
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	3342      	adds	r3, #66	; 0x42
 800554e:	4602      	mov	r2, r0
 8005550:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005552:	7bfa      	ldrb	r2, [r7, #15]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	333f      	adds	r3, #63	; 0x3f
 8005562:	2200      	movs	r2, #0
 8005564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005566:	7bfa      	ldrb	r2, [r7, #15]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3344      	adds	r3, #68	; 0x44
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800557a:	7bfa      	ldrb	r2, [r7, #15]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	3348      	adds	r3, #72	; 0x48
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800558e:	7bfa      	ldrb	r2, [r7, #15]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	3350      	adds	r3, #80	; 0x50
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	3301      	adds	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
 80055a8:	7bfa      	ldrb	r2, [r7, #15]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d3af      	bcc.n	8005512 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	73fb      	strb	r3, [r7, #15]
 80055b6:	e044      	b.n	8005642 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055ce:	7bfa      	ldrb	r2, [r7, #15]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80055e0:	7bfa      	ldrb	r2, [r7, #15]
 80055e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055e4:	7bfa      	ldrb	r2, [r7, #15]
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4613      	mov	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055fa:	7bfa      	ldrb	r2, [r7, #15]
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005610:	7bfa      	ldrb	r2, [r7, #15]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005626:	7bfa      	ldrb	r2, [r7, #15]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	1a9b      	subs	r3, r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	3301      	adds	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	d3b5      	bcc.n	80055b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	687e      	ldr	r6, [r7, #4]
 8005654:	466d      	mov	r5, sp
 8005656:	f106 0410 	add.w	r4, r6, #16
 800565a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800565c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800565e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005666:	e885 0003 	stmia.w	r5, {r0, r1}
 800566a:	1d33      	adds	r3, r6, #4
 800566c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800566e:	6838      	ldr	r0, [r7, #0]
 8005670:	f004 ff14 	bl	800a49c <USB_DevInit>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e00d      	b.n	80056a2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f005 ff53 	bl	800b546 <USB_DevDisconnect>

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_PCD_Start+0x1c>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e020      	b.n	8005708 <HAL_PCD_Start+0x5e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d109      	bne.n	80056ea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d005      	beq.n	80056ea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f005 ff11 	bl	800b516 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f004 fe83 	bl	800a404 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b08d      	sub	sp, #52	; 0x34
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f005 ffb8 	bl	800b69c <USB_GetMode>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	f040 839d 	bne.w	8005e6e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f005 ff1c 	bl	800b576 <USB_ReadInterrupts>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8393 	beq.w	8005e6c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f005 ff13 	bl	800b576 <USB_ReadInterrupts>
 8005750:	4603      	mov	r3, r0
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b02      	cmp	r3, #2
 8005758:	d107      	bne.n	800576a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f002 0202 	and.w	r2, r2, #2
 8005768:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f005 ff01 	bl	800b576 <USB_ReadInterrupts>
 8005774:	4603      	mov	r3, r0
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b10      	cmp	r3, #16
 800577c:	d161      	bne.n	8005842 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0210 	bic.w	r2, r2, #16
 800578c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f003 020f 	and.w	r2, r3, #15
 800579a:	4613      	mov	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4413      	add	r3, r2
 80057aa:	3304      	adds	r3, #4
 80057ac:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	0c5b      	lsrs	r3, r3, #17
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d124      	bne.n	8005804 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d035      	beq.n	8005832 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	6a38      	ldr	r0, [r7, #32]
 80057da:	f005 fd79 	bl	800b2d0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ea:	441a      	add	r2, r3
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057fc:	441a      	add	r2, r3
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	619a      	str	r2, [r3, #24]
 8005802:	e016      	b.n	8005832 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	0c5b      	lsrs	r3, r3, #17
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	2b06      	cmp	r3, #6
 800580e:	d110      	bne.n	8005832 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005816:	2208      	movs	r2, #8
 8005818:	4619      	mov	r1, r3
 800581a:	6a38      	ldr	r0, [r7, #32]
 800581c:	f005 fd58 	bl	800b2d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800582c:	441a      	add	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0210 	orr.w	r2, r2, #16
 8005840:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f005 fe95 	bl	800b576 <USB_ReadInterrupts>
 800584c:	4603      	mov	r3, r0
 800584e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005852:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005856:	d16e      	bne.n	8005936 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f005 fe9b 	bl	800b59c <USB_ReadDevAllOutEpInterrupt>
 8005866:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005868:	e062      	b.n	8005930 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d057      	beq.n	8005924 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	4611      	mov	r1, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f005 fec0 	bl	800b604 <USB_ReadDevOutEPInterrupt>
 8005884:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00c      	beq.n	80058aa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589c:	461a      	mov	r2, r3
 800589e:	2301      	movs	r3, #1
 80058a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80058a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fdb1 	bl	800640c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00c      	beq.n	80058ce <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	461a      	mov	r2, r3
 80058c2:	2308      	movs	r3, #8
 80058c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 feab 	bl	8006624 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	461a      	mov	r2, r3
 80058e6:	2310      	movs	r3, #16
 80058e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	461a      	mov	r2, r3
 8005902:	2320      	movs	r3, #32
 8005904:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005922:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	3301      	adds	r3, #1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	2b00      	cmp	r3, #0
 8005934:	d199      	bne.n	800586a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f005 fe1b 	bl	800b576 <USB_ReadInterrupts>
 8005940:	4603      	mov	r3, r0
 8005942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005946:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800594a:	f040 80c0 	bne.w	8005ace <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f005 fe3c 	bl	800b5d0 <USB_ReadDevAllInEpInterrupt>
 8005958:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800595e:	e0b2      	b.n	8005ac6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80a7 	beq.w	8005aba <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f005 fe62 	bl	800b640 <USB_ReadDevInEPInterrupt>
 800597c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d057      	beq.n	8005a38 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	2201      	movs	r2, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69f9      	ldr	r1, [r7, #28]
 80059a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a8:	4013      	ands	r3, r2
 80059aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b8:	461a      	mov	r2, r3
 80059ba:	2301      	movs	r3, #1
 80059bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d132      	bne.n	8005a2c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ca:	4613      	mov	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	3348      	adds	r3, #72	; 0x48
 80059d6:	6819      	ldr	r1, [r3, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4403      	add	r3, r0
 80059e6:	3344      	adds	r3, #68	; 0x44
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4419      	add	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4403      	add	r3, r0
 80059fa:	3348      	adds	r3, #72	; 0x48
 80059fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d113      	bne.n	8005a2c <HAL_PCD_IRQHandler+0x31c>
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a08:	4613      	mov	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	3350      	adds	r3, #80	; 0x50
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d108      	bne.n	8005a2c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a24:	461a      	mov	r2, r3
 8005a26:	2101      	movs	r1, #1
 8005a28:	f005 fe6a 	bl	800b700 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f009 fbb3 	bl	800f19e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2308      	movs	r3, #8
 8005a52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d008      	beq.n	8005a8c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a86:	461a      	mov	r2, r3
 8005a88:	2340      	movs	r3, #64	; 0x40
 8005a8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d008      	beq.n	8005aa8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fc1b 	bl	80062f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	3301      	adds	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f47f af49 	bne.w	8005960 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f005 fd4f 	bl	800b576 <USB_ReadInterrupts>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae2:	d122      	bne.n	8005b2a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d108      	bne.n	8005b14 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fe27 	bl	8006760 <HAL_PCDEx_LPM_Callback>
 8005b12:	e002      	b.n	8005b1a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f009 fbb9 	bl	800f28c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f005 fd21 	bl	800b576 <USB_ReadInterrupts>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3e:	d112      	bne.n	8005b66 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d102      	bne.n	8005b56 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f009 fb75 	bl	800f240 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b64:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f005 fd03 	bl	800b576 <USB_ReadInterrupts>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7a:	f040 80c7 	bne.w	8005d0c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2110      	movs	r1, #16
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f004 fde3 	bl	800a764 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba2:	e056      	b.n	8005c52 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bb6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bd6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bf6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	461a      	mov	r2, r3
 8005c06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	3301      	adds	r3, #1
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3a3      	bcc.n	8005ba4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c6a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005c6e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d016      	beq.n	8005ca6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c88:	f043 030b 	orr.w	r3, r3, #11
 8005c8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c9e:	f043 030b 	orr.w	r3, r3, #11
 8005ca2:	6453      	str	r3, [r2, #68]	; 0x44
 8005ca4:	e015      	b.n	8005cd2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cb8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005cbc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ccc:	f043 030b 	orr.w	r3, r3, #11
 8005cd0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ce4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f005 fd02 	bl	800b700 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f005 fc30 	bl	800b576 <USB_ReadInterrupts>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d20:	d124      	bne.n	8005d6c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f005 fcc6 	bl	800b6b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f004 fd78 	bl	800a826 <USB_GetDevSpeed>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681c      	ldr	r4, [r3, #0]
 8005d42:	f001 f951 	bl	8006fe8 <HAL_RCC_GetHCLKFreq>
 8005d46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4620      	mov	r0, r4
 8005d52:	f004 fab5 	bl	800a2c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f009 fa49 	bl	800f1ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695a      	ldr	r2, [r3, #20]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f005 fc00 	bl	800b576 <USB_ReadInterrupts>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d10a      	bne.n	8005d96 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f009 fa26 	bl	800f1d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695a      	ldr	r2, [r3, #20]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f002 0208 	and.w	r2, r2, #8
 8005d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f005 fbeb 	bl	800b576 <USB_ReadInterrupts>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005daa:	d10f      	bne.n	8005dcc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f009 fa88 	bl	800f2cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695a      	ldr	r2, [r3, #20]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f005 fbd0 	bl	800b576 <USB_ReadInterrupts>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de0:	d10f      	bne.n	8005e02 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f009 fa5b 	bl	800f2a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f005 fbb5 	bl	800b576 <USB_ReadInterrupts>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e16:	d10a      	bne.n	8005e2e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f009 fa69 	bl	800f2f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f005 fb9f 	bl	800b576 <USB_ReadInterrupts>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d115      	bne.n	8005e6e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f009 fa59 	bl	800f30c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6859      	ldr	r1, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	e000      	b.n	8005e6e <HAL_PCD_IRQHandler+0x75e>
      return;
 8005e6c:	bf00      	nop
    }
  }
}
 8005e6e:	3734      	adds	r7, #52	; 0x34
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd90      	pop	{r4, r7, pc}

08005e74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_PCD_SetAddress+0x1a>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e013      	b.n	8005eb6 <HAL_PCD_SetAddress+0x42>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f005 fb0f 	bl	800b4ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	4608      	mov	r0, r1
 8005ec8:	4611      	mov	r1, r2
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4603      	mov	r3, r0
 8005ece:	70fb      	strb	r3, [r7, #3]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	803b      	strh	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	da0f      	bge.n	8005f04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	f003 020f 	and.w	r2, r3, #15
 8005eea:	4613      	mov	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	3338      	adds	r3, #56	; 0x38
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3304      	adds	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	705a      	strb	r2, [r3, #1]
 8005f02:	e00f      	b.n	8005f24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4413      	add	r3, r2
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f30:	883a      	ldrh	r2, [r7, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	78ba      	ldrb	r2, [r7, #2]
 8005f3a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f4e:	78bb      	ldrb	r3, [r7, #2]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d102      	bne.n	8005f5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_PCD_EP_Open+0xaa>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e00e      	b.n	8005f86 <HAL_PCD_EP_Open+0xc8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68f9      	ldr	r1, [r7, #12]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f004 fc7a 	bl	800a870 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005f84:	7afb      	ldrb	r3, [r7, #11]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	da0f      	bge.n	8005fc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	4613      	mov	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	3338      	adds	r3, #56	; 0x38
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	705a      	strb	r2, [r3, #1]
 8005fc0:	e00f      	b.n	8005fe2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	f003 020f 	and.w	r2, r3, #15
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3304      	adds	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_PCD_EP_Close+0x6e>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e00e      	b.n	800601a <HAL_PCD_EP_Close+0x8c>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68f9      	ldr	r1, [r7, #12]
 800600a:	4618      	mov	r0, r3
 800600c:	f004 fcb8 	bl	800a980 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b086      	sub	sp, #24
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	460b      	mov	r3, r1
 8006030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	f003 020f 	and.w	r2, r3, #15
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	3304      	adds	r3, #4
 800604a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2200      	movs	r2, #0
 800605c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006064:	7afb      	ldrb	r3, [r7, #11]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	b2da      	uxtb	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d102      	bne.n	800607e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	2b00      	cmp	r3, #0
 8006086:	d109      	bne.n	800609c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	6979      	ldr	r1, [r7, #20]
 8006096:	f004 ff93 	bl	800afc0 <USB_EP0StartXfer>
 800609a:	e008      	b.n	80060ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	6979      	ldr	r1, [r7, #20]
 80060aa:	f004 fd45 	bl	800ab38 <USB_EPStartXfer>
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	f003 020f 	and.w	r2, r3, #15
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80060da:	681b      	ldr	r3, [r3, #0]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	460b      	mov	r3, r1
 80060f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f8:	7afb      	ldrb	r3, [r7, #11]
 80060fa:	f003 020f 	and.w	r2, r3, #15
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	3338      	adds	r3, #56	; 0x38
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	3304      	adds	r3, #4
 800610e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2200      	movs	r2, #0
 8006120:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2201      	movs	r2, #1
 8006126:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	b2da      	uxtb	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d102      	bne.n	8006142 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	f003 030f 	and.w	r3, r3, #15
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	6979      	ldr	r1, [r7, #20]
 800615a:	f004 ff31 	bl	800afc0 <USB_EP0StartXfer>
 800615e:	e008      	b.n	8006172 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	f004 fce3 	bl	800ab38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	f003 020f 	and.w	r2, r3, #15
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d901      	bls.n	800619a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e050      	b.n	800623c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800619a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	da0f      	bge.n	80061c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	4613      	mov	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	3338      	adds	r3, #56	; 0x38
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	3304      	adds	r3, #4
 80061b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	705a      	strb	r2, [r3, #1]
 80061c0:	e00d      	b.n	80061de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	4613      	mov	r3, r2
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4413      	add	r3, r2
 80061d4:	3304      	adds	r3, #4
 80061d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_PCD_EP_SetStall+0x82>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e01e      	b.n	800623c <HAL_PCD_EP_SetStall+0xc0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	4618      	mov	r0, r3
 800620e:	f005 f888 	bl	800b322 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	b2d9      	uxtb	r1, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800622c:	461a      	mov	r2, r3
 800622e:	f005 fa67 	bl	800b700 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	f003 020f 	and.w	r2, r3, #15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d901      	bls.n	8006262 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e042      	b.n	80062e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006266:	2b00      	cmp	r3, #0
 8006268:	da0f      	bge.n	800628a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f003 020f 	and.w	r2, r3, #15
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	3338      	adds	r3, #56	; 0x38
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	3304      	adds	r3, #4
 8006280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	705a      	strb	r2, [r3, #1]
 8006288:	e00f      	b.n	80062aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	4613      	mov	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4413      	add	r3, r2
 80062a0:	3304      	adds	r3, #4
 80062a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_PCD_EP_ClrStall+0x86>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e00e      	b.n	80062e8 <HAL_PCD_EP_ClrStall+0xa4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	4618      	mov	r0, r3
 80062da:	f005 f890 	bl	800b3fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08a      	sub	sp, #40	; 0x28
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	4613      	mov	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	3338      	adds	r3, #56	; 0x38
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	4413      	add	r3, r2
 8006314:	3304      	adds	r3, #4
 8006316:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	699a      	ldr	r2, [r3, #24]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	429a      	cmp	r2, r3
 8006322:	d901      	bls.n	8006328 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e06c      	b.n	8006402 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	429a      	cmp	r2, r3
 800633c:	d902      	bls.n	8006344 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3303      	adds	r3, #3
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800634c:	e02b      	b.n	80063a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	695a      	ldr	r2, [r3, #20]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	429a      	cmp	r2, r3
 8006362:	d902      	bls.n	800636a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3303      	adds	r3, #3
 800636e:	089b      	lsrs	r3, r3, #2
 8006370:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68d9      	ldr	r1, [r3, #12]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006382:	b2db      	uxtb	r3, r3
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	4603      	mov	r3, r0
 8006388:	6978      	ldr	r0, [r7, #20]
 800638a:	f004 ff6c 	bl	800b266 <USB_WritePacket>

    ep->xfer_buff  += len;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	441a      	add	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	441a      	add	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d809      	bhi.n	80063d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d203      	bcs.n	80063d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1be      	bne.n	800634e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d811      	bhi.n	8006400 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	2201      	movs	r2, #1
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	43db      	mvns	r3, r3
 80063f6:	6939      	ldr	r1, [r7, #16]
 80063f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063fc:	4013      	ands	r3, r2
 80063fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	333c      	adds	r3, #60	; 0x3c
 8006424:	3304      	adds	r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b01      	cmp	r3, #1
 8006440:	f040 80a0 	bne.w	8006584 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d015      	beq.n	800647a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a72      	ldr	r2, [pc, #456]	; (800661c <PCD_EP_OutXfrComplete_int+0x210>)
 8006452:	4293      	cmp	r3, r2
 8006454:	f240 80dd 	bls.w	8006612 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80d7 	beq.w	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	461a      	mov	r2, r3
 8006472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006476:	6093      	str	r3, [r2, #8]
 8006478:	e0cb      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	461a      	mov	r2, r3
 8006492:	2320      	movs	r3, #32
 8006494:	6093      	str	r3, [r2, #8]
 8006496:	e0bc      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f040 80b7 	bne.w	8006612 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a5d      	ldr	r2, [pc, #372]	; (800661c <PCD_EP_OutXfrComplete_int+0x210>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d90f      	bls.n	80064cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	461a      	mov	r2, r3
 80064c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c8:	6093      	str	r3, [r2, #8]
 80064ca:	e0a2      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80064de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	0159      	lsls	r1, r3, #5
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	440b      	add	r3, r1
 80064e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80064f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4403      	add	r3, r0
 8006502:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006506:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800651a:	6819      	ldr	r1, [r3, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	4613      	mov	r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4403      	add	r3, r0
 800652a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4419      	add	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	4613      	mov	r3, r2
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4403      	add	r3, r0
 8006540:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006544:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d114      	bne.n	8006576 <PCD_EP_OutXfrComplete_int+0x16a>
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d108      	bne.n	8006576 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800656e:	461a      	mov	r2, r3
 8006570:	2101      	movs	r1, #1
 8006572:	f005 f8c5 	bl	800b700 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f008 fdf3 	bl	800f168 <HAL_PCD_DataOutStageCallback>
 8006582:	e046      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4a26      	ldr	r2, [pc, #152]	; (8006620 <PCD_EP_OutXfrComplete_int+0x214>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d124      	bne.n	80065d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	461a      	mov	r2, r3
 80065a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a8:	6093      	str	r3, [r2, #8]
 80065aa:	e032      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	461a      	mov	r2, r3
 80065c4:	2320      	movs	r3, #32
 80065c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f008 fdca 	bl	800f168 <HAL_PCD_DataOutStageCallback>
 80065d4:	e01d      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d114      	bne.n	8006606 <PCD_EP_OutXfrComplete_int+0x1fa>
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d108      	bne.n	8006606 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065fe:	461a      	mov	r2, r3
 8006600:	2100      	movs	r1, #0
 8006602:	f005 f87d 	bl	800b700 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f008 fdab 	bl	800f168 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	4f54300a 	.word	0x4f54300a
 8006620:	4f54310a 	.word	0x4f54310a

08006624 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	333c      	adds	r3, #60	; 0x3c
 800663c:	3304      	adds	r3, #4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <PCD_EP_OutSetupPacket_int+0x88>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d90e      	bls.n	8006678 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	461a      	mov	r2, r3
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f008 fd63 	bl	800f144 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <PCD_EP_OutSetupPacket_int+0x88>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d90c      	bls.n	80066a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d108      	bne.n	80066a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006698:	461a      	mov	r2, r3
 800669a:	2101      	movs	r1, #1
 800669c:	f005 f830 	bl	800b700 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	4f54300a 	.word	0x4f54300a

080066b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
 80066bc:	4613      	mov	r3, r2
 80066be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d107      	bne.n	80066de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066ce:	883b      	ldrh	r3, [r7, #0]
 80066d0:	0419      	lsls	r1, r3, #16
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	430a      	orrs	r2, r1
 80066da:	629a      	str	r2, [r3, #40]	; 0x28
 80066dc:	e028      	b.n	8006730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e4:	0c1b      	lsrs	r3, r3, #16
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	4413      	add	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
 80066f0:	e00d      	b.n	800670e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	3340      	adds	r3, #64	; 0x40
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4413      	add	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	3301      	adds	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]
 800670e:	7bfa      	ldrb	r2, [r7, #15]
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	3b01      	subs	r3, #1
 8006714:	429a      	cmp	r2, r3
 8006716:	d3ec      	bcc.n	80066f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006718:	883b      	ldrh	r3, [r7, #0]
 800671a:	0418      	lsls	r0, r3, #16
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6819      	ldr	r1, [r3, #0]
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	3b01      	subs	r3, #1
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	4302      	orrs	r2, r0
 8006728:	3340      	adds	r3, #64	; 0x40
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	887a      	ldrh	r2, [r7, #2]
 8006750:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e25b      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d075      	beq.n	8006882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006796:	4ba3      	ldr	r3, [pc, #652]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 030c 	and.w	r3, r3, #12
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d00c      	beq.n	80067bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067a2:	4ba0      	ldr	r3, [pc, #640]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d112      	bne.n	80067d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ae:	4b9d      	ldr	r3, [pc, #628]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ba:	d10b      	bne.n	80067d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067bc:	4b99      	ldr	r3, [pc, #612]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d05b      	beq.n	8006880 <HAL_RCC_OscConfig+0x108>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d157      	bne.n	8006880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e236      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067dc:	d106      	bne.n	80067ec <HAL_RCC_OscConfig+0x74>
 80067de:	4b91      	ldr	r3, [pc, #580]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a90      	ldr	r2, [pc, #576]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80067e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	e01d      	b.n	8006828 <HAL_RCC_OscConfig+0xb0>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067f4:	d10c      	bne.n	8006810 <HAL_RCC_OscConfig+0x98>
 80067f6:	4b8b      	ldr	r3, [pc, #556]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a8a      	ldr	r2, [pc, #552]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80067fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a87      	ldr	r2, [pc, #540]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	e00b      	b.n	8006828 <HAL_RCC_OscConfig+0xb0>
 8006810:	4b84      	ldr	r3, [pc, #528]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a83      	ldr	r2, [pc, #524]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	4b81      	ldr	r3, [pc, #516]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a80      	ldr	r2, [pc, #512]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d013      	beq.n	8006858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006830:	f7fa fbbc 	bl	8000fac <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006838:	f7fa fbb8 	bl	8000fac <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b64      	cmp	r3, #100	; 0x64
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e1fb      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800684a:	4b76      	ldr	r3, [pc, #472]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0f0      	beq.n	8006838 <HAL_RCC_OscConfig+0xc0>
 8006856:	e014      	b.n	8006882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006858:	f7fa fba8 	bl	8000fac <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006860:	f7fa fba4 	bl	8000fac <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b64      	cmp	r3, #100	; 0x64
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e1e7      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006872:	4b6c      	ldr	r3, [pc, #432]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1f0      	bne.n	8006860 <HAL_RCC_OscConfig+0xe8>
 800687e:	e000      	b.n	8006882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d063      	beq.n	8006956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800688e:	4b65      	ldr	r3, [pc, #404]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 030c 	and.w	r3, r3, #12
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00b      	beq.n	80068b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800689a:	4b62      	ldr	r3, [pc, #392]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d11c      	bne.n	80068e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068a6:	4b5f      	ldr	r3, [pc, #380]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d116      	bne.n	80068e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068b2:	4b5c      	ldr	r3, [pc, #368]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_RCC_OscConfig+0x152>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d001      	beq.n	80068ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e1bb      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ca:	4b56      	ldr	r3, [pc, #344]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4952      	ldr	r1, [pc, #328]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068de:	e03a      	b.n	8006956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d020      	beq.n	800692a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068e8:	4b4f      	ldr	r3, [pc, #316]	; (8006a28 <HAL_RCC_OscConfig+0x2b0>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ee:	f7fa fb5d 	bl	8000fac <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f4:	e008      	b.n	8006908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068f6:	f7fa fb59 	bl	8000fac <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e19c      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006908:	4b46      	ldr	r3, [pc, #280]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0f0      	beq.n	80068f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006914:	4b43      	ldr	r3, [pc, #268]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	4940      	ldr	r1, [pc, #256]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 8006924:	4313      	orrs	r3, r2
 8006926:	600b      	str	r3, [r1, #0]
 8006928:	e015      	b.n	8006956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800692a:	4b3f      	ldr	r3, [pc, #252]	; (8006a28 <HAL_RCC_OscConfig+0x2b0>)
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006930:	f7fa fb3c 	bl	8000fac <HAL_GetTick>
 8006934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006938:	f7fa fb38 	bl	8000fac <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e17b      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800694a:	4b36      	ldr	r3, [pc, #216]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d030      	beq.n	80069c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800696a:	4b30      	ldr	r3, [pc, #192]	; (8006a2c <HAL_RCC_OscConfig+0x2b4>)
 800696c:	2201      	movs	r2, #1
 800696e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006970:	f7fa fb1c 	bl	8000fac <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006978:	f7fa fb18 	bl	8000fac <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e15b      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800698a:	4b26      	ldr	r3, [pc, #152]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 800698c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0f0      	beq.n	8006978 <HAL_RCC_OscConfig+0x200>
 8006996:	e015      	b.n	80069c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006998:	4b24      	ldr	r3, [pc, #144]	; (8006a2c <HAL_RCC_OscConfig+0x2b4>)
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800699e:	f7fa fb05 	bl	8000fac <HAL_GetTick>
 80069a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a4:	e008      	b.n	80069b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069a6:	f7fa fb01 	bl	8000fac <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e144      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069b8:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80069ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1f0      	bne.n	80069a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80a0 	beq.w	8006b12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069d6:	4b13      	ldr	r3, [pc, #76]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10f      	bne.n	8006a02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069e2:	2300      	movs	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	4a0e      	ldr	r2, [pc, #56]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f0:	6413      	str	r3, [r2, #64]	; 0x40
 80069f2:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <HAL_RCC_OscConfig+0x2ac>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069fe:	2301      	movs	r3, #1
 8006a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a02:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_RCC_OscConfig+0x2b8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d121      	bne.n	8006a52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a0e:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <HAL_RCC_OscConfig+0x2b8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a07      	ldr	r2, [pc, #28]	; (8006a30 <HAL_RCC_OscConfig+0x2b8>)
 8006a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a1a:	f7fa fac7 	bl	8000fac <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a20:	e011      	b.n	8006a46 <HAL_RCC_OscConfig+0x2ce>
 8006a22:	bf00      	nop
 8006a24:	40023800 	.word	0x40023800
 8006a28:	42470000 	.word	0x42470000
 8006a2c:	42470e80 	.word	0x42470e80
 8006a30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a34:	f7fa faba 	bl	8000fac <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e0fd      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a46:	4b81      	ldr	r3, [pc, #516]	; (8006c4c <HAL_RCC_OscConfig+0x4d4>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d106      	bne.n	8006a68 <HAL_RCC_OscConfig+0x2f0>
 8006a5a:	4b7d      	ldr	r3, [pc, #500]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	4a7c      	ldr	r2, [pc, #496]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	6713      	str	r3, [r2, #112]	; 0x70
 8006a66:	e01c      	b.n	8006aa2 <HAL_RCC_OscConfig+0x32a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b05      	cmp	r3, #5
 8006a6e:	d10c      	bne.n	8006a8a <HAL_RCC_OscConfig+0x312>
 8006a70:	4b77      	ldr	r3, [pc, #476]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a74:	4a76      	ldr	r2, [pc, #472]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a76:	f043 0304 	orr.w	r3, r3, #4
 8006a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7c:	4b74      	ldr	r3, [pc, #464]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a80:	4a73      	ldr	r2, [pc, #460]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	6713      	str	r3, [r2, #112]	; 0x70
 8006a88:	e00b      	b.n	8006aa2 <HAL_RCC_OscConfig+0x32a>
 8006a8a:	4b71      	ldr	r3, [pc, #452]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8e:	4a70      	ldr	r2, [pc, #448]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	6713      	str	r3, [r2, #112]	; 0x70
 8006a96:	4b6e      	ldr	r3, [pc, #440]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	4a6d      	ldr	r2, [pc, #436]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006a9c:	f023 0304 	bic.w	r3, r3, #4
 8006aa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d015      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fa fa7f 	bl	8000fac <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ab2:	f7fa fa7b 	bl	8000fac <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e0bc      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac8:	4b61      	ldr	r3, [pc, #388]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0ee      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x33a>
 8006ad4:	e014      	b.n	8006b00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ad6:	f7fa fa69 	bl	8000fac <HAL_GetTick>
 8006ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006adc:	e00a      	b.n	8006af4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ade:	f7fa fa65 	bl	8000fac <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e0a6      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af4:	4b56      	ldr	r3, [pc, #344]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1ee      	bne.n	8006ade <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d105      	bne.n	8006b12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b06:	4b52      	ldr	r3, [pc, #328]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	4a51      	ldr	r2, [pc, #324]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8092 	beq.w	8006c40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b1c:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 030c 	and.w	r3, r3, #12
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d05c      	beq.n	8006be2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d141      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b30:	4b48      	ldr	r3, [pc, #288]	; (8006c54 <HAL_RCC_OscConfig+0x4dc>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b36:	f7fa fa39 	bl	8000fac <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3e:	f7fa fa35 	bl	8000fac <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e078      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b50:	4b3f      	ldr	r3, [pc, #252]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f0      	bne.n	8006b3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	019b      	lsls	r3, r3, #6
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	3b01      	subs	r3, #1
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	061b      	lsls	r3, r3, #24
 8006b80:	4933      	ldr	r1, [pc, #204]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b86:	4b33      	ldr	r3, [pc, #204]	; (8006c54 <HAL_RCC_OscConfig+0x4dc>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8c:	f7fa fa0e 	bl	8000fac <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b94:	f7fa fa0a 	bl	8000fac <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e04d      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba6:	4b2a      	ldr	r3, [pc, #168]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0x41c>
 8006bb2:	e045      	b.n	8006c40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb4:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <HAL_RCC_OscConfig+0x4dc>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bba:	f7fa f9f7 	bl	8000fac <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc2:	f7fa f9f3 	bl	8000fac <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e036      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd4:	4b1e      	ldr	r3, [pc, #120]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f0      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x44a>
 8006be0:	e02e      	b.n	8006c40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e029      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bee:	4b18      	ldr	r3, [pc, #96]	; (8006c50 <HAL_RCC_OscConfig+0x4d8>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d11c      	bne.n	8006c3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d115      	bne.n	8006c3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c16:	4013      	ands	r3, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10d      	bne.n	8006c3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d106      	bne.n	8006c3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d001      	beq.n	8006c40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40007000 	.word	0x40007000
 8006c50:	40023800 	.word	0x40023800
 8006c54:	42470060 	.word	0x42470060

08006c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0cc      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c6c:	4b68      	ldr	r3, [pc, #416]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d90c      	bls.n	8006c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7a:	4b65      	ldr	r3, [pc, #404]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b63      	ldr	r3, [pc, #396]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0b8      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cac:	4b59      	ldr	r3, [pc, #356]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	4a58      	ldr	r2, [pc, #352]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc4:	4b53      	ldr	r3, [pc, #332]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4a52      	ldr	r2, [pc, #328]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd0:	4b50      	ldr	r3, [pc, #320]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	494d      	ldr	r1, [pc, #308]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d044      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d107      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf6:	4b47      	ldr	r3, [pc, #284]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d119      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e07f      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d003      	beq.n	8006d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d107      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d16:	4b3f      	ldr	r3, [pc, #252]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e06f      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d26:	4b3b      	ldr	r3, [pc, #236]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e067      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d36:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f023 0203 	bic.w	r2, r3, #3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	4934      	ldr	r1, [pc, #208]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d48:	f7fa f930 	bl	8000fac <HAL_GetTick>
 8006d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d50:	f7fa f92c 	bl	8000fac <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e04f      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d66:	4b2b      	ldr	r3, [pc, #172]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 020c 	and.w	r2, r3, #12
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d1eb      	bne.n	8006d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d20c      	bcs.n	8006da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d8e:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d001      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e032      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dac:	4b19      	ldr	r3, [pc, #100]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4916      	ldr	r1, [pc, #88]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dca:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	490e      	ldr	r1, [pc, #56]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dde:	f000 f821 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 8006de2:	4601      	mov	r1, r0
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	091b      	lsrs	r3, r3, #4
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <HAL_RCC_ClockConfig+0x1c0>)
 8006df0:	5cd3      	ldrb	r3, [r2, r3]
 8006df2:	fa21 f303 	lsr.w	r3, r1, r3
 8006df6:	4a09      	ldr	r2, [pc, #36]	; (8006e1c <HAL_RCC_ClockConfig+0x1c4>)
 8006df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dfa:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fa f890 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40023c00 	.word	0x40023c00
 8006e14:	40023800 	.word	0x40023800
 8006e18:	08011098 	.word	0x08011098
 8006e1c:	20000124 	.word	0x20000124
 8006e20:	20000000 	.word	0x20000000

08006e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e24:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	2300      	movs	r3, #0
 8006e36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e3c:	4b67      	ldr	r3, [pc, #412]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 030c 	and.w	r3, r3, #12
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d007      	beq.n	8006e58 <HAL_RCC_GetSysClockFreq+0x34>
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d008      	beq.n	8006e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 80bb 	bne.w	8006fc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e52:	4b63      	ldr	r3, [pc, #396]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e54:	60bb      	str	r3, [r7, #8]
       break;
 8006e56:	e0ba      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e58:	4b62      	ldr	r3, [pc, #392]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006e5a:	60bb      	str	r3, [r7, #8]
      break;
 8006e5c:	e0b7      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e5e:	4b5f      	ldr	r3, [pc, #380]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e66:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e68:	4b5c      	ldr	r3, [pc, #368]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d051      	beq.n	8006f18 <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e74:	4b59      	ldr	r3, [pc, #356]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	099b      	lsrs	r3, r3, #6
 8006e7a:	f04f 0400 	mov.w	r4, #0
 8006e7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	ea03 0501 	and.w	r5, r3, r1
 8006e8a:	ea04 0602 	and.w	r6, r4, r2
 8006e8e:	46ab      	mov	fp, r5
 8006e90:	46b4      	mov	ip, r6
 8006e92:	eb1b 030b 	adds.w	r3, fp, fp
 8006e96:	eb4c 040c 	adc.w	r4, ip, ip
 8006e9a:	469b      	mov	fp, r3
 8006e9c:	46a4      	mov	ip, r4
 8006e9e:	eb1b 0b05 	adds.w	fp, fp, r5
 8006ea2:	eb4c 0c06 	adc.w	ip, ip, r6
 8006ea6:	f04f 0100 	mov.w	r1, #0
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8006eb2:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 8006eb6:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8006eba:	468b      	mov	fp, r1
 8006ebc:	4694      	mov	ip, r2
 8006ebe:	ebbb 0b05 	subs.w	fp, fp, r5
 8006ec2:	eb6c 0c06 	sbc.w	ip, ip, r6
 8006ec6:	f04f 0100 	mov.w	r1, #0
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8006ed2:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8006ed6:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8006eda:	468b      	mov	fp, r1
 8006edc:	4694      	mov	ip, r2
 8006ede:	ebbb 0b05 	subs.w	fp, fp, r5
 8006ee2:	eb6c 0c06 	sbc.w	ip, ip, r6
 8006ee6:	f04f 0100 	mov.w	r1, #0
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	ea4f 32cc 	mov.w	r2, ip, lsl #15
 8006ef2:	ea42 425b 	orr.w	r2, r2, fp, lsr #17
 8006ef6:	ea4f 31cb 	mov.w	r1, fp, lsl #15
 8006efa:	468b      	mov	fp, r1
 8006efc:	4694      	mov	ip, r2
 8006efe:	4658      	mov	r0, fp
 8006f00:	4661      	mov	r1, ip
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f04f 0400 	mov.w	r4, #0
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4623      	mov	r3, r4
 8006f0c:	f7f9 fe68 	bl	8000be0 <__aeabi_uldivmod>
 8006f10:	4603      	mov	r3, r0
 8006f12:	460c      	mov	r4, r1
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	e049      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f18:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	099b      	lsrs	r3, r3, #6
 8006f1e:	f04f 0400 	mov.w	r4, #0
 8006f22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	ea03 0501 	and.w	r5, r3, r1
 8006f2e:	ea04 0602 	and.w	r6, r4, r2
 8006f32:	4629      	mov	r1, r5
 8006f34:	4632      	mov	r2, r6
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	f04f 0400 	mov.w	r4, #0
 8006f3e:	0154      	lsls	r4, r2, #5
 8006f40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f44:	014b      	lsls	r3, r1, #5
 8006f46:	4619      	mov	r1, r3
 8006f48:	4622      	mov	r2, r4
 8006f4a:	1b49      	subs	r1, r1, r5
 8006f4c:	eb62 0206 	sbc.w	r2, r2, r6
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	f04f 0400 	mov.w	r4, #0
 8006f58:	0194      	lsls	r4, r2, #6
 8006f5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f5e:	018b      	lsls	r3, r1, #6
 8006f60:	1a5b      	subs	r3, r3, r1
 8006f62:	eb64 0402 	sbc.w	r4, r4, r2
 8006f66:	f04f 0100 	mov.w	r1, #0
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	00e2      	lsls	r2, r4, #3
 8006f70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f74:	00d9      	lsls	r1, r3, #3
 8006f76:	460b      	mov	r3, r1
 8006f78:	4614      	mov	r4, r2
 8006f7a:	195b      	adds	r3, r3, r5
 8006f7c:	eb44 0406 	adc.w	r4, r4, r6
 8006f80:	f04f 0100 	mov.w	r1, #0
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	02a2      	lsls	r2, r4, #10
 8006f8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006f8e:	0299      	lsls	r1, r3, #10
 8006f90:	460b      	mov	r3, r1
 8006f92:	4614      	mov	r4, r2
 8006f94:	4618      	mov	r0, r3
 8006f96:	4621      	mov	r1, r4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f04f 0400 	mov.w	r4, #0
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	4623      	mov	r3, r4
 8006fa2:	f7f9 fe1d 	bl	8000be0 <__aeabi_uldivmod>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fac:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	60bb      	str	r3, [r7, #8]
      break;
 8006fc6:	e002      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fca:	60bb      	str	r3, [r7, #8]
      break;
 8006fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fce:	68bb      	ldr	r3, [r7, #8]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8006fda:	bf00      	nop
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	00f42400 	.word	0x00f42400
 8006fe4:	00bb8000 	.word	0x00bb8000

08006fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000124 	.word	0x20000124

08007000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007004:	f7ff fff0 	bl	8006fe8 <HAL_RCC_GetHCLKFreq>
 8007008:	4601      	mov	r1, r0
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	0a9b      	lsrs	r3, r3, #10
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	4a03      	ldr	r2, [pc, #12]	; (8007024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007016:	5cd3      	ldrb	r3, [r2, r3]
 8007018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40023800 	.word	0x40023800
 8007024:	080110a8 	.word	0x080110a8

08007028 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d105      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800704c:	2b00      	cmp	r3, #0
 800704e:	d035      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007050:	4b67      	ldr	r3, [pc, #412]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007052:	2200      	movs	r2, #0
 8007054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007056:	f7f9 ffa9 	bl	8000fac <HAL_GetTick>
 800705a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800705c:	e008      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800705e:	f7f9 ffa5 	bl	8000fac <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d901      	bls.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e0ba      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007070:	4b60      	ldr	r3, [pc, #384]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1f0      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	019a      	lsls	r2, r3, #6
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	071b      	lsls	r3, r3, #28
 8007088:	495a      	ldr	r1, [pc, #360]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007090:	4b57      	ldr	r3, [pc, #348]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007096:	f7f9 ff89 	bl	8000fac <HAL_GetTick>
 800709a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800709c:	e008      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800709e:	f7f9 ff85 	bl	8000fac <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d901      	bls.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e09a      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070b0:	4b50      	ldr	r3, [pc, #320]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0f0      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8083 	beq.w	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	4b49      	ldr	r3, [pc, #292]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	4a48      	ldr	r2, [pc, #288]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070d8:	6413      	str	r3, [r2, #64]	; 0x40
 80070da:	4b46      	ldr	r3, [pc, #280]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070e6:	4b44      	ldr	r3, [pc, #272]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a43      	ldr	r2, [pc, #268]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070f2:	f7f9 ff5b 	bl	8000fac <HAL_GetTick>
 80070f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070f8:	e008      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070fa:	f7f9 ff57 	bl	8000fac <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e06c      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800710c:	4b3a      	ldr	r3, [pc, #232]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0f0      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007118:	4b36      	ldr	r3, [pc, #216]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800711a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007120:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d02f      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	429a      	cmp	r2, r3
 8007134:	d028      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007136:	4b2f      	ldr	r3, [pc, #188]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007140:	4b2e      	ldr	r3, [pc, #184]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007146:	4b2d      	ldr	r3, [pc, #180]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800714c:	4a29      	ldr	r2, [pc, #164]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007152:	4b28      	ldr	r3, [pc, #160]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b01      	cmp	r3, #1
 800715c:	d114      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800715e:	f7f9 ff25 	bl	8000fac <HAL_GetTick>
 8007162:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007164:	e00a      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007166:	f7f9 ff21 	bl	8000fac <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f241 3288 	movw	r2, #5000	; 0x1388
 8007174:	4293      	cmp	r3, r2
 8007176:	d901      	bls.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e034      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717c:	4b1d      	ldr	r3, [pc, #116]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800717e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0ee      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007194:	d10d      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007196:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80071a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071aa:	4912      	ldr	r1, [pc, #72]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	608b      	str	r3, [r1, #8]
 80071b0:	e005      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80071b2:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	4a0f      	ldr	r2, [pc, #60]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071bc:	6093      	str	r3, [r2, #8]
 80071be:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ca:	490a      	ldr	r1, [pc, #40]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7c1a      	ldrb	r2, [r3, #16]
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071e2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	42470068 	.word	0x42470068
 80071f4:	40023800 	.word	0x40023800
 80071f8:	40007000 	.word	0x40007000
 80071fc:	42470e40 	.word	0x42470e40
 8007200:	424711e0 	.word	0x424711e0

08007204 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d13d      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007222:	4b22      	ldr	r3, [pc, #136]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800722a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007232:	2b01      	cmp	r3, #1
 8007234:	d12f      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007236:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007238:	617b      	str	r3, [r7, #20]
          break;
 800723a:	e02f      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800723c:	4b1b      	ldr	r3, [pc, #108]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007248:	d108      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800724a:	4b18      	ldr	r3, [pc, #96]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007252:	4a17      	ldr	r2, [pc, #92]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007254:	fbb2 f3f3 	udiv	r3, r2, r3
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	e007      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800725c:	4b13      	ldr	r3, [pc, #76]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007264:	4a13      	ldr	r2, [pc, #76]	; (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007266:	fbb2 f3f3 	udiv	r3, r2, r3
 800726a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800726c:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800726e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007272:	099b      	lsrs	r3, r3, #6
 8007274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007280:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007286:	0f1b      	lsrs	r3, r3, #28
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007292:	617b      	str	r3, [r7, #20]
          break;
 8007294:	e002      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
          break;
 800729a:	bf00      	nop
        }
      }
      break;
 800729c:	bf00      	nop
    }
  }
  return frequency;
 800729e:	697b      	ldr	r3, [r7, #20]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40023800 	.word	0x40023800
 80072b0:	00bb8000 	.word	0x00bb8000
 80072b4:	00f42400 	.word	0x00f42400

080072b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e022      	b.n	8007310 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d105      	bne.n	80072e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f007 fb29 	bl	800e934 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2203      	movs	r2, #3
 80072e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f814 	bl	8007318 <HAL_SD_InitCard>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e00a      	b.n	8007310 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007318:	b5b0      	push	{r4, r5, r7, lr}
 800731a:	b08e      	sub	sp, #56	; 0x38
 800731c:	af04      	add	r7, sp, #16
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007320:	2300      	movs	r3, #0
 8007322:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007330:	2300      	movs	r3, #0
 8007332:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007334:	2376      	movs	r3, #118	; 0x76
 8007336:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681d      	ldr	r5, [r3, #0]
 800733c:	466c      	mov	r4, sp
 800733e:	f107 0314 	add.w	r3, r7, #20
 8007342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007346:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800734a:	f107 0308 	add.w	r3, r7, #8
 800734e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007350:	4628      	mov	r0, r5
 8007352:	f002 f9ef 	bl	8009734 <SDIO_Init>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800735c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e031      	b.n	80073cc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007368:	4b1a      	ldr	r3, [pc, #104]	; (80073d4 <HAL_SD_InitCard+0xbc>)
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f002 fa27 	bl	80097c6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007378:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <HAL_SD_InitCard+0xbc>)
 800737a:	2201      	movs	r2, #1
 800737c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 ff00 	bl	8008184 <SD_PowerON>
 8007384:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e013      	b.n	80073cc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fe1f 	bl	8007fe8 <SD_InitCard>
 80073aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3728      	adds	r7, #40	; 0x28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bdb0      	pop	{r4, r5, r7, pc}
 80073d4:	422580a0 	.word	0x422580a0

080073d8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b092      	sub	sp, #72	; 0x48
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073e6:	f7f9 fde1 	bl	8000fac <HAL_GetTick>
 80073ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e1d9      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b01      	cmp	r3, #1
 8007414:	f040 81cc 	bne.w	80077b0 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800741e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	441a      	add	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007428:	429a      	cmp	r2, r3
 800742a:	d907      	bls.n	800743c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e1c0      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2203      	movs	r2, #3
 8007440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2200      	movs	r2, #0
 800744a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007450:	2b01      	cmp	r3, #1
 8007452:	d002      	beq.n	800745a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	025b      	lsls	r3, r3, #9
 8007458:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007462:	4618      	mov	r0, r3
 8007464:	f002 fa42 	bl	80098ec <SDMMC_CmdBlockLength>
 8007468:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800746a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00f      	beq.n	8007490 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a9b      	ldr	r2, [pc, #620]	; (80076e4 <HAL_SD_ReadBlocks+0x30c>)
 8007476:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800747e:	431a      	orrs	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e196      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007490:	f04f 33ff 	mov.w	r3, #4294967295
 8007494:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	025b      	lsls	r3, r3, #9
 800749a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800749c:	2390      	movs	r3, #144	; 0x90
 800749e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80074a0:	2302      	movs	r3, #2
 80074a2:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f107 0214 	add.w	r2, r7, #20
 80074b4:	4611      	mov	r1, r2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f002 f9ec 	bl	8009894 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d90a      	bls.n	80074d8 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2202      	movs	r2, #2
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074ce:	4618      	mov	r0, r3
 80074d0:	f002 fa50 	bl	8009974 <SDMMC_CmdReadMultiBlock>
 80074d4:	6478      	str	r0, [r7, #68]	; 0x44
 80074d6:	e009      	b.n	80074ec <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074e4:	4618      	mov	r0, r3
 80074e6:	f002 fa23 	bl	8009930 <SDMMC_CmdReadSingleBlock>
 80074ea:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80074ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d012      	beq.n	8007518 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a7b      	ldr	r2, [pc, #492]	; (80076e4 <HAL_SD_ReadBlocks+0x30c>)
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007500:	431a      	orrs	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e152      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800751c:	e061      	b.n	80075e2 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d03c      	beq.n	80075a6 <HAL_SD_ReadBlocks+0x1ce>
 800752c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d039      	beq.n	80075a6 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007532:	2300      	movs	r3, #0
 8007534:	643b      	str	r3, [r7, #64]	; 0x40
 8007536:	e033      	b.n	80075a0 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f002 f924 	bl	800978a <SDIO_ReadFIFO>
 8007542:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	b2da      	uxtb	r2, r3
 8007548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800754c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754e:	3301      	adds	r3, #1
 8007550:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007554:	3b01      	subs	r3, #1
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	0a1b      	lsrs	r3, r3, #8
 800755c:	b2da      	uxtb	r2, r3
 800755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007560:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	3301      	adds	r3, #1
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	3b01      	subs	r3, #1
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	0c1b      	lsrs	r3, r3, #16
 8007572:	b2da      	uxtb	r2, r3
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	3301      	adds	r3, #1
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800757e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007580:	3b01      	subs	r3, #1
 8007582:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	0e1b      	lsrs	r3, r3, #24
 8007588:	b2da      	uxtb	r2, r3
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007590:	3301      	adds	r3, #1
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007596:	3b01      	subs	r3, #1
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800759a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759c:	3301      	adds	r3, #1
 800759e:	643b      	str	r3, [r7, #64]	; 0x40
 80075a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a2:	2b07      	cmp	r3, #7
 80075a4:	d9c8      	bls.n	8007538 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80075a6:	f7f9 fd01 	bl	8000fac <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d902      	bls.n	80075bc <HAL_SD_ReadBlocks+0x1e4>
 80075b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d112      	bne.n	80075e2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a48      	ldr	r2, [pc, #288]	; (80076e4 <HAL_SD_ReadBlocks+0x30c>)
 80075c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e0ed      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e8:	f240 332a 	movw	r3, #810	; 0x32a
 80075ec:	4013      	ands	r3, r2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d095      	beq.n	800751e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d022      	beq.n	8007646 <HAL_SD_ReadBlocks+0x26e>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d91f      	bls.n	8007646 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760a:	2b03      	cmp	r3, #3
 800760c:	d01b      	beq.n	8007646 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f002 fa14 	bl	8009a40 <SDMMC_CmdStopTransfer>
 8007618:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800761a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800761c:	2b00      	cmp	r3, #0
 800761e:	d012      	beq.n	8007646 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2f      	ldr	r2, [pc, #188]	; (80076e4 <HAL_SD_ReadBlocks+0x30c>)
 8007626:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762e:	431a      	orrs	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e0bb      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d012      	beq.n	800767a <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a22      	ldr	r2, [pc, #136]	; (80076e4 <HAL_SD_ReadBlocks+0x30c>)
 800765a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	f043 0208 	orr.w	r2, r3, #8
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e0a1      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d012      	beq.n	80076ae <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <HAL_SD_ReadBlocks+0x30c>)
 800768e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	f043 0202 	orr.w	r2, r3, #2
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e087      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b4:	f003 0320 	and.w	r3, r3, #32
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d064      	beq.n	8007786 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a08      	ldr	r2, [pc, #32]	; (80076e4 <HAL_SD_ReadBlocks+0x30c>)
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c8:	f043 0220 	orr.w	r2, r3, #32
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e06d      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
 80076e2:	bf00      	nop
 80076e4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f002 f84c 	bl	800978a <SDIO_ReadFIFO>
 80076f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80076fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fe:	3301      	adds	r3, #1
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007704:	3b01      	subs	r3, #1
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	0a1b      	lsrs	r3, r3, #8
 800770c:	b2da      	uxtb	r2, r3
 800770e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007710:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007714:	3301      	adds	r3, #1
 8007716:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771a:	3b01      	subs	r3, #1
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	0c1b      	lsrs	r3, r3, #16
 8007722:	b2da      	uxtb	r2, r3
 8007724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007726:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772a:	3301      	adds	r3, #1
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800772e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007730:	3b01      	subs	r3, #1
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	0e1b      	lsrs	r3, r3, #24
 8007738:	b2da      	uxtb	r2, r3
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800773e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007740:	3301      	adds	r3, #1
 8007742:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007746:	3b01      	subs	r3, #1
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800774a:	f7f9 fc2f 	bl	8000fac <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007756:	429a      	cmp	r2, r3
 8007758:	d902      	bls.n	8007760 <HAL_SD_ReadBlocks+0x388>
 800775a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800775c:	2b00      	cmp	r3, #0
 800775e:	d112      	bne.n	8007786 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <HAL_SD_ReadBlocks+0x3f0>)
 8007766:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e01b      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_SD_ReadBlocks+0x3c2>
 8007794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1a6      	bne.n	80076e8 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f240 523a 	movw	r2, #1338	; 0x53a
 80077a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	e006      	b.n	80077be <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3748      	adds	r7, #72	; 0x48
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	004005ff 	.word	0x004005ff

080077cc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b092      	sub	sp, #72	; 0x48
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80077da:	f7f9 fbe7 	bl	8000fac <HAL_GetTick>
 80077de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d107      	bne.n	80077fe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e184      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b01      	cmp	r3, #1
 8007808:	f040 8177 	bne.w	8007afa <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	441a      	add	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781c:	429a      	cmp	r2, r3
 800781e:	d907      	bls.n	8007830 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e16b      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2203      	movs	r2, #3
 8007834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2200      	movs	r2, #0
 800783e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007844:	2b01      	cmp	r3, #1
 8007846:	d002      	beq.n	800784e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784a:	025b      	lsls	r3, r3, #9
 800784c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007856:	4618      	mov	r0, r3
 8007858:	f002 f848 	bl	80098ec <SDMMC_CmdBlockLength>
 800785c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800785e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00f      	beq.n	8007884 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a9d      	ldr	r2, [pc, #628]	; (8007ae0 <HAL_SD_WriteBlocks+0x314>)
 800786a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007872:	431a      	orrs	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e141      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007884:	f04f 33ff 	mov.w	r3, #4294967295
 8007888:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	025b      	lsls	r3, r3, #9
 800788e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007890:	2390      	movs	r3, #144	; 0x90
 8007892:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007894:	2300      	movs	r3, #0
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007898:	2300      	movs	r3, #0
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800789c:	2301      	movs	r3, #1
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f107 0218 	add.w	r2, r7, #24
 80078a8:	4611      	mov	r1, r2
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fff2 	bl	8009894 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d90a      	bls.n	80078cc <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2220      	movs	r2, #32
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078c2:	4618      	mov	r0, r3
 80078c4:	f002 f89a 	bl	80099fc <SDMMC_CmdWriteMultiBlock>
 80078c8:	6478      	str	r0, [r7, #68]	; 0x44
 80078ca:	e009      	b.n	80078e0 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2210      	movs	r2, #16
 80078d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078d8:	4618      	mov	r0, r3
 80078da:	f002 f86d 	bl	80099b8 <SDMMC_CmdWriteSingleBlock>
 80078de:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80078e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d012      	beq.n	800790c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a7d      	ldr	r2, [pc, #500]	; (8007ae0 <HAL_SD_WriteBlocks+0x314>)
 80078ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078f4:	431a      	orrs	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e0fd      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007910:	e065      	b.n	80079de <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d040      	beq.n	80079a2 <HAL_SD_WriteBlocks+0x1d6>
 8007920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d03d      	beq.n	80079a2 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007926:	2300      	movs	r3, #0
 8007928:	643b      	str	r3, [r7, #64]	; 0x40
 800792a:	e037      	b.n	800799c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800792c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007934:	3301      	adds	r3, #1
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793a:	3b01      	subs	r3, #1
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	021a      	lsls	r2, r3, #8
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800794a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794c:	3301      	adds	r3, #1
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007952:	3b01      	subs	r3, #1
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	041a      	lsls	r2, r3, #16
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007964:	3301      	adds	r3, #1
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796a:	3b01      	subs	r3, #1
 800796c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800796e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	061a      	lsls	r2, r3, #24
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800797a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797c:	3301      	adds	r3, #1
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007982:	3b01      	subs	r3, #1
 8007984:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f107 0214 	add.w	r2, r7, #20
 800798e:	4611      	mov	r1, r2
 8007990:	4618      	mov	r0, r3
 8007992:	f001 ff07 	bl	80097a4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007998:	3301      	adds	r3, #1
 800799a:	643b      	str	r3, [r7, #64]	; 0x40
 800799c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799e:	2b07      	cmp	r3, #7
 80079a0:	d9c4      	bls.n	800792c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80079a2:	f7f9 fb03 	bl	8000fac <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d902      	bls.n	80079b8 <HAL_SD_WriteBlocks+0x1ec>
 80079b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d112      	bne.n	80079de <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a48      	ldr	r2, [pc, #288]	; (8007ae0 <HAL_SD_WriteBlocks+0x314>)
 80079be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c6:	431a      	orrs	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e094      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e4:	f240 331a 	movw	r3, #794	; 0x31a
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d091      	beq.n	8007912 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d022      	beq.n	8007a42 <HAL_SD_WriteBlocks+0x276>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d91f      	bls.n	8007a42 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d01b      	beq.n	8007a42 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f002 f816 	bl	8009a40 <SDMMC_CmdStopTransfer>
 8007a14:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d012      	beq.n	8007a42 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a2f      	ldr	r2, [pc, #188]	; (8007ae0 <HAL_SD_WriteBlocks+0x314>)
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e062      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d012      	beq.n	8007a76 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a22      	ldr	r2, [pc, #136]	; (8007ae0 <HAL_SD_WriteBlocks+0x314>)
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	f043 0208 	orr.w	r2, r3, #8
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e048      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d012      	beq.n	8007aaa <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a15      	ldr	r2, [pc, #84]	; (8007ae0 <HAL_SD_WriteBlocks+0x314>)
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	f043 0202 	orr.w	r2, r3, #2
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e02e      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d015      	beq.n	8007ae4 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a08      	ldr	r2, [pc, #32]	; (8007ae0 <HAL_SD_WriteBlocks+0x314>)
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	f043 0210 	orr.w	r2, r3, #16
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e014      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
 8007ade:	bf00      	nop
 8007ae0:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f240 523a 	movw	r2, #1338	; 0x53a
 8007aec:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e006      	b.n	8007b08 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
  }
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3748      	adds	r7, #72	; 0x48
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b1e:	0f9b      	lsrs	r3, r3, #30
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b2a:	0e9b      	lsrs	r3, r3, #26
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b3c:	0e1b      	lsrs	r3, r3, #24
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	f003 0303 	and.w	r3, r3, #3
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b4e:	0c1b      	lsrs	r3, r3, #16
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b70:	0d1b      	lsrs	r3, r3, #20
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b8e:	0bdb      	lsrs	r3, r3, #15
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba0:	0b9b      	lsrs	r3, r3, #14
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb2:	0b5b      	lsrs	r3, r3, #13
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bc4:	0b1b      	lsrs	r3, r3, #12
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d163      	bne.n	8007ca8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007be4:	009a      	lsls	r2, r3, #2
 8007be6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007bea:	4013      	ands	r3, r2
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007bf0:	0f92      	lsrs	r2, r2, #30
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bfc:	0edb      	lsrs	r3, r3, #27
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c0e:	0e1b      	lsrs	r3, r3, #24
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c20:	0d5b      	lsrs	r3, r3, #21
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 0307 	and.w	r3, r3, #7
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c32:	0c9b      	lsrs	r3, r3, #18
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c44:	0bdb      	lsrs	r3, r3, #15
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	7e1b      	ldrb	r3, [r3, #24]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	3302      	adds	r3, #2
 8007c68:	2201      	movs	r2, #1
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007c72:	fb02 f203 	mul.w	r2, r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	7a1b      	ldrb	r3, [r3, #8]
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	f003 030f 	and.w	r3, r3, #15
 8007c84:	2201      	movs	r2, #1
 8007c86:	409a      	lsls	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007c94:	0a52      	lsrs	r2, r2, #9
 8007c96:	fb02 f203 	mul.w	r2, r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca4:	661a      	str	r2, [r3, #96]	; 0x60
 8007ca6:	e031      	b.n	8007d0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d11d      	bne.n	8007cec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cb4:	041b      	lsls	r3, r3, #16
 8007cb6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cbe:	0c1b      	lsrs	r3, r3, #16
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	029a      	lsls	r2, r3, #10
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ce0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	661a      	str	r2, [r3, #96]	; 0x60
 8007cea:	e00f      	b.n	8007d0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a58      	ldr	r2, [pc, #352]	; (8007e54 <HAL_SD_GetCardCSD+0x344>)
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e09d      	b.n	8007e48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d10:	0b9b      	lsrs	r3, r3, #14
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d22:	09db      	lsrs	r3, r3, #7
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d44:	0fdb      	lsrs	r3, r3, #31
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d50:	0f5b      	lsrs	r3, r3, #29
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d62:	0e9b      	lsrs	r3, r3, #26
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d74:	0d9b      	lsrs	r3, r3, #22
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d86:	0d5b      	lsrs	r3, r3, #21
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da2:	0c1b      	lsrs	r3, r3, #16
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db6:	0bdb      	lsrs	r3, r3, #15
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dca:	0b9b      	lsrs	r3, r3, #14
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	0b5b      	lsrs	r3, r3, #13
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df2:	0b1b      	lsrs	r3, r3, #12
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e06:	0a9b      	lsrs	r3, r3, #10
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2e:	085b      	lsrs	r3, r3, #1
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	004005ff 	.word	0x004005ff

08007e58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007eb0:	b5b0      	push	{r4, r5, r7, lr}
 8007eb2:	b08e      	sub	sp, #56	; 0x38
 8007eb4:	af04      	add	r7, sp, #16
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d02e      	beq.n	8007f28 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed0:	d106      	bne.n	8007ee0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	639a      	str	r2, [r3, #56]	; 0x38
 8007ede:	e029      	b.n	8007f34 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee6:	d10a      	bne.n	8007efe <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fa01 	bl	80082f0 <SD_WideBus_Enable>
 8007eee:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	639a      	str	r2, [r3, #56]	; 0x38
 8007efc:	e01a      	b.n	8007f34 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fa3e 	bl	8008386 <SD_WideBus_Disable>
 8007f0a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	431a      	orrs	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
 8007f18:	e00c      	b.n	8007f34 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	639a      	str	r2, [r3, #56]	; 0x38
 8007f26:	e005      	b.n	8007f34 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007f42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e024      	b.n	8007f9a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681d      	ldr	r5, [r3, #0]
 8007f76:	466c      	mov	r4, sp
 8007f78:	f107 0318 	add.w	r3, r7, #24
 8007f7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f84:	f107 030c 	add.w	r3, r7, #12
 8007f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f001 fbd2 	bl	8009734 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3728      	adds	r7, #40	; 0x28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	004005ff 	.word	0x004005ff

08007fa8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007fb4:	f107 030c 	add.w	r3, r7, #12
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f970 	bl	80082a0 <SD_SendStatus>
 8007fc0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	0a5b      	lsrs	r3, r3, #9
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007fde:	693b      	ldr	r3, [r7, #16]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007fe8:	b5b0      	push	{r4, r5, r7, lr}
 8007fea:	b094      	sub	sp, #80	; 0x50
 8007fec:	af04      	add	r7, sp, #16
 8007fee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f001 fbf3 	bl	80097e4 <SDIO_GetPowerState>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008004:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008008:	e0b7      	b.n	800817a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800e:	2b03      	cmp	r3, #3
 8008010:	d02f      	beq.n	8008072 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4618      	mov	r0, r3
 8008018:	f001 fe1c 	bl	8009c54 <SDMMC_CmdSendCID>
 800801c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800801e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <SD_InitCard+0x40>
    {
      return errorstate;
 8008024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008026:	e0a8      	b.n	800817a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f001 fc1d 	bl	800986e <SDIO_GetResponse>
 8008034:	4602      	mov	r2, r0
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2104      	movs	r1, #4
 8008040:	4618      	mov	r0, r3
 8008042:	f001 fc14 	bl	800986e <SDIO_GetResponse>
 8008046:	4602      	mov	r2, r0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2108      	movs	r1, #8
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fc0b 	bl	800986e <SDIO_GetResponse>
 8008058:	4602      	mov	r2, r0
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	210c      	movs	r1, #12
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fc02 	bl	800986e <SDIO_GetResponse>
 800806a:	4602      	mov	r2, r0
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	2b03      	cmp	r3, #3
 8008078:	d00d      	beq.n	8008096 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f107 020e 	add.w	r2, r7, #14
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f001 fe22 	bl	8009cce <SDMMC_CmdSetRelAdd>
 800808a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800808c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <SD_InitCard+0xae>
    {
      return errorstate;
 8008092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008094:	e071      	b.n	800817a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	2b03      	cmp	r3, #3
 800809c:	d036      	beq.n	800810c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800809e:	89fb      	ldrh	r3, [r7, #14]
 80080a0:	461a      	mov	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f001 fdec 	bl	8009c90 <SDMMC_CmdSendCSD>
 80080b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80080c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c2:	e05a      	b.n	800817a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2100      	movs	r1, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fbcf 	bl	800986e <SDIO_GetResponse>
 80080d0:	4602      	mov	r2, r0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2104      	movs	r1, #4
 80080dc:	4618      	mov	r0, r3
 80080de:	f001 fbc6 	bl	800986e <SDIO_GetResponse>
 80080e2:	4602      	mov	r2, r0
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2108      	movs	r1, #8
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 fbbd 	bl	800986e <SDIO_GetResponse>
 80080f4:	4602      	mov	r2, r0
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	210c      	movs	r1, #12
 8008100:	4618      	mov	r0, r3
 8008102:	f001 fbb4 	bl	800986e <SDIO_GetResponse>
 8008106:	4602      	mov	r2, r0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2104      	movs	r1, #4
 8008112:	4618      	mov	r0, r3
 8008114:	f001 fbab 	bl	800986e <SDIO_GetResponse>
 8008118:	4603      	mov	r3, r0
 800811a:	0d1a      	lsrs	r2, r3, #20
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008120:	f107 0310 	add.w	r3, r7, #16
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fcf2 	bl	8007b10 <HAL_SD_GetCardCSD>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008136:	e020      	b.n	800817a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6819      	ldr	r1, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008140:	041b      	lsls	r3, r3, #16
 8008142:	f04f 0400 	mov.w	r4, #0
 8008146:	461a      	mov	r2, r3
 8008148:	4623      	mov	r3, r4
 800814a:	4608      	mov	r0, r1
 800814c:	f001 fc9a 	bl	8009a84 <SDMMC_CmdSelDesel>
 8008150:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <SD_InitCard+0x174>
  {
    return errorstate;
 8008158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815a:	e00e      	b.n	800817a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681d      	ldr	r5, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	466c      	mov	r4, sp
 8008164:	f103 0210 	add.w	r2, r3, #16
 8008168:	ca07      	ldmia	r2, {r0, r1, r2}
 800816a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800816e:	3304      	adds	r3, #4
 8008170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008172:	4628      	mov	r0, r5
 8008174:	f001 fade 	bl	8009734 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3740      	adds	r7, #64	; 0x40
 800817e:	46bd      	mov	sp, r7
 8008180:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008184 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fc94 	bl	8009aca <SDMMC_CmdGoIdleState>
 80081a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <SD_PowerON+0x2a>
  {
    return errorstate;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	e072      	b.n	8008294 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 fca7 	bl	8009b06 <SDMMC_CmdOperCond>
 80081b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00d      	beq.n	80081dc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 fc7d 	bl	8009aca <SDMMC_CmdGoIdleState>
 80081d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	e05b      	b.n	8008294 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d137      	bne.n	800825a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2100      	movs	r1, #0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 fca7 	bl	8009b44 <SDMMC_CmdAppCommand>
 80081f6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d02d      	beq.n	800825a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008202:	e047      	b.n	8008294 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fc9a 	bl	8009b44 <SDMMC_CmdAppCommand>
 8008210:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <SD_PowerON+0x98>
    {
      return errorstate;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	e03b      	b.n	8008294 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	491e      	ldr	r1, [pc, #120]	; (800829c <SD_PowerON+0x118>)
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fcb0 	bl	8009b88 <SDMMC_CmdAppOperCommand>
 8008228:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008230:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008234:	e02e      	b.n	8008294 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2100      	movs	r1, #0
 800823c:	4618      	mov	r0, r3
 800823e:	f001 fb16 	bl	800986e <SDIO_GetResponse>
 8008242:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	0fdb      	lsrs	r3, r3, #31
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <SD_PowerON+0xcc>
 800824c:	2301      	movs	r3, #1
 800824e:	e000      	b.n	8008252 <SD_PowerON+0xce>
 8008250:	2300      	movs	r3, #0
 8008252:	613b      	str	r3, [r7, #16]

    count++;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	3301      	adds	r3, #1
 8008258:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008260:	4293      	cmp	r3, r2
 8008262:	d802      	bhi.n	800826a <SD_PowerON+0xe6>
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0cc      	beq.n	8008204 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008270:	4293      	cmp	r3, r2
 8008272:	d902      	bls.n	800827a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008278:	e00c      	b.n	8008294 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	645a      	str	r2, [r3, #68]	; 0x44
 800828a:	e002      	b.n	8008292 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	c1100000 	.word	0xc1100000

080082a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80082b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082b4:	e018      	b.n	80082e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f001 fd24 	bl	8009d10 <SDMMC_CmdSendStatus>
 80082c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	e009      	b.n	80082e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fac7 	bl	800986e <SDIO_GetResponse>
 80082e0:	4602      	mov	r2, r0
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	2300      	movs	r3, #0
 80082fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2100      	movs	r1, #0
 8008306:	4618      	mov	r0, r3
 8008308:	f001 fab1 	bl	800986e <SDIO_GetResponse>
 800830c:	4603      	mov	r3, r0
 800830e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008316:	d102      	bne.n	800831e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800831c:	e02f      	b.n	800837e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f879 	bl	800841c <SD_FindSCR>
 800832a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	e023      	b.n	800837e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01c      	beq.n	800837a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008348:	041b      	lsls	r3, r3, #16
 800834a:	4619      	mov	r1, r3
 800834c:	4610      	mov	r0, r2
 800834e:	f001 fbf9 	bl	8009b44 <SDMMC_CmdAppCommand>
 8008352:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	e00f      	b.n	800837e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2102      	movs	r1, #2
 8008364:	4618      	mov	r0, r3
 8008366:	f001 fc32 	bl	8009bce <SDMMC_CmdBusWidth>
 800836a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	e003      	b.n	800837e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008376:	2300      	movs	r3, #0
 8008378:	e001      	b.n	800837e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800837a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b086      	sub	sp, #24
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2100      	movs	r1, #0
 800839c:	4618      	mov	r0, r3
 800839e:	f001 fa66 	bl	800986e <SDIO_GetResponse>
 80083a2:	4603      	mov	r3, r0
 80083a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083ac:	d102      	bne.n	80083b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80083ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083b2:	e02f      	b.n	8008414 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80083b4:	f107 030c 	add.w	r3, r7, #12
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f82e 	bl	800841c <SD_FindSCR>
 80083c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	e023      	b.n	8008414 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d01c      	beq.n	8008410 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083de:	041b      	lsls	r3, r3, #16
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f001 fbae 	bl	8009b44 <SDMMC_CmdAppCommand>
 80083e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	e00f      	b.n	8008414 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2100      	movs	r1, #0
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 fbe7 	bl	8009bce <SDMMC_CmdBusWidth>
 8008400:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	e003      	b.n	8008414 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800840c:	2300      	movs	r3, #0
 800840e:	e001      	b.n	8008414 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008410:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008414:	4618      	mov	r0, r3
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800841c:	b590      	push	{r4, r7, lr}
 800841e:	b08f      	sub	sp, #60	; 0x3c
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008426:	f7f8 fdc1 	bl	8000fac <HAL_GetTick>
 800842a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008430:	2300      	movs	r3, #0
 8008432:	60bb      	str	r3, [r7, #8]
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2108      	movs	r1, #8
 8008442:	4618      	mov	r0, r3
 8008444:	f001 fa52 	bl	80098ec <SDMMC_CmdBlockLength>
 8008448:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	e0a9      	b.n	80085a8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845c:	041b      	lsls	r3, r3, #16
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f001 fb6f 	bl	8009b44 <SDMMC_CmdAppCommand>
 8008466:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <SD_FindSCR+0x56>
  {
    return errorstate;
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	e09a      	b.n	80085a8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008472:	f04f 33ff 	mov.w	r3, #4294967295
 8008476:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008478:	2308      	movs	r3, #8
 800847a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800847c:	2330      	movs	r3, #48	; 0x30
 800847e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008480:	2302      	movs	r3, #2
 8008482:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008484:	2300      	movs	r3, #0
 8008486:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008488:	2301      	movs	r3, #1
 800848a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f107 0210 	add.w	r2, r7, #16
 8008494:	4611      	mov	r1, r2
 8008496:	4618      	mov	r0, r3
 8008498:	f001 f9fc 	bl	8009894 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 fbb6 	bl	8009c12 <SDMMC_CmdSendSCR>
 80084a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d022      	beq.n	80084f4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	e07a      	b.n	80085a8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00e      	beq.n	80084de <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6819      	ldr	r1, [r3, #0]
 80084c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	f107 0208 	add.w	r2, r7, #8
 80084cc:	18d4      	adds	r4, r2, r3
 80084ce:	4608      	mov	r0, r1
 80084d0:	f001 f95b 	bl	800978a <SDIO_ReadFIFO>
 80084d4:	4603      	mov	r3, r0
 80084d6:	6023      	str	r3, [r4, #0]
      index++;
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	3301      	adds	r3, #1
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80084de:	f7f8 fd65 	bl	8000fac <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d102      	bne.n	80084f4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80084ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084f2:	e059      	b.n	80085a8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084fa:	f240 432a 	movw	r3, #1066	; 0x42a
 80084fe:	4013      	ands	r3, r2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0d6      	beq.n	80084b2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2208      	movs	r2, #8
 8008518:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800851a:	2308      	movs	r3, #8
 800851c:	e044      	b.n	80085a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2202      	movs	r2, #2
 8008532:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008534:	2302      	movs	r3, #2
 8008536:	e037      	b.n	80085a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d005      	beq.n	8008552 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2220      	movs	r2, #32
 800854c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800854e:	2320      	movs	r3, #32
 8008550:	e02a      	b.n	80085a8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f240 523a 	movw	r2, #1338	; 0x53a
 800855a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	061a      	lsls	r2, r3, #24
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008568:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	0a1b      	lsrs	r3, r3, #8
 800856e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008572:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	0e1b      	lsrs	r3, r3, #24
 8008578:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800857a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857c:	601a      	str	r2, [r3, #0]
    scr++;
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	3304      	adds	r3, #4
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	061a      	lsls	r2, r3, #24
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	021b      	lsls	r3, r3, #8
 800858c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008590:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	0a1b      	lsrs	r3, r3, #8
 8008596:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800859a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	0e1b      	lsrs	r3, r3, #24
 80085a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	373c      	adds	r7, #60	; 0x3c
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd90      	pop	{r4, r7, pc}

080085b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e01d      	b.n	80085fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d106      	bne.n	80085dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f006 fa14 	bl	800ea04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4619      	mov	r1, r3
 80085ee:	4610      	mov	r0, r2
 80085f0:	f000 fd52 	bl	8009098 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f042 0201 	orr.w	r2, r2, #1
 800861c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b06      	cmp	r3, #6
 800862e:	d007      	beq.n	8008640 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0201 	orr.w	r2, r2, #1
 800863e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e01d      	b.n	800869c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f006 f9ed 	bl	800ea54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3304      	adds	r3, #4
 800868a:	4619      	mov	r1, r3
 800868c:	4610      	mov	r0, r2
 800868e:	f000 fd03 	bl	8009098 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d101      	bne.n	80086c2 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80086be:	2302      	movs	r3, #2
 80086c0:	e0e9      	b.n	8008896 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d10b      	bne.n	80086e6 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d104      	bne.n	80086de <HAL_TIM_PWM_Start_DMA+0x3a>
 80086d4:	887b      	ldrh	r3, [r7, #2]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e0db      	b.n	8008896 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2202      	movs	r2, #2
 80086e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b0c      	cmp	r3, #12
 80086ea:	f200 80ad 	bhi.w	8008848 <HAL_TIM_PWM_Start_DMA+0x1a4>
 80086ee:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <HAL_TIM_PWM_Start_DMA+0x50>)
 80086f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f4:	08008729 	.word	0x08008729
 80086f8:	08008849 	.word	0x08008849
 80086fc:	08008849 	.word	0x08008849
 8008700:	08008849 	.word	0x08008849
 8008704:	08008771 	.word	0x08008771
 8008708:	08008849 	.word	0x08008849
 800870c:	08008849 	.word	0x08008849
 8008710:	08008849 	.word	0x08008849
 8008714:	080087b9 	.word	0x080087b9
 8008718:	08008849 	.word	0x08008849
 800871c:	08008849 	.word	0x08008849
 8008720:	08008849 	.word	0x08008849
 8008724:	08008801 	.word	0x08008801
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	4a5c      	ldr	r2, [pc, #368]	; (80088a0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800872e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	4a5b      	ldr	r2, [pc, #364]	; (80088a4 <HAL_TIM_PWM_Start_DMA+0x200>)
 8008736:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	4a5a      	ldr	r2, [pc, #360]	; (80088a8 <HAL_TIM_PWM_Start_DMA+0x204>)
 800873e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3334      	adds	r3, #52	; 0x34
 800874c:	461a      	mov	r2, r3
 800874e:	887b      	ldrh	r3, [r7, #2]
 8008750:	f7f8 fe1a 	bl	8001388 <HAL_DMA_Start_IT>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e09b      	b.n	8008896 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800876c:	60da      	str	r2, [r3, #12]
      break;
 800876e:	e06c      	b.n	800884a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	4a4a      	ldr	r2, [pc, #296]	; (80088a0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8008776:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	4a49      	ldr	r2, [pc, #292]	; (80088a4 <HAL_TIM_PWM_Start_DMA+0x200>)
 800877e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008784:	4a48      	ldr	r2, [pc, #288]	; (80088a8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8008786:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3338      	adds	r3, #56	; 0x38
 8008794:	461a      	mov	r2, r3
 8008796:	887b      	ldrh	r3, [r7, #2]
 8008798:	f7f8 fdf6 	bl	8001388 <HAL_DMA_Start_IT>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e077      	b.n	8008896 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087b4:	60da      	str	r2, [r3, #12]
      break;
 80087b6:	e048      	b.n	800884a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087bc:	4a38      	ldr	r2, [pc, #224]	; (80088a0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80087be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	4a37      	ldr	r2, [pc, #220]	; (80088a4 <HAL_TIM_PWM_Start_DMA+0x200>)
 80087c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	4a36      	ldr	r2, [pc, #216]	; (80088a8 <HAL_TIM_PWM_Start_DMA+0x204>)
 80087ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	333c      	adds	r3, #60	; 0x3c
 80087dc:	461a      	mov	r2, r3
 80087de:	887b      	ldrh	r3, [r7, #2]
 80087e0:	f7f8 fdd2 	bl	8001388 <HAL_DMA_Start_IT>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e053      	b.n	8008896 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087fc:	60da      	str	r2, [r3, #12]
      break;
 80087fe:	e024      	b.n	800884a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	4a26      	ldr	r2, [pc, #152]	; (80088a0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8008806:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880c:	4a25      	ldr	r2, [pc, #148]	; (80088a4 <HAL_TIM_PWM_Start_DMA+0x200>)
 800880e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	4a24      	ldr	r2, [pc, #144]	; (80088a8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8008816:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3340      	adds	r3, #64	; 0x40
 8008824:	461a      	mov	r2, r3
 8008826:	887b      	ldrh	r3, [r7, #2]
 8008828:	f7f8 fdae 	bl	8001388 <HAL_DMA_Start_IT>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e02f      	b.n	8008896 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008844:	60da      	str	r2, [r3, #12]
      break;
 8008846:	e000      	b.n	800884a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8008848:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2201      	movs	r2, #1
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fec6 	bl	80095e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a13      	ldr	r2, [pc, #76]	; (80088ac <HAL_TIM_PWM_Start_DMA+0x208>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d107      	bne.n	8008872 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 0307 	and.w	r3, r3, #7
 800887c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b06      	cmp	r3, #6
 8008882:	d007      	beq.n	8008894 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0201 	orr.w	r2, r2, #1
 8008892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	08008fb7 	.word	0x08008fb7
 80088a4:	08009027 	.word	0x08009027
 80088a8:	08008f93 	.word	0x08008f93
 80088ac:	40010000 	.word	0x40010000

080088b0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b0c      	cmp	r3, #12
 80088be:	d855      	bhi.n	800896c <HAL_TIM_PWM_Stop_DMA+0xbc>
 80088c0:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088fd 	.word	0x080088fd
 80088cc:	0800896d 	.word	0x0800896d
 80088d0:	0800896d 	.word	0x0800896d
 80088d4:	0800896d 	.word	0x0800896d
 80088d8:	08008919 	.word	0x08008919
 80088dc:	0800896d 	.word	0x0800896d
 80088e0:	0800896d 	.word	0x0800896d
 80088e4:	0800896d 	.word	0x0800896d
 80088e8:	08008935 	.word	0x08008935
 80088ec:	0800896d 	.word	0x0800896d
 80088f0:	0800896d 	.word	0x0800896d
 80088f4:	0800896d 	.word	0x0800896d
 80088f8:	08008951 	.word	0x08008951
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800890a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	4618      	mov	r0, r3
 8008912:	f7f8 fe01 	bl	8001518 <HAL_DMA_Abort_IT>
      break;
 8008916:	e02a      	b.n	800896e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008926:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892c:	4618      	mov	r0, r3
 800892e:	f7f8 fdf3 	bl	8001518 <HAL_DMA_Abort_IT>
      break;
 8008932:	e01c      	b.n	800896e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008942:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	4618      	mov	r0, r3
 800894a:	f7f8 fde5 	bl	8001518 <HAL_DMA_Abort_IT>
      break;
 800894e:	e00e      	b.n	800896e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800895e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008964:	4618      	mov	r0, r3
 8008966:	f7f8 fdd7 	bl	8001518 <HAL_DMA_Abort_IT>
      break;
 800896a:	e000      	b.n	800896e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800896c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2200      	movs	r2, #0
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fe34 	bl	80095e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1d      	ldr	r2, [pc, #116]	; (80089f8 <HAL_TIM_PWM_Stop_DMA+0x148>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d117      	bne.n	80089b6 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6a1a      	ldr	r2, [r3, #32]
 800898c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008990:	4013      	ands	r3, r2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10f      	bne.n	80089b6 <HAL_TIM_PWM_Stop_DMA+0x106>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6a1a      	ldr	r2, [r3, #32]
 800899c:	f240 4344 	movw	r3, #1092	; 0x444
 80089a0:	4013      	ands	r3, r2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d107      	bne.n	80089b6 <HAL_TIM_PWM_Stop_DMA+0x106>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6a1a      	ldr	r2, [r3, #32]
 80089bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80089c0:	4013      	ands	r3, r2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10f      	bne.n	80089e6 <HAL_TIM_PWM_Stop_DMA+0x136>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6a1a      	ldr	r2, [r3, #32]
 80089cc:	f240 4344 	movw	r3, #1092	; 0x444
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d107      	bne.n	80089e6 <HAL_TIM_PWM_Stop_DMA+0x136>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0201 	bic.w	r2, r2, #1
 80089e4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	40010000 	.word	0x40010000

080089fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d122      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d11b      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f06f 0202 	mvn.w	r2, #2
 8008a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fa75 	bl	8008f2e <HAL_TIM_IC_CaptureCallback>
 8008a44:	e005      	b.n	8008a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa67 	bl	8008f1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa78 	bl	8008f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d122      	bne.n	8008aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d11b      	bne.n	8008aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f06f 0204 	mvn.w	r2, #4
 8008a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2202      	movs	r2, #2
 8008a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa4b 	bl	8008f2e <HAL_TIM_IC_CaptureCallback>
 8008a98:	e005      	b.n	8008aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa3d 	bl	8008f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fa4e 	bl	8008f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	f003 0308 	and.w	r3, r3, #8
 8008ab6:	2b08      	cmp	r3, #8
 8008ab8:	d122      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f003 0308 	and.w	r3, r3, #8
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d11b      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f06f 0208 	mvn.w	r2, #8
 8008ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa21 	bl	8008f2e <HAL_TIM_IC_CaptureCallback>
 8008aec:	e005      	b.n	8008afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa13 	bl	8008f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fa24 	bl	8008f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0310 	and.w	r3, r3, #16
 8008b0a:	2b10      	cmp	r3, #16
 8008b0c:	d122      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d11b      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f06f 0210 	mvn.w	r2, #16
 8008b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2208      	movs	r2, #8
 8008b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f9f7 	bl	8008f2e <HAL_TIM_IC_CaptureCallback>
 8008b40:	e005      	b.n	8008b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f9e9 	bl	8008f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f9fa 	bl	8008f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d10e      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d107      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f06f 0201 	mvn.w	r2, #1
 8008b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f9c3 	bl	8008f06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b8a:	2b80      	cmp	r3, #128	; 0x80
 8008b8c:	d10e      	bne.n	8008bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b98:	2b80      	cmp	r3, #128	; 0x80
 8008b9a:	d107      	bne.n	8008bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fdba 	bl	8009720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb6:	2b40      	cmp	r3, #64	; 0x40
 8008bb8:	d10e      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc4:	2b40      	cmp	r3, #64	; 0x40
 8008bc6:	d107      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9c9 	bl	8008f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d10e      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b20      	cmp	r3, #32
 8008bf2:	d107      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f06f 0220 	mvn.w	r2, #32
 8008bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fd84 	bl	800970c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d101      	bne.n	8008c26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e0b4      	b.n	8008d90 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2202      	movs	r2, #2
 8008c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b0c      	cmp	r3, #12
 8008c3a:	f200 809f 	bhi.w	8008d7c <HAL_TIM_PWM_ConfigChannel+0x170>
 8008c3e:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008c79 	.word	0x08008c79
 8008c48:	08008d7d 	.word	0x08008d7d
 8008c4c:	08008d7d 	.word	0x08008d7d
 8008c50:	08008d7d 	.word	0x08008d7d
 8008c54:	08008cb9 	.word	0x08008cb9
 8008c58:	08008d7d 	.word	0x08008d7d
 8008c5c:	08008d7d 	.word	0x08008d7d
 8008c60:	08008d7d 	.word	0x08008d7d
 8008c64:	08008cfb 	.word	0x08008cfb
 8008c68:	08008d7d 	.word	0x08008d7d
 8008c6c:	08008d7d 	.word	0x08008d7d
 8008c70:	08008d7d 	.word	0x08008d7d
 8008c74:	08008d3b 	.word	0x08008d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fa8a 	bl	8009198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699a      	ldr	r2, [r3, #24]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f042 0208 	orr.w	r2, r2, #8
 8008c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699a      	ldr	r2, [r3, #24]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0204 	bic.w	r2, r2, #4
 8008ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6999      	ldr	r1, [r3, #24]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	691a      	ldr	r2, [r3, #16]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	619a      	str	r2, [r3, #24]
      break;
 8008cb6:	e062      	b.n	8008d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68b9      	ldr	r1, [r7, #8]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fad0 	bl	8009264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699a      	ldr	r2, [r3, #24]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	699a      	ldr	r2, [r3, #24]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6999      	ldr	r1, [r3, #24]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	021a      	lsls	r2, r3, #8
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	619a      	str	r2, [r3, #24]
      break;
 8008cf8:	e041      	b.n	8008d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68b9      	ldr	r1, [r7, #8]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 fb1b 	bl	800933c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	69da      	ldr	r2, [r3, #28]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f042 0208 	orr.w	r2, r2, #8
 8008d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	69da      	ldr	r2, [r3, #28]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 0204 	bic.w	r2, r2, #4
 8008d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	69d9      	ldr	r1, [r3, #28]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	691a      	ldr	r2, [r3, #16]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	430a      	orrs	r2, r1
 8008d36:	61da      	str	r2, [r3, #28]
      break;
 8008d38:	e021      	b.n	8008d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fb65 	bl	8009410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	69da      	ldr	r2, [r3, #28]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69da      	ldr	r2, [r3, #28]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	69d9      	ldr	r1, [r3, #28]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	021a      	lsls	r2, r3, #8
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	61da      	str	r2, [r3, #28]
      break;
 8008d7a:	e000      	b.n	8008d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008d7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d101      	bne.n	8008db0 <HAL_TIM_ConfigClockSource+0x18>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e0a6      	b.n	8008efe <HAL_TIM_ConfigClockSource+0x166>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b40      	cmp	r3, #64	; 0x40
 8008de6:	d067      	beq.n	8008eb8 <HAL_TIM_ConfigClockSource+0x120>
 8008de8:	2b40      	cmp	r3, #64	; 0x40
 8008dea:	d80b      	bhi.n	8008e04 <HAL_TIM_ConfigClockSource+0x6c>
 8008dec:	2b10      	cmp	r3, #16
 8008dee:	d073      	beq.n	8008ed8 <HAL_TIM_ConfigClockSource+0x140>
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	d802      	bhi.n	8008dfa <HAL_TIM_ConfigClockSource+0x62>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d06f      	beq.n	8008ed8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008df8:	e078      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	d06c      	beq.n	8008ed8 <HAL_TIM_ConfigClockSource+0x140>
 8008dfe:	2b30      	cmp	r3, #48	; 0x30
 8008e00:	d06a      	beq.n	8008ed8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008e02:	e073      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e04:	2b70      	cmp	r3, #112	; 0x70
 8008e06:	d00d      	beq.n	8008e24 <HAL_TIM_ConfigClockSource+0x8c>
 8008e08:	2b70      	cmp	r3, #112	; 0x70
 8008e0a:	d804      	bhi.n	8008e16 <HAL_TIM_ConfigClockSource+0x7e>
 8008e0c:	2b50      	cmp	r3, #80	; 0x50
 8008e0e:	d033      	beq.n	8008e78 <HAL_TIM_ConfigClockSource+0xe0>
 8008e10:	2b60      	cmp	r3, #96	; 0x60
 8008e12:	d041      	beq.n	8008e98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008e14:	e06a      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e1a:	d066      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x152>
 8008e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e20:	d017      	beq.n	8008e52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008e22:	e063      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6818      	ldr	r0, [r3, #0]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	6899      	ldr	r1, [r3, #8]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f000 fbb6 	bl	80095a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	609a      	str	r2, [r3, #8]
      break;
 8008e50:	e04c      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	6899      	ldr	r1, [r3, #8]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f000 fb9f 	bl	80095a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689a      	ldr	r2, [r3, #8]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e74:	609a      	str	r2, [r3, #8]
      break;
 8008e76:	e039      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6818      	ldr	r0, [r3, #0]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	6859      	ldr	r1, [r3, #4]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	461a      	mov	r2, r3
 8008e86:	f000 fb13 	bl	80094b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2150      	movs	r1, #80	; 0x50
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fb6c 	bl	800956e <TIM_ITRx_SetConfig>
      break;
 8008e96:	e029      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	6859      	ldr	r1, [r3, #4]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f000 fb32 	bl	800950e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2160      	movs	r1, #96	; 0x60
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fb5c 	bl	800956e <TIM_ITRx_SetConfig>
      break;
 8008eb6:	e019      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	6859      	ldr	r1, [r3, #4]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	f000 faf3 	bl	80094b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2140      	movs	r1, #64	; 0x40
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 fb4c 	bl	800956e <TIM_ITRx_SetConfig>
      break;
 8008ed6:	e009      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f000 fb43 	bl	800956e <TIM_ITRx_SetConfig>
      break;
 8008ee8:	e000      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f22:	bf00      	nop
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008f5e:	bf00      	nop
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f7ff ffe8 	bl	8008f7e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc2:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d103      	bne.n	8008fde <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	771a      	strb	r2, [r3, #28]
 8008fdc:	e019      	b.n	8009012 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d103      	bne.n	8008ff0 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2202      	movs	r2, #2
 8008fec:	771a      	strb	r2, [r3, #28]
 8008fee:	e010      	b.n	8009012 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d103      	bne.n	8009002 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2204      	movs	r2, #4
 8008ffe:	771a      	strb	r2, [r3, #28]
 8009000:	e007      	b.n	8009012 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	429a      	cmp	r2, r3
 800900a:	d102      	bne.n	8009012 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2208      	movs	r2, #8
 8009010:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f7ff ff95 	bl	8008f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	771a      	strb	r2, [r3, #28]
}
 800901e:	bf00      	nop
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d103      	bne.n	800904e <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2201      	movs	r2, #1
 800904a:	771a      	strb	r2, [r3, #28]
 800904c:	e019      	b.n	8009082 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	d103      	bne.n	8009060 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2202      	movs	r2, #2
 800905c:	771a      	strb	r2, [r3, #28]
 800905e:	e010      	b.n	8009082 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	429a      	cmp	r2, r3
 8009068:	d103      	bne.n	8009072 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2204      	movs	r2, #4
 800906e:	771a      	strb	r2, [r3, #28]
 8009070:	e007      	b.n	8009082 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	429a      	cmp	r2, r3
 800907a:	d102      	bne.n	8009082 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2208      	movs	r2, #8
 8009080:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff ff67 	bl	8008f56 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	771a      	strb	r2, [r3, #28]
}
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a34      	ldr	r2, [pc, #208]	; (800917c <TIM_Base_SetConfig+0xe4>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00f      	beq.n	80090d0 <TIM_Base_SetConfig+0x38>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b6:	d00b      	beq.n	80090d0 <TIM_Base_SetConfig+0x38>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a31      	ldr	r2, [pc, #196]	; (8009180 <TIM_Base_SetConfig+0xe8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <TIM_Base_SetConfig+0x38>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a30      	ldr	r2, [pc, #192]	; (8009184 <TIM_Base_SetConfig+0xec>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_Base_SetConfig+0x38>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a2f      	ldr	r2, [pc, #188]	; (8009188 <TIM_Base_SetConfig+0xf0>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d108      	bne.n	80090e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a25      	ldr	r2, [pc, #148]	; (800917c <TIM_Base_SetConfig+0xe4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d01b      	beq.n	8009122 <TIM_Base_SetConfig+0x8a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f0:	d017      	beq.n	8009122 <TIM_Base_SetConfig+0x8a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a22      	ldr	r2, [pc, #136]	; (8009180 <TIM_Base_SetConfig+0xe8>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d013      	beq.n	8009122 <TIM_Base_SetConfig+0x8a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a21      	ldr	r2, [pc, #132]	; (8009184 <TIM_Base_SetConfig+0xec>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00f      	beq.n	8009122 <TIM_Base_SetConfig+0x8a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a20      	ldr	r2, [pc, #128]	; (8009188 <TIM_Base_SetConfig+0xf0>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d00b      	beq.n	8009122 <TIM_Base_SetConfig+0x8a>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a1f      	ldr	r2, [pc, #124]	; (800918c <TIM_Base_SetConfig+0xf4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d007      	beq.n	8009122 <TIM_Base_SetConfig+0x8a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <TIM_Base_SetConfig+0xf8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d003      	beq.n	8009122 <TIM_Base_SetConfig+0x8a>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a1d      	ldr	r2, [pc, #116]	; (8009194 <TIM_Base_SetConfig+0xfc>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d108      	bne.n	8009134 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4313      	orrs	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a08      	ldr	r2, [pc, #32]	; (800917c <TIM_Base_SetConfig+0xe4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d103      	bne.n	8009168 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	615a      	str	r2, [r3, #20]
}
 800916e:	bf00      	nop
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40010000 	.word	0x40010000
 8009180:	40000400 	.word	0x40000400
 8009184:	40000800 	.word	0x40000800
 8009188:	40000c00 	.word	0x40000c00
 800918c:	40014000 	.word	0x40014000
 8009190:	40014400 	.word	0x40014400
 8009194:	40014800 	.word	0x40014800

08009198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f023 0201 	bic.w	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 0303 	bic.w	r3, r3, #3
 80091ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f023 0302 	bic.w	r3, r3, #2
 80091e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a1c      	ldr	r2, [pc, #112]	; (8009260 <TIM_OC1_SetConfig+0xc8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d10c      	bne.n	800920e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f023 0308 	bic.w	r3, r3, #8
 80091fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4313      	orrs	r3, r2
 8009204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f023 0304 	bic.w	r3, r3, #4
 800920c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a13      	ldr	r2, [pc, #76]	; (8009260 <TIM_OC1_SetConfig+0xc8>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d111      	bne.n	800923a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800921c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	4313      	orrs	r3, r2
 800922e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	4313      	orrs	r3, r2
 8009238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	621a      	str	r2, [r3, #32]
}
 8009254:	bf00      	nop
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	40010000 	.word	0x40010000

08009264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	f023 0210 	bic.w	r2, r3, #16
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800929a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f023 0320 	bic.w	r3, r3, #32
 80092ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	011b      	lsls	r3, r3, #4
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a1e      	ldr	r2, [pc, #120]	; (8009338 <TIM_OC2_SetConfig+0xd4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d10d      	bne.n	80092e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	011b      	lsls	r3, r3, #4
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a15      	ldr	r2, [pc, #84]	; (8009338 <TIM_OC2_SetConfig+0xd4>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d113      	bne.n	8009310 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	4313      	orrs	r3, r2
 8009302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	4313      	orrs	r3, r2
 800930e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	621a      	str	r2, [r3, #32]
}
 800932a:	bf00      	nop
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	40010000 	.word	0x40010000

0800933c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	021b      	lsls	r3, r3, #8
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a1d      	ldr	r2, [pc, #116]	; (800940c <TIM_OC3_SetConfig+0xd0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d10d      	bne.n	80093b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	021b      	lsls	r3, r3, #8
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a14      	ldr	r2, [pc, #80]	; (800940c <TIM_OC3_SetConfig+0xd0>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d113      	bne.n	80093e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	011b      	lsls	r3, r3, #4
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	621a      	str	r2, [r3, #32]
}
 8009400:	bf00      	nop
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	40010000 	.word	0x40010000

08009410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009410:	b480      	push	{r7}
 8009412:	b087      	sub	sp, #28
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800943e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4313      	orrs	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800945a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	031b      	lsls	r3, r3, #12
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	4313      	orrs	r3, r2
 8009466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a10      	ldr	r2, [pc, #64]	; (80094ac <TIM_OC4_SetConfig+0x9c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d109      	bne.n	8009484 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	019b      	lsls	r3, r3, #6
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	4313      	orrs	r3, r2
 8009482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	621a      	str	r2, [r3, #32]
}
 800949e:	bf00      	nop
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40010000 	.word	0x40010000

080094b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a1b      	ldr	r3, [r3, #32]
 80094c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	f023 0201 	bic.w	r2, r3, #1
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f023 030a 	bic.w	r3, r3, #10
 80094ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	621a      	str	r2, [r3, #32]
}
 8009502:	bf00      	nop
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800950e:	b480      	push	{r7}
 8009510:	b087      	sub	sp, #28
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	f023 0210 	bic.w	r2, r3, #16
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6a1b      	ldr	r3, [r3, #32]
 8009530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	031b      	lsls	r3, r3, #12
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	4313      	orrs	r3, r2
 8009542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800954a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	011b      	lsls	r3, r3, #4
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	4313      	orrs	r3, r2
 8009554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	621a      	str	r2, [r3, #32]
}
 8009562:	bf00      	nop
 8009564:	371c      	adds	r7, #28
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800956e:	b480      	push	{r7}
 8009570:	b085      	sub	sp, #20
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4313      	orrs	r3, r2
 800958c:	f043 0307 	orr.w	r3, r3, #7
 8009590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	609a      	str	r2, [r3, #8]
}
 8009598:	bf00      	nop
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	021a      	lsls	r2, r3, #8
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	431a      	orrs	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	609a      	str	r2, [r3, #8]
}
 80095d8:	bf00      	nop
 80095da:	371c      	adds	r7, #28
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f003 031f 	and.w	r3, r3, #31
 80095f6:	2201      	movs	r2, #1
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a1a      	ldr	r2, [r3, #32]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	43db      	mvns	r3, r3
 8009606:	401a      	ands	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1a      	ldr	r2, [r3, #32]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f003 031f 	and.w	r3, r3, #31
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	fa01 f303 	lsl.w	r3, r1, r3
 800961c:	431a      	orrs	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	621a      	str	r2, [r3, #32]
}
 8009622:	bf00      	nop
 8009624:	371c      	adds	r7, #28
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
	...

08009630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009644:	2302      	movs	r3, #2
 8009646:	e050      	b.n	80096ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a1c      	ldr	r2, [pc, #112]	; (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d018      	beq.n	80096be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009694:	d013      	beq.n	80096be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a18      	ldr	r2, [pc, #96]	; (80096fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00e      	beq.n	80096be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a16      	ldr	r2, [pc, #88]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d009      	beq.n	80096be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a15      	ldr	r2, [pc, #84]	; (8009704 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d004      	beq.n	80096be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a13      	ldr	r2, [pc, #76]	; (8009708 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d10c      	bne.n	80096d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	40010000 	.word	0x40010000
 80096fc:	40000400 	.word	0x40000400
 8009700:	40000800 	.word	0x40000800
 8009704:	40000c00 	.word	0x40000c00
 8009708:	40014000 	.word	0x40014000

0800970c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009734:	b084      	sub	sp, #16
 8009736:	b480      	push	{r7}
 8009738:	b085      	sub	sp, #20
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	f107 001c 	add.w	r0, r7, #28
 8009742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800974a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800974c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800974e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009752:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009756:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800975a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800975e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800976e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	b004      	add	sp, #16
 8009788:	4770      	bx	lr

0800978a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800978a:	b480      	push	{r7}
 800978c:	b083      	sub	sp, #12
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2203      	movs	r2, #3
 80097d2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80097d4:	2002      	movs	r0, #2
 80097d6:	f7f7 fbf5 	bl	8000fc4 <HAL_Delay>
  
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0303 	and.w	r3, r3, #3
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800981e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009824:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800982a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800983a:	f023 030f 	bic.w	r3, r3, #15
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	431a      	orrs	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	b2db      	uxtb	r3, r3
}
 8009862:	4618      	mov	r0, r3
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800986e:	b480      	push	{r7}
 8009870:	b085      	sub	sp, #20
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3314      	adds	r3, #20
 800987c:	461a      	mov	r2, r3
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	4413      	add	r3, r2
 8009882:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
}  
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80098ba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80098c0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80098c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	431a      	orrs	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80098de:	2300      	movs	r3, #0

}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80098fa:	2310      	movs	r3, #16
 80098fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098fe:	2340      	movs	r3, #64	; 0x40
 8009900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009902:	2300      	movs	r3, #0
 8009904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800990a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800990c:	f107 0308 	add.w	r3, r7, #8
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff ff74 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009918:	f241 3288 	movw	r2, #5000	; 0x1388
 800991c:	2110      	movs	r1, #16
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fa40 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009926:	69fb      	ldr	r3, [r7, #28]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3720      	adds	r7, #32
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800993e:	2311      	movs	r3, #17
 8009940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009942:	2340      	movs	r3, #64	; 0x40
 8009944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009946:	2300      	movs	r3, #0
 8009948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800994a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800994e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009950:	f107 0308 	add.w	r3, r7, #8
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff ff52 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800995c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009960:	2111      	movs	r1, #17
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa1e 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800996a:	69fb      	ldr	r3, [r7, #28]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3720      	adds	r7, #32
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009982:	2312      	movs	r3, #18
 8009984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009986:	2340      	movs	r3, #64	; 0x40
 8009988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800998e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009992:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009994:	f107 0308 	add.w	r3, r7, #8
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff ff30 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80099a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a4:	2112      	movs	r1, #18
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f9fc 	bl	8009da4 <SDMMC_GetCmdResp1>
 80099ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099ae:	69fb      	ldr	r3, [r7, #28]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3720      	adds	r7, #32
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80099c6:	2318      	movs	r3, #24
 80099c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099ca:	2340      	movs	r3, #64	; 0x40
 80099cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099d8:	f107 0308 	add.w	r3, r7, #8
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff ff0e 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80099e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e8:	2118      	movs	r1, #24
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f9da 	bl	8009da4 <SDMMC_GetCmdResp1>
 80099f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099f2:	69fb      	ldr	r3, [r7, #28]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3720      	adds	r7, #32
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009a0a:	2319      	movs	r3, #25
 8009a0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a0e:	2340      	movs	r3, #64	; 0x40
 8009a10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a12:	2300      	movs	r3, #0
 8009a14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a1c:	f107 0308 	add.w	r3, r7, #8
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff feec 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a2c:	2119      	movs	r1, #25
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f9b8 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009a34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a36:	69fb      	ldr	r3, [r7, #28]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3720      	adds	r7, #32
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a54:	2300      	movs	r3, #0
 8009a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a5e:	f107 0308 	add.w	r3, r7, #8
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff fecb 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009a6a:	4a05      	ldr	r2, [pc, #20]	; (8009a80 <SDMMC_CmdStopTransfer+0x40>)
 8009a6c:	210c      	movs	r1, #12
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f998 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a76:	69fb      	ldr	r3, [r7, #28]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	05f5e100 	.word	0x05f5e100

08009a84 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08a      	sub	sp, #40	; 0x28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009a94:	2307      	movs	r3, #7
 8009a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aa4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aa6:	f107 0310 	add.w	r3, r7, #16
 8009aaa:	4619      	mov	r1, r3
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f7ff fea7 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab6:	2107      	movs	r1, #7
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f973 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009abe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3728      	adds	r7, #40	; 0x28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b088      	sub	sp, #32
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009ada:	2300      	movs	r3, #0
 8009adc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ae8:	f107 0308 	add.w	r3, r7, #8
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff fe86 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f92d 	bl	8009d54 <SDMMC_GetCmdError>
 8009afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009afc:	69fb      	ldr	r3, [r7, #28]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3720      	adds	r7, #32
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b088      	sub	sp, #32
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009b0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009b14:	2308      	movs	r3, #8
 8009b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b18:	2340      	movs	r3, #64	; 0x40
 8009b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b26:	f107 0308 	add.w	r3, r7, #8
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff fe67 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fb16 	bl	800a164 <SDMMC_GetCmdResp7>
 8009b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b3a:	69fb      	ldr	r3, [r7, #28]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3720      	adds	r7, #32
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009b52:	2337      	movs	r3, #55	; 0x37
 8009b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b56:	2340      	movs	r3, #64	; 0x40
 8009b58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b64:	f107 0308 	add.w	r3, r7, #8
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7ff fe48 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b74:	2137      	movs	r1, #55	; 0x37
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f914 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009b7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b7e:	69fb      	ldr	r3, [r7, #28]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3720      	adds	r7, #32
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009b9e:	2329      	movs	r3, #41	; 0x29
 8009ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ba2:	2340      	movs	r3, #64	; 0x40
 8009ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bb0:	f107 0308 	add.w	r3, r7, #8
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fe22 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fa23 	bl	800a008 <SDMMC_GetCmdResp3>
 8009bc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bc4:	69fb      	ldr	r3, [r7, #28]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3720      	adds	r7, #32
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b088      	sub	sp, #32
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009bdc:	2306      	movs	r3, #6
 8009bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009be0:	2340      	movs	r3, #64	; 0x40
 8009be2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bee:	f107 0308 	add.w	r3, r7, #8
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff fe03 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfe:	2106      	movs	r1, #6
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f8cf 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c08:	69fb      	ldr	r3, [r7, #28]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b088      	sub	sp, #32
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009c1e:	2333      	movs	r3, #51	; 0x33
 8009c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c22:	2340      	movs	r3, #64	; 0x40
 8009c24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c30:	f107 0308 	add.w	r3, r7, #8
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff fde2 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c40:	2133      	movs	r1, #51	; 0x33
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f8ae 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009c48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c4a:	69fb      	ldr	r3, [r7, #28]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3720      	adds	r7, #32
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b088      	sub	sp, #32
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009c60:	2302      	movs	r3, #2
 8009c62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009c64:	23c0      	movs	r3, #192	; 0xc0
 8009c66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c72:	f107 0308 	add.w	r3, r7, #8
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f7ff fdc1 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f97c 	bl	8009f7c <SDMMC_GetCmdResp2>
 8009c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c86:	69fb      	ldr	r3, [r7, #28]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3720      	adds	r7, #32
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009c9e:	2309      	movs	r3, #9
 8009ca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009ca2:	23c0      	movs	r3, #192	; 0xc0
 8009ca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cb0:	f107 0308 	add.w	r3, r7, #8
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff fda2 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f95d 	bl	8009f7c <SDMMC_GetCmdResp2>
 8009cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3720      	adds	r7, #32
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b088      	sub	sp, #32
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ce0:	2340      	movs	r3, #64	; 0x40
 8009ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cee:	f107 0308 	add.w	r3, r7, #8
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff fd83 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	2103      	movs	r1, #3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f9bc 	bl	800a07c <SDMMC_GetCmdResp6>
 8009d04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d06:	69fb      	ldr	r3, [r7, #28]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3720      	adds	r7, #32
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b088      	sub	sp, #32
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009d1e:	230d      	movs	r3, #13
 8009d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d22:	2340      	movs	r3, #64	; 0x40
 8009d24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d26:	2300      	movs	r3, #0
 8009d28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d30:	f107 0308 	add.w	r3, r7, #8
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff fd62 	bl	8009800 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d40:	210d      	movs	r1, #13
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f82e 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d4a:	69fb      	ldr	r3, [r7, #28]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3720      	adds	r7, #32
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009d54:	b490      	push	{r4, r7}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d5c:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <SDMMC_GetCmdError+0x48>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a0f      	ldr	r2, [pc, #60]	; (8009da0 <SDMMC_GetCmdError+0x4c>)
 8009d62:	fba2 2303 	umull	r2, r3, r2, r3
 8009d66:	0a5b      	lsrs	r3, r3, #9
 8009d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009d70:	4623      	mov	r3, r4
 8009d72:	1e5c      	subs	r4, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d7c:	e009      	b.n	8009d92 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0f2      	beq.n	8009d70 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	22c5      	movs	r2, #197	; 0xc5
 8009d8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc90      	pop	{r4, r7}
 8009d9a:	4770      	bx	lr
 8009d9c:	20000124 	.word	0x20000124
 8009da0:	10624dd3 	.word	0x10624dd3

08009da4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009da4:	b590      	push	{r4, r7, lr}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	460b      	mov	r3, r1
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009db2:	4b6f      	ldr	r3, [pc, #444]	; (8009f70 <SDMMC_GetCmdResp1+0x1cc>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a6f      	ldr	r2, [pc, #444]	; (8009f74 <SDMMC_GetCmdResp1+0x1d0>)
 8009db8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbc:	0a5b      	lsrs	r3, r3, #9
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009dc4:	4623      	mov	r3, r4
 8009dc6:	1e5c      	subs	r4, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dd0:	e0c9      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0f0      	beq.n	8009dc4 <SDMMC_GetCmdResp1+0x20>
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1eb      	bne.n	8009dc4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d004      	beq.n	8009e02 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2204      	movs	r2, #4
 8009dfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dfe:	2304      	movs	r3, #4
 8009e00:	e0b1      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e0a6      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	22c5      	movs	r2, #197	; 0xc5
 8009e1c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f7ff fd18 	bl	8009854 <SDIO_GetCommandResponse>
 8009e24:	4603      	mov	r3, r0
 8009e26:	461a      	mov	r2, r3
 8009e28:	7afb      	ldrb	r3, [r7, #11]
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d001      	beq.n	8009e32 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e099      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009e32:	2100      	movs	r1, #0
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f7ff fd1a 	bl	800986e <SDIO_GetResponse>
 8009e3a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	4b4e      	ldr	r3, [pc, #312]	; (8009f78 <SDMMC_GetCmdResp1+0x1d4>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009e46:	2300      	movs	r3, #0
 8009e48:	e08d      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	da02      	bge.n	8009e56 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e54:	e087      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	e080      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e6e:	2380      	movs	r3, #128	; 0x80
 8009e70:	e079      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e80:	e071      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e90:	e069      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ea0:	e061      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eb0:	e059      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ec0:	e051      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ed0:	e049      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009edc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ee0:	e041      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ef0:	e039      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f00:	e031      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f10:	e029      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f20:	e021      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f30:	e019      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f40:	e011      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f50:	e009      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f003 0308 	and.w	r3, r3, #8
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f60:	e001      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	371c      	adds	r7, #28
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd90      	pop	{r4, r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000124 	.word	0x20000124
 8009f74:	10624dd3 	.word	0x10624dd3
 8009f78:	fdffe008 	.word	0xfdffe008

08009f7c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009f7c:	b490      	push	{r4, r7}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f84:	4b1e      	ldr	r3, [pc, #120]	; (800a000 <SDMMC_GetCmdResp2+0x84>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a1e      	ldr	r2, [pc, #120]	; (800a004 <SDMMC_GetCmdResp2+0x88>)
 8009f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f8e:	0a5b      	lsrs	r3, r3, #9
 8009f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009f98:	4623      	mov	r3, r4
 8009f9a:	1e5c      	subs	r4, r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d102      	bne.n	8009fa6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fa4:	e026      	b.n	8009ff4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009faa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0f0      	beq.n	8009f98 <SDMMC_GetCmdResp2+0x1c>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1eb      	bne.n	8009f98 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc4:	f003 0304 	and.w	r3, r3, #4
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2204      	movs	r2, #4
 8009fd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fd2:	2304      	movs	r3, #4
 8009fd4:	e00e      	b.n	8009ff4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d004      	beq.n	8009fec <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e003      	b.n	8009ff4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	22c5      	movs	r2, #197	; 0xc5
 8009ff0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bc90      	pop	{r4, r7}
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	20000124 	.word	0x20000124
 800a004:	10624dd3 	.word	0x10624dd3

0800a008 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a008:	b490      	push	{r4, r7}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a010:	4b18      	ldr	r3, [pc, #96]	; (800a074 <SDMMC_GetCmdResp3+0x6c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a18      	ldr	r2, [pc, #96]	; (800a078 <SDMMC_GetCmdResp3+0x70>)
 800a016:	fba2 2303 	umull	r2, r3, r2, r3
 800a01a:	0a5b      	lsrs	r3, r3, #9
 800a01c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a020:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a024:	4623      	mov	r3, r4
 800a026:	1e5c      	subs	r4, r3, #1
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d102      	bne.n	800a032 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a02c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a030:	e01b      	b.n	800a06a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a036:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d0f0      	beq.n	800a024 <SDMMC_GetCmdResp3+0x1c>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1eb      	bne.n	800a024 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a050:	f003 0304 	and.w	r3, r3, #4
 800a054:	2b00      	cmp	r3, #0
 800a056:	d004      	beq.n	800a062 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2204      	movs	r2, #4
 800a05c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a05e:	2304      	movs	r3, #4
 800a060:	e003      	b.n	800a06a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	22c5      	movs	r2, #197	; 0xc5
 800a066:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bc90      	pop	{r4, r7}
 800a072:	4770      	bx	lr
 800a074:	20000124 	.word	0x20000124
 800a078:	10624dd3 	.word	0x10624dd3

0800a07c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a07c:	b590      	push	{r4, r7, lr}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	460b      	mov	r3, r1
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a08a:	4b34      	ldr	r3, [pc, #208]	; (800a15c <SDMMC_GetCmdResp6+0xe0>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a34      	ldr	r2, [pc, #208]	; (800a160 <SDMMC_GetCmdResp6+0xe4>)
 800a090:	fba2 2303 	umull	r2, r3, r2, r3
 800a094:	0a5b      	lsrs	r3, r3, #9
 800a096:	f241 3288 	movw	r2, #5000	; 0x1388
 800a09a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a09e:	4623      	mov	r3, r4
 800a0a0:	1e5c      	subs	r4, r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d102      	bne.n	800a0ac <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0aa:	e052      	b.n	800a152 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d0f0      	beq.n	800a09e <SDMMC_GetCmdResp6+0x22>
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1eb      	bne.n	800a09e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d004      	beq.n	800a0dc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2204      	movs	r2, #4
 800a0d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0d8:	2304      	movs	r3, #4
 800a0da:	e03a      	b.n	800a152 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e0:	f003 0301 	and.w	r3, r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e02f      	b.n	800a152 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7ff fbae 	bl	8009854 <SDIO_GetCommandResponse>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	7afb      	ldrb	r3, [r7, #11]
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d001      	beq.n	800a106 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a102:	2301      	movs	r3, #1
 800a104:	e025      	b.n	800a152 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	22c5      	movs	r2, #197	; 0xc5
 800a10a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a10c:	2100      	movs	r1, #0
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f7ff fbad 	bl	800986e <SDIO_GetResponse>
 800a114:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d106      	bne.n	800a12e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	0c1b      	lsrs	r3, r3, #16
 800a124:	b29a      	uxth	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a12a:	2300      	movs	r3, #0
 800a12c:	e011      	b.n	800a152 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a13c:	e009      	b.n	800a152 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a14c:	e001      	b.n	800a152 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a14e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a152:	4618      	mov	r0, r3
 800a154:	371c      	adds	r7, #28
 800a156:	46bd      	mov	sp, r7
 800a158:	bd90      	pop	{r4, r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000124 	.word	0x20000124
 800a160:	10624dd3 	.word	0x10624dd3

0800a164 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a164:	b490      	push	{r4, r7}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a16c:	4b21      	ldr	r3, [pc, #132]	; (800a1f4 <SDMMC_GetCmdResp7+0x90>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a21      	ldr	r2, [pc, #132]	; (800a1f8 <SDMMC_GetCmdResp7+0x94>)
 800a172:	fba2 2303 	umull	r2, r3, r2, r3
 800a176:	0a5b      	lsrs	r3, r3, #9
 800a178:	f241 3288 	movw	r2, #5000	; 0x1388
 800a17c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a180:	4623      	mov	r3, r4
 800a182:	1e5c      	subs	r4, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a188:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a18c:	e02c      	b.n	800a1e8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a192:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0f0      	beq.n	800a180 <SDMMC_GetCmdResp7+0x1c>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1eb      	bne.n	800a180 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d004      	beq.n	800a1be <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1ba:	2304      	movs	r3, #4
 800a1bc:	e014      	b.n	800a1e8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d004      	beq.n	800a1d4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e009      	b.n	800a1e8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2240      	movs	r2, #64	; 0x40
 800a1e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a1e6:	2300      	movs	r3, #0
  
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bc90      	pop	{r4, r7}
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20000124 	.word	0x20000124
 800a1f8:	10624dd3 	.word	0x10624dd3

0800a1fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1fc:	b084      	sub	sp, #16
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	f107 001c 	add.w	r0, r7, #28
 800a20a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	2b01      	cmp	r3, #1
 800a212:	d122      	bne.n	800a25a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d105      	bne.n	800a24e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f001 fab4 	bl	800b7bc <USB_CoreReset>
 800a254:	4603      	mov	r3, r0
 800a256:	73fb      	strb	r3, [r7, #15]
 800a258:	e01a      	b.n	800a290 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 faa8 	bl	800b7bc <USB_CoreReset>
 800a26c:	4603      	mov	r3, r0
 800a26e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a272:	2b00      	cmp	r3, #0
 800a274:	d106      	bne.n	800a284 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	639a      	str	r2, [r3, #56]	; 0x38
 800a282:	e005      	b.n	800a290 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	2b01      	cmp	r3, #1
 800a294:	d10b      	bne.n	800a2ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f043 0206 	orr.w	r2, r3, #6
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f043 0220 	orr.w	r2, r3, #32
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2ba:	b004      	add	sp, #16
 800a2bc:	4770      	bx	lr
	...

0800a2c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a2ce:	79fb      	ldrb	r3, [r7, #7]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d165      	bne.n	800a3a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	4a41      	ldr	r2, [pc, #260]	; (800a3dc <USB_SetTurnaroundTime+0x11c>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d906      	bls.n	800a2ea <USB_SetTurnaroundTime+0x2a>
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	4a40      	ldr	r2, [pc, #256]	; (800a3e0 <USB_SetTurnaroundTime+0x120>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d802      	bhi.n	800a2ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a2e4:	230f      	movs	r3, #15
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	e062      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	4a3c      	ldr	r2, [pc, #240]	; (800a3e0 <USB_SetTurnaroundTime+0x120>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d906      	bls.n	800a300 <USB_SetTurnaroundTime+0x40>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	4a3b      	ldr	r2, [pc, #236]	; (800a3e4 <USB_SetTurnaroundTime+0x124>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d802      	bhi.n	800a300 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a2fa:	230e      	movs	r3, #14
 800a2fc:	617b      	str	r3, [r7, #20]
 800a2fe:	e057      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4a38      	ldr	r2, [pc, #224]	; (800a3e4 <USB_SetTurnaroundTime+0x124>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d906      	bls.n	800a316 <USB_SetTurnaroundTime+0x56>
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	4a37      	ldr	r2, [pc, #220]	; (800a3e8 <USB_SetTurnaroundTime+0x128>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d802      	bhi.n	800a316 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a310:	230d      	movs	r3, #13
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	e04c      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	4a33      	ldr	r2, [pc, #204]	; (800a3e8 <USB_SetTurnaroundTime+0x128>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d906      	bls.n	800a32c <USB_SetTurnaroundTime+0x6c>
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	4a32      	ldr	r2, [pc, #200]	; (800a3ec <USB_SetTurnaroundTime+0x12c>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d802      	bhi.n	800a32c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a326:	230c      	movs	r3, #12
 800a328:	617b      	str	r3, [r7, #20]
 800a32a:	e041      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	4a2f      	ldr	r2, [pc, #188]	; (800a3ec <USB_SetTurnaroundTime+0x12c>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d906      	bls.n	800a342 <USB_SetTurnaroundTime+0x82>
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	4a2e      	ldr	r2, [pc, #184]	; (800a3f0 <USB_SetTurnaroundTime+0x130>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d802      	bhi.n	800a342 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a33c:	230b      	movs	r3, #11
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	e036      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	4a2a      	ldr	r2, [pc, #168]	; (800a3f0 <USB_SetTurnaroundTime+0x130>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d906      	bls.n	800a358 <USB_SetTurnaroundTime+0x98>
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	4a29      	ldr	r2, [pc, #164]	; (800a3f4 <USB_SetTurnaroundTime+0x134>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d802      	bhi.n	800a358 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a352:	230a      	movs	r3, #10
 800a354:	617b      	str	r3, [r7, #20]
 800a356:	e02b      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	4a26      	ldr	r2, [pc, #152]	; (800a3f4 <USB_SetTurnaroundTime+0x134>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d906      	bls.n	800a36e <USB_SetTurnaroundTime+0xae>
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	4a25      	ldr	r2, [pc, #148]	; (800a3f8 <USB_SetTurnaroundTime+0x138>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d802      	bhi.n	800a36e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a368:	2309      	movs	r3, #9
 800a36a:	617b      	str	r3, [r7, #20]
 800a36c:	e020      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	4a21      	ldr	r2, [pc, #132]	; (800a3f8 <USB_SetTurnaroundTime+0x138>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d906      	bls.n	800a384 <USB_SetTurnaroundTime+0xc4>
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	4a20      	ldr	r2, [pc, #128]	; (800a3fc <USB_SetTurnaroundTime+0x13c>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d802      	bhi.n	800a384 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a37e:	2308      	movs	r3, #8
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	e015      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4a1d      	ldr	r2, [pc, #116]	; (800a3fc <USB_SetTurnaroundTime+0x13c>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d906      	bls.n	800a39a <USB_SetTurnaroundTime+0xda>
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	4a1c      	ldr	r2, [pc, #112]	; (800a400 <USB_SetTurnaroundTime+0x140>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d802      	bhi.n	800a39a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a394:	2307      	movs	r3, #7
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	e00a      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a39a:	2306      	movs	r3, #6
 800a39c:	617b      	str	r3, [r7, #20]
 800a39e:	e007      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d102      	bne.n	800a3ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a3a6:	2309      	movs	r3, #9
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	e001      	b.n	800a3b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a3ac:	2309      	movs	r3, #9
 800a3ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	68da      	ldr	r2, [r3, #12]
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	029b      	lsls	r3, r3, #10
 800a3c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	371c      	adds	r7, #28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	00d8acbf 	.word	0x00d8acbf
 800a3e0:	00e4e1bf 	.word	0x00e4e1bf
 800a3e4:	00f423ff 	.word	0x00f423ff
 800a3e8:	0106737f 	.word	0x0106737f
 800a3ec:	011a499f 	.word	0x011a499f
 800a3f0:	01312cff 	.word	0x01312cff
 800a3f4:	014ca43f 	.word	0x014ca43f
 800a3f8:	016e35ff 	.word	0x016e35ff
 800a3fc:	01a6ab1f 	.word	0x01a6ab1f
 800a400:	01e847ff 	.word	0x01e847ff

0800a404 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f043 0201 	orr.w	r2, r3, #1
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f023 0201 	bic.w	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d106      	bne.n	800a474 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60da      	str	r2, [r3, #12]
 800a472:	e00b      	b.n	800a48c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a474:	78fb      	ldrb	r3, [r7, #3]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	60da      	str	r2, [r3, #12]
 800a486:	e001      	b.n	800a48c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e003      	b.n	800a494 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a48c:	2032      	movs	r0, #50	; 0x32
 800a48e:	f7f6 fd99 	bl	8000fc4 <HAL_Delay>

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a49c:	b084      	sub	sp, #16
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b086      	sub	sp, #24
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a4aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	613b      	str	r3, [r7, #16]
 800a4ba:	e009      	b.n	800a4d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	3340      	adds	r3, #64	; 0x40
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	613b      	str	r3, [r7, #16]
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	2b0e      	cmp	r3, #14
 800a4d4:	d9f2      	bls.n	800a4bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a4d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d11c      	bne.n	800a516 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4ea:	f043 0302 	orr.w	r3, r3, #2
 800a4ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a500:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	639a      	str	r2, [r3, #56]	; 0x38
 800a514:	e00b      	b.n	800a52e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a526:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a534:	461a      	mov	r2, r3
 800a536:	2300      	movs	r3, #0
 800a538:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a540:	4619      	mov	r1, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a548:	461a      	mov	r2, r3
 800a54a:	680b      	ldr	r3, [r1, #0]
 800a54c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	2b01      	cmp	r3, #1
 800a552:	d10c      	bne.n	800a56e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d104      	bne.n	800a564 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a55a:	2100      	movs	r1, #0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f949 	bl	800a7f4 <USB_SetDevSpeed>
 800a562:	e008      	b.n	800a576 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a564:	2101      	movs	r1, #1
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f944 	bl	800a7f4 <USB_SetDevSpeed>
 800a56c:	e003      	b.n	800a576 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a56e:	2103      	movs	r1, #3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f93f 	bl	800a7f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a576:	2110      	movs	r1, #16
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f8f3 	bl	800a764 <USB_FlushTxFifo>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f911 	bl	800a7b0 <USB_FlushRxFifo>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a59e:	461a      	mov	r2, r3
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5bc:	2300      	movs	r3, #0
 800a5be:	613b      	str	r3, [r7, #16]
 800a5c0:	e043      	b.n	800a64a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5d8:	d118      	bne.n	800a60c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10a      	bne.n	800a5f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	e013      	b.n	800a61e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a602:	461a      	mov	r2, r3
 800a604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	e008      	b.n	800a61e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a618:	461a      	mov	r2, r3
 800a61a:	2300      	movs	r3, #0
 800a61c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a62a:	461a      	mov	r2, r3
 800a62c:	2300      	movs	r3, #0
 800a62e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63c:	461a      	mov	r2, r3
 800a63e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a642:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	3301      	adds	r3, #1
 800a648:	613b      	str	r3, [r7, #16]
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d3b7      	bcc.n	800a5c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a652:	2300      	movs	r3, #0
 800a654:	613b      	str	r3, [r7, #16]
 800a656:	e043      	b.n	800a6e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a66a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a66e:	d118      	bne.n	800a6a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a682:	461a      	mov	r2, r3
 800a684:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a688:	6013      	str	r3, [r2, #0]
 800a68a:	e013      	b.n	800a6b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a698:	461a      	mov	r2, r3
 800a69a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	e008      	b.n	800a6b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a6d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	613b      	str	r3, [r7, #16]
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d3b7      	bcc.n	800a658 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a708:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d105      	bne.n	800a71c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	f043 0210 	orr.w	r2, r3, #16
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	699a      	ldr	r2, [r3, #24]
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <USB_DevInit+0x2c4>)
 800a722:	4313      	orrs	r3, r2
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d005      	beq.n	800a73a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	f043 0208 	orr.w	r2, r3, #8
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d107      	bne.n	800a750 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	699b      	ldr	r3, [r3, #24]
 800a744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a748:	f043 0304 	orr.w	r3, r3, #4
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a750:	7dfb      	ldrb	r3, [r7, #23]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a75c:	b004      	add	sp, #16
 800a75e:	4770      	bx	lr
 800a760:	803c3800 	.word	0x803c3800

0800a764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	019b      	lsls	r3, r3, #6
 800a776:	f043 0220 	orr.w	r2, r3, #32
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3301      	adds	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4a09      	ldr	r2, [pc, #36]	; (800a7ac <USB_FlushTxFifo+0x48>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d901      	bls.n	800a790 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e006      	b.n	800a79e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	f003 0320 	and.w	r3, r3, #32
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d0f0      	beq.n	800a77e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	00030d40 	.word	0x00030d40

0800a7b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2210      	movs	r2, #16
 800a7c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4a09      	ldr	r2, [pc, #36]	; (800a7f0 <USB_FlushRxFifo+0x40>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d901      	bls.n	800a7d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e006      	b.n	800a7e2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	f003 0310 	and.w	r3, r3, #16
 800a7dc:	2b10      	cmp	r3, #16
 800a7de:	d0f0      	beq.n	800a7c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	00030d40 	.word	0x00030d40

0800a7f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	68f9      	ldr	r1, [r7, #12]
 800a810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a814:	4313      	orrs	r3, r2
 800a816:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a826:	b480      	push	{r7}
 800a828:	b087      	sub	sp, #28
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f003 0306 	and.w	r3, r3, #6
 800a83e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d102      	bne.n	800a84c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a846:	2300      	movs	r3, #0
 800a848:	75fb      	strb	r3, [r7, #23]
 800a84a:	e00a      	b.n	800a862 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d002      	beq.n	800a858 <USB_GetDevSpeed+0x32>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2b06      	cmp	r3, #6
 800a856:	d102      	bne.n	800a85e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a858:	2302      	movs	r3, #2
 800a85a:	75fb      	strb	r3, [r7, #23]
 800a85c:	e001      	b.n	800a862 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a85e:	230f      	movs	r3, #15
 800a860:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a862:	7dfb      	ldrb	r3, [r7, #23]
}
 800a864:	4618      	mov	r0, r3
 800a866:	371c      	adds	r7, #28
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d13a      	bne.n	800a902 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a892:	69da      	ldr	r2, [r3, #28]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	f003 030f 	and.w	r3, r3, #15
 800a89c:	2101      	movs	r1, #1
 800a89e:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	68f9      	ldr	r1, [r7, #12]
 800a8a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	015a      	lsls	r2, r3, #5
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d155      	bne.n	800a970 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	015a      	lsls	r2, r3, #5
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	78db      	ldrb	r3, [r3, #3]
 800a8de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	059b      	lsls	r3, r3, #22
 800a8e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	0151      	lsls	r1, r2, #5
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	440a      	add	r2, r1
 800a8f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	e036      	b.n	800a970 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a908:	69da      	ldr	r2, [r3, #28]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 030f 	and.w	r3, r3, #15
 800a912:	2101      	movs	r1, #1
 800a914:	fa01 f303 	lsl.w	r3, r1, r3
 800a918:	041b      	lsls	r3, r3, #16
 800a91a:	68f9      	ldr	r1, [r7, #12]
 800a91c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a920:	4313      	orrs	r3, r2
 800a922:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d11a      	bne.n	800a970 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	015a      	lsls	r2, r3, #5
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	78db      	ldrb	r3, [r3, #3]
 800a954:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a956:	430b      	orrs	r3, r1
 800a958:	4313      	orrs	r3, r2
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	0151      	lsls	r1, r2, #5
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	440a      	add	r2, r1
 800a962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a96a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a96e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
	...

0800a980 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d161      	bne.n	800aa60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9b2:	d11f      	bne.n	800a9f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	015a      	lsls	r2, r3, #5
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	0151      	lsls	r1, r2, #5
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	440a      	add	r2, r1
 800a9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	015a      	lsls	r2, r3, #5
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	0151      	lsls	r1, r2, #5
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	440a      	add	r2, r1
 800a9ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	f003 030f 	and.w	r3, r3, #15
 800aa04:	2101      	movs	r1, #1
 800aa06:	fa01 f303 	lsl.w	r3, r1, r3
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	43db      	mvns	r3, r3
 800aa0e:	68f9      	ldr	r1, [r7, #12]
 800aa10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa14:	4013      	ands	r3, r2
 800aa16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa1e:	69da      	ldr	r2, [r3, #28]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	f003 030f 	and.w	r3, r3, #15
 800aa28:	2101      	movs	r1, #1
 800aa2a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	43db      	mvns	r3, r3
 800aa32:	68f9      	ldr	r1, [r7, #12]
 800aa34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa38:	4013      	ands	r3, r2
 800aa3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	0159      	lsls	r1, r3, #5
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	440b      	add	r3, r1
 800aa52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa56:	4619      	mov	r1, r3
 800aa58:	4b35      	ldr	r3, [pc, #212]	; (800ab30 <USB_DeactivateEndpoint+0x1b0>)
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	600b      	str	r3, [r1, #0]
 800aa5e:	e060      	b.n	800ab22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa76:	d11f      	bne.n	800aab8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	0151      	lsls	r1, r2, #5
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	440a      	add	r2, r1
 800aa8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aa96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	0151      	lsls	r1, r2, #5
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	440a      	add	r2, r1
 800aaae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aab6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aabe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 030f 	and.w	r3, r3, #15
 800aac8:	2101      	movs	r1, #1
 800aaca:	fa01 f303 	lsl.w	r3, r1, r3
 800aace:	041b      	lsls	r3, r3, #16
 800aad0:	43db      	mvns	r3, r3
 800aad2:	68f9      	ldr	r1, [r7, #12]
 800aad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aad8:	4013      	ands	r3, r2
 800aada:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae2:	69da      	ldr	r2, [r3, #28]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	f003 030f 	and.w	r3, r3, #15
 800aaec:	2101      	movs	r1, #1
 800aaee:	fa01 f303 	lsl.w	r3, r1, r3
 800aaf2:	041b      	lsls	r3, r3, #16
 800aaf4:	43db      	mvns	r3, r3
 800aaf6:	68f9      	ldr	r1, [r7, #12]
 800aaf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aafc:	4013      	ands	r3, r2
 800aafe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	015a      	lsls	r2, r3, #5
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4413      	add	r3, r2
 800ab08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	0159      	lsls	r1, r3, #5
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	440b      	add	r3, r1
 800ab16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <USB_DeactivateEndpoint+0x1b4>)
 800ab1e:	4013      	ands	r3, r2
 800ab20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	ec337800 	.word	0xec337800
 800ab34:	eff37800 	.word	0xeff37800

0800ab38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08a      	sub	sp, #40	; 0x28
 800ab3c:	af02      	add	r7, sp, #8
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	4613      	mov	r3, r2
 800ab44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	785b      	ldrb	r3, [r3, #1]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	f040 815c 	bne.w	800ae12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d132      	bne.n	800abc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	015a      	lsls	r2, r3, #5
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	4413      	add	r3, r2
 800ab6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	0151      	lsls	r1, r2, #5
 800ab74:	69fa      	ldr	r2, [r7, #28]
 800ab76:	440a      	add	r2, r1
 800ab78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	015a      	lsls	r2, r3, #5
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	69ba      	ldr	r2, [r7, #24]
 800ab96:	0151      	lsls	r1, r2, #5
 800ab98:	69fa      	ldr	r2, [r7, #28]
 800ab9a:	440a      	add	r2, r1
 800ab9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aba4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	0151      	lsls	r1, r2, #5
 800abb8:	69fa      	ldr	r2, [r7, #28]
 800abba:	440a      	add	r2, r1
 800abbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abc0:	0cdb      	lsrs	r3, r3, #19
 800abc2:	04db      	lsls	r3, r3, #19
 800abc4:	6113      	str	r3, [r2, #16]
 800abc6:	e074      	b.n	800acb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	69ba      	ldr	r2, [r7, #24]
 800abd8:	0151      	lsls	r1, r2, #5
 800abda:	69fa      	ldr	r2, [r7, #28]
 800abdc:	440a      	add	r2, r1
 800abde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abe2:	0cdb      	lsrs	r3, r3, #19
 800abe4:	04db      	lsls	r3, r3, #19
 800abe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	69ba      	ldr	r2, [r7, #24]
 800abf8:	0151      	lsls	r1, r2, #5
 800abfa:	69fa      	ldr	r2, [r7, #28]
 800abfc:	440a      	add	r2, r1
 800abfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	015a      	lsls	r2, r3, #5
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	4413      	add	r3, r2
 800ac14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac18:	691a      	ldr	r2, [r3, #16]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	6959      	ldr	r1, [r3, #20]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	440b      	add	r3, r1
 800ac24:	1e59      	subs	r1, r3, #1
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac2e:	04d9      	lsls	r1, r3, #19
 800ac30:	4b9d      	ldr	r3, [pc, #628]	; (800aea8 <USB_EPStartXfer+0x370>)
 800ac32:	400b      	ands	r3, r1
 800ac34:	69b9      	ldr	r1, [r7, #24]
 800ac36:	0148      	lsls	r0, r1, #5
 800ac38:	69f9      	ldr	r1, [r7, #28]
 800ac3a:	4401      	add	r1, r0
 800ac3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac40:	4313      	orrs	r3, r2
 800ac42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac50:	691a      	ldr	r2, [r3, #16]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac5a:	69b9      	ldr	r1, [r7, #24]
 800ac5c:	0148      	lsls	r0, r1, #5
 800ac5e:	69f9      	ldr	r1, [r7, #28]
 800ac60:	4401      	add	r1, r0
 800ac62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac66:	4313      	orrs	r3, r2
 800ac68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	78db      	ldrb	r3, [r3, #3]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d11f      	bne.n	800acb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	015a      	lsls	r2, r3, #5
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	0151      	lsls	r1, r2, #5
 800ac84:	69fa      	ldr	r2, [r7, #28]
 800ac86:	440a      	add	r2, r1
 800ac88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ac90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	015a      	lsls	r2, r3, #5
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	4413      	add	r3, r2
 800ac9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	0151      	lsls	r1, r2, #5
 800aca4:	69fa      	ldr	r2, [r7, #28]
 800aca6:	440a      	add	r2, r1
 800aca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800acb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d14b      	bne.n	800ad50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d009      	beq.n	800acd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	015a      	lsls	r2, r3, #5
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	4413      	add	r3, r2
 800acc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800accc:	461a      	mov	r2, r3
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	78db      	ldrb	r3, [r3, #3]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d128      	bne.n	800ad2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d110      	bne.n	800ad0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	0151      	lsls	r1, r2, #5
 800acfe:	69fa      	ldr	r2, [r7, #28]
 800ad00:	440a      	add	r2, r1
 800ad02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	e00f      	b.n	800ad2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	0151      	lsls	r1, r2, #5
 800ad20:	69fa      	ldr	r2, [r7, #28]
 800ad22:	440a      	add	r2, r1
 800ad24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	0151      	lsls	r1, r2, #5
 800ad40:	69fa      	ldr	r2, [r7, #28]
 800ad42:	440a      	add	r2, r1
 800ad44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	e12f      	b.n	800afb0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	69ba      	ldr	r2, [r7, #24]
 800ad60:	0151      	lsls	r1, r2, #5
 800ad62:	69fa      	ldr	r2, [r7, #28]
 800ad64:	440a      	add	r2, r1
 800ad66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	78db      	ldrb	r3, [r3, #3]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d015      	beq.n	800ada4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 8117 	beq.w	800afb0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f003 030f 	and.w	r3, r3, #15
 800ad92:	2101      	movs	r1, #1
 800ad94:	fa01 f303 	lsl.w	r3, r1, r3
 800ad98:	69f9      	ldr	r1, [r7, #28]
 800ad9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	634b      	str	r3, [r1, #52]	; 0x34
 800ada2:	e105      	b.n	800afb0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d110      	bne.n	800add6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	0151      	lsls	r1, r2, #5
 800adc6:	69fa      	ldr	r2, [r7, #28]
 800adc8:	440a      	add	r2, r1
 800adca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800add2:	6013      	str	r3, [r2, #0]
 800add4:	e00f      	b.n	800adf6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	4413      	add	r3, r2
 800adde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	0151      	lsls	r1, r2, #5
 800ade8:	69fa      	ldr	r2, [r7, #28]
 800adea:	440a      	add	r2, r1
 800adec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adf4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	68d9      	ldr	r1, [r3, #12]
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	781a      	ldrb	r2, [r3, #0]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	b298      	uxth	r0, r3
 800ae04:	79fb      	ldrb	r3, [r7, #7]
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	4603      	mov	r3, r0
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 fa2b 	bl	800b266 <USB_WritePacket>
 800ae10:	e0ce      	b.n	800afb0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	69ba      	ldr	r2, [r7, #24]
 800ae22:	0151      	lsls	r1, r2, #5
 800ae24:	69fa      	ldr	r2, [r7, #28]
 800ae26:	440a      	add	r2, r1
 800ae28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae2c:	0cdb      	lsrs	r3, r3, #19
 800ae2e:	04db      	lsls	r3, r3, #19
 800ae30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	69ba      	ldr	r2, [r7, #24]
 800ae42:	0151      	lsls	r1, r2, #5
 800ae44:	69fa      	ldr	r2, [r7, #28]
 800ae46:	440a      	add	r2, r1
 800ae48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d126      	bne.n	800aeac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	015a      	lsls	r2, r3, #5
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	4413      	add	r3, r2
 800ae66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae6a:	691a      	ldr	r2, [r3, #16]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae74:	69b9      	ldr	r1, [r7, #24]
 800ae76:	0148      	lsls	r0, r1, #5
 800ae78:	69f9      	ldr	r1, [r7, #28]
 800ae7a:	4401      	add	r1, r0
 800ae7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae80:	4313      	orrs	r3, r2
 800ae82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	015a      	lsls	r2, r3, #5
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	0151      	lsls	r1, r2, #5
 800ae96:	69fa      	ldr	r2, [r7, #28]
 800ae98:	440a      	add	r2, r1
 800ae9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aea2:	6113      	str	r3, [r2, #16]
 800aea4:	e036      	b.n	800af14 <USB_EPStartXfer+0x3dc>
 800aea6:	bf00      	nop
 800aea8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	695a      	ldr	r2, [r3, #20]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	1e5a      	subs	r2, r3, #1
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	015a      	lsls	r2, r3, #5
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4413      	add	r3, r2
 800aeca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aece:	691a      	ldr	r2, [r3, #16]
 800aed0:	8afb      	ldrh	r3, [r7, #22]
 800aed2:	04d9      	lsls	r1, r3, #19
 800aed4:	4b39      	ldr	r3, [pc, #228]	; (800afbc <USB_EPStartXfer+0x484>)
 800aed6:	400b      	ands	r3, r1
 800aed8:	69b9      	ldr	r1, [r7, #24]
 800aeda:	0148      	lsls	r0, r1, #5
 800aedc:	69f9      	ldr	r1, [r7, #28]
 800aede:	4401      	add	r1, r0
 800aee0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aee4:	4313      	orrs	r3, r2
 800aee6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef4:	691a      	ldr	r2, [r3, #16]
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	8af9      	ldrh	r1, [r7, #22]
 800aefc:	fb01 f303 	mul.w	r3, r1, r3
 800af00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af04:	69b9      	ldr	r1, [r7, #24]
 800af06:	0148      	lsls	r0, r1, #5
 800af08:	69f9      	ldr	r1, [r7, #28]
 800af0a:	4401      	add	r1, r0
 800af0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af10:	4313      	orrs	r3, r2
 800af12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af14:	79fb      	ldrb	r3, [r7, #7]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d10d      	bne.n	800af36 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d009      	beq.n	800af36 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	68d9      	ldr	r1, [r3, #12]
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	015a      	lsls	r2, r3, #5
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	4413      	add	r3, r2
 800af2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af32:	460a      	mov	r2, r1
 800af34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	78db      	ldrb	r3, [r3, #3]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d128      	bne.n	800af90 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d110      	bne.n	800af70 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	4413      	add	r3, r2
 800af56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	0151      	lsls	r1, r2, #5
 800af60:	69fa      	ldr	r2, [r7, #28]
 800af62:	440a      	add	r2, r1
 800af64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	e00f      	b.n	800af90 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	0151      	lsls	r1, r2, #5
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	440a      	add	r2, r1
 800af86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	0151      	lsls	r1, r2, #5
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	440a      	add	r2, r1
 800afa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	1ff80000 	.word	0x1ff80000

0800afc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	4613      	mov	r3, r2
 800afcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	f040 80cd 	bne.w	800b17c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d132      	bne.n	800b050 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	015a      	lsls	r2, r3, #5
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	0151      	lsls	r1, r2, #5
 800affc:	697a      	ldr	r2, [r7, #20]
 800affe:	440a      	add	r2, r1
 800b000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b004:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b008:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b00c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	4413      	add	r3, r2
 800b016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	0151      	lsls	r1, r2, #5
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	440a      	add	r2, r1
 800b024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b02c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	4413      	add	r3, r2
 800b036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	0151      	lsls	r1, r2, #5
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	440a      	add	r2, r1
 800b044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b048:	0cdb      	lsrs	r3, r3, #19
 800b04a:	04db      	lsls	r3, r3, #19
 800b04c:	6113      	str	r3, [r2, #16]
 800b04e:	e04e      	b.n	800b0ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	0151      	lsls	r1, r2, #5
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	440a      	add	r2, r1
 800b066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b06a:	0cdb      	lsrs	r3, r3, #19
 800b06c:	04db      	lsls	r3, r3, #19
 800b06e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	015a      	lsls	r2, r3, #5
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	4413      	add	r3, r2
 800b078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	0151      	lsls	r1, r2, #5
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	440a      	add	r2, r1
 800b086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b08a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b08e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b092:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	695a      	ldr	r2, [r3, #20]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d903      	bls.n	800b0a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	0151      	lsls	r1, r2, #5
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	440a      	add	r2, r1
 800b0be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	015a      	lsls	r2, r3, #5
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d4:	691a      	ldr	r2, [r3, #16]
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0de:	6939      	ldr	r1, [r7, #16]
 800b0e0:	0148      	lsls	r0, r1, #5
 800b0e2:	6979      	ldr	r1, [r7, #20]
 800b0e4:	4401      	add	r1, r0
 800b0e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d11e      	bne.n	800b132 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d009      	beq.n	800b110 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	015a      	lsls	r2, r3, #5
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	4413      	add	r3, r2
 800b104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b108:	461a      	mov	r2, r3
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	4413      	add	r3, r2
 800b118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	0151      	lsls	r1, r2, #5
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	440a      	add	r2, r1
 800b126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b12a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b12e:	6013      	str	r3, [r2, #0]
 800b130:	e092      	b.n	800b258 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	0151      	lsls	r1, r2, #5
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	440a      	add	r2, r1
 800b148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b14c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b150:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	695b      	ldr	r3, [r3, #20]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d07e      	beq.n	800b258 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	f003 030f 	and.w	r3, r3, #15
 800b16a:	2101      	movs	r1, #1
 800b16c:	fa01 f303 	lsl.w	r3, r1, r3
 800b170:	6979      	ldr	r1, [r7, #20]
 800b172:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b176:	4313      	orrs	r3, r2
 800b178:	634b      	str	r3, [r1, #52]	; 0x34
 800b17a:	e06d      	b.n	800b258 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	0151      	lsls	r1, r2, #5
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	440a      	add	r2, r1
 800b192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b196:	0cdb      	lsrs	r3, r3, #19
 800b198:	04db      	lsls	r3, r3, #19
 800b19a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	0151      	lsls	r1, r2, #5
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	440a      	add	r2, r1
 800b1b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	695b      	ldr	r3, [r3, #20]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	015a      	lsls	r2, r3, #5
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	0151      	lsls	r1, r2, #5
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	440a      	add	r2, r1
 800b1e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	015a      	lsls	r2, r3, #5
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1fc:	691a      	ldr	r2, [r3, #16]
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b206:	6939      	ldr	r1, [r7, #16]
 800b208:	0148      	lsls	r0, r1, #5
 800b20a:	6979      	ldr	r1, [r7, #20]
 800b20c:	4401      	add	r1, r0
 800b20e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b212:	4313      	orrs	r3, r2
 800b214:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d10d      	bne.n	800b238 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d009      	beq.n	800b238 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	68d9      	ldr	r1, [r3, #12]
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	015a      	lsls	r2, r3, #5
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	4413      	add	r3, r2
 800b230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b234:	460a      	mov	r2, r1
 800b236:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	0151      	lsls	r1, r2, #5
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	440a      	add	r2, r1
 800b24e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b252:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b256:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b266:	b480      	push	{r7}
 800b268:	b089      	sub	sp, #36	; 0x24
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	4611      	mov	r1, r2
 800b272:	461a      	mov	r2, r3
 800b274:	460b      	mov	r3, r1
 800b276:	71fb      	strb	r3, [r7, #7]
 800b278:	4613      	mov	r3, r2
 800b27a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b284:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d11a      	bne.n	800b2c2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b28c:	88bb      	ldrh	r3, [r7, #4]
 800b28e:	3303      	adds	r3, #3
 800b290:	089b      	lsrs	r3, r3, #2
 800b292:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b294:	2300      	movs	r3, #0
 800b296:	61bb      	str	r3, [r7, #24]
 800b298:	e00f      	b.n	800b2ba <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	031a      	lsls	r2, r3, #12
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	61bb      	str	r3, [r7, #24]
 800b2ba:	69ba      	ldr	r2, [r7, #24]
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d3eb      	bcc.n	800b29a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3724      	adds	r7, #36	; 0x24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b089      	sub	sp, #36	; 0x24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b2e6:	88fb      	ldrh	r3, [r7, #6]
 800b2e8:	3303      	adds	r3, #3
 800b2ea:	089b      	lsrs	r3, r3, #2
 800b2ec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	61bb      	str	r3, [r7, #24]
 800b2f2:	e00b      	b.n	800b30c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	601a      	str	r2, [r3, #0]
    pDest++;
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	3304      	adds	r3, #4
 800b304:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	3301      	adds	r3, #1
 800b30a:	61bb      	str	r3, [r7, #24]
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	429a      	cmp	r2, r3
 800b312:	d3ef      	bcc.n	800b2f4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b314:	69fb      	ldr	r3, [r7, #28]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3724      	adds	r7, #36	; 0x24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b322:	b480      	push	{r7}
 800b324:	b085      	sub	sp, #20
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	785b      	ldrb	r3, [r3, #1]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d12c      	bne.n	800b398 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	db12      	blt.n	800b376 <USB_EPSetStall+0x54>
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00f      	beq.n	800b376 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	0151      	lsls	r1, r2, #5
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	440a      	add	r2, r1
 800b36c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b374:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	0151      	lsls	r1, r2, #5
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	440a      	add	r2, r1
 800b38c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	e02b      	b.n	800b3f0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	db12      	blt.n	800b3d0 <USB_EPSetStall+0xae>
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00f      	beq.n	800b3d0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	0151      	lsls	r1, r2, #5
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	440a      	add	r2, r1
 800b3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b3ce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	015a      	lsls	r2, r3, #5
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	0151      	lsls	r1, r2, #5
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	440a      	add	r2, r1
 800b3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b085      	sub	sp, #20
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	785b      	ldrb	r3, [r3, #1]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d128      	bne.n	800b46c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	4413      	add	r3, r2
 800b422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	0151      	lsls	r1, r2, #5
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	440a      	add	r2, r1
 800b430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b438:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	78db      	ldrb	r3, [r3, #3]
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d003      	beq.n	800b44a <USB_EPClearStall+0x4c>
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	78db      	ldrb	r3, [r3, #3]
 800b446:	2b02      	cmp	r3, #2
 800b448:	d138      	bne.n	800b4bc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	015a      	lsls	r2, r3, #5
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	4413      	add	r3, r2
 800b452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	0151      	lsls	r1, r2, #5
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	440a      	add	r2, r1
 800b460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	e027      	b.n	800b4bc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	015a      	lsls	r2, r3, #5
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4413      	add	r3, r2
 800b474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	0151      	lsls	r1, r2, #5
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	440a      	add	r2, r1
 800b482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b486:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b48a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	78db      	ldrb	r3, [r3, #3]
 800b490:	2b03      	cmp	r3, #3
 800b492:	d003      	beq.n	800b49c <USB_EPClearStall+0x9e>
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	78db      	ldrb	r3, [r3, #3]
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d10f      	bne.n	800b4bc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	015a      	lsls	r2, r3, #5
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	0151      	lsls	r1, r2, #5
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	440a      	add	r2, r1
 800b4b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4ba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b085      	sub	sp, #20
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b4ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	78fb      	ldrb	r3, [r7, #3]
 800b4f8:	011b      	lsls	r3, r3, #4
 800b4fa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b4fe:	68f9      	ldr	r1, [r7, #12]
 800b500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b504:	4313      	orrs	r3, r2
 800b506:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b530:	f023 0302 	bic.w	r3, r3, #2
 800b534:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b536:	2003      	movs	r0, #3
 800b538:	f7f5 fd44 	bl	8000fc4 <HAL_Delay>

  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b560:	f043 0302 	orr.w	r3, r3, #2
 800b564:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b566:	2003      	movs	r0, #3
 800b568:	f7f5 fd2c 	bl	8000fc4 <HAL_Delay>

  return HAL_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b576:	b480      	push	{r7}
 800b578:	b085      	sub	sp, #20
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4013      	ands	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b58e:	68fb      	ldr	r3, [r7, #12]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	4013      	ands	r3, r2
 800b5be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	0c1b      	lsrs	r3, r3, #16
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	b29b      	uxth	r3, r3
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b614:	78fb      	ldrb	r3, [r7, #3]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	4013      	ands	r3, r2
 800b630:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b632:	68bb      	ldr	r3, [r7, #8]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	460b      	mov	r3, r1
 800b64a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b662:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b664:	78fb      	ldrb	r3, [r7, #3]
 800b666:	f003 030f 	and.w	r3, r3, #15
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	fa22 f303 	lsr.w	r3, r2, r3
 800b670:	01db      	lsls	r3, r3, #7
 800b672:	b2db      	uxtb	r3, r3
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	4313      	orrs	r3, r2
 800b678:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	4013      	ands	r3, r2
 800b68c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b68e:	68bb      	ldr	r3, [r7, #8]
}
 800b690:	4618      	mov	r0, r3
 800b692:	371c      	adds	r7, #28
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	f003 0301 	and.w	r3, r3, #1
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b6d6:	f023 0307 	bic.w	r3, r3, #7
 800b6da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
	...

0800b700 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b700:	b480      	push	{r7}
 800b702:	b087      	sub	sp, #28
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	460b      	mov	r3, r1
 800b70a:	607a      	str	r2, [r7, #4]
 800b70c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	333c      	adds	r3, #60	; 0x3c
 800b716:	3304      	adds	r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	4a26      	ldr	r2, [pc, #152]	; (800b7b8 <USB_EP0_OutStart+0xb8>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d90a      	bls.n	800b73a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b734:	d101      	bne.n	800b73a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	e037      	b.n	800b7aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b740:	461a      	mov	r2, r3
 800b742:	2300      	movs	r3, #0
 800b744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	697a      	ldr	r2, [r7, #20]
 800b764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b768:	f043 0318 	orr.w	r3, r3, #24
 800b76c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b774:	691b      	ldr	r3, [r3, #16]
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b77c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b780:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b782:	7afb      	ldrb	r3, [r7, #11]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d10f      	bne.n	800b7a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78e:	461a      	mov	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	697a      	ldr	r2, [r7, #20]
 800b79e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b7a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	371c      	adds	r7, #28
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	4f54300a 	.word	0x4f54300a

0800b7bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	4a13      	ldr	r2, [pc, #76]	; (800b820 <USB_CoreReset+0x64>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d901      	bls.n	800b7da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e01b      	b.n	800b812 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	daf2      	bge.n	800b7c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	f043 0201 	orr.w	r2, r3, #1
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	4a09      	ldr	r2, [pc, #36]	; (800b820 <USB_CoreReset+0x64>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d901      	bls.n	800b804 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b800:	2303      	movs	r3, #3
 800b802:	e006      	b.n	800b812 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	f003 0301 	and.w	r3, r3, #1
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d0f0      	beq.n	800b7f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	00030d40 	.word	0x00030d40

0800b824 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	70fb      	strb	r3, [r7, #3]
	USBD_HID_Init(pdev, cfgidx);
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fbab 	bl	800bf90 <USBD_HID_Init>
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800b83a:	f643 4050 	movw	r0, #15440	; 0x3c50
 800b83e:	f004 f94d 	bl	800fadc <malloc>
 800b842:	4603      	mov	r3, r0
 800b844:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d105      	bne.n	800b858 <USBD_AUDIO_Init+0x34>
  {
    pdev->pClassData = NULL;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b854:	2302      	movs	r3, #2
 800b856:	e04b      	b.n	800b8f0 <USBD_AUDIO_Init+0xcc>
  }

  pdev->pClassData = (void *)haudio;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	7c1b      	ldrb	r3, [r3, #16]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d104      	bne.n	800b872 <USBD_AUDIO_Init+0x4e>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800b870:	e003      	b.n	800b87a <USBD_AUDIO_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800b87a:	23c0      	movs	r3, #192	; 0xc0
 800b87c:	2201      	movs	r2, #1
 800b87e:	2101      	movs	r1, #1
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f003 fdb8 	bl	800f3f6 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b89a:	3304      	adds	r3, #4
 800b89c:	2203      	movs	r2, #3
 800b89e:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b8a6:	3308      	adds	r3, #8
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b8b2:	3306      	adds	r3, #6
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b8be:	3305      	adds	r3, #5
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2146      	movs	r1, #70	; 0x46
 800b8d0:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800b8d4:	4798      	blx	r3
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <USBD_AUDIO_Init+0xbc>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e007      	b.n	800b8f0 <USBD_AUDIO_Init+0xcc>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	1d1a      	adds	r2, r3, #4
 800b8e4:	23c0      	movs	r3, #192	; 0xc0
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f003 fe73 	bl	800f5d4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_HID_DeInit(pdev, cfgidx);
 800b904:	78fb      	ldrb	r3, [r7, #3]
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fb75 	bl	800bff8 <USBD_HID_DeInit>
  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800b90e:	2101      	movs	r1, #1
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f003 fd96 	bl	800f442 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00f      	beq.n	800b950 <USBD_AUDIO_DeInit+0x58>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	2000      	movs	r0, #0
 800b93a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b942:	4618      	mov	r0, r3
 800b944:	f004 f8d2 	bl	800faec <free>
    pdev->pClassData = NULL;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
	...

0800b95c <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b086      	sub	sp, #24
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
	if (req->wIndex==2)
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	889b      	ldrh	r3, [r3, #4]
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d105      	bne.n	800b97a <USBD_AUDIO_Setup+0x1e>
	{
		return USBD_HID_Setup(pdev, req);
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fb65 	bl	800c040 <USBD_HID_Setup>
 800b976:	4603      	mov	r3, r0
 800b978:	e0b6      	b.n	800bae8 <USBD_AUDIO_Setup+0x18c>
	}
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b97a:	2300      	movs	r3, #0
 800b97c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b988:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b992:	2b00      	cmp	r3, #0
 800b994:	d01a      	beq.n	800b9cc <USBD_AUDIO_Setup+0x70>
 800b996:	2b20      	cmp	r3, #32
 800b998:	f040 809e 	bne.w	800bad8 <USBD_AUDIO_Setup+0x17c>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	785b      	ldrb	r3, [r3, #1]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d006      	beq.n	800b9b2 <USBD_AUDIO_Setup+0x56>
 800b9a4:	2b81      	cmp	r3, #129	; 0x81
 800b9a6:	d109      	bne.n	800b9bc <USBD_AUDIO_Setup+0x60>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fa76 	bl	800be9c <AUDIO_REQ_GetCurrent>
      break;
 800b9b0:	e00b      	b.n	800b9ca <USBD_AUDIO_Setup+0x6e>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fa91 	bl	800bedc <AUDIO_REQ_SetCurrent>
      break;
 800b9ba:	e006      	b.n	800b9ca <USBD_AUDIO_Setup+0x6e>

    default:
      USBD_CtlError(pdev, req);
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f001 fc86 	bl	800d2d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c8:	bf00      	nop
    }
    break;
 800b9ca:	e08c      	b.n	800bae6 <USBD_AUDIO_Setup+0x18a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	785b      	ldrb	r3, [r3, #1]
 800b9d0:	2b0b      	cmp	r3, #11
 800b9d2:	d876      	bhi.n	800bac2 <USBD_AUDIO_Setup+0x166>
 800b9d4:	a201      	add	r2, pc, #4	; (adr r2, 800b9dc <USBD_AUDIO_Setup+0x80>)
 800b9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9da:	bf00      	nop
 800b9dc:	0800ba0d 	.word	0x0800ba0d
 800b9e0:	0800bad1 	.word	0x0800bad1
 800b9e4:	0800bac3 	.word	0x0800bac3
 800b9e8:	0800bac3 	.word	0x0800bac3
 800b9ec:	0800bac3 	.word	0x0800bac3
 800b9f0:	0800bac3 	.word	0x0800bac3
 800b9f4:	0800ba35 	.word	0x0800ba35
 800b9f8:	0800bac3 	.word	0x0800bac3
 800b9fc:	0800bac3 	.word	0x0800bac3
 800ba00:	0800bac3 	.word	0x0800bac3
 800ba04:	0800ba5f 	.word	0x0800ba5f
 800ba08:	0800ba85 	.word	0x0800ba85
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d107      	bne.n	800ba26 <USBD_AUDIO_Setup+0xca>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ba16:	f107 0308 	add.w	r3, r7, #8
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f001 fcc7 	bl	800d3b2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ba24:	e057      	b.n	800bad6 <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f001 fc51 	bl	800d2d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	75fb      	strb	r3, [r7, #23]
      break;
 800ba32:	e050      	b.n	800bad6 <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	885b      	ldrh	r3, [r3, #2]
 800ba38:	0a1b      	lsrs	r3, r3, #8
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	2b21      	cmp	r3, #33	; 0x21
 800ba3e:	d149      	bne.n	800bad4 <USBD_AUDIO_Setup+0x178>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800ba40:	4b2b      	ldr	r3, [pc, #172]	; (800baf0 <USBD_AUDIO_Setup+0x194>)
 800ba42:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	88db      	ldrh	r3, [r3, #6]
 800ba48:	2b09      	cmp	r3, #9
 800ba4a:	bf28      	it	cs
 800ba4c:	2309      	movcs	r3, #9
 800ba4e:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba50:	897b      	ldrh	r3, [r7, #10]
 800ba52:	461a      	mov	r2, r3
 800ba54:	68f9      	ldr	r1, [r7, #12]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 fcab 	bl	800d3b2 <USBD_CtlSendData>
      }
      break;
 800ba5c:	e03a      	b.n	800bad4 <USBD_AUDIO_Setup+0x178>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d106      	bne.n	800ba76 <USBD_AUDIO_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f001 fc9f 	bl	800d3b2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ba74:	e02f      	b.n	800bad6 <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f001 fc29 	bl	800d2d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	75fb      	strb	r3, [r7, #23]
      break;
 800ba82:	e028      	b.n	800bad6 <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d112      	bne.n	800bab4 <USBD_AUDIO_Setup+0x158>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	885b      	ldrh	r3, [r3, #2]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d806      	bhi.n	800baa6 <USBD_AUDIO_Setup+0x14a>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	885b      	ldrh	r3, [r3, #2]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	461a      	mov	r2, r3
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800baa4:	e017      	b.n	800bad6 <USBD_AUDIO_Setup+0x17a>
          USBD_CtlError(pdev, req);
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 fc11 	bl	800d2d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800baae:	2303      	movs	r3, #3
 800bab0:	75fb      	strb	r3, [r7, #23]
      break;
 800bab2:	e010      	b.n	800bad6 <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 fc0a 	bl	800d2d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800babc:	2303      	movs	r3, #3
 800babe:	75fb      	strb	r3, [r7, #23]
      break;
 800bac0:	e009      	b.n	800bad6 <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f001 fc03 	bl	800d2d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800baca:	2303      	movs	r3, #3
 800bacc:	75fb      	strb	r3, [r7, #23]
      break;
 800bace:	e002      	b.n	800bad6 <USBD_AUDIO_Setup+0x17a>
      break;
 800bad0:	bf00      	nop
 800bad2:	e008      	b.n	800bae6 <USBD_AUDIO_Setup+0x18a>
      break;
 800bad4:	bf00      	nop
    }
    break;
 800bad6:	e006      	b.n	800bae6 <USBD_AUDIO_Setup+0x18a>
  default:
    USBD_CtlError(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f001 fbf8 	bl	800d2d0 <USBD_CtlError>
    ret = USBD_FAIL;
 800bae0:	2303      	movs	r3, #3
 800bae2:	75fb      	strb	r3, [r7, #23]
    break;
 800bae4:	bf00      	nop
  }

  return (uint8_t)ret;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20000052 	.word	0x20000052

0800baf4 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2297      	movs	r2, #151	; 0x97
 800bb00:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800bb02:	4b03      	ldr	r3, [pc, #12]	; (800bb10 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	20000040 	.word	0x20000040

0800bb14 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
//  UNUSED(pdev);
//  UNUSED(epnum);
	USBD_HID_DataIn(pdev, epnum);
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fbab 	bl	800c280 <USBD_HID_DataIn>
  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb42:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bb4a:	330a      	adds	r3, #10
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d11d      	bne.n	800bb8e <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800bb58:	330c      	adds	r3, #12
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	d116      	bne.n	800bb8e <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb66:	691a      	ldr	r2, [r3, #16]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bb6e:	330b      	adds	r3, #11
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	4618      	mov	r0, r3
 800bb74:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bb7c:	330a      	adds	r3, #10
 800bb7e:	2200      	movs	r2, #0
 800bb80:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800bb88:	330b      	adds	r3, #11
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b083      	sub	sp, #12
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <USBD_AUDIO_Sync>:
  * @param  pdev: device instance
  * @retval status
  */
extern int packetReceived;
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 800bbd0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800bbd4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 80b1 	beq.w	800bd44 <USBD_AUDIO_Sync+0x180>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbe8:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	78fa      	ldrb	r2, [r7, #3]
 800bbf4:	701a      	strb	r2, [r3, #0]

  if (haudio->rd_enable == 1U)
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bbfc:	3305      	adds	r3, #5
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d11b      	bne.n	800bc3c <USBD_AUDIO_Sync+0x78>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc0a:	3306      	adds	r3, #6
 800bc0c:	881a      	ldrh	r2, [r3, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	4413      	add	r3, r2
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc1c:	3306      	adds	r3, #6
 800bc1e:	801a      	strh	r2, [r3, #0]

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc26:	3306      	adds	r3, #6
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800bc2e:	d105      	bne.n	800bc3c <USBD_AUDIO_Sync+0x78>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc36:	3306      	adds	r3, #6
 800bc38:	2200      	movs	r2, #0
 800bc3a:	801a      	strh	r2, [r3, #0]
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc42:	3306      	adds	r3, #6
 800bc44:	881a      	ldrh	r2, [r3, #0]
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc4c:	3308      	adds	r3, #8
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d93c      	bls.n	800bcce <USBD_AUDIO_Sync+0x10a>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc5a:	3306      	adds	r3, #6
 800bc5c:	881b      	ldrh	r3, [r3, #0]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc66:	3308      	adds	r3, #8
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	2bbf      	cmp	r3, #191	; 0xbf
 800bc6e:	dc03      	bgt.n	800bc78 <USBD_AUDIO_Sync+0xb4>
    {
      BufferSize += 4U;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	3304      	adds	r3, #4
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	e04e      	b.n	800bd16 <USBD_AUDIO_Sync+0x152>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc7e:	3306      	adds	r3, #6
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bc8a:	3308      	adds	r3, #8
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	1ad3      	subs	r3, r2, r3
 800bc90:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 800bc94:	dd3f      	ble.n	800bd16 <USBD_AUDIO_Sync+0x152>
      {
       // BufferSize -= 4U;
    	  haudio->alt_setting = 0U;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	601a      	str	r2, [r3, #0]
    	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bca2:	3304      	adds	r3, #4
 800bca4:	2203      	movs	r2, #3
 800bca6:	701a      	strb	r2, [r3, #0]
    	  haudio->wr_ptr = 0U;
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bcae:	3308      	adds	r3, #8
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	801a      	strh	r2, [r3, #0]
    	  haudio->rd_ptr = 0U;
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bcba:	3306      	adds	r3, #6
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	801a      	strh	r2, [r3, #0]
    	  haudio->rd_enable = 0U;
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bcc6:	3305      	adds	r3, #5
 800bcc8:	2200      	movs	r2, #0
 800bcca:	701a      	strb	r2, [r3, #0]
 800bccc:	e023      	b.n	800bd16 <USBD_AUDIO_Sync+0x152>
            }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bce0:	3306      	adds	r3, #6
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	2bbf      	cmp	r3, #191	; 0xbf
 800bce8:	dc03      	bgt.n	800bcf2 <USBD_AUDIO_Sync+0x12e>
    {
       BufferSize -= 4U;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	3b04      	subs	r3, #4
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e011      	b.n	800bd16 <USBD_AUDIO_Sync+0x152>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bd04:	3306      	adds	r3, #6
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 800bd0e:	dd02      	ble.n	800bd16 <USBD_AUDIO_Sync+0x152>
      {
         BufferSize += 4U;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3304      	adds	r3, #4
 800bd14:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d110      	bne.n	800bd46 <USBD_AUDIO_Sync+0x182>
  {
	  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	1d10      	adds	r0, r2, #4
 800bd30:	2202      	movs	r2, #2
 800bd32:	68f9      	ldr	r1, [r7, #12]
 800bd34:	4798      	blx	r3
                                                         BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	2200      	movs	r2, #0
 800bd40:	701a      	strb	r2, [r3, #0]
 800bd42:	e000      	b.n	800bd46 <USBD_AUDIO_Sync+0x182>
    return;
 800bd44:	bf00      	nop
  }
}
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	460b      	mov	r3, r1
 800bd70:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd92:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 800bd94:	78fb      	ldrb	r3, [r7, #3]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d179      	bne.n	800be8e <USBD_AUDIO_DataOut+0x10e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800bd9a:	78fb      	ldrb	r3, [r7, #3]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f003 fc39 	bl	800f616 <USBD_LL_GetRxDataSize>
 800bda4:	4603      	mov	r3, r0
 800bda6:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdae:	695c      	ldr	r4, [r3, #20]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	8979      	ldrh	r1, [r7, #10]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bdd0:	3308      	adds	r3, #8
 800bdd2:	881a      	ldrh	r2, [r3, #0]
 800bdd4:	897b      	ldrh	r3, [r7, #10]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bde0:	3308      	adds	r3, #8
 800bde2:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bdea:	3308      	adds	r3, #8
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800bdf2:	d129      	bne.n	800be48 <USBD_AUDIO_DataOut+0xc8>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	801a      	strh	r2, [r3, #0]
      if (playing==0)
 800be00:	4b25      	ldr	r3, [pc, #148]	; (800be98 <USBD_AUDIO_DataOut+0x118>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d108      	bne.n	800be1a <USBD_AUDIO_DataOut+0x9a>
    	  {
    	  playing=1;
 800be08:	4b23      	ldr	r3, [pc, #140]	; (800be98 <USBD_AUDIO_DataOut+0x118>)
 800be0a:	2201      	movs	r2, #1
 800be0c:	601a      	str	r2, [r3, #0]
    	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800be14:	3304      	adds	r3, #4
 800be16:	2203      	movs	r2, #3
 800be18:	701a      	strb	r2, [r3, #0]
    	  }
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800be20:	3304      	adds	r3, #4
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	2b03      	cmp	r3, #3
 800be26:	d10f      	bne.n	800be48 <USBD_AUDIO_DataOut+0xc8>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	1d10      	adds	r0, r2, #4
 800be34:	2201      	movs	r2, #1
 800be36:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800be3a:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800be42:	3304      	adds	r3, #4
 800be44:	2200      	movs	r2, #0
 800be46:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800be4e:	3305      	adds	r3, #5
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10d      	bne.n	800be72 <USBD_AUDIO_DataOut+0xf2>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800be5c:	3308      	adds	r3, #8
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800be64:	d105      	bne.n	800be72 <USBD_AUDIO_DataOut+0xf2>
      {
        haudio->rd_enable = 1U;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800be6c:	3305      	adds	r3, #5
 800be6e:	2201      	movs	r2, #1
 800be70:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800be78:	3308      	adds	r3, #8
 800be7a:	881b      	ldrh	r3, [r3, #0]
 800be7c:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	4413      	add	r3, r2
 800be82:	1d1a      	adds	r2, r3, #4
 800be84:	23c0      	movs	r3, #192	; 0xc0
 800be86:	2101      	movs	r1, #1
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f003 fba3 	bl	800f5d4 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	bd90      	pop	{r4, r7, pc}
 800be98:	20000254 	.word	0x20000254

0800be9c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beac:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800beb4:	330b      	adds	r3, #11
 800beb6:	2240      	movs	r2, #64	; 0x40
 800beb8:	2100      	movs	r1, #0
 800beba:	4618      	mov	r0, r3
 800bebc:	f003 fe1e 	bl	800fafc <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bec6:	330b      	adds	r3, #11
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	88d2      	ldrh	r2, [r2, #6]
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f001 fa6f 	bl	800d3b2 <USBD_CtlSendData>
}
 800bed4:	bf00      	nop
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beec:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	88db      	ldrh	r3, [r3, #6]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d021      	beq.n	800bf3a <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800befc:	330b      	adds	r3, #11
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	88d2      	ldrh	r2, [r2, #6]
 800bf02:	4619      	mov	r1, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f001 fa80 	bl	800d40a <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bf10:	330a      	adds	r3, #10
 800bf12:	2201      	movs	r2, #1
 800bf14:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	88db      	ldrh	r3, [r3, #6]
 800bf1a:	b2da      	uxtb	r2, r3
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800bf22:	330b      	adds	r3, #11
 800bf24:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	889b      	ldrh	r3, [r3, #4]
 800bf2a:	0a1b      	lsrs	r3, r3, #8
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800bf36:	330c      	adds	r3, #12
 800bf38:	701a      	strb	r2, [r3, #0]
  }
}
 800bf3a:	bf00      	nop
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	220a      	movs	r2, #10
 800bf50:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800bf52:	4b03      	ldr	r3, [pc, #12]	; (800bf60 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	200000d8 	.word	0x200000d8

0800bf64 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bf74:	2303      	movs	r3, #3
 800bf76:	e004      	b.n	800bf82 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	370c      	adds	r7, #12
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
	...

0800bf90 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800bf9c:	2010      	movs	r0, #16
 800bf9e:	f003 fd9d 	bl	800fadc <malloc>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d104      	bne.n	800bfb6 <USBD_HID_Init+0x26>
  {
    classData = NULL;
 800bfac:	4b11      	ldr	r3, [pc, #68]	; (800bff4 <USBD_HID_Init+0x64>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	601a      	str	r2, [r3, #0]
    return (uint8_t)USBD_EMEM;
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	e01a      	b.n	800bfec <USBD_HID_Init+0x5c>
  }

  classData = (void *)hhid;
 800bfb6:	4a0f      	ldr	r2, [pc, #60]	; (800bff4 <USBD_HID_Init+0x64>)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6013      	str	r3, [r2, #0]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	7c1b      	ldrb	r3, [r3, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d103      	bne.n	800bfcc <USBD_HID_Init+0x3c>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2207      	movs	r2, #7
 800bfc8:	875a      	strh	r2, [r3, #58]	; 0x3a
 800bfca:	e002      	b.n	800bfd2 <USBD_HID_Init+0x42>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	220a      	movs	r2, #10
 800bfd0:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800bfd2:	2304      	movs	r3, #4
 800bfd4:	2203      	movs	r2, #3
 800bfd6:	2181      	movs	r1, #129	; 0x81
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f003 fa0c 	bl	800f3f6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	20000824 	.word	0x20000824

0800bff8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	460b      	mov	r3, r1
 800c002:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800c004:	2181      	movs	r1, #129	; 0x81
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f003 fa1b 	bl	800f442 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (classData != NULL)
 800c018:	4b08      	ldr	r3, [pc, #32]	; (800c03c <USBD_HID_DeInit+0x44>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d007      	beq.n	800c030 <USBD_HID_DeInit+0x38>
  {
    (void)USBD_free(classData);
 800c020:	4b06      	ldr	r3, [pc, #24]	; (800c03c <USBD_HID_DeInit+0x44>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4618      	mov	r0, r3
 800c026:	f003 fd61 	bl	800faec <free>
    classData = NULL;
 800c02a:	4b04      	ldr	r3, [pc, #16]	; (800c03c <USBD_HID_DeInit+0x44>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]
  }

  return (uint8_t)USBD_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3708      	adds	r7, #8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	20000824 	.word	0x20000824

0800c040 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)classData;
 800c04a:	4b78      	ldr	r3, [pc, #480]	; (800c22c <USBD_HID_Setup+0x1ec>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800c054:	2300      	movs	r3, #0
 800c056:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c060:	2b00      	cmp	r3, #0
 800c062:	d046      	beq.n	800c0f2 <USBD_HID_Setup+0xb2>
 800c064:	2b20      	cmp	r3, #32
 800c066:	f040 80d5 	bne.w	800c214 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	785b      	ldrb	r3, [r3, #1]
 800c06e:	3b02      	subs	r3, #2
 800c070:	2b09      	cmp	r3, #9
 800c072:	d836      	bhi.n	800c0e2 <USBD_HID_Setup+0xa2>
 800c074:	a201      	add	r2, pc, #4	; (adr r2, 800c07c <USBD_HID_Setup+0x3c>)
 800c076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07a:	bf00      	nop
 800c07c:	0800c0d3 	.word	0x0800c0d3
 800c080:	0800c0b3 	.word	0x0800c0b3
 800c084:	0800c0e3 	.word	0x0800c0e3
 800c088:	0800c0e3 	.word	0x0800c0e3
 800c08c:	0800c0e3 	.word	0x0800c0e3
 800c090:	0800c0e3 	.word	0x0800c0e3
 800c094:	0800c0e3 	.word	0x0800c0e3
 800c098:	0800c0e3 	.word	0x0800c0e3
 800c09c:	0800c0c1 	.word	0x0800c0c1
 800c0a0:	0800c0a5 	.word	0x0800c0a5
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	885b      	ldrh	r3, [r3, #2]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	601a      	str	r2, [r3, #0]
      break;
 800c0b0:	e01e      	b.n	800c0f0 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f001 f97a 	bl	800d3b2 <USBD_CtlSendData>
      break;
 800c0be:	e017      	b.n	800c0f0 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	885b      	ldrh	r3, [r3, #2]
 800c0c4:	0a1b      	lsrs	r3, r3, #8
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	605a      	str	r2, [r3, #4]
      break;
 800c0d0:	e00e      	b.n	800c0f0 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f001 f969 	bl	800d3b2 <USBD_CtlSendData>
      break;
 800c0e0:	e006      	b.n	800c0f0 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f001 f8f3 	bl	800d2d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ee:	bf00      	nop
    }
    break;
 800c0f0:	e097      	b.n	800c222 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	785b      	ldrb	r3, [r3, #1]
 800c0f6:	2b0b      	cmp	r3, #11
 800c0f8:	f200 8083 	bhi.w	800c202 <USBD_HID_Setup+0x1c2>
 800c0fc:	a201      	add	r2, pc, #4	; (adr r2, 800c104 <USBD_HID_Setup+0xc4>)
 800c0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c102:	bf00      	nop
 800c104:	0800c135 	.word	0x0800c135
 800c108:	0800c211 	.word	0x0800c211
 800c10c:	0800c203 	.word	0x0800c203
 800c110:	0800c203 	.word	0x0800c203
 800c114:	0800c203 	.word	0x0800c203
 800c118:	0800c203 	.word	0x0800c203
 800c11c:	0800c15d 	.word	0x0800c15d
 800c120:	0800c203 	.word	0x0800c203
 800c124:	0800c203 	.word	0x0800c203
 800c128:	0800c203 	.word	0x0800c203
 800c12c:	0800c1b5 	.word	0x0800c1b5
 800c130:	0800c1dd 	.word	0x0800c1dd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d107      	bne.n	800c14e <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c13e:	f107 030a 	add.w	r3, r7, #10
 800c142:	2202      	movs	r2, #2
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 f933 	bl	800d3b2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c14c:	e061      	b.n	800c212 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f001 f8bd 	bl	800d2d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800c156:	2303      	movs	r3, #3
 800c158:	75fb      	strb	r3, [r7, #23]
      break;
 800c15a:	e05a      	b.n	800c212 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	885b      	ldrh	r3, [r3, #2]
 800c160:	0a1b      	lsrs	r3, r3, #8
 800c162:	b29b      	uxth	r3, r3
 800c164:	2b22      	cmp	r3, #34	; 0x22
 800c166:	d108      	bne.n	800c17a <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	88db      	ldrh	r3, [r3, #6]
 800c16c:	2b2c      	cmp	r3, #44	; 0x2c
 800c16e:	bf28      	it	cs
 800c170:	232c      	movcs	r3, #44	; 0x2c
 800c172:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 800c174:	4b2e      	ldr	r3, [pc, #184]	; (800c230 <USBD_HID_Setup+0x1f0>)
 800c176:	613b      	str	r3, [r7, #16]
 800c178:	e015      	b.n	800c1a6 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	885b      	ldrh	r3, [r3, #2]
 800c17e:	0a1b      	lsrs	r3, r3, #8
 800c180:	b29b      	uxth	r3, r3
 800c182:	2b21      	cmp	r3, #33	; 0x21
 800c184:	d108      	bne.n	800c198 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 800c186:	4b2b      	ldr	r3, [pc, #172]	; (800c234 <USBD_HID_Setup+0x1f4>)
 800c188:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	88db      	ldrh	r3, [r3, #6]
 800c18e:	2b09      	cmp	r3, #9
 800c190:	bf28      	it	cs
 800c192:	2309      	movcs	r3, #9
 800c194:	82bb      	strh	r3, [r7, #20]
 800c196:	e006      	b.n	800c1a6 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f001 f898 	bl	800d2d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	75fb      	strb	r3, [r7, #23]
        break;
 800c1a4:	e035      	b.n	800c212 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1a6:	8abb      	ldrh	r3, [r7, #20]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	6939      	ldr	r1, [r7, #16]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f001 f900 	bl	800d3b2 <USBD_CtlSendData>
      break;
 800c1b2:	e02e      	b.n	800c212 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d107      	bne.n	800c1ce <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3308      	adds	r3, #8
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f001 f8f3 	bl	800d3b2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c1cc:	e021      	b.n	800c212 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800c1ce:	6839      	ldr	r1, [r7, #0]
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f001 f87d 	bl	800d2d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c1da:	e01a      	b.n	800c212 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d106      	bne.n	800c1f4 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	885b      	ldrh	r3, [r3, #2]
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c1f2:	e00e      	b.n	800c212 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f001 f86a 	bl	800d2d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c200:	e007      	b.n	800c212 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f001 f863 	bl	800d2d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800c20a:	2303      	movs	r3, #3
 800c20c:	75fb      	strb	r3, [r7, #23]
      break;
 800c20e:	e000      	b.n	800c212 <USBD_HID_Setup+0x1d2>
      break;
 800c210:	bf00      	nop
    }
    break;
 800c212:	e006      	b.n	800c222 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 800c214:	6839      	ldr	r1, [r7, #0]
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f001 f85a 	bl	800d2d0 <USBD_CtlError>
    ret = USBD_FAIL;
 800c21c:	2303      	movs	r3, #3
 800c21e:	75fb      	strb	r3, [r7, #23]
    break;
 800c220:	bf00      	nop
  }

  return (uint8_t)ret;
 800c222:	7dfb      	ldrb	r3, [r7, #23]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	20000824 	.word	0x20000824
 800c230:	200000f0 	.word	0x200000f0
 800c234:	200000e4 	.word	0x200000e4

0800c238 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	4613      	mov	r3, r2
 800c244:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)classData;
 800c246:	4b0d      	ldr	r3, [pc, #52]	; (800c27c <USBD_HID_SendReport+0x44>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c252:	2b03      	cmp	r3, #3
 800c254:	d10c      	bne.n	800c270 <USBD_HID_SendReport+0x38>
  {
    if (hhid->state == HID_IDLE)
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	7b1b      	ldrb	r3, [r3, #12]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d108      	bne.n	800c270 <USBD_HID_SendReport+0x38>
    {
      hhid->state = HID_BUSY;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2201      	movs	r2, #1
 800c262:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800c264:	88fb      	ldrh	r3, [r7, #6]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	2181      	movs	r1, #129	; 0x81
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f003 f991 	bl	800f592 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	20000824 	.word	0x20000824

0800c280 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	460b      	mov	r3, r1
 800c28a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)classData)->state = HID_IDLE;
 800c28c:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <USBD_HID_DataIn+0x24>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2200      	movs	r2, #0
 800c292:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	20000824 	.word	0x20000824

0800c2a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d101      	bne.n	800c2c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c2bc:	2303      	movs	r3, #3
 800c2be:	e025      	b.n	800c30c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d003      	beq.n	800c2d2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d003      	beq.n	800c2e4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d003      	beq.n	800c2f2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	79fa      	ldrb	r2, [r7, #7]
 800c2fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f003 f811 	bl	800f328 <USBD_LL_Init>
 800c306:	4603      	mov	r3, r0
 800c308:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	e010      	b.n	800c34e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33c:	f107 020e 	add.w	r2, r7, #14
 800c340:	4610      	mov	r0, r2
 800c342:	4798      	blx	r3
 800c344:	4602      	mov	r2, r0
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b082      	sub	sp, #8
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f003 f82e 	bl	800f3c0 <USBD_LL_Start>
 800c364:	4603      	mov	r3, r0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3708      	adds	r7, #8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c36e:	b480      	push	{r7}
 800c370:	b083      	sub	sp, #12
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c390:	2303      	movs	r3, #3
 800c392:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d009      	beq.n	800c3b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	78fa      	ldrb	r2, [r7, #3]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	4798      	blx	r3
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d007      	beq.n	800c3e2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	78fa      	ldrb	r2, [r7, #3]
 800c3dc:	4611      	mov	r1, r2
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	4798      	blx	r3
  }

  return USBD_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 ff2c 	bl	800d25c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c412:	461a      	mov	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c420:	f003 031f 	and.w	r3, r3, #31
 800c424:	2b01      	cmp	r3, #1
 800c426:	d00e      	beq.n	800c446 <USBD_LL_SetupStage+0x5a>
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d302      	bcc.n	800c432 <USBD_LL_SetupStage+0x46>
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d014      	beq.n	800c45a <USBD_LL_SetupStage+0x6e>
 800c430:	e01d      	b.n	800c46e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fa18 	bl	800c870 <USBD_StdDevReq>
 800c440:	4603      	mov	r3, r0
 800c442:	73fb      	strb	r3, [r7, #15]
      break;
 800c444:	e020      	b.n	800c488 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c44c:	4619      	mov	r1, r3
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fa7c 	bl	800c94c <USBD_StdItfReq>
 800c454:	4603      	mov	r3, r0
 800c456:	73fb      	strb	r3, [r7, #15]
      break;
 800c458:	e016      	b.n	800c488 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c460:	4619      	mov	r1, r3
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fab8 	bl	800c9d8 <USBD_StdEPReq>
 800c468:	4603      	mov	r3, r0
 800c46a:	73fb      	strb	r3, [r7, #15]
      break;
 800c46c:	e00c      	b.n	800c488 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c474:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	4619      	mov	r1, r3
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f002 ffff 	bl	800f480 <USBD_LL_StallEP>
 800c482:	4603      	mov	r3, r0
 800c484:	73fb      	strb	r3, [r7, #15]
      break;
 800c486:	bf00      	nop
  }

  return ret;
 800c488:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b086      	sub	sp, #24
 800c496:	af00      	add	r7, sp, #0
 800c498:	60f8      	str	r0, [r7, #12]
 800c49a:	460b      	mov	r3, r1
 800c49c:	607a      	str	r2, [r7, #4]
 800c49e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d137      	bne.n	800c516 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c4ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	d14a      	bne.n	800c54e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	689a      	ldr	r2, [r3, #8]
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d913      	bls.n	800c4ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	689a      	ldr	r2, [r3, #8]
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	1ad2      	subs	r2, r2, r3
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	bf28      	it	cs
 800c4de:	4613      	movcs	r3, r2
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6879      	ldr	r1, [r7, #4]
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 ffad 	bl	800d444 <USBD_CtlContinueRx>
 800c4ea:	e030      	b.n	800c54e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00a      	beq.n	800c50e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d105      	bne.n	800c50e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f000 ffa9 	bl	800d466 <USBD_CtlSendStatus>
 800c514:	e01b      	b.n	800c54e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c51c:	699b      	ldr	r3, [r3, #24]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d013      	beq.n	800c54a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c528:	2b03      	cmp	r3, #3
 800c52a:	d10e      	bne.n	800c54a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	7afa      	ldrb	r2, [r7, #11]
 800c536:	4611      	mov	r1, r2
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	4798      	blx	r3
 800c53c:	4603      	mov	r3, r0
 800c53e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c546:	7dfb      	ldrb	r3, [r7, #23]
 800c548:	e002      	b.n	800c550 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e000      	b.n	800c550 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	460b      	mov	r3, r1
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c566:	7afb      	ldrb	r3, [r7, #11]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d16a      	bne.n	800c642 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3314      	adds	r3, #20
 800c570:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d155      	bne.n	800c628 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	689a      	ldr	r2, [r3, #8]
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	429a      	cmp	r2, r3
 800c586:	d914      	bls.n	800c5b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	689a      	ldr	r2, [r3, #8]
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	1ad2      	subs	r2, r2, r3
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	461a      	mov	r2, r3
 800c59c:	6879      	ldr	r1, [r7, #4]
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f000 ff22 	bl	800d3e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f003 f812 	bl	800f5d4 <USBD_LL_PrepareReceive>
 800c5b0:	e03a      	b.n	800c628 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	68da      	ldr	r2, [r3, #12]
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d11c      	bne.n	800c5f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d316      	bcc.n	800c5f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d20f      	bcs.n	800c5f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5d8:	2200      	movs	r2, #0
 800c5da:	2100      	movs	r1, #0
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f000 ff03 	bl	800d3e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f002 ffef 	bl	800f5d4 <USBD_LL_PrepareReceive>
 800c5f6:	e017      	b.n	800c628 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00a      	beq.n	800c61a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	d105      	bne.n	800c61a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c61a:	2180      	movs	r1, #128	; 0x80
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f002 ff2f 	bl	800f480 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 ff32 	bl	800d48c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d123      	bne.n	800c67a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7ff fe9b 	bl	800c36e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c640:	e01b      	b.n	800c67a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d013      	beq.n	800c676 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c654:	2b03      	cmp	r3, #3
 800c656:	d10e      	bne.n	800c676 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c65e:	695b      	ldr	r3, [r3, #20]
 800c660:	7afa      	ldrb	r2, [r7, #11]
 800c662:	4611      	mov	r1, r2
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	4798      	blx	r3
 800c668:	4603      	mov	r3, r0
 800c66a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c66c:	7dfb      	ldrb	r3, [r7, #23]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d003      	beq.n	800c67a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c672:	7dfb      	ldrb	r3, [r7, #23]
 800c674:	e002      	b.n	800c67c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c676:	2303      	movs	r3, #3
 800c678:	e000      	b.n	800c67c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d009      	beq.n	800c6c8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	6852      	ldr	r2, [r2, #4]
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6c8:	2340      	movs	r3, #64	; 0x40
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f002 fe91 	bl	800f3f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2240      	movs	r2, #64	; 0x40
 800c6e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6e4:	2340      	movs	r3, #64	; 0x40
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2180      	movs	r1, #128	; 0x80
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f002 fe83 	bl	800f3f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2240      	movs	r2, #64	; 0x40
 800c6fa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	460b      	mov	r3, r1
 800c710:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	78fa      	ldrb	r2, [r7, #3]
 800c716:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c726:	b480      	push	{r7}
 800c728:	b083      	sub	sp, #12
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2204      	movs	r2, #4
 800c73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d105      	bne.n	800c76e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	d10b      	bne.n	800c7a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c794:	69db      	ldr	r3, [r3, #28]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d005      	beq.n	800c7a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a0:	69db      	ldr	r3, [r3, #28]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2201      	movs	r2, #1
 800c806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c810:	2b00      	cmp	r3, #0
 800c812:	d009      	beq.n	800c828 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	6852      	ldr	r2, [r2, #4]
 800c820:	b2d2      	uxtb	r2, r2
 800c822:	4611      	mov	r1, r2
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	4798      	blx	r3
  }

  return USBD_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c832:	b480      	push	{r7}
 800c834:	b087      	sub	sp, #28
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	3301      	adds	r3, #1
 800c848:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c850:	8a3b      	ldrh	r3, [r7, #16]
 800c852:	021b      	lsls	r3, r3, #8
 800c854:	b21a      	sxth	r2, r3
 800c856:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	b21b      	sxth	r3, r3
 800c85e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c860:	89fb      	ldrh	r3, [r7, #14]
}
 800c862:	4618      	mov	r0, r3
 800c864:	371c      	adds	r7, #28
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
	...

0800c870 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c886:	2b20      	cmp	r3, #32
 800c888:	d004      	beq.n	800c894 <USBD_StdDevReq+0x24>
 800c88a:	2b40      	cmp	r3, #64	; 0x40
 800c88c:	d002      	beq.n	800c894 <USBD_StdDevReq+0x24>
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00a      	beq.n	800c8a8 <USBD_StdDevReq+0x38>
 800c892:	e050      	b.n	800c936 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	4798      	blx	r3
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a6:	e04b      	b.n	800c940 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	2b09      	cmp	r3, #9
 800c8ae:	d83c      	bhi.n	800c92a <USBD_StdDevReq+0xba>
 800c8b0:	a201      	add	r2, pc, #4	; (adr r2, 800c8b8 <USBD_StdDevReq+0x48>)
 800c8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b6:	bf00      	nop
 800c8b8:	0800c90d 	.word	0x0800c90d
 800c8bc:	0800c921 	.word	0x0800c921
 800c8c0:	0800c92b 	.word	0x0800c92b
 800c8c4:	0800c917 	.word	0x0800c917
 800c8c8:	0800c92b 	.word	0x0800c92b
 800c8cc:	0800c8eb 	.word	0x0800c8eb
 800c8d0:	0800c8e1 	.word	0x0800c8e1
 800c8d4:	0800c92b 	.word	0x0800c92b
 800c8d8:	0800c903 	.word	0x0800c903
 800c8dc:	0800c8f5 	.word	0x0800c8f5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f9ce 	bl	800cc84 <USBD_GetDescriptor>
      break;
 800c8e8:	e024      	b.n	800c934 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fb33 	bl	800cf58 <USBD_SetAddress>
      break;
 800c8f2:	e01f      	b.n	800c934 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 fb70 	bl	800cfdc <USBD_SetConfig>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c900:	e018      	b.n	800c934 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 fc0d 	bl	800d124 <USBD_GetConfig>
      break;
 800c90a:	e013      	b.n	800c934 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c90c:	6839      	ldr	r1, [r7, #0]
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fc3c 	bl	800d18c <USBD_GetStatus>
      break;
 800c914:	e00e      	b.n	800c934 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fc6a 	bl	800d1f2 <USBD_SetFeature>
      break;
 800c91e:	e009      	b.n	800c934 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fc79 	bl	800d21a <USBD_ClrFeature>
      break;
 800c928:	e004      	b.n	800c934 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fccf 	bl	800d2d0 <USBD_CtlError>
      break;
 800c932:	bf00      	nop
    }
    break;
 800c934:	e004      	b.n	800c940 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fcc9 	bl	800d2d0 <USBD_CtlError>
    break;
 800c93e:	bf00      	nop
  }

  return ret;
 800c940:	7bfb      	ldrb	r3, [r7, #15]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop

0800c94c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c962:	2b20      	cmp	r3, #32
 800c964:	d003      	beq.n	800c96e <USBD_StdItfReq+0x22>
 800c966:	2b40      	cmp	r3, #64	; 0x40
 800c968:	d001      	beq.n	800c96e <USBD_StdItfReq+0x22>
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d12a      	bne.n	800c9c4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c974:	3b01      	subs	r3, #1
 800c976:	2b02      	cmp	r3, #2
 800c978:	d81d      	bhi.n	800c9b6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	889b      	ldrh	r3, [r3, #4]
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b03      	cmp	r3, #3
 800c982:	d813      	bhi.n	800c9ac <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	6839      	ldr	r1, [r7, #0]
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	4798      	blx	r3
 800c992:	4603      	mov	r3, r0
 800c994:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	88db      	ldrh	r3, [r3, #6]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d110      	bne.n	800c9c0 <USBD_StdItfReq+0x74>
 800c99e:	7bfb      	ldrb	r3, [r7, #15]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10d      	bne.n	800c9c0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fd5e 	bl	800d466 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c9aa:	e009      	b.n	800c9c0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c9ac:	6839      	ldr	r1, [r7, #0]
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fc8e 	bl	800d2d0 <USBD_CtlError>
      break;
 800c9b4:	e004      	b.n	800c9c0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fc89 	bl	800d2d0 <USBD_CtlError>
      break;
 800c9be:	e000      	b.n	800c9c2 <USBD_StdItfReq+0x76>
      break;
 800c9c0:	bf00      	nop
    }
    break;
 800c9c2:	e004      	b.n	800c9ce <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fc82 	bl	800d2d0 <USBD_CtlError>
    break;
 800c9cc:	bf00      	nop
  }

  return ret;
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	889b      	ldrh	r3, [r3, #4]
 800c9ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9f4:	2b20      	cmp	r3, #32
 800c9f6:	d004      	beq.n	800ca02 <USBD_StdEPReq+0x2a>
 800c9f8:	2b40      	cmp	r3, #64	; 0x40
 800c9fa:	d002      	beq.n	800ca02 <USBD_StdEPReq+0x2a>
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <USBD_StdEPReq+0x3e>
 800ca00:	e135      	b.n	800cc6e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	4798      	blx	r3
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]
    break;
 800ca14:	e130      	b.n	800cc78 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	785b      	ldrb	r3, [r3, #1]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d03e      	beq.n	800ca9c <USBD_StdEPReq+0xc4>
 800ca1e:	2b03      	cmp	r3, #3
 800ca20:	d002      	beq.n	800ca28 <USBD_StdEPReq+0x50>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d077      	beq.n	800cb16 <USBD_StdEPReq+0x13e>
 800ca26:	e11c      	b.n	800cc62 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d002      	beq.n	800ca38 <USBD_StdEPReq+0x60>
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d015      	beq.n	800ca62 <USBD_StdEPReq+0x8a>
 800ca36:	e02b      	b.n	800ca90 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca38:	7bbb      	ldrb	r3, [r7, #14]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00c      	beq.n	800ca58 <USBD_StdEPReq+0x80>
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	2b80      	cmp	r3, #128	; 0x80
 800ca42:	d009      	beq.n	800ca58 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca44:	7bbb      	ldrb	r3, [r7, #14]
 800ca46:	4619      	mov	r1, r3
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f002 fd19 	bl	800f480 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca4e:	2180      	movs	r1, #128	; 0x80
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f002 fd15 	bl	800f480 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ca56:	e020      	b.n	800ca9a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fc38 	bl	800d2d0 <USBD_CtlError>
        break;
 800ca60:	e01b      	b.n	800ca9a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	885b      	ldrh	r3, [r3, #2]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10e      	bne.n	800ca88 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca6a:	7bbb      	ldrb	r3, [r7, #14]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00b      	beq.n	800ca88 <USBD_StdEPReq+0xb0>
 800ca70:	7bbb      	ldrb	r3, [r7, #14]
 800ca72:	2b80      	cmp	r3, #128	; 0x80
 800ca74:	d008      	beq.n	800ca88 <USBD_StdEPReq+0xb0>
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	88db      	ldrh	r3, [r3, #6]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d104      	bne.n	800ca88 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca7e:	7bbb      	ldrb	r3, [r7, #14]
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f002 fcfc 	bl	800f480 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fcec 	bl	800d466 <USBD_CtlSendStatus>

        break;
 800ca8e:	e004      	b.n	800ca9a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fc1c 	bl	800d2d0 <USBD_CtlError>
        break;
 800ca98:	bf00      	nop
      }
      break;
 800ca9a:	e0e7      	b.n	800cc6c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d002      	beq.n	800caac <USBD_StdEPReq+0xd4>
 800caa6:	2b03      	cmp	r3, #3
 800caa8:	d015      	beq.n	800cad6 <USBD_StdEPReq+0xfe>
 800caaa:	e02d      	b.n	800cb08 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800caac:	7bbb      	ldrb	r3, [r7, #14]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00c      	beq.n	800cacc <USBD_StdEPReq+0xf4>
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
 800cab4:	2b80      	cmp	r3, #128	; 0x80
 800cab6:	d009      	beq.n	800cacc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800cab8:	7bbb      	ldrb	r3, [r7, #14]
 800caba:	4619      	mov	r1, r3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f002 fcdf 	bl	800f480 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cac2:	2180      	movs	r1, #128	; 0x80
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f002 fcdb 	bl	800f480 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800caca:	e023      	b.n	800cb14 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800cacc:	6839      	ldr	r1, [r7, #0]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fbfe 	bl	800d2d0 <USBD_CtlError>
        break;
 800cad4:	e01e      	b.n	800cb14 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	885b      	ldrh	r3, [r3, #2]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d119      	bne.n	800cb12 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800cade:	7bbb      	ldrb	r3, [r7, #14]
 800cae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d004      	beq.n	800caf2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f002 fce6 	bl	800f4be <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fcb7 	bl	800d466 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	6839      	ldr	r1, [r7, #0]
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	4798      	blx	r3
        }
        break;
 800cb06:	e004      	b.n	800cb12 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fbe0 	bl	800d2d0 <USBD_CtlError>
        break;
 800cb10:	e000      	b.n	800cb14 <USBD_StdEPReq+0x13c>
        break;
 800cb12:	bf00      	nop
      }
      break;
 800cb14:	e0aa      	b.n	800cc6c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d002      	beq.n	800cb26 <USBD_StdEPReq+0x14e>
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d032      	beq.n	800cb8a <USBD_StdEPReq+0x1b2>
 800cb24:	e097      	b.n	800cc56 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb26:	7bbb      	ldrb	r3, [r7, #14]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d007      	beq.n	800cb3c <USBD_StdEPReq+0x164>
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
 800cb2e:	2b80      	cmp	r3, #128	; 0x80
 800cb30:	d004      	beq.n	800cb3c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fbcb 	bl	800d2d0 <USBD_CtlError>
          break;
 800cb3a:	e091      	b.n	800cc60 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	da0b      	bge.n	800cb5c <USBD_StdEPReq+0x184>
 800cb44:	7bbb      	ldrb	r3, [r7, #14]
 800cb46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	3310      	adds	r3, #16
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	4413      	add	r3, r2
 800cb58:	3304      	adds	r3, #4
 800cb5a:	e00b      	b.n	800cb74 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
 800cb5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb62:	4613      	mov	r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	4413      	add	r3, r2
 800cb72:	3304      	adds	r3, #4
 800cb74:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	2202      	movs	r2, #2
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fc15 	bl	800d3b2 <USBD_CtlSendData>
        break;
 800cb88:	e06a      	b.n	800cc60 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800cb8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	da11      	bge.n	800cbb6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	f003 020f 	and.w	r2, r3, #15
 800cb98:	6879      	ldr	r1, [r7, #4]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	440b      	add	r3, r1
 800cba4:	3324      	adds	r3, #36	; 0x24
 800cba6:	881b      	ldrh	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d117      	bne.n	800cbdc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800cbac:	6839      	ldr	r1, [r7, #0]
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fb8e 	bl	800d2d0 <USBD_CtlError>
            break;
 800cbb4:	e054      	b.n	800cc60 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cbb6:	7bbb      	ldrb	r3, [r7, #14]
 800cbb8:	f003 020f 	and.w	r2, r3, #15
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	440b      	add	r3, r1
 800cbc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbcc:	881b      	ldrh	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d104      	bne.n	800cbdc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800cbd2:	6839      	ldr	r1, [r7, #0]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 fb7b 	bl	800d2d0 <USBD_CtlError>
            break;
 800cbda:	e041      	b.n	800cc60 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	da0b      	bge.n	800cbfc <USBD_StdEPReq+0x224>
 800cbe4:	7bbb      	ldrb	r3, [r7, #14]
 800cbe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbea:	4613      	mov	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	3310      	adds	r3, #16
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	e00b      	b.n	800cc14 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cbfc:	7bbb      	ldrb	r3, [r7, #14]
 800cbfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc02:	4613      	mov	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	4413      	add	r3, r2
 800cc12:	3304      	adds	r3, #4
 800cc14:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc16:	7bbb      	ldrb	r3, [r7, #14]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <USBD_StdEPReq+0x24a>
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	2b80      	cmp	r3, #128	; 0x80
 800cc20:	d103      	bne.n	800cc2a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	2200      	movs	r2, #0
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	e00e      	b.n	800cc48 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f002 fc64 	bl	800f4fc <USBD_LL_IsStallEP>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	e002      	b.n	800cc48 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	2200      	movs	r2, #0
 800cc46:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fbaf 	bl	800d3b2 <USBD_CtlSendData>
          break;
 800cc54:	e004      	b.n	800cc60 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fb39 	bl	800d2d0 <USBD_CtlError>
        break;
 800cc5e:	bf00      	nop
      }
      break;
 800cc60:	e004      	b.n	800cc6c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fb33 	bl	800d2d0 <USBD_CtlError>
      break;
 800cc6a:	bf00      	nop
    }
    break;
 800cc6c:	e004      	b.n	800cc78 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 fb2d 	bl	800d2d0 <USBD_CtlError>
    break;
 800cc76:	bf00      	nop
  }

  return ret;
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
	...

0800cc84 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc92:	2300      	movs	r3, #0
 800cc94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc96:	2300      	movs	r3, #0
 800cc98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	885b      	ldrh	r3, [r3, #2]
 800cc9e:	0a1b      	lsrs	r3, r3, #8
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	3b01      	subs	r3, #1
 800cca4:	2b06      	cmp	r3, #6
 800cca6:	f200 8128 	bhi.w	800cefa <USBD_GetDescriptor+0x276>
 800ccaa:	a201      	add	r2, pc, #4	; (adr r2, 800ccb0 <USBD_GetDescriptor+0x2c>)
 800ccac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb0:	0800cccd 	.word	0x0800cccd
 800ccb4:	0800cce5 	.word	0x0800cce5
 800ccb8:	0800cd25 	.word	0x0800cd25
 800ccbc:	0800cefb 	.word	0x0800cefb
 800ccc0:	0800cefb 	.word	0x0800cefb
 800ccc4:	0800ce9b 	.word	0x0800ce9b
 800ccc8:	0800cec7 	.word	0x0800cec7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	7c12      	ldrb	r2, [r2, #16]
 800ccd8:	f107 0108 	add.w	r1, r7, #8
 800ccdc:	4610      	mov	r0, r2
 800ccde:	4798      	blx	r3
 800cce0:	60f8      	str	r0, [r7, #12]
    break;
 800cce2:	e112      	b.n	800cf0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	7c1b      	ldrb	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10d      	bne.n	800cd08 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf4:	f107 0208 	add.w	r2, r7, #8
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	4798      	blx	r3
 800ccfc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	3301      	adds	r3, #1
 800cd02:	2202      	movs	r2, #2
 800cd04:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cd06:	e100      	b.n	800cf0a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd10:	f107 0208 	add.w	r2, r7, #8
 800cd14:	4610      	mov	r0, r2
 800cd16:	4798      	blx	r3
 800cd18:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	2202      	movs	r2, #2
 800cd20:	701a      	strb	r2, [r3, #0]
    break;
 800cd22:	e0f2      	b.n	800cf0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	885b      	ldrh	r3, [r3, #2]
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b05      	cmp	r3, #5
 800cd2c:	f200 80ac 	bhi.w	800ce88 <USBD_GetDescriptor+0x204>
 800cd30:	a201      	add	r2, pc, #4	; (adr r2, 800cd38 <USBD_GetDescriptor+0xb4>)
 800cd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd36:	bf00      	nop
 800cd38:	0800cd51 	.word	0x0800cd51
 800cd3c:	0800cd85 	.word	0x0800cd85
 800cd40:	0800cdb9 	.word	0x0800cdb9
 800cd44:	0800cded 	.word	0x0800cded
 800cd48:	0800ce21 	.word	0x0800ce21
 800cd4c:	0800ce55 	.word	0x0800ce55
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00b      	beq.n	800cd74 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	7c12      	ldrb	r2, [r2, #16]
 800cd68:	f107 0108 	add.w	r1, r7, #8
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4798      	blx	r3
 800cd70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd72:	e091      	b.n	800ce98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 faaa 	bl	800d2d0 <USBD_CtlError>
        err++;
 800cd7c:	7afb      	ldrb	r3, [r7, #11]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	72fb      	strb	r3, [r7, #11]
      break;
 800cd82:	e089      	b.n	800ce98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00b      	beq.n	800cda8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	7c12      	ldrb	r2, [r2, #16]
 800cd9c:	f107 0108 	add.w	r1, r7, #8
 800cda0:	4610      	mov	r0, r2
 800cda2:	4798      	blx	r3
 800cda4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cda6:	e077      	b.n	800ce98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fa90 	bl	800d2d0 <USBD_CtlError>
        err++;
 800cdb0:	7afb      	ldrb	r3, [r7, #11]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	72fb      	strb	r3, [r7, #11]
      break;
 800cdb6:	e06f      	b.n	800ce98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00b      	beq.n	800cddc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	7c12      	ldrb	r2, [r2, #16]
 800cdd0:	f107 0108 	add.w	r1, r7, #8
 800cdd4:	4610      	mov	r0, r2
 800cdd6:	4798      	blx	r3
 800cdd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdda:	e05d      	b.n	800ce98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fa76 	bl	800d2d0 <USBD_CtlError>
        err++;
 800cde4:	7afb      	ldrb	r3, [r7, #11]
 800cde6:	3301      	adds	r3, #1
 800cde8:	72fb      	strb	r3, [r7, #11]
      break;
 800cdea:	e055      	b.n	800ce98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00b      	beq.n	800ce10 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	7c12      	ldrb	r2, [r2, #16]
 800ce04:	f107 0108 	add.w	r1, r7, #8
 800ce08:	4610      	mov	r0, r2
 800ce0a:	4798      	blx	r3
 800ce0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce0e:	e043      	b.n	800ce98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fa5c 	bl	800d2d0 <USBD_CtlError>
        err++;
 800ce18:	7afb      	ldrb	r3, [r7, #11]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	72fb      	strb	r3, [r7, #11]
      break;
 800ce1e:	e03b      	b.n	800ce98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce26:	695b      	ldr	r3, [r3, #20]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00b      	beq.n	800ce44 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce32:	695b      	ldr	r3, [r3, #20]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	7c12      	ldrb	r2, [r2, #16]
 800ce38:	f107 0108 	add.w	r1, r7, #8
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	4798      	blx	r3
 800ce40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce42:	e029      	b.n	800ce98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fa42 	bl	800d2d0 <USBD_CtlError>
        err++;
 800ce4c:	7afb      	ldrb	r3, [r7, #11]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	72fb      	strb	r3, [r7, #11]
      break;
 800ce52:	e021      	b.n	800ce98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00b      	beq.n	800ce78 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce66:	699b      	ldr	r3, [r3, #24]
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	7c12      	ldrb	r2, [r2, #16]
 800ce6c:	f107 0108 	add.w	r1, r7, #8
 800ce70:	4610      	mov	r0, r2
 800ce72:	4798      	blx	r3
 800ce74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce76:	e00f      	b.n	800ce98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fa28 	bl	800d2d0 <USBD_CtlError>
        err++;
 800ce80:	7afb      	ldrb	r3, [r7, #11]
 800ce82:	3301      	adds	r3, #1
 800ce84:	72fb      	strb	r3, [r7, #11]
      break;
 800ce86:	e007      	b.n	800ce98 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ce88:	6839      	ldr	r1, [r7, #0]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fa20 	bl	800d2d0 <USBD_CtlError>
      err++;
 800ce90:	7afb      	ldrb	r3, [r7, #11]
 800ce92:	3301      	adds	r3, #1
 800ce94:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ce96:	bf00      	nop
    }
    break;
 800ce98:	e037      	b.n	800cf0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	7c1b      	ldrb	r3, [r3, #16]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d109      	bne.n	800ceb6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceaa:	f107 0208 	add.w	r2, r7, #8
 800ceae:	4610      	mov	r0, r2
 800ceb0:	4798      	blx	r3
 800ceb2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ceb4:	e029      	b.n	800cf0a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ceb6:	6839      	ldr	r1, [r7, #0]
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 fa09 	bl	800d2d0 <USBD_CtlError>
      err++;
 800cebe:	7afb      	ldrb	r3, [r7, #11]
 800cec0:	3301      	adds	r3, #1
 800cec2:	72fb      	strb	r3, [r7, #11]
    break;
 800cec4:	e021      	b.n	800cf0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	7c1b      	ldrb	r3, [r3, #16]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d10d      	bne.n	800ceea <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ced4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced6:	f107 0208 	add.w	r2, r7, #8
 800ceda:	4610      	mov	r0, r2
 800cedc:	4798      	blx	r3
 800cede:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	3301      	adds	r3, #1
 800cee4:	2207      	movs	r2, #7
 800cee6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cee8:	e00f      	b.n	800cf0a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ceea:	6839      	ldr	r1, [r7, #0]
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f9ef 	bl	800d2d0 <USBD_CtlError>
      err++;
 800cef2:	7afb      	ldrb	r3, [r7, #11]
 800cef4:	3301      	adds	r3, #1
 800cef6:	72fb      	strb	r3, [r7, #11]
    break;
 800cef8:	e007      	b.n	800cf0a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800cefa:	6839      	ldr	r1, [r7, #0]
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 f9e7 	bl	800d2d0 <USBD_CtlError>
    err++;
 800cf02:	7afb      	ldrb	r3, [r7, #11]
 800cf04:	3301      	adds	r3, #1
 800cf06:	72fb      	strb	r3, [r7, #11]
    break;
 800cf08:	bf00      	nop
  }

  if (err != 0U)
 800cf0a:	7afb      	ldrb	r3, [r7, #11]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d11e      	bne.n	800cf4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	88db      	ldrh	r3, [r3, #6]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d016      	beq.n	800cf46 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800cf18:	893b      	ldrh	r3, [r7, #8]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00e      	beq.n	800cf3c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	88da      	ldrh	r2, [r3, #6]
 800cf22:	893b      	ldrh	r3, [r7, #8]
 800cf24:	4293      	cmp	r3, r2
 800cf26:	bf28      	it	cs
 800cf28:	4613      	movcs	r3, r2
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf2e:	893b      	ldrh	r3, [r7, #8]
 800cf30:	461a      	mov	r2, r3
 800cf32:	68f9      	ldr	r1, [r7, #12]
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 fa3c 	bl	800d3b2 <USBD_CtlSendData>
 800cf3a:	e009      	b.n	800cf50 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cf3c:	6839      	ldr	r1, [r7, #0]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 f9c6 	bl	800d2d0 <USBD_CtlError>
 800cf44:	e004      	b.n	800cf50 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fa8d 	bl	800d466 <USBD_CtlSendStatus>
 800cf4c:	e000      	b.n	800cf50 <USBD_GetDescriptor+0x2cc>
    return;
 800cf4e:	bf00      	nop
    }
  }
}
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop

0800cf58 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	889b      	ldrh	r3, [r3, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d130      	bne.n	800cfcc <USBD_SetAddress+0x74>
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	88db      	ldrh	r3, [r3, #6]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d12c      	bne.n	800cfcc <USBD_SetAddress+0x74>
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	885b      	ldrh	r3, [r3, #2]
 800cf76:	2b7f      	cmp	r3, #127	; 0x7f
 800cf78:	d828      	bhi.n	800cfcc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	885b      	ldrh	r3, [r3, #2]
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf8c:	2b03      	cmp	r3, #3
 800cf8e:	d104      	bne.n	800cf9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f99c 	bl	800d2d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf98:	e01c      	b.n	800cfd4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	7bfa      	ldrb	r2, [r7, #15]
 800cf9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f002 fad4 	bl	800f554 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 fa5a 	bl	800d466 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d004      	beq.n	800cfc2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2202      	movs	r2, #2
 800cfbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfc0:	e008      	b.n	800cfd4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfca:	e003      	b.n	800cfd4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f97e 	bl	800d2d0 <USBD_CtlError>
  }
}
 800cfd4:	bf00      	nop
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	885b      	ldrh	r3, [r3, #2]
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	4b4b      	ldr	r3, [pc, #300]	; (800d120 <USBD_SetConfig+0x144>)
 800cff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cff4:	4b4a      	ldr	r3, [pc, #296]	; (800d120 <USBD_SetConfig+0x144>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d905      	bls.n	800d008 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cffc:	6839      	ldr	r1, [r7, #0]
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f966 	bl	800d2d0 <USBD_CtlError>
    return USBD_FAIL;
 800d004:	2303      	movs	r3, #3
 800d006:	e087      	b.n	800d118 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d00e:	2b02      	cmp	r3, #2
 800d010:	d002      	beq.n	800d018 <USBD_SetConfig+0x3c>
 800d012:	2b03      	cmp	r3, #3
 800d014:	d025      	beq.n	800d062 <USBD_SetConfig+0x86>
 800d016:	e071      	b.n	800d0fc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800d018:	4b41      	ldr	r3, [pc, #260]	; (800d120 <USBD_SetConfig+0x144>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d01c      	beq.n	800d05a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800d020:	4b3f      	ldr	r3, [pc, #252]	; (800d120 <USBD_SetConfig+0x144>)
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	461a      	mov	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d02a:	4b3d      	ldr	r3, [pc, #244]	; (800d120 <USBD_SetConfig+0x144>)
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	4619      	mov	r1, r3
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff f9a7 	bl	800c384 <USBD_SetClassConfig>
 800d036:	4603      	mov	r3, r0
 800d038:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800d03a:	7bfb      	ldrb	r3, [r7, #15]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d004      	beq.n	800d04a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 f944 	bl	800d2d0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d048:	e065      	b.n	800d116 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fa0b 	bl	800d466 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2203      	movs	r2, #3
 800d054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800d058:	e05d      	b.n	800d116 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fa03 	bl	800d466 <USBD_CtlSendStatus>
    break;
 800d060:	e059      	b.n	800d116 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800d062:	4b2f      	ldr	r3, [pc, #188]	; (800d120 <USBD_SetConfig+0x144>)
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d112      	bne.n	800d090 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2202      	movs	r2, #2
 800d06e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800d072:	4b2b      	ldr	r3, [pc, #172]	; (800d120 <USBD_SetConfig+0x144>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d07c:	4b28      	ldr	r3, [pc, #160]	; (800d120 <USBD_SetConfig+0x144>)
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7ff f99a 	bl	800c3bc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f9ec 	bl	800d466 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d08e:	e042      	b.n	800d116 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800d090:	4b23      	ldr	r3, [pc, #140]	; (800d120 <USBD_SetConfig+0x144>)
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	461a      	mov	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d02a      	beq.n	800d0f4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7ff f988 	bl	800c3bc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800d0ac:	4b1c      	ldr	r3, [pc, #112]	; (800d120 <USBD_SetConfig+0x144>)
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0b6:	4b1a      	ldr	r3, [pc, #104]	; (800d120 <USBD_SetConfig+0x144>)
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7ff f961 	bl	800c384 <USBD_SetClassConfig>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800d0c6:	7bfb      	ldrb	r3, [r7, #15]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00f      	beq.n	800d0ec <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f8fe 	bl	800d2d0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	4619      	mov	r1, r3
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f7ff f96d 	bl	800c3bc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800d0ea:	e014      	b.n	800d116 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f9ba 	bl	800d466 <USBD_CtlSendStatus>
    break;
 800d0f2:	e010      	b.n	800d116 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f9b6 	bl	800d466 <USBD_CtlSendStatus>
    break;
 800d0fa:	e00c      	b.n	800d116 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f8e6 	bl	800d2d0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d104:	4b06      	ldr	r3, [pc, #24]	; (800d120 <USBD_SetConfig+0x144>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	4619      	mov	r1, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff f956 	bl	800c3bc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800d110:	2303      	movs	r3, #3
 800d112:	73fb      	strb	r3, [r7, #15]
    break;
 800d114:	bf00      	nop
  }

  return ret;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	20000218 	.word	0x20000218

0800d124 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	88db      	ldrh	r3, [r3, #6]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d004      	beq.n	800d140 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d136:	6839      	ldr	r1, [r7, #0]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f8c9 	bl	800d2d0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800d13e:	e021      	b.n	800d184 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d146:	2b01      	cmp	r3, #1
 800d148:	db17      	blt.n	800d17a <USBD_GetConfig+0x56>
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	dd02      	ble.n	800d154 <USBD_GetConfig+0x30>
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d00b      	beq.n	800d16a <USBD_GetConfig+0x46>
 800d152:	e012      	b.n	800d17a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	3308      	adds	r3, #8
 800d15e:	2201      	movs	r2, #1
 800d160:	4619      	mov	r1, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f925 	bl	800d3b2 <USBD_CtlSendData>
      break;
 800d168:	e00c      	b.n	800d184 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	3304      	adds	r3, #4
 800d16e:	2201      	movs	r2, #1
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f91d 	bl	800d3b2 <USBD_CtlSendData>
      break;
 800d178:	e004      	b.n	800d184 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f8a7 	bl	800d2d0 <USBD_CtlError>
      break;
 800d182:	bf00      	nop
}
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d19c:	3b01      	subs	r3, #1
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d81e      	bhi.n	800d1e0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	88db      	ldrh	r3, [r3, #6]
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	d004      	beq.n	800d1b4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d1aa:	6839      	ldr	r1, [r7, #0]
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 f88f 	bl	800d2d0 <USBD_CtlError>
      break;
 800d1b2:	e01a      	b.n	800d1ea <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d005      	beq.n	800d1d0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	f043 0202 	orr.w	r2, r3, #2
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	330c      	adds	r3, #12
 800d1d4:	2202      	movs	r2, #2
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f8ea 	bl	800d3b2 <USBD_CtlSendData>
    break;
 800d1de:	e004      	b.n	800d1ea <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 f874 	bl	800d2d0 <USBD_CtlError>
    break;
 800d1e8:	bf00      	nop
  }
}
 800d1ea:	bf00      	nop
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	885b      	ldrh	r3, [r3, #2]
 800d200:	2b01      	cmp	r3, #1
 800d202:	d106      	bne.n	800d212 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f92a 	bl	800d466 <USBD_CtlSendStatus>
  }
}
 800d212:	bf00      	nop
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b082      	sub	sp, #8
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
 800d222:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d22a:	3b01      	subs	r3, #1
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	d80b      	bhi.n	800d248 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	885b      	ldrh	r3, [r3, #2]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d10c      	bne.n	800d252 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f910 	bl	800d466 <USBD_CtlSendStatus>
      }
      break;
 800d246:	e004      	b.n	800d252 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 f840 	bl	800d2d0 <USBD_CtlError>
      break;
 800d250:	e000      	b.n	800d254 <USBD_ClrFeature+0x3a>
      break;
 800d252:	bf00      	nop
  }
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	781a      	ldrb	r2, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	3301      	adds	r3, #1
 800d276:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	781a      	ldrb	r2, [r3, #0]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3301      	adds	r3, #1
 800d284:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f7ff fad3 	bl	800c832 <SWAPBYTE>
 800d28c:	4603      	mov	r3, r0
 800d28e:	461a      	mov	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3301      	adds	r3, #1
 800d298:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	3301      	adds	r3, #1
 800d29e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f7ff fac6 	bl	800c832 <SWAPBYTE>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f7ff fab9 	bl	800c832 <SWAPBYTE>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	80da      	strh	r2, [r3, #6]
}
 800d2c8:	bf00      	nop
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2da:	2180      	movs	r1, #128	; 0x80
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f002 f8cf 	bl	800f480 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f002 f8cb 	bl	800f480 <USBD_LL_StallEP>
}
 800d2ea:	bf00      	nop
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b086      	sub	sp, #24
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	60f8      	str	r0, [r7, #12]
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d2fe:	2300      	movs	r3, #0
 800d300:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d036      	beq.n	800d376 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d30c:	6938      	ldr	r0, [r7, #16]
 800d30e:	f000 f836 	bl	800d37e <USBD_GetLen>
 800d312:	4603      	mov	r3, r0
 800d314:	3301      	adds	r3, #1
 800d316:	b29b      	uxth	r3, r3
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d320:	7dfb      	ldrb	r3, [r7, #23]
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	4413      	add	r3, r2
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	7812      	ldrb	r2, [r2, #0]
 800d32a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d32c:	7dfb      	ldrb	r3, [r7, #23]
 800d32e:	3301      	adds	r3, #1
 800d330:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	4413      	add	r3, r2
 800d338:	2203      	movs	r2, #3
 800d33a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d33c:	7dfb      	ldrb	r3, [r7, #23]
 800d33e:	3301      	adds	r3, #1
 800d340:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d342:	e013      	b.n	800d36c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d344:	7dfb      	ldrb	r3, [r7, #23]
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	4413      	add	r3, r2
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	7812      	ldrb	r2, [r2, #0]
 800d34e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	3301      	adds	r3, #1
 800d354:	613b      	str	r3, [r7, #16]
    idx++;
 800d356:	7dfb      	ldrb	r3, [r7, #23]
 800d358:	3301      	adds	r3, #1
 800d35a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d35c:	7dfb      	ldrb	r3, [r7, #23]
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	4413      	add	r3, r2
 800d362:	2200      	movs	r2, #0
 800d364:	701a      	strb	r2, [r3, #0]
    idx++;
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	3301      	adds	r3, #1
 800d36a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1e7      	bne.n	800d344 <USBD_GetString+0x52>
 800d374:	e000      	b.n	800d378 <USBD_GetString+0x86>
    return;
 800d376:	bf00      	nop
  }
}
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d37e:	b480      	push	{r7}
 800d380:	b085      	sub	sp, #20
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d386:	2300      	movs	r3, #0
 800d388:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d38e:	e005      	b.n	800d39c <USBD_GetLen+0x1e>
  {
    len++;
 800d390:	7bfb      	ldrb	r3, [r7, #15]
 800d392:	3301      	adds	r3, #1
 800d394:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	3301      	adds	r3, #1
 800d39a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1f5      	bne.n	800d390 <USBD_GetLen+0x12>
  }

  return len;
 800d3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b084      	sub	sp, #16
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	60f8      	str	r0, [r7, #12]
 800d3ba:	60b9      	str	r1, [r7, #8]
 800d3bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2202      	movs	r2, #2
 800d3c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f002 f8da 	bl	800f592 <USBD_LL_Transmit>

  return USBD_OK;
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f002 f8c9 	bl	800f592 <USBD_LL_Transmit>

  return USBD_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3710      	adds	r7, #16
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b084      	sub	sp, #16
 800d40e:	af00      	add	r7, sp, #0
 800d410:	60f8      	str	r0, [r7, #12]
 800d412:	60b9      	str	r1, [r7, #8]
 800d414:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2203      	movs	r2, #3
 800d41a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	2100      	movs	r1, #0
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f002 f8cd 	bl	800f5d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	2100      	movs	r1, #0
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f002 f8bc 	bl	800f5d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b082      	sub	sp, #8
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2204      	movs	r2, #4
 800d472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d476:	2300      	movs	r3, #0
 800d478:	2200      	movs	r2, #0
 800d47a:	2100      	movs	r1, #0
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f002 f888 	bl	800f592 <USBD_LL_Transmit>

  return USBD_OK;
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2205      	movs	r2, #5
 800d498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d49c:	2300      	movs	r3, #0
 800d49e:	2200      	movs	r2, #0
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f002 f896 	bl	800f5d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
	...

0800d4b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d4ca:	4b1f      	ldr	r3, [pc, #124]	; (800d548 <FATFS_LinkDriverEx+0x94>)
 800d4cc:	7a5b      	ldrb	r3, [r3, #9]
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d131      	bne.n	800d538 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d4d4:	4b1c      	ldr	r3, [pc, #112]	; (800d548 <FATFS_LinkDriverEx+0x94>)
 800d4d6:	7a5b      	ldrb	r3, [r3, #9]
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	461a      	mov	r2, r3
 800d4dc:	4b1a      	ldr	r3, [pc, #104]	; (800d548 <FATFS_LinkDriverEx+0x94>)
 800d4de:	2100      	movs	r1, #0
 800d4e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d4e2:	4b19      	ldr	r3, [pc, #100]	; (800d548 <FATFS_LinkDriverEx+0x94>)
 800d4e4:	7a5b      	ldrb	r3, [r3, #9]
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	4a17      	ldr	r2, [pc, #92]	; (800d548 <FATFS_LinkDriverEx+0x94>)
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	4413      	add	r3, r2
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4f2:	4b15      	ldr	r3, [pc, #84]	; (800d548 <FATFS_LinkDriverEx+0x94>)
 800d4f4:	7a5b      	ldrb	r3, [r3, #9]
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	4b13      	ldr	r3, [pc, #76]	; (800d548 <FATFS_LinkDriverEx+0x94>)
 800d4fc:	4413      	add	r3, r2
 800d4fe:	79fa      	ldrb	r2, [r7, #7]
 800d500:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d502:	4b11      	ldr	r3, [pc, #68]	; (800d548 <FATFS_LinkDriverEx+0x94>)
 800d504:	7a5b      	ldrb	r3, [r3, #9]
 800d506:	b2db      	uxtb	r3, r3
 800d508:	1c5a      	adds	r2, r3, #1
 800d50a:	b2d1      	uxtb	r1, r2
 800d50c:	4a0e      	ldr	r2, [pc, #56]	; (800d548 <FATFS_LinkDriverEx+0x94>)
 800d50e:	7251      	strb	r1, [r2, #9]
 800d510:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d512:	7dbb      	ldrb	r3, [r7, #22]
 800d514:	3330      	adds	r3, #48	; 0x30
 800d516:	b2da      	uxtb	r2, r3
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	3301      	adds	r3, #1
 800d520:	223a      	movs	r2, #58	; 0x3a
 800d522:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	3302      	adds	r3, #2
 800d528:	222f      	movs	r2, #47	; 0x2f
 800d52a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	3303      	adds	r3, #3
 800d530:	2200      	movs	r2, #0
 800d532:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d538:	7dfb      	ldrb	r3, [r7, #23]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	371c      	adds	r7, #28
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	2000021c 	.word	0x2000021c

0800d54c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d556:	2200      	movs	r2, #0
 800d558:	6839      	ldr	r1, [r7, #0]
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7ff ffaa 	bl	800d4b4 <FATFS_LinkDriverEx>
 800d560:	4603      	mov	r3, r0
}
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
	...

0800d56c <AudioPlay_Play>:
 */
#include "audioplay.h"
extern I2S_HandleTypeDef hi2s2;

uint8_t AudioPlay_Play(uint16_t *pBuffer, uint32_t Size)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	uint8_t ret=AUDIO_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	73fb      	strb	r3, [r7, #15]

		if(HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pBuffer,
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d580:	d203      	bcs.n	800d58a <AudioPlay_Play+0x1e>
									DMA_MAX(Size/AUDIODATA_SIZE))!=HAL_OK)
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	085b      	lsrs	r3, r3, #1
		if(HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pBuffer,
 800d586:	b29b      	uxth	r3, r3
 800d588:	e001      	b.n	800d58e <AudioPlay_Play+0x22>
 800d58a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d58e:	461a      	mov	r2, r3
 800d590:	6879      	ldr	r1, [r7, #4]
 800d592:	4806      	ldr	r0, [pc, #24]	; (800d5ac <AudioPlay_Play+0x40>)
 800d594:	f7f7 f8fa 	bl	800478c <HAL_I2S_Transmit_DMA>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <AudioPlay_Play+0x36>
		{
			ret=AUDIO_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	73fb      	strb	r3, [r7, #15]
		}
	return ret;
 800d5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	20001444 	.word	0x20001444

0800d5b0 <AudioPlay_Stop>:
uint8_t AudioPlay_Stop()
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
	uint8_t ret=AUDIO_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	71fb      	strb	r3, [r7, #7]

		if(HAL_I2S_DMAStop(&hi2s2)!=HAL_OK)
 800d5ba:	4806      	ldr	r0, [pc, #24]	; (800d5d4 <AudioPlay_Stop+0x24>)
 800d5bc:	f7f7 f98e 	bl	80048dc <HAL_I2S_DMAStop>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <AudioPlay_Stop+0x1a>
		{
			ret=AUDIO_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	71fb      	strb	r3, [r7, #7]
		}

	return ret;
 800d5ca:	79fb      	ldrb	r3, [r7, #7]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	20001444 	.word	0x20001444

0800d5d8 <AudioPlay_ChangeBuffer>:

void AudioPlay_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	807b      	strh	r3, [r7, #2]
		if (val>3 || val<-3)
		{
			val=val;
		}
	}*/
	HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pData,Size);
 800d5e4:	887b      	ldrh	r3, [r7, #2]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	6879      	ldr	r1, [r7, #4]
 800d5ea:	4803      	ldr	r0, [pc, #12]	; (800d5f8 <AudioPlay_ChangeBuffer+0x20>)
 800d5ec:	f7f7 f8ce 	bl	800478c <HAL_I2S_Transmit_DMA>
}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	20001444 	.word	0x20001444

0800d5fc <AudioPlay_HalfTransfer_CallBack>:

void AudioPlay_HalfTransfer_CallBack(void)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
	HalfTransfer_CallBack_FS();
 800d600:	f001 fd42 	bl	800f088 <HalfTransfer_CallBack_FS>
}
 800d604:	bf00      	nop
 800d606:	bd80      	pop	{r7, pc}

0800d608 <AudioPlay_TransferComplete_CallBack>:
//------------------------------------------------------
void AudioPlay_TransferComplete_CallBack(void)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	af00      	add	r7, sp, #0
	TransferComplete_CallBack_FS();
 800d60c:	f001 fd32 	bl	800f074 <TransferComplete_CallBack_FS>
}
 800d610:	bf00      	nop
 800d612:	bd80      	pop	{r7, pc}

0800d614 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d61e:	f000 f879 	bl	800d714 <BSP_SD_IsDetected>
 800d622:	4603      	mov	r3, r0
 800d624:	2b01      	cmp	r3, #1
 800d626:	d001      	beq.n	800d62c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	e012      	b.n	800d652 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d62c:	480b      	ldr	r0, [pc, #44]	; (800d65c <BSP_SD_Init+0x48>)
 800d62e:	f7f9 fe43 	bl	80072b8 <HAL_SD_Init>
 800d632:	4603      	mov	r3, r0
 800d634:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d636:	79fb      	ldrb	r3, [r7, #7]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d109      	bne.n	800d650 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d63c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d640:	4806      	ldr	r0, [pc, #24]	; (800d65c <BSP_SD_Init+0x48>)
 800d642:	f7fa fc35 	bl	8007eb0 <HAL_SD_ConfigWideBusOperation>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d001      	beq.n	800d650 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d650:	79fb      	ldrb	r3, [r7, #7]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20000f68 	.word	0x20000f68

0800d660 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b088      	sub	sp, #32
 800d664:	af02      	add	r7, sp, #8
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
 800d66c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	68ba      	ldr	r2, [r7, #8]
 800d67a:	68f9      	ldr	r1, [r7, #12]
 800d67c:	4806      	ldr	r0, [pc, #24]	; (800d698 <BSP_SD_ReadBlocks+0x38>)
 800d67e:	f7f9 feab 	bl	80073d8 <HAL_SD_ReadBlocks>
 800d682:	4603      	mov	r3, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d001      	beq.n	800d68c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d688:	2301      	movs	r3, #1
 800d68a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800d68c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20000f68 	.word	0x20000f68

0800d69c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b088      	sub	sp, #32
 800d6a0:	af02      	add	r7, sp, #8
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	9300      	str	r3, [sp, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	68f9      	ldr	r1, [r7, #12]
 800d6b8:	4806      	ldr	r0, [pc, #24]	; (800d6d4 <BSP_SD_WriteBlocks+0x38>)
 800d6ba:	f7fa f887 	bl	80077cc <HAL_SD_WriteBlocks>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800d6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3718      	adds	r7, #24
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	20000f68 	.word	0x20000f68

0800d6d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d6dc:	4805      	ldr	r0, [pc, #20]	; (800d6f4 <BSP_SD_GetCardState+0x1c>)
 800d6de:	f7fa fc63 	bl	8007fa8 <HAL_SD_GetCardState>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b04      	cmp	r3, #4
 800d6e6:	bf14      	ite	ne
 800d6e8:	2301      	movne	r3, #1
 800d6ea:	2300      	moveq	r3, #0
 800d6ec:	b2db      	uxtb	r3, r3
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	20000f68 	.word	0x20000f68

0800d6f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d700:	6879      	ldr	r1, [r7, #4]
 800d702:	4803      	ldr	r0, [pc, #12]	; (800d710 <BSP_SD_GetCardInfo+0x18>)
 800d704:	f7fa fba8 	bl	8007e58 <HAL_SD_GetCardInfo>
}
 800d708:	bf00      	nop
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	20000f68 	.word	0x20000f68

0800d714 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d71a:	2301      	movs	r3, #1
 800d71c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800d71e:	f000 f81d 	bl	800d75c <BSP_PlatformIsDetected>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d728:	2300      	movs	r3, #0
 800d72a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d72c:	79fb      	ldrb	r3, [r7, #7]
 800d72e:	b2db      	uxtb	r3, r3
}
 800d730:	4618      	mov	r0, r3
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d73c:	4904      	ldr	r1, [pc, #16]	; (800d750 <MX_FATFS_Init+0x18>)
 800d73e:	4805      	ldr	r0, [pc, #20]	; (800d754 <MX_FATFS_Init+0x1c>)
 800d740:	f7ff ff04 	bl	800d54c <FATFS_LinkDriver>
 800d744:	4603      	mov	r3, r0
 800d746:	461a      	mov	r2, r3
 800d748:	4b03      	ldr	r3, [pc, #12]	; (800d758 <MX_FATFS_Init+0x20>)
 800d74a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d74c:	bf00      	nop
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	2000082c 	.word	0x2000082c
 800d754:	08011084 	.word	0x08011084
 800d758:	20000828 	.word	0x20000828

0800d75c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d762:	2301      	movs	r3, #1
 800d764:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d766:	2180      	movs	r1, #128	; 0x80
 800d768:	4806      	ldr	r0, [pc, #24]	; (800d784 <BSP_PlatformIsDetected+0x28>)
 800d76a:	f7f4 faef 	bl	8001d4c <HAL_GPIO_ReadPin>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d001      	beq.n	800d778 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d774:	2300      	movs	r3, #0
 800d776:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800d778:	79fb      	ldrb	r3, [r7, #7]
}  
 800d77a:	4618      	mov	r0, r3
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	40020800 	.word	0x40020800

0800d788 <hid_send_stop>:
 0x09, 0xb0,                    //   USAGE (Play)
 0x09, 0xe2,                    //   USAGE (Mute)
 0x09, 0xe9,                    //   USAGE (Volume Up)
 0x09, 0xea,                    //   USAGE (Volume Down)
 */
static void hid_send_stop() {
 800d788:	b580      	push	{r7, lr}
 800d78a:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0;
 800d78c:	4b10      	ldr	r3, [pc, #64]	; (800d7d0 <hid_send_stop+0x48>)
 800d78e:	2200      	movs	r2, #0
 800d790:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800d792:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <hid_send_stop+0x48>)
 800d794:	2200      	movs	r2, #0
 800d796:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 22;
 800d798:	4b0d      	ldr	r3, [pc, #52]	; (800d7d0 <hid_send_stop+0x48>)
 800d79a:	2216      	movs	r2, #22
 800d79c:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[1]=0x00;
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800d79e:	2208      	movs	r2, #8
 800d7a0:	490b      	ldr	r1, [pc, #44]	; (800d7d0 <hid_send_stop+0x48>)
 800d7a2:	480c      	ldr	r0, [pc, #48]	; (800d7d4 <hid_send_stop+0x4c>)
 800d7a4:	f7fe fd48 	bl	800c238 <USBD_HID_SendReport>
	HAL_Delay(20);
 800d7a8:	2014      	movs	r0, #20
 800d7aa:	f7f3 fc0b 	bl	8000fc4 <HAL_Delay>

	HID_Buffer[0] = 0;
 800d7ae:	4b08      	ldr	r3, [pc, #32]	; (800d7d0 <hid_send_stop+0x48>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800d7b4:	4b06      	ldr	r3, [pc, #24]	; (800d7d0 <hid_send_stop+0x48>)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 0;
 800d7ba:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <hid_send_stop+0x48>)
 800d7bc:	2200      	movs	r2, #0
 800d7be:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800d7c0:	2208      	movs	r2, #8
 800d7c2:	4903      	ldr	r1, [pc, #12]	; (800d7d0 <hid_send_stop+0x48>)
 800d7c4:	4803      	ldr	r0, [pc, #12]	; (800d7d4 <hid_send_stop+0x4c>)
 800d7c6:	f7fe fd37 	bl	800c238 <USBD_HID_SendReport>
}
 800d7ca:	bf00      	nop
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20000d2c 	.word	0x20000d2c
 800d7d4:	20001494 	.word	0x20001494

0800d7d8 <hid_send_start>:
static void hid_send_start() {
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0;
 800d7dc:	4b10      	ldr	r3, [pc, #64]	; (800d820 <hid_send_start+0x48>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800d7e2:	4b0f      	ldr	r3, [pc, #60]	; (800d820 <hid_send_start+0x48>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 19;
 800d7e8:	4b0d      	ldr	r3, [pc, #52]	; (800d820 <hid_send_start+0x48>)
 800d7ea:	2213      	movs	r2, #19
 800d7ec:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800d7ee:	2208      	movs	r2, #8
 800d7f0:	490b      	ldr	r1, [pc, #44]	; (800d820 <hid_send_start+0x48>)
 800d7f2:	480c      	ldr	r0, [pc, #48]	; (800d824 <hid_send_start+0x4c>)
 800d7f4:	f7fe fd20 	bl	800c238 <USBD_HID_SendReport>
	HAL_Delay(20);
 800d7f8:	2014      	movs	r0, #20
 800d7fa:	f7f3 fbe3 	bl	8000fc4 <HAL_Delay>

	HID_Buffer[0] = 0;
 800d7fe:	4b08      	ldr	r3, [pc, #32]	; (800d820 <hid_send_start+0x48>)
 800d800:	2200      	movs	r2, #0
 800d802:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1] = 0;
 800d804:	4b06      	ldr	r3, [pc, #24]	; (800d820 <hid_send_start+0x48>)
 800d806:	2200      	movs	r2, #0
 800d808:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2] = 0;
 800d80a:	4b05      	ldr	r3, [pc, #20]	; (800d820 <hid_send_start+0x48>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800d810:	2208      	movs	r2, #8
 800d812:	4903      	ldr	r1, [pc, #12]	; (800d820 <hid_send_start+0x48>)
 800d814:	4803      	ldr	r0, [pc, #12]	; (800d824 <hid_send_start+0x4c>)
 800d816:	f7fe fd0f 	bl	800c238 <USBD_HID_SendReport>
}
 800d81a:	bf00      	nop
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	20000d2c 	.word	0x20000d2c
 800d824:	20001494 	.word	0x20001494

0800d828 <fMin>:


float   *fMin       (float *a, float *b)
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
    return *a <= *b?  a : b;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	ed93 7a00 	vldr	s14, [r3]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	edd3 7a00 	vldr	s15, [r3]
 800d83e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d846:	d801      	bhi.n	800d84c <fMin+0x24>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	e000      	b.n	800d84e <fMin+0x26>
 800d84c:	683b      	ldr	r3, [r7, #0]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <fMax>:

float   *fMax       (float *a, float *b)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b083      	sub	sp, #12
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	6039      	str	r1, [r7, #0]
    return *a >= *b? a : b;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	ed93 7a00 	vldr	s14, [r3]
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	edd3 7a00 	vldr	s15, [r3]
 800d870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d878:	db01      	blt.n	800d87e <fMax+0x24>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	e000      	b.n	800d880 <fMax+0x26>
 800d87e:	683b      	ldr	r3, [r7, #0]
}
 800d880:	4618      	mov	r0, r3
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	0000      	movs	r0, r0
	...

0800d890 <HSLtoRGB>:
        hsl->H *= 60;
    }
}

void    HSLtoRGB    (pHSL hsl, pRGB rgb)
{
 800d890:	b590      	push	{r4, r7, lr}
 800d892:	ed2d 8b02 	vpush	{d8}
 800d896:	b08d      	sub	sp, #52	; 0x34
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
// See https://en.wikipedia.org/wiki/HSL_and_HSV
    float a, k, fm1, fp1, f1, f2, *f3;
// L, V, S: [0.0 to 1.0]
// rgb->R, rgb->G, rgb->B: [0 to 255]
    fm1 = -1;
 800d89e:	4ba0      	ldr	r3, [pc, #640]	; (800db20 <HSLtoRGB+0x290>)
 800d8a0:	623b      	str	r3, [r7, #32]
    fp1 = 1;
 800d8a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d8a6:	61fb      	str	r3, [r7, #28]
    f1 = 1-hsl->L;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	edd3 7a02 	vldr	s15, [r3, #8]
 800d8ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8b6:	edc7 7a06 	vstr	s15, [r7, #24]
    a = hsl->S * *fMin(&hsl->L, &f1);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	ed93 8a01 	vldr	s16, [r3, #4]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	f107 0218 	add.w	r2, r7, #24
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7ff ffac 	bl	800d828 <fMin>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	edd3 7a00 	vldr	s15, [r3]
 800d8d6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d8da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    k = fmod(0 + hsl->H/30, 12);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	ed93 7a00 	vldr	s14, [r3]
 800d8e4:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800d8e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d8ec:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800db24 <HSLtoRGB+0x294>
 800d8f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8f4:	ee17 0a90 	vmov	r0, s15
 800d8f8:	f7f2 fdd2 	bl	80004a0 <__aeabi_f2d>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	460c      	mov	r4, r1
 800d900:	ed9f 1b85 	vldr	d1, [pc, #532]	; 800db18 <HSLtoRGB+0x288>
 800d904:	ec44 3b10 	vmov	d0, r3, r4
 800d908:	f002 fa46 	bl	800fd98 <fmod>
 800d90c:	ec54 3b10 	vmov	r3, r4, d0
 800d910:	4618      	mov	r0, r3
 800d912:	4621      	mov	r1, r4
 800d914:	f7f3 f914 	bl	8000b40 <__aeabi_d2f>
 800d918:	4603      	mov	r3, r0
 800d91a:	62bb      	str	r3, [r7, #40]	; 0x28
    f1 = k - 3;
 800d91c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d920:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d928:	edc7 7a06 	vstr	s15, [r7, #24]
    f2 = 9 - k;
 800d92c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800d930:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d934:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d938:	edc7 7a05 	vstr	s15, [r7, #20]
    f3 = fMin(fMin(&f1, &f2), &fp1) ;
 800d93c:	f107 0214 	add.w	r2, r7, #20
 800d940:	f107 0318 	add.w	r3, r7, #24
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f7ff ff6e 	bl	800d828 <fMin>
 800d94c:	4602      	mov	r2, r0
 800d94e:	f107 031c 	add.w	r3, r7, #28
 800d952:	4619      	mov	r1, r3
 800d954:	4610      	mov	r0, r2
 800d956:	f7ff ff67 	bl	800d828 <fMin>
 800d95a:	6278      	str	r0, [r7, #36]	; 0x24
    rgb->R = (BYTE) (255 * (hsl->L - a * *fMax(f3, &fm1)));
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	ed93 8a02 	vldr	s16, [r3, #8]
 800d962:	f107 0320 	add.w	r3, r7, #32
 800d966:	4619      	mov	r1, r3
 800d968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d96a:	f7ff ff76 	bl	800d85a <fMax>
 800d96e:	4603      	mov	r3, r0
 800d970:	ed93 7a00 	vldr	s14, [r3]
 800d974:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d97c:	ee78 7a67 	vsub.f32	s15, s16, s15
 800d980:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800db28 <HSLtoRGB+0x298>
 800d984:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d98c:	edc7 7a01 	vstr	s15, [r7, #4]
 800d990:	793b      	ldrb	r3, [r7, #4]
 800d992:	b2da      	uxtb	r2, r3
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	701a      	strb	r2, [r3, #0]

    k = fmod(8 + hsl->H/30, 12);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	ed93 7a00 	vldr	s14, [r3]
 800d99e:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800d9a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d9a6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800d9aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9ae:	ee17 0a90 	vmov	r0, s15
 800d9b2:	f7f2 fd75 	bl	80004a0 <__aeabi_f2d>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	460c      	mov	r4, r1
 800d9ba:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800db18 <HSLtoRGB+0x288>
 800d9be:	ec44 3b10 	vmov	d0, r3, r4
 800d9c2:	f002 f9e9 	bl	800fd98 <fmod>
 800d9c6:	ec54 3b10 	vmov	r3, r4, d0
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	4621      	mov	r1, r4
 800d9ce:	f7f3 f8b7 	bl	8000b40 <__aeabi_d2f>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	62bb      	str	r3, [r7, #40]	; 0x28
    f1 = k - 3;
 800d9d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d9de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9e2:	edc7 7a06 	vstr	s15, [r7, #24]
    f2 = 9 - k;
 800d9e6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800d9ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9f2:	edc7 7a05 	vstr	s15, [r7, #20]
    f3 = fMin(fMin(&f1, &f2), &fp1) ;
 800d9f6:	f107 0214 	add.w	r2, r7, #20
 800d9fa:	f107 0318 	add.w	r3, r7, #24
 800d9fe:	4611      	mov	r1, r2
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff ff11 	bl	800d828 <fMin>
 800da06:	4602      	mov	r2, r0
 800da08:	f107 031c 	add.w	r3, r7, #28
 800da0c:	4619      	mov	r1, r3
 800da0e:	4610      	mov	r0, r2
 800da10:	f7ff ff0a 	bl	800d828 <fMin>
 800da14:	6278      	str	r0, [r7, #36]	; 0x24
    rgb->G = (BYTE) (255 * (hsl->L - a * *fMax(f3, &fm1)));
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	ed93 8a02 	vldr	s16, [r3, #8]
 800da1c:	f107 0320 	add.w	r3, r7, #32
 800da20:	4619      	mov	r1, r3
 800da22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da24:	f7ff ff19 	bl	800d85a <fMax>
 800da28:	4603      	mov	r3, r0
 800da2a:	ed93 7a00 	vldr	s14, [r3]
 800da2e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800da32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da36:	ee78 7a67 	vsub.f32	s15, s16, s15
 800da3a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800db28 <HSLtoRGB+0x298>
 800da3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da46:	edc7 7a01 	vstr	s15, [r7, #4]
 800da4a:	793b      	ldrb	r3, [r7, #4]
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	705a      	strb	r2, [r3, #1]

    k = fmod(4 + hsl->H/30, 12);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	ed93 7a00 	vldr	s14, [r3]
 800da58:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800da5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da60:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800da64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da68:	ee17 0a90 	vmov	r0, s15
 800da6c:	f7f2 fd18 	bl	80004a0 <__aeabi_f2d>
 800da70:	4603      	mov	r3, r0
 800da72:	460c      	mov	r4, r1
 800da74:	ed9f 1b28 	vldr	d1, [pc, #160]	; 800db18 <HSLtoRGB+0x288>
 800da78:	ec44 3b10 	vmov	d0, r3, r4
 800da7c:	f002 f98c 	bl	800fd98 <fmod>
 800da80:	ec54 3b10 	vmov	r3, r4, d0
 800da84:	4618      	mov	r0, r3
 800da86:	4621      	mov	r1, r4
 800da88:	f7f3 f85a 	bl	8000b40 <__aeabi_d2f>
 800da8c:	4603      	mov	r3, r0
 800da8e:	62bb      	str	r3, [r7, #40]	; 0x28
    f1 = k - 3;
 800da90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da94:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800da98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da9c:	edc7 7a06 	vstr	s15, [r7, #24]
    f2 = 9 - k;
 800daa0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800daa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daac:	edc7 7a05 	vstr	s15, [r7, #20]
    f3 = fMin(fMin(&f1, &f2), &fp1) ;
 800dab0:	f107 0214 	add.w	r2, r7, #20
 800dab4:	f107 0318 	add.w	r3, r7, #24
 800dab8:	4611      	mov	r1, r2
 800daba:	4618      	mov	r0, r3
 800dabc:	f7ff feb4 	bl	800d828 <fMin>
 800dac0:	4602      	mov	r2, r0
 800dac2:	f107 031c 	add.w	r3, r7, #28
 800dac6:	4619      	mov	r1, r3
 800dac8:	4610      	mov	r0, r2
 800daca:	f7ff fead 	bl	800d828 <fMin>
 800dace:	6278      	str	r0, [r7, #36]	; 0x24
    rgb->B = (BYTE) (255 * (hsl->L - a * *fMax(f3, &fm1)));
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	ed93 8a02 	vldr	s16, [r3, #8]
 800dad6:	f107 0320 	add.w	r3, r7, #32
 800dada:	4619      	mov	r1, r3
 800dadc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dade:	f7ff febc 	bl	800d85a <fMax>
 800dae2:	4603      	mov	r3, r0
 800dae4:	ed93 7a00 	vldr	s14, [r3]
 800dae8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800daec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf0:	ee78 7a67 	vsub.f32	s15, s16, s15
 800daf4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800db28 <HSLtoRGB+0x298>
 800daf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dafc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db00:	edc7 7a01 	vstr	s15, [r7, #4]
 800db04:	793b      	ldrb	r3, [r7, #4]
 800db06:	b2da      	uxtb	r2, r3
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	709a      	strb	r2, [r3, #2]
}
 800db0c:	bf00      	nop
 800db0e:	3734      	adds	r7, #52	; 0x34
 800db10:	46bd      	mov	sp, r7
 800db12:	ecbd 8b02 	vpop	{d8}
 800db16:	bd90      	pop	{r4, r7, pc}
 800db18:	00000000 	.word	0x00000000
 800db1c:	40280000 	.word	0x40280000
 800db20:	bf800000 	.word	0xbf800000
 800db24:	00000000 	.word	0x00000000
 800db28:	437f0000 	.word	0x437f0000
 800db2c:	00000000 	.word	0x00000000

0800db30 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800db30:	b5b0      	push	{r4, r5, r7, lr}
 800db32:	b08c      	sub	sp, #48	; 0x30
 800db34:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   	HAL_Init();
 800db36:	f7f3 f9d3 	bl	8000ee0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800db3a:	f000 fa7d 	bl	800e038 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800db3e:	f000 fc4b 	bl	800e3d8 <MX_GPIO_Init>
	MX_DMA_Init();
 800db42:	f000 fc21 	bl	800e388 <MX_DMA_Init>
	MX_USB_DEVICE_Init();
 800db46:	f001 f9bf 	bl	800eec8 <MX_USB_DEVICE_Init>
	MX_I2C1_Init();
 800db4a:	f000 faf7 	bl	800e13c <MX_I2C1_Init>
	MX_I2S2_Init();
 800db4e:	f000 fb23 	bl	800e198 <MX_I2S2_Init>
	MX_SDIO_SD_Init();
 800db52:	f000 fb4f 	bl	800e1f4 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 800db56:	f7ff fdef 	bl	800d738 <MX_FATFS_Init>
	MX_TIM1_Init();
 800db5a:	f000 fb6b 	bl	800e234 <MX_TIM1_Init>
	MX_TIM3_Init();
 800db5e:	f000 fbbb 	bl	800e2d8 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim1);
 800db62:	48b5      	ldr	r0, [pc, #724]	; (800de38 <main+0x308>)
 800db64:	f7fa fd4f 	bl	8008606 <HAL_TIM_Base_Start_IT>

	//init led

	//calc led pos in radian
	for (int t = 0; t < LED_COUNT; t++) {
 800db68:	2300      	movs	r3, #0
 800db6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db6c:	e011      	b.n	800db92 <main+0x62>
		pixelRad[t] = (float) ((2 * 3.14) / LED_COUNT) * t;
 800db6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db70:	ee07 3a90 	vmov	s15, r3
 800db74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db78:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800de3c <main+0x30c>
 800db7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db80:	4aaf      	ldr	r2, [pc, #700]	; (800de40 <main+0x310>)
 800db82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	4413      	add	r3, r2
 800db88:	edc3 7a00 	vstr	s15, [r3]
	for (int t = 0; t < LED_COUNT; t++) {
 800db8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8e:	3301      	adds	r3, #1
 800db90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db94:	2b17      	cmp	r3, #23
 800db96:	ddea      	ble.n	800db6e <main+0x3e>
	}

	//calc effectFront
	for (int t = 0; t < sizeOfFrontBuf; t++) {
 800db98:	2300      	movs	r3, #0
 800db9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800db9c:	e065      	b.n	800dc6a <main+0x13a>
		if ((t > 100) && (t < 115)){
 800db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba0:	2b64      	cmp	r3, #100	; 0x64
 800dba2:	dd28      	ble.n	800dbf6 <main+0xc6>
 800dba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba6:	2b72      	cmp	r3, #114	; 0x72
 800dba8:	dc25      	bgt.n	800dbf6 <main+0xc6>
			frontBuf[t] = 255*sin((float)(t-100)/20);
 800dbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbac:	3b64      	subs	r3, #100	; 0x64
 800dbae:	ee07 3a90 	vmov	s15, r3
 800dbb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbb6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800dbba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dbbe:	ee16 0a90 	vmov	r0, s13
 800dbc2:	f7f2 fc6d 	bl	80004a0 <__aeabi_f2d>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	460c      	mov	r4, r1
 800dbca:	ec44 3b10 	vmov	d0, r3, r4
 800dbce:	f002 f89b 	bl	800fd08 <sin>
 800dbd2:	ec51 0b10 	vmov	r0, r1, d0
 800dbd6:	a38e      	add	r3, pc, #568	; (adr r3, 800de10 <main+0x2e0>)
 800dbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbdc:	f7f2 fcb8 	bl	8000550 <__aeabi_dmul>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	f7f2 ff62 	bl	8000ab0 <__aeabi_d2iz>
 800dbec:	4601      	mov	r1, r0
 800dbee:	4a95      	ldr	r2, [pc, #596]	; (800de44 <main+0x314>)
 800dbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if ((t >= 115) && (t <= 200)) {
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	2b72      	cmp	r3, #114	; 0x72
 800dbfa:	dd07      	ble.n	800dc0c <main+0xdc>
 800dbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfe:	2bc8      	cmp	r3, #200	; 0xc8
 800dc00:	dc04      	bgt.n	800dc0c <main+0xdc>
			frontBuf[t] = 255;
 800dc02:	4a90      	ldr	r2, [pc, #576]	; (800de44 <main+0x314>)
 800dc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc06:	21ff      	movs	r1, #255	; 0xff
 800dc08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if ((t > 200) && (t < 215)){
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	2bc8      	cmp	r3, #200	; 0xc8
 800dc10:	dd28      	ble.n	800dc64 <main+0x134>
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	2bd6      	cmp	r3, #214	; 0xd6
 800dc16:	dc25      	bgt.n	800dc64 <main+0x134>
			frontBuf[t] = 255*cos((float)(t-200)/20);
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	3bc8      	subs	r3, #200	; 0xc8
 800dc1c:	ee07 3a90 	vmov	s15, r3
 800dc20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc24:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800dc28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc2c:	ee16 0a90 	vmov	r0, s13
 800dc30:	f7f2 fc36 	bl	80004a0 <__aeabi_f2d>
 800dc34:	4603      	mov	r3, r0
 800dc36:	460c      	mov	r4, r1
 800dc38:	ec44 3b10 	vmov	d0, r3, r4
 800dc3c:	f002 f820 	bl	800fc80 <cos>
 800dc40:	ec51 0b10 	vmov	r0, r1, d0
 800dc44:	a372      	add	r3, pc, #456	; (adr r3, 800de10 <main+0x2e0>)
 800dc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4a:	f7f2 fc81 	bl	8000550 <__aeabi_dmul>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	460c      	mov	r4, r1
 800dc52:	4618      	mov	r0, r3
 800dc54:	4621      	mov	r1, r4
 800dc56:	f7f2 ff2b 	bl	8000ab0 <__aeabi_d2iz>
 800dc5a:	4601      	mov	r1, r0
 800dc5c:	4a79      	ldr	r2, [pc, #484]	; (800de44 <main+0x314>)
 800dc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int t = 0; t < sizeOfFrontBuf; t++) {
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	3301      	adds	r3, #1
 800dc68:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	2be5      	cmp	r3, #229	; 0xe5
 800dc6e:	dd96      	ble.n	800db9e <main+0x6e>
		}
	}

	ws2812_init();
 800dc70:	f001 fe1e 	bl	800f8b0 <ws2812_init>
		//}
	}
	*/
	pHSL G_HSL;

	G_HSL->H=0;
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	f04f 0200 	mov.w	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
	G_HSL->S=1;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dc82:	605a      	str	r2, [r3, #4]
	G_HSL->L=1;
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dc8a:	609a      	str	r2, [r3, #8]
	G_HSL->V=1;
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dc92:	60da      	str	r2, [r3, #12]


	pRGB RGB;

	while(effectTick<10000){
 800dc94:	e034      	b.n	800dd00 <main+0x1d0>
		if(G_HSL->H<360){
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	edd3 7a00 	vldr	s15, [r3]
 800dc9c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800de48 <main+0x318>
 800dca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca8:	d50a      	bpl.n	800dcc0 <main+0x190>
			G_HSL->H++;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	edd3 7a00 	vldr	s15, [r3]
 800dcb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dcb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	edc3 7a00 	vstr	s15, [r3]
 800dcbe:	e003      	b.n	800dcc8 <main+0x198>
		}else{
			G_HSL->H=0;
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	f04f 0200 	mov.w	r2, #0
 800dcc6:	601a      	str	r2, [r3, #0]
		}

		HSLtoRGB  (G_HSL, RGB);
 800dcc8:	6879      	ldr	r1, [r7, #4]
 800dcca:	6938      	ldr	r0, [r7, #16]
 800dccc:	f7ff fde0 	bl	800d890 <HSLtoRGB>

		for (int i = 0; i < LED_COUNT; i++){
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	627b      	str	r3, [r7, #36]	; 0x24
 800dcd4:	e00c      	b.n	800dcf0 <main+0x1c0>
			ws2812_pixel_rgb_to_buf_dma(RGB->R, RGB->G, RGB->B, i);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	7818      	ldrb	r0, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	7859      	ldrb	r1, [r3, #1]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	789a      	ldrb	r2, [r3, #2]
 800dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	f001 fdfd 	bl	800f8e4 <ws2812_pixel_rgb_to_buf_dma>
		for (int i = 0; i < LED_COUNT; i++){
 800dcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcec:	3301      	adds	r3, #1
 800dcee:	627b      	str	r3, [r7, #36]	; 0x24
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	2b17      	cmp	r3, #23
 800dcf4:	ddef      	ble.n	800dcd6 <main+0x1a6>
		}
		ws2812_light();
 800dcf6:	f001 fe8d 	bl	800fa14 <ws2812_light>
		HAL_Delay(60);
 800dcfa:	203c      	movs	r0, #60	; 0x3c
 800dcfc:	f7f3 f962 	bl	8000fc4 <HAL_Delay>
	while(effectTick<10000){
 800dd00:	4b52      	ldr	r3, [pc, #328]	; (800de4c <main+0x31c>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f242 720f 	movw	r2, #9999	; 0x270f
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	ddc4      	ble.n	800dc96 <main+0x166>

	}


	//___________Magnet Sensor INIT____________________
	if (tlv_init() == -1) {
 800dd0c:	f001 f80e 	bl	800ed2c <tlv_init>
 800dd10:	4603      	mov	r3, r0
 800dd12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd16:	d112      	bne.n	800dd3e <main+0x20e>
		for (int i = 0; i < LED_COUNT; i++) {
 800dd18:	2300      	movs	r3, #0
 800dd1a:	623b      	str	r3, [r7, #32]
 800dd1c:	e009      	b.n	800dd32 <main+0x202>
			ws2812_pixel_rgb_to_buf_dma(100, 0, 0, i);
 800dd1e:	6a3b      	ldr	r3, [r7, #32]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	2200      	movs	r2, #0
 800dd24:	2100      	movs	r1, #0
 800dd26:	2064      	movs	r0, #100	; 0x64
 800dd28:	f001 fddc 	bl	800f8e4 <ws2812_pixel_rgb_to_buf_dma>
		for (int i = 0; i < LED_COUNT; i++) {
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	623b      	str	r3, [r7, #32]
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	2b17      	cmp	r3, #23
 800dd36:	ddf2      	ble.n	800dd1e <main+0x1ee>

		}
		ws2812_light();
 800dd38:	f001 fe6c 	bl	800fa14 <ws2812_light>
		while (1) {
 800dd3c:	e7fe      	b.n	800dd3c <main+0x20c>
	/* USER CODE BEGIN WHILE */
	while (1) {

		//a=getMagVal();

		a = 0.992 * a + 0.008 * getMagVal();
 800dd3e:	4b44      	ldr	r3, [pc, #272]	; (800de50 <main+0x320>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7f2 fbac 	bl	80004a0 <__aeabi_f2d>
 800dd48:	a333      	add	r3, pc, #204	; (adr r3, 800de18 <main+0x2e8>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f2 fbff 	bl	8000550 <__aeabi_dmul>
 800dd52:	4603      	mov	r3, r0
 800dd54:	460c      	mov	r4, r1
 800dd56:	4625      	mov	r5, r4
 800dd58:	461c      	mov	r4, r3
 800dd5a:	f001 f82d 	bl	800edb8 <getMagVal>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f2 fb8b 	bl	800047c <__aeabi_i2d>
 800dd66:	a32e      	add	r3, pc, #184	; (adr r3, 800de20 <main+0x2f0>)
 800dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6c:	f7f2 fbf0 	bl	8000550 <__aeabi_dmul>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	4620      	mov	r0, r4
 800dd76:	4629      	mov	r1, r5
 800dd78:	f7f2 fa34 	bl	80001e4 <__adddf3>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	460c      	mov	r4, r1
 800dd80:	4618      	mov	r0, r3
 800dd82:	4621      	mov	r1, r4
 800dd84:	f7f2 fedc 	bl	8000b40 <__aeabi_d2f>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	4b31      	ldr	r3, [pc, #196]	; (800de50 <main+0x320>)
 800dd8c:	601a      	str	r2, [r3, #0]
		b = 0.95 * b + 0.05 * getMagVal();
 800dd8e:	4b31      	ldr	r3, [pc, #196]	; (800de54 <main+0x324>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7f2 fb84 	bl	80004a0 <__aeabi_f2d>
 800dd98:	a323      	add	r3, pc, #140	; (adr r3, 800de28 <main+0x2f8>)
 800dd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9e:	f7f2 fbd7 	bl	8000550 <__aeabi_dmul>
 800dda2:	4603      	mov	r3, r0
 800dda4:	460c      	mov	r4, r1
 800dda6:	4625      	mov	r5, r4
 800dda8:	461c      	mov	r4, r3
 800ddaa:	f001 f805 	bl	800edb8 <getMagVal>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7f2 fb63 	bl	800047c <__aeabi_i2d>
 800ddb6:	a31e      	add	r3, pc, #120	; (adr r3, 800de30 <main+0x300>)
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	f7f2 fbc8 	bl	8000550 <__aeabi_dmul>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	f7f2 fa0c 	bl	80001e4 <__adddf3>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	460c      	mov	r4, r1
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	f7f2 feb4 	bl	8000b40 <__aeabi_d2f>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	4b1e      	ldr	r3, [pc, #120]	; (800de54 <main+0x324>)
 800dddc:	601a      	str	r2, [r3, #0]
		d = a - b;
 800ddde:	4b1c      	ldr	r3, [pc, #112]	; (800de50 <main+0x320>)
 800dde0:	ed93 7a00 	vldr	s14, [r3]
 800dde4:	4b1b      	ldr	r3, [pc, #108]	; (800de54 <main+0x324>)
 800dde6:	edd3 7a00 	vldr	s15, [r3]
 800ddea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddee:	4b1a      	ldr	r3, [pc, #104]	; (800de58 <main+0x328>)
 800ddf0:	edc3 7a00 	vstr	s15, [r3]
		if (d > MAG_VAL) {
 800ddf4:	4b18      	ldr	r3, [pc, #96]	; (800de58 <main+0x328>)
 800ddf6:	edd3 7a00 	vldr	s15, [r3]
 800ddfa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ddfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de06:	dd2b      	ble.n	800de60 <main+0x330>
			phoneUp = 1;
 800de08:	4b14      	ldr	r3, [pc, #80]	; (800de5c <main+0x32c>)
 800de0a:	2201      	movs	r2, #1
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	e034      	b.n	800de7a <main+0x34a>
 800de10:	00000000 	.word	0x00000000
 800de14:	406fe000 	.word	0x406fe000
 800de18:	c8b43958 	.word	0xc8b43958
 800de1c:	3fefbe76 	.word	0x3fefbe76
 800de20:	d2f1a9fc 	.word	0xd2f1a9fc
 800de24:	3f80624d 	.word	0x3f80624d
 800de28:	66666666 	.word	0x66666666
 800de2c:	3fee6666 	.word	0x3fee6666
 800de30:	9999999a 	.word	0x9999999a
 800de34:	3fa99999 	.word	0x3fa99999
 800de38:	20000f28 	.word	0x20000f28
 800de3c:	3e85f92c 	.word	0x3e85f92c
 800de40:	20001384 	.word	0x20001384
 800de44:	20000fec 	.word	0x20000fec
 800de48:	43b40000 	.word	0x43b40000
 800de4c:	20000228 	.word	0x20000228
 800de50:	20000238 	.word	0x20000238
 800de54:	2000023c 	.word	0x2000023c
 800de58:	20000240 	.word	0x20000240
 800de5c:	20000234 	.word	0x20000234
		} else if (d < -MAG_VAL) {
 800de60:	4b6b      	ldr	r3, [pc, #428]	; (800e010 <main+0x4e0>)
 800de62:	edd3 7a00 	vldr	s15, [r3]
 800de66:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800de6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de72:	d502      	bpl.n	800de7a <main+0x34a>
			phoneUp = 0;
 800de74:	4b67      	ldr	r3, [pc, #412]	; (800e014 <main+0x4e4>)
 800de76:	2200      	movs	r2, #0
 800de78:	601a      	str	r2, [r3, #0]
		}

		if (phoneUp != phoneUp_) {
 800de7a:	4b66      	ldr	r3, [pc, #408]	; (800e014 <main+0x4e4>)
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	4b66      	ldr	r3, [pc, #408]	; (800e018 <main+0x4e8>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	429a      	cmp	r2, r3
 800de84:	d008      	beq.n	800de98 <main+0x368>
			if (phoneUp) {
 800de86:	4b63      	ldr	r3, [pc, #396]	; (800e014 <main+0x4e4>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d002      	beq.n	800de94 <main+0x364>
				hid_send_start();
 800de8e:	f7ff fca3 	bl	800d7d8 <hid_send_start>
 800de92:	e001      	b.n	800de98 <main+0x368>

			} else {
				hid_send_stop();
 800de94:	f7ff fc78 	bl	800d788 <hid_send_stop>

			}
		}
		phoneUp_ = phoneUp;
 800de98:	4b5e      	ldr	r3, [pc, #376]	; (800e014 <main+0x4e4>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a5e      	ldr	r2, [pc, #376]	; (800e018 <main+0x4e8>)
 800de9e:	6013      	str	r3, [r2, #0]

		if ((lightLeds == 1) && (phoneUp)) {
 800dea0:	4b5e      	ldr	r3, [pc, #376]	; (800e01c <main+0x4ec>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	f47f af4a 	bne.w	800dd3e <main+0x20e>
 800deaa:	4b5a      	ldr	r3, [pc, #360]	; (800e014 <main+0x4e4>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f43f af45 	beq.w	800dd3e <main+0x20e>

			//cleanWSBuff
			for (int i = 0; i < LED_COUNT; i++) {
 800deb4:	2300      	movs	r3, #0
 800deb6:	61fb      	str	r3, [r7, #28]
 800deb8:	e009      	b.n	800dece <main+0x39e>
				ws2812_pixel_rgb_to_buf_dma(0, 0, 0, i);
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	b29b      	uxth	r3, r3
 800debe:	2200      	movs	r2, #0
 800dec0:	2100      	movs	r1, #0
 800dec2:	2000      	movs	r0, #0
 800dec4:	f001 fd0e 	bl	800f8e4 <ws2812_pixel_rgb_to_buf_dma>
			for (int i = 0; i < LED_COUNT; i++) {
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	3301      	adds	r3, #1
 800decc:	61fb      	str	r3, [r7, #28]
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	2b17      	cmp	r3, #23
 800ded2:	ddf2      	ble.n	800deba <main+0x38a>

			}

			//calc ledEffectBuf
			memset(effectBuf, 0, sizeOfeffectBuf);
 800ded4:	2264      	movs	r2, #100	; 0x64
 800ded6:	2100      	movs	r1, #0
 800ded8:	4851      	ldr	r0, [pc, #324]	; (800e020 <main+0x4f0>)
 800deda:	f001 fe0f 	bl	800fafc <memset>

			for (int i = 0; i < sizeOfeffectBuf; i++) {
 800dede:	2300      	movs	r3, #0
 800dee0:	61bb      	str	r3, [r7, #24]
 800dee2:	e012      	b.n	800df0a <main+0x3da>
				int pos = effectTick + i;
 800dee4:	4b4f      	ldr	r3, [pc, #316]	; (800e024 <main+0x4f4>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	4413      	add	r3, r2
 800deec:	60bb      	str	r3, [r7, #8]
				//int revPos = sizeOfFrontBuf-(i+1);
				if (pos < sizeOfFrontBuf) {
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	2be5      	cmp	r3, #229	; 0xe5
 800def2:	dc07      	bgt.n	800df04 <main+0x3d4>
					effectBuf[i] = frontBuf[pos];
 800def4:	4a4c      	ldr	r2, [pc, #304]	; (800e028 <main+0x4f8>)
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800defc:	4948      	ldr	r1, [pc, #288]	; (800e020 <main+0x4f0>)
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < sizeOfeffectBuf; i++) {
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	3301      	adds	r3, #1
 800df08:	61bb      	str	r3, [r7, #24]
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	2b63      	cmp	r3, #99	; 0x63
 800df0e:	dde9      	ble.n	800dee4 <main+0x3b4>
				}

			}

			for (int i = 0; i < LED_COUNT; i++) {
 800df10:	2300      	movs	r3, #0
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e03b      	b.n	800df8e <main+0x45e>
				uint8_t posInBuf = 50 + (50 * sin(beta - pixelRad[i]));
 800df16:	4b45      	ldr	r3, [pc, #276]	; (800e02c <main+0x4fc>)
 800df18:	ed93 7a00 	vldr	s14, [r3]
 800df1c:	4a44      	ldr	r2, [pc, #272]	; (800e030 <main+0x500>)
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4413      	add	r3, r2
 800df24:	edd3 7a00 	vldr	s15, [r3]
 800df28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df2c:	ee17 0a90 	vmov	r0, s15
 800df30:	f7f2 fab6 	bl	80004a0 <__aeabi_f2d>
 800df34:	4603      	mov	r3, r0
 800df36:	460c      	mov	r4, r1
 800df38:	ec44 3b10 	vmov	d0, r3, r4
 800df3c:	f001 fee4 	bl	800fd08 <sin>
 800df40:	ec51 0b10 	vmov	r0, r1, d0
 800df44:	f04f 0200 	mov.w	r2, #0
 800df48:	4b3a      	ldr	r3, [pc, #232]	; (800e034 <main+0x504>)
 800df4a:	f7f2 fb01 	bl	8000550 <__aeabi_dmul>
 800df4e:	4603      	mov	r3, r0
 800df50:	460c      	mov	r4, r1
 800df52:	4618      	mov	r0, r3
 800df54:	4621      	mov	r1, r4
 800df56:	f04f 0200 	mov.w	r2, #0
 800df5a:	4b36      	ldr	r3, [pc, #216]	; (800e034 <main+0x504>)
 800df5c:	f7f2 f942 	bl	80001e4 <__adddf3>
 800df60:	4603      	mov	r3, r0
 800df62:	460c      	mov	r4, r1
 800df64:	4618      	mov	r0, r3
 800df66:	4621      	mov	r1, r4
 800df68:	f7f2 fdca 	bl	8000b00 <__aeabi_d2uiz>
 800df6c:	4603      	mov	r3, r0
 800df6e:	73fb      	strb	r3, [r7, #15]

				uint8_t val = effectBuf[posInBuf];
 800df70:	7bfb      	ldrb	r3, [r7, #15]
 800df72:	4a2b      	ldr	r2, [pc, #172]	; (800e020 <main+0x4f0>)
 800df74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df78:	73bb      	strb	r3, [r7, #14]

				ws2812_pixel_rgb_to_buf_dma(0, val, 0, i);
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	7bb9      	ldrb	r1, [r7, #14]
 800df80:	2200      	movs	r2, #0
 800df82:	2000      	movs	r0, #0
 800df84:	f001 fcae 	bl	800f8e4 <ws2812_pixel_rgb_to_buf_dma>
			for (int i = 0; i < LED_COUNT; i++) {
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	3301      	adds	r3, #1
 800df8c:	617b      	str	r3, [r7, #20]
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b17      	cmp	r3, #23
 800df92:	ddc0      	ble.n	800df16 <main+0x3e6>

			}

			if (effectTick < 300) {
 800df94:	4b23      	ldr	r3, [pc, #140]	; (800e024 <main+0x4f4>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800df9c:	da05      	bge.n	800dfaa <main+0x47a>
				effectTick++;
 800df9e:	4b21      	ldr	r3, [pc, #132]	; (800e024 <main+0x4f4>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	4a1f      	ldr	r2, [pc, #124]	; (800e024 <main+0x4f4>)
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	e002      	b.n	800dfb0 <main+0x480>
			} else {
				effectTick = 0;
 800dfaa:	4b1e      	ldr	r3, [pc, #120]	; (800e024 <main+0x4f4>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	601a      	str	r2, [r3, #0]
			}

			if (beta < 6.28) {
 800dfb0:	4b1e      	ldr	r3, [pc, #120]	; (800e02c <main+0x4fc>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7f2 fa73 	bl	80004a0 <__aeabi_f2d>
 800dfba:	a311      	add	r3, pc, #68	; (adr r3, 800e000 <main+0x4d0>)
 800dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc0:	f7f2 fd38 	bl	8000a34 <__aeabi_dcmplt>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d013      	beq.n	800dff2 <main+0x4c2>
				beta += 0.2;
 800dfca:	4b18      	ldr	r3, [pc, #96]	; (800e02c <main+0x4fc>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7f2 fa66 	bl	80004a0 <__aeabi_f2d>
 800dfd4:	a30c      	add	r3, pc, #48	; (adr r3, 800e008 <main+0x4d8>)
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	f7f2 f903 	bl	80001e4 <__adddf3>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	460c      	mov	r4, r1
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	f7f2 fdab 	bl	8000b40 <__aeabi_d2f>
 800dfea:	4602      	mov	r2, r0
 800dfec:	4b0f      	ldr	r3, [pc, #60]	; (800e02c <main+0x4fc>)
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	e6a5      	b.n	800dd3e <main+0x20e>
			} else {
				beta = 0;
 800dff2:	4b0e      	ldr	r3, [pc, #56]	; (800e02c <main+0x4fc>)
 800dff4:	f04f 0200 	mov.w	r2, #0
 800dff8:	601a      	str	r2, [r3, #0]
		a = 0.992 * a + 0.008 * getMagVal();
 800dffa:	e6a0      	b.n	800dd3e <main+0x20e>
 800dffc:	f3af 8000 	nop.w
 800e000:	51eb851f 	.word	0x51eb851f
 800e004:	40191eb8 	.word	0x40191eb8
 800e008:	9999999a 	.word	0x9999999a
 800e00c:	3fc99999 	.word	0x3fc99999
 800e010:	20000240 	.word	0x20000240
 800e014:	20000234 	.word	0x20000234
 800e018:	2000011c 	.word	0x2000011c
 800e01c:	20000230 	.word	0x20000230
 800e020:	20000d38 	.word	0x20000d38
 800e024:	20000228 	.word	0x20000228
 800e028:	20000fec 	.word	0x20000fec
 800e02c:	2000022c 	.word	0x2000022c
 800e030:	20001384 	.word	0x20001384
 800e034:	40490000 	.word	0x40490000

0800e038 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800e038:	b580      	push	{r7, lr}
 800e03a:	b098      	sub	sp, #96	; 0x60
 800e03c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800e03e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e042:	2230      	movs	r2, #48	; 0x30
 800e044:	2100      	movs	r1, #0
 800e046:	4618      	mov	r0, r3
 800e048:	f001 fd58 	bl	800fafc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800e04c:	f107 031c 	add.w	r3, r7, #28
 800e050:	2200      	movs	r2, #0
 800e052:	601a      	str	r2, [r3, #0]
 800e054:	605a      	str	r2, [r3, #4]
 800e056:	609a      	str	r2, [r3, #8]
 800e058:	60da      	str	r2, [r3, #12]
 800e05a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800e05c:	f107 0308 	add.w	r3, r7, #8
 800e060:	2200      	movs	r2, #0
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	605a      	str	r2, [r3, #4]
 800e066:	609a      	str	r2, [r3, #8]
 800e068:	60da      	str	r2, [r3, #12]
 800e06a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800e06c:	2300      	movs	r3, #0
 800e06e:	607b      	str	r3, [r7, #4]
 800e070:	4b30      	ldr	r3, [pc, #192]	; (800e134 <SystemClock_Config+0xfc>)
 800e072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e074:	4a2f      	ldr	r2, [pc, #188]	; (800e134 <SystemClock_Config+0xfc>)
 800e076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e07a:	6413      	str	r3, [r2, #64]	; 0x40
 800e07c:	4b2d      	ldr	r3, [pc, #180]	; (800e134 <SystemClock_Config+0xfc>)
 800e07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e084:	607b      	str	r3, [r7, #4]
 800e086:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800e088:	2300      	movs	r3, #0
 800e08a:	603b      	str	r3, [r7, #0]
 800e08c:	4b2a      	ldr	r3, [pc, #168]	; (800e138 <SystemClock_Config+0x100>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800e094:	4a28      	ldr	r2, [pc, #160]	; (800e138 <SystemClock_Config+0x100>)
 800e096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e09a:	6013      	str	r3, [r2, #0]
 800e09c:	4b26      	ldr	r3, [pc, #152]	; (800e138 <SystemClock_Config+0x100>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e0a4:	603b      	str	r3, [r7, #0]
 800e0a6:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e0ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e0b0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e0b2:	2302      	movs	r3, #2
 800e0b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e0b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e0ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800e0bc:	2308      	movs	r3, #8
 800e0be:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 250;
 800e0c0:	23fa      	movs	r3, #250	; 0xfa
 800e0c2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800e0c4:	2306      	movs	r3, #6
 800e0c6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 8;
 800e0c8:	2308      	movs	r3, #8
 800e0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800e0cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7f8 fb51 	bl	8006778 <HAL_RCC_OscConfig>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <SystemClock_Config+0xa8>
		Error_Handler();
 800e0dc:	f000 fa06 	bl	800e4ec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800e0e0:	230f      	movs	r3, #15
 800e0e2:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e0e4:	2302      	movs	r3, #2
 800e0e6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e0ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0f0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800e0f6:	f107 031c 	add.w	r3, r7, #28
 800e0fa:	2102      	movs	r1, #2
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7f8 fdab 	bl	8006c58 <HAL_RCC_ClockConfig>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <SystemClock_Config+0xd4>
		Error_Handler();
 800e108:	f000 f9f0 	bl	800e4ec <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800e10c:	2301      	movs	r3, #1
 800e10e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800e110:	23c0      	movs	r3, #192	; 0xc0
 800e112:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800e114:	2302      	movs	r3, #2
 800e116:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800e118:	f107 0308 	add.w	r3, r7, #8
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7f8 ff83 	bl	8007028 <HAL_RCCEx_PeriphCLKConfig>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <SystemClock_Config+0xf4>
		Error_Handler();
 800e128:	f000 f9e0 	bl	800e4ec <Error_Handler>
	}
}
 800e12c:	bf00      	nop
 800e12e:	3760      	adds	r7, #96	; 0x60
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	40023800 	.word	0x40023800
 800e138:	40007000 	.word	0x40007000

0800e13c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800e13c:	b580      	push	{r7, lr}
 800e13e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800e140:	4b12      	ldr	r3, [pc, #72]	; (800e18c <MX_I2C1_Init+0x50>)
 800e142:	4a13      	ldr	r2, [pc, #76]	; (800e190 <MX_I2C1_Init+0x54>)
 800e144:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800e146:	4b11      	ldr	r3, [pc, #68]	; (800e18c <MX_I2C1_Init+0x50>)
 800e148:	4a12      	ldr	r2, [pc, #72]	; (800e194 <MX_I2C1_Init+0x58>)
 800e14a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800e14c:	4b0f      	ldr	r3, [pc, #60]	; (800e18c <MX_I2C1_Init+0x50>)
 800e14e:	2200      	movs	r2, #0
 800e150:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800e152:	4b0e      	ldr	r3, [pc, #56]	; (800e18c <MX_I2C1_Init+0x50>)
 800e154:	2200      	movs	r2, #0
 800e156:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800e158:	4b0c      	ldr	r3, [pc, #48]	; (800e18c <MX_I2C1_Init+0x50>)
 800e15a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e15e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e160:	4b0a      	ldr	r3, [pc, #40]	; (800e18c <MX_I2C1_Init+0x50>)
 800e162:	2200      	movs	r2, #0
 800e164:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800e166:	4b09      	ldr	r3, [pc, #36]	; (800e18c <MX_I2C1_Init+0x50>)
 800e168:	2200      	movs	r2, #0
 800e16a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e16c:	4b07      	ldr	r3, [pc, #28]	; (800e18c <MX_I2C1_Init+0x50>)
 800e16e:	2200      	movs	r2, #0
 800e170:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e172:	4b06      	ldr	r3, [pc, #24]	; (800e18c <MX_I2C1_Init+0x50>)
 800e174:	2200      	movs	r2, #0
 800e176:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800e178:	4804      	ldr	r0, [pc, #16]	; (800e18c <MX_I2C1_Init+0x50>)
 800e17a:	f7f3 fdff 	bl	8001d7c <HAL_I2C_Init>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800e184:	f000 f9b2 	bl	800e4ec <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800e188:	bf00      	nop
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	20000c94 	.word	0x20000c94
 800e190:	40005400 	.word	0x40005400
 800e194:	000186a0 	.word	0x000186a0

0800e198 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 800e198:	b580      	push	{r7, lr}
 800e19a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 800e19c:	4b13      	ldr	r3, [pc, #76]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e19e:	4a14      	ldr	r2, [pc, #80]	; (800e1f0 <MX_I2S2_Init+0x58>)
 800e1a0:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800e1a2:	4b12      	ldr	r3, [pc, #72]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e1a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1a8:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800e1aa:	4b10      	ldr	r3, [pc, #64]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800e1b0:	4b0e      	ldr	r3, [pc, #56]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800e1b6:	4b0d      	ldr	r3, [pc, #52]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e1b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1bc:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800e1be:	4b0b      	ldr	r3, [pc, #44]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e1c0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800e1c4:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800e1c6:	4b09      	ldr	r3, [pc, #36]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800e1cc:	4b07      	ldr	r3, [pc, #28]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800e1d2:	4b06      	ldr	r3, [pc, #24]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 800e1d8:	4804      	ldr	r0, [pc, #16]	; (800e1ec <MX_I2S2_Init+0x54>)
 800e1da:	f7f6 f997 	bl	800450c <HAL_I2S_Init>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d001      	beq.n	800e1e8 <MX_I2S2_Init+0x50>
		Error_Handler();
 800e1e4:	f000 f982 	bl	800e4ec <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 800e1e8:	bf00      	nop
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	20001444 	.word	0x20001444
 800e1f0:	40003800 	.word	0x40003800

0800e1f4 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 800e1f4:	b480      	push	{r7}
 800e1f6:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 800e1f8:	4b0c      	ldr	r3, [pc, #48]	; (800e22c <MX_SDIO_SD_Init+0x38>)
 800e1fa:	4a0d      	ldr	r2, [pc, #52]	; (800e230 <MX_SDIO_SD_Init+0x3c>)
 800e1fc:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800e1fe:	4b0b      	ldr	r3, [pc, #44]	; (800e22c <MX_SDIO_SD_Init+0x38>)
 800e200:	2200      	movs	r2, #0
 800e202:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800e204:	4b09      	ldr	r3, [pc, #36]	; (800e22c <MX_SDIO_SD_Init+0x38>)
 800e206:	2200      	movs	r2, #0
 800e208:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800e20a:	4b08      	ldr	r3, [pc, #32]	; (800e22c <MX_SDIO_SD_Init+0x38>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800e210:	4b06      	ldr	r3, [pc, #24]	; (800e22c <MX_SDIO_SD_Init+0x38>)
 800e212:	2200      	movs	r2, #0
 800e214:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800e216:	4b05      	ldr	r3, [pc, #20]	; (800e22c <MX_SDIO_SD_Init+0x38>)
 800e218:	2200      	movs	r2, #0
 800e21a:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 800e21c:	4b03      	ldr	r3, [pc, #12]	; (800e22c <MX_SDIO_SD_Init+0x38>)
 800e21e:	2200      	movs	r2, #0
 800e220:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800e222:	bf00      	nop
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	20000f68 	.word	0x20000f68
 800e230:	40012c00 	.word	0x40012c00

0800e234 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800e23a:	f107 0308 	add.w	r3, r7, #8
 800e23e:	2200      	movs	r2, #0
 800e240:	601a      	str	r2, [r3, #0]
 800e242:	605a      	str	r2, [r3, #4]
 800e244:	609a      	str	r2, [r3, #8]
 800e246:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800e248:	463b      	mov	r3, r7
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]
 800e24e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800e250:	4b1f      	ldr	r3, [pc, #124]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e252:	4a20      	ldr	r2, [pc, #128]	; (800e2d4 <MX_TIM1_Init+0xa0>)
 800e254:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1000;
 800e256:	4b1e      	ldr	r3, [pc, #120]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e25c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e25e:	4b1c      	ldr	r3, [pc, #112]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e260:	2200      	movs	r2, #0
 800e262:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2000;
 800e264:	4b1a      	ldr	r3, [pc, #104]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e266:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e26a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e26c:	4b18      	ldr	r3, [pc, #96]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e26e:	2200      	movs	r2, #0
 800e270:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800e272:	4b17      	ldr	r3, [pc, #92]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e274:	2200      	movs	r2, #0
 800e276:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e278:	4b15      	ldr	r3, [pc, #84]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800e27e:	4814      	ldr	r0, [pc, #80]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e280:	f7fa f996 	bl	80085b0 <HAL_TIM_Base_Init>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d001      	beq.n	800e28e <MX_TIM1_Init+0x5a>
		Error_Handler();
 800e28a:	f000 f92f 	bl	800e4ec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e28e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e292:	60bb      	str	r3, [r7, #8]

	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800e294:	f107 0308 	add.w	r3, r7, #8
 800e298:	4619      	mov	r1, r3
 800e29a:	480d      	ldr	r0, [pc, #52]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e29c:	f7fa fd7c 	bl	8008d98 <HAL_TIM_ConfigClockSource>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d001      	beq.n	800e2aa <MX_TIM1_Init+0x76>
		Error_Handler();
 800e2a6:	f000 f921 	bl	800e4ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800e2b2:	463b      	mov	r3, r7
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4806      	ldr	r0, [pc, #24]	; (800e2d0 <MX_TIM1_Init+0x9c>)
 800e2b8:	f7fb f9ba 	bl	8009630 <HAL_TIMEx_MasterConfigSynchronization>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d001      	beq.n	800e2c6 <MX_TIM1_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 800e2c2:	f000 f913 	bl	800e4ec <Error_Handler>

	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800e2c6:	bf00      	nop
 800e2c8:	3718      	adds	r7, #24
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	20000f28 	.word	0x20000f28
 800e2d4:	40010000 	.word	0x40010000

0800e2d8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b08a      	sub	sp, #40	; 0x28
 800e2dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800e2de:	f107 0320 	add.w	r3, r7, #32
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	601a      	str	r2, [r3, #0]
 800e2e6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800e2e8:	1d3b      	adds	r3, r7, #4
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	605a      	str	r2, [r3, #4]
 800e2f0:	609a      	str	r2, [r3, #8]
 800e2f2:	60da      	str	r2, [r3, #12]
 800e2f4:	611a      	str	r2, [r3, #16]
 800e2f6:	615a      	str	r2, [r3, #20]
 800e2f8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800e2fa:	4b21      	ldr	r3, [pc, #132]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e2fc:	4a21      	ldr	r2, [pc, #132]	; (800e384 <MX_TIM3_Init+0xac>)
 800e2fe:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800e300:	4b1f      	ldr	r3, [pc, #124]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e302:	2200      	movs	r2, #0
 800e304:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e306:	4b1e      	ldr	r3, [pc, #120]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e308:	2200      	movs	r2, #0
 800e30a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 80;
 800e30c:	4b1c      	ldr	r3, [pc, #112]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e30e:	2250      	movs	r2, #80	; 0x50
 800e310:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e312:	4b1b      	ldr	r3, [pc, #108]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e314:	2200      	movs	r2, #0
 800e316:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e318:	4b19      	ldr	r3, [pc, #100]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800e31e:	4818      	ldr	r0, [pc, #96]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e320:	f7fa f995 	bl	800864e <HAL_TIM_PWM_Init>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <MX_TIM3_Init+0x56>
		Error_Handler();
 800e32a:	f000 f8df 	bl	800e4ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e32e:	2300      	movs	r3, #0
 800e330:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e332:	2300      	movs	r3, #0
 800e334:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800e336:	f107 0320 	add.w	r3, r7, #32
 800e33a:	4619      	mov	r1, r3
 800e33c:	4810      	ldr	r0, [pc, #64]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e33e:	f7fb f977 	bl	8009630 <HAL_TIMEx_MasterConfigSynchronization>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d001      	beq.n	800e34c <MX_TIM3_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 800e348:	f000 f8d0 	bl	800e4ec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e34c:	2360      	movs	r3, #96	; 0x60
 800e34e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800e350:	2300      	movs	r3, #0
 800e352:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e354:	2300      	movs	r3, #0
 800e356:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e358:	2300      	movs	r3, #0
 800e35a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800e35c:	1d3b      	adds	r3, r7, #4
 800e35e:	2204      	movs	r2, #4
 800e360:	4619      	mov	r1, r3
 800e362:	4807      	ldr	r0, [pc, #28]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e364:	f7fa fc52 	bl	8008c0c <HAL_TIM_PWM_ConfigChannel>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800e36e:	f000 f8bd 	bl	800e4ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800e372:	4803      	ldr	r0, [pc, #12]	; (800e380 <MX_TIM3_Init+0xa8>)
 800e374:	f000 fbc2 	bl	800eafc <HAL_TIM_MspPostInit>

}
 800e378:	bf00      	nop
 800e37a:	3728      	adds	r7, #40	; 0x28
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	20000cec 	.word	0x20000cec
 800e384:	40000400 	.word	0x40000400

0800e388 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800e38e:	2300      	movs	r3, #0
 800e390:	607b      	str	r3, [r7, #4]
 800e392:	4b10      	ldr	r3, [pc, #64]	; (800e3d4 <MX_DMA_Init+0x4c>)
 800e394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e396:	4a0f      	ldr	r2, [pc, #60]	; (800e3d4 <MX_DMA_Init+0x4c>)
 800e398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e39c:	6313      	str	r3, [r2, #48]	; 0x30
 800e39e:	4b0d      	ldr	r3, [pc, #52]	; (800e3d4 <MX_DMA_Init+0x4c>)
 800e3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e3a6:	607b      	str	r3, [r7, #4]
 800e3a8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	200f      	movs	r0, #15
 800e3b0:	f7f2 ff05 	bl	80011be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800e3b4:	200f      	movs	r0, #15
 800e3b6:	f7f2 ff1e 	bl	80011f6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	2100      	movs	r1, #0
 800e3be:	2010      	movs	r0, #16
 800e3c0:	f7f2 fefd 	bl	80011be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800e3c4:	2010      	movs	r0, #16
 800e3c6:	f7f2 ff16 	bl	80011f6 <HAL_NVIC_EnableIRQ>

}
 800e3ca:	bf00      	nop
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	40023800 	.word	0x40023800

0800e3d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b08a      	sub	sp, #40	; 0x28
 800e3dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800e3de:	f107 0314 	add.w	r3, r7, #20
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	605a      	str	r2, [r3, #4]
 800e3e8:	609a      	str	r2, [r3, #8]
 800e3ea:	60da      	str	r2, [r3, #12]
 800e3ec:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	613b      	str	r3, [r7, #16]
 800e3f2:	4b2a      	ldr	r3, [pc, #168]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f6:	4a29      	ldr	r2, [pc, #164]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e3fe:	4b27      	ldr	r3, [pc, #156]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e406:	613b      	str	r3, [r7, #16]
 800e408:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800e40a:	2300      	movs	r3, #0
 800e40c:	60fb      	str	r3, [r7, #12]
 800e40e:	4b23      	ldr	r3, [pc, #140]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e412:	4a22      	ldr	r2, [pc, #136]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e414:	f043 0304 	orr.w	r3, r3, #4
 800e418:	6313      	str	r3, [r2, #48]	; 0x30
 800e41a:	4b20      	ldr	r3, [pc, #128]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e41e:	f003 0304 	and.w	r3, r3, #4
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800e426:	2300      	movs	r3, #0
 800e428:	60bb      	str	r3, [r7, #8]
 800e42a:	4b1c      	ldr	r3, [pc, #112]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e42e:	4a1b      	ldr	r2, [pc, #108]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e430:	f043 0301 	orr.w	r3, r3, #1
 800e434:	6313      	str	r3, [r2, #48]	; 0x30
 800e436:	4b19      	ldr	r3, [pc, #100]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e43a:	f003 0301 	and.w	r3, r3, #1
 800e43e:	60bb      	str	r3, [r7, #8]
 800e440:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800e442:	2300      	movs	r3, #0
 800e444:	607b      	str	r3, [r7, #4]
 800e446:	4b15      	ldr	r3, [pc, #84]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e44a:	4a14      	ldr	r2, [pc, #80]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e44c:	f043 0302 	orr.w	r3, r3, #2
 800e450:	6313      	str	r3, [r2, #48]	; 0x30
 800e452:	4b12      	ldr	r3, [pc, #72]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e456:	f003 0302 	and.w	r3, r3, #2
 800e45a:	607b      	str	r3, [r7, #4]
 800e45c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800e45e:	2300      	movs	r3, #0
 800e460:	603b      	str	r3, [r7, #0]
 800e462:	4b0e      	ldr	r3, [pc, #56]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e466:	4a0d      	ldr	r2, [pc, #52]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e468:	f043 0308 	orr.w	r3, r3, #8
 800e46c:	6313      	str	r3, [r2, #48]	; 0x30
 800e46e:	4b0b      	ldr	r3, [pc, #44]	; (800e49c <MX_GPIO_Init+0xc4>)
 800e470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e472:	f003 0308 	and.w	r3, r3, #8
 800e476:	603b      	str	r3, [r7, #0]
 800e478:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : CardDet_Pin */
	GPIO_InitStruct.Pin = CardDet_Pin;
 800e47a:	2380      	movs	r3, #128	; 0x80
 800e47c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e47e:	2300      	movs	r3, #0
 800e480:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e482:	2301      	movs	r3, #1
 800e484:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CardDet_GPIO_Port, &GPIO_InitStruct);
 800e486:	f107 0314 	add.w	r3, r7, #20
 800e48a:	4619      	mov	r1, r3
 800e48c:	4804      	ldr	r0, [pc, #16]	; (800e4a0 <MX_GPIO_Init+0xc8>)
 800e48e:	f7f3 fadb 	bl	8001a48 <HAL_GPIO_Init>

}
 800e492:	bf00      	nop
 800e494:	3728      	adds	r7, #40	; 0x28
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	40023800 	.word	0x40023800
 800e4a0:	40020800 	.word	0x40020800

0800e4a4 <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s2) {
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
	if (hi2s2->Instance == I2S2) {
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a04      	ldr	r2, [pc, #16]	; (800e4c4 <HAL_I2S_TxCpltCallback+0x20>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d101      	bne.n	800e4ba <HAL_I2S_TxCpltCallback+0x16>
		AudioPlay_TransferComplete_CallBack();
 800e4b6:	f7ff f8a7 	bl	800d608 <AudioPlay_TransferComplete_CallBack>
	}
}
 800e4ba:	bf00      	nop
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	40003800 	.word	0x40003800

0800e4c8 <HAL_I2S_TxHalfCpltCallback>:
//---------------------------------------------------------
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s2) {
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
	if (hi2s2->Instance == I2S2) {
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a04      	ldr	r2, [pc, #16]	; (800e4e8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d101      	bne.n	800e4de <HAL_I2S_TxHalfCpltCallback+0x16>
		AudioPlay_HalfTransfer_CallBack();
 800e4da:	f7ff f88f 	bl	800d5fc <AudioPlay_HalfTransfer_CallBack>
	}
}
 800e4de:	bf00      	nop
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	40003800 	.word	0x40003800

0800e4ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800e4f0:	bf00      	nop
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
	...

0800e4fc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	4603      	mov	r3, r0
 800e504:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e506:	4b0b      	ldr	r3, [pc, #44]	; (800e534 <SD_CheckStatus+0x38>)
 800e508:	2201      	movs	r2, #1
 800e50a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e50c:	f7ff f8e4 	bl	800d6d8 <BSP_SD_GetCardState>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d107      	bne.n	800e526 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e516:	4b07      	ldr	r3, [pc, #28]	; (800e534 <SD_CheckStatus+0x38>)
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	f023 0301 	bic.w	r3, r3, #1
 800e520:	b2da      	uxtb	r2, r3
 800e522:	4b04      	ldr	r3, [pc, #16]	; (800e534 <SD_CheckStatus+0x38>)
 800e524:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e526:	4b03      	ldr	r3, [pc, #12]	; (800e534 <SD_CheckStatus+0x38>)
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	b2db      	uxtb	r3, r3
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3708      	adds	r7, #8
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	20000120 	.word	0x20000120

0800e538 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	4603      	mov	r3, r0
 800e540:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800e542:	4b0b      	ldr	r3, [pc, #44]	; (800e570 <SD_initialize+0x38>)
 800e544:	2201      	movs	r2, #1
 800e546:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e548:	f7ff f864 	bl	800d614 <BSP_SD_Init>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d107      	bne.n	800e562 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e552:	79fb      	ldrb	r3, [r7, #7]
 800e554:	4618      	mov	r0, r3
 800e556:	f7ff ffd1 	bl	800e4fc <SD_CheckStatus>
 800e55a:	4603      	mov	r3, r0
 800e55c:	461a      	mov	r2, r3
 800e55e:	4b04      	ldr	r3, [pc, #16]	; (800e570 <SD_initialize+0x38>)
 800e560:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e562:	4b03      	ldr	r3, [pc, #12]	; (800e570 <SD_initialize+0x38>)
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	b2db      	uxtb	r3, r3
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	20000120 	.word	0x20000120

0800e574 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e57e:	79fb      	ldrb	r3, [r7, #7]
 800e580:	4618      	mov	r0, r3
 800e582:	f7ff ffbb 	bl	800e4fc <SD_CheckStatus>
 800e586:	4603      	mov	r3, r0
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	60b9      	str	r1, [r7, #8]
 800e598:	607a      	str	r2, [r7, #4]
 800e59a:	603b      	str	r3, [r7, #0]
 800e59c:	4603      	mov	r3, r0
 800e59e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a8:	683a      	ldr	r2, [r7, #0]
 800e5aa:	6879      	ldr	r1, [r7, #4]
 800e5ac:	68b8      	ldr	r0, [r7, #8]
 800e5ae:	f7ff f857 	bl	800d660 <BSP_SD_ReadBlocks>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d107      	bne.n	800e5c8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e5b8:	bf00      	nop
 800e5ba:	f7ff f88d 	bl	800d6d8 <BSP_SD_GetCardState>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1fa      	bne.n	800e5ba <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3718      	adds	r7, #24
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b086      	sub	sp, #24
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	607a      	str	r2, [r7, #4]
 800e5dc:	603b      	str	r3, [r7, #0]
 800e5de:	4603      	mov	r3, r0
 800e5e0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ea:	683a      	ldr	r2, [r7, #0]
 800e5ec:	6879      	ldr	r1, [r7, #4]
 800e5ee:	68b8      	ldr	r0, [r7, #8]
 800e5f0:	f7ff f854 	bl	800d69c <BSP_SD_WriteBlocks>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d107      	bne.n	800e60a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e5fa:	bf00      	nop
 800e5fc:	f7ff f86c 	bl	800d6d8 <BSP_SD_GetCardState>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1fa      	bne.n	800e5fc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e606:	2300      	movs	r3, #0
 800e608:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b08c      	sub	sp, #48	; 0x30
 800e618:	af00      	add	r7, sp, #0
 800e61a:	4603      	mov	r3, r0
 800e61c:	603a      	str	r2, [r7, #0]
 800e61e:	71fb      	strb	r3, [r7, #7]
 800e620:	460b      	mov	r3, r1
 800e622:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e624:	2301      	movs	r3, #1
 800e626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e62a:	4b25      	ldr	r3, [pc, #148]	; (800e6c0 <SD_ioctl+0xac>)
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	f003 0301 	and.w	r3, r3, #1
 800e634:	2b00      	cmp	r3, #0
 800e636:	d001      	beq.n	800e63c <SD_ioctl+0x28>
 800e638:	2303      	movs	r3, #3
 800e63a:	e03c      	b.n	800e6b6 <SD_ioctl+0xa2>

  switch (cmd)
 800e63c:	79bb      	ldrb	r3, [r7, #6]
 800e63e:	2b03      	cmp	r3, #3
 800e640:	d834      	bhi.n	800e6ac <SD_ioctl+0x98>
 800e642:	a201      	add	r2, pc, #4	; (adr r2, 800e648 <SD_ioctl+0x34>)
 800e644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e648:	0800e659 	.word	0x0800e659
 800e64c:	0800e661 	.word	0x0800e661
 800e650:	0800e679 	.word	0x0800e679
 800e654:	0800e693 	.word	0x0800e693
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e658:	2300      	movs	r3, #0
 800e65a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e65e:	e028      	b.n	800e6b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e660:	f107 030c 	add.w	r3, r7, #12
 800e664:	4618      	mov	r0, r3
 800e666:	f7ff f847 	bl	800d6f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e66a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e676:	e01c      	b.n	800e6b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e678:	f107 030c 	add.w	r3, r7, #12
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7ff f83b 	bl	800d6f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e684:	b29a      	uxth	r2, r3
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e68a:	2300      	movs	r3, #0
 800e68c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e690:	e00f      	b.n	800e6b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e692:	f107 030c 	add.w	r3, r7, #12
 800e696:	4618      	mov	r0, r3
 800e698:	f7ff f82e 	bl	800d6f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69e:	0a5a      	lsrs	r2, r3, #9
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e6aa:	e002      	b.n	800e6b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e6ac:	2304      	movs	r3, #4
 800e6ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e6b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3730      	adds	r7, #48	; 0x30
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	20000120 	.word	0x20000120

0800e6c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	607b      	str	r3, [r7, #4]
 800e6ce:	4b10      	ldr	r3, [pc, #64]	; (800e710 <HAL_MspInit+0x4c>)
 800e6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d2:	4a0f      	ldr	r2, [pc, #60]	; (800e710 <HAL_MspInit+0x4c>)
 800e6d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e6d8:	6453      	str	r3, [r2, #68]	; 0x44
 800e6da:	4b0d      	ldr	r3, [pc, #52]	; (800e710 <HAL_MspInit+0x4c>)
 800e6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6e2:	607b      	str	r3, [r7, #4]
 800e6e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	603b      	str	r3, [r7, #0]
 800e6ea:	4b09      	ldr	r3, [pc, #36]	; (800e710 <HAL_MspInit+0x4c>)
 800e6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ee:	4a08      	ldr	r2, [pc, #32]	; (800e710 <HAL_MspInit+0x4c>)
 800e6f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6f4:	6413      	str	r3, [r2, #64]	; 0x40
 800e6f6:	4b06      	ldr	r3, [pc, #24]	; (800e710 <HAL_MspInit+0x4c>)
 800e6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6fe:	603b      	str	r3, [r7, #0]
 800e700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e702:	bf00      	nop
 800e704:	370c      	adds	r7, #12
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop
 800e710:	40023800 	.word	0x40023800

0800e714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08a      	sub	sp, #40	; 0x28
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e71c:	f107 0314 	add.w	r3, r7, #20
 800e720:	2200      	movs	r2, #0
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	605a      	str	r2, [r3, #4]
 800e726:	609a      	str	r2, [r3, #8]
 800e728:	60da      	str	r2, [r3, #12]
 800e72a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4a1d      	ldr	r2, [pc, #116]	; (800e7a8 <HAL_I2C_MspInit+0x94>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d133      	bne.n	800e79e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e736:	2300      	movs	r3, #0
 800e738:	613b      	str	r3, [r7, #16]
 800e73a:	4b1c      	ldr	r3, [pc, #112]	; (800e7ac <HAL_I2C_MspInit+0x98>)
 800e73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e73e:	4a1b      	ldr	r2, [pc, #108]	; (800e7ac <HAL_I2C_MspInit+0x98>)
 800e740:	f043 0302 	orr.w	r3, r3, #2
 800e744:	6313      	str	r3, [r2, #48]	; 0x30
 800e746:	4b19      	ldr	r3, [pc, #100]	; (800e7ac <HAL_I2C_MspInit+0x98>)
 800e748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e74a:	f003 0302 	and.w	r3, r3, #2
 800e74e:	613b      	str	r3, [r7, #16]
 800e750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e752:	23c0      	movs	r3, #192	; 0xc0
 800e754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e756:	2312      	movs	r3, #18
 800e758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e75a:	2301      	movs	r3, #1
 800e75c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e75e:	2300      	movs	r3, #0
 800e760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e762:	2304      	movs	r3, #4
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e766:	f107 0314 	add.w	r3, r7, #20
 800e76a:	4619      	mov	r1, r3
 800e76c:	4810      	ldr	r0, [pc, #64]	; (800e7b0 <HAL_I2C_MspInit+0x9c>)
 800e76e:	f7f3 f96b 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e772:	2300      	movs	r3, #0
 800e774:	60fb      	str	r3, [r7, #12]
 800e776:	4b0d      	ldr	r3, [pc, #52]	; (800e7ac <HAL_I2C_MspInit+0x98>)
 800e778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e77a:	4a0c      	ldr	r2, [pc, #48]	; (800e7ac <HAL_I2C_MspInit+0x98>)
 800e77c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e780:	6413      	str	r3, [r2, #64]	; 0x40
 800e782:	4b0a      	ldr	r3, [pc, #40]	; (800e7ac <HAL_I2C_MspInit+0x98>)
 800e784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800e78e:	2200      	movs	r2, #0
 800e790:	2100      	movs	r1, #0
 800e792:	201f      	movs	r0, #31
 800e794:	f7f2 fd13 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800e798:	201f      	movs	r0, #31
 800e79a:	f7f2 fd2c 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e79e:	bf00      	nop
 800e7a0:	3728      	adds	r7, #40	; 0x28
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	40005400 	.word	0x40005400
 800e7ac:	40023800 	.word	0x40023800
 800e7b0:	40020400 	.word	0x40020400

0800e7b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b08a      	sub	sp, #40	; 0x28
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7bc:	f107 0314 	add.w	r3, r7, #20
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	601a      	str	r2, [r3, #0]
 800e7c4:	605a      	str	r2, [r3, #4]
 800e7c6:	609a      	str	r2, [r3, #8]
 800e7c8:	60da      	str	r2, [r3, #12]
 800e7ca:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4a52      	ldr	r2, [pc, #328]	; (800e91c <HAL_I2S_MspInit+0x168>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	f040 809d 	bne.w	800e912 <HAL_I2S_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e7d8:	2300      	movs	r3, #0
 800e7da:	613b      	str	r3, [r7, #16]
 800e7dc:	4b50      	ldr	r3, [pc, #320]	; (800e920 <HAL_I2S_MspInit+0x16c>)
 800e7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e0:	4a4f      	ldr	r2, [pc, #316]	; (800e920 <HAL_I2S_MspInit+0x16c>)
 800e7e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e7e6:	6413      	str	r3, [r2, #64]	; 0x40
 800e7e8:	4b4d      	ldr	r3, [pc, #308]	; (800e920 <HAL_I2S_MspInit+0x16c>)
 800e7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7f0:	613b      	str	r3, [r7, #16]
 800e7f2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	4b49      	ldr	r3, [pc, #292]	; (800e920 <HAL_I2S_MspInit+0x16c>)
 800e7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fc:	4a48      	ldr	r2, [pc, #288]	; (800e920 <HAL_I2S_MspInit+0x16c>)
 800e7fe:	f043 0304 	orr.w	r3, r3, #4
 800e802:	6313      	str	r3, [r2, #48]	; 0x30
 800e804:	4b46      	ldr	r3, [pc, #280]	; (800e920 <HAL_I2S_MspInit+0x16c>)
 800e806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e808:	f003 0304 	and.w	r3, r3, #4
 800e80c:	60fb      	str	r3, [r7, #12]
 800e80e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e810:	2300      	movs	r3, #0
 800e812:	60bb      	str	r3, [r7, #8]
 800e814:	4b42      	ldr	r3, [pc, #264]	; (800e920 <HAL_I2S_MspInit+0x16c>)
 800e816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e818:	4a41      	ldr	r2, [pc, #260]	; (800e920 <HAL_I2S_MspInit+0x16c>)
 800e81a:	f043 0302 	orr.w	r3, r3, #2
 800e81e:	6313      	str	r3, [r2, #48]	; 0x30
 800e820:	4b3f      	ldr	r3, [pc, #252]	; (800e920 <HAL_I2S_MspInit+0x16c>)
 800e822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e824:	f003 0302 	and.w	r3, r3, #2
 800e828:	60bb      	str	r3, [r7, #8]
 800e82a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e82c:	2308      	movs	r3, #8
 800e82e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e830:	2302      	movs	r3, #2
 800e832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e834:	2300      	movs	r3, #0
 800e836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e838:	2300      	movs	r3, #0
 800e83a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e83c:	2305      	movs	r3, #5
 800e83e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e840:	f107 0314 	add.w	r3, r7, #20
 800e844:	4619      	mov	r1, r3
 800e846:	4837      	ldr	r0, [pc, #220]	; (800e924 <HAL_I2S_MspInit+0x170>)
 800e848:	f7f3 f8fe 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800e84c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e852:	2302      	movs	r3, #2
 800e854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e856:	2300      	movs	r3, #0
 800e858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e85a:	2300      	movs	r3, #0
 800e85c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e85e:	2305      	movs	r3, #5
 800e860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e862:	f107 0314 	add.w	r3, r7, #20
 800e866:	4619      	mov	r1, r3
 800e868:	482f      	ldr	r0, [pc, #188]	; (800e928 <HAL_I2S_MspInit+0x174>)
 800e86a:	f7f3 f8ed 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e86e:	2340      	movs	r3, #64	; 0x40
 800e870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e872:	2302      	movs	r3, #2
 800e874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e876:	2300      	movs	r3, #0
 800e878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800e87a:	2301      	movs	r3, #1
 800e87c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e87e:	2305      	movs	r3, #5
 800e880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e882:	f107 0314 	add.w	r3, r7, #20
 800e886:	4619      	mov	r1, r3
 800e888:	4826      	ldr	r0, [pc, #152]	; (800e924 <HAL_I2S_MspInit+0x170>)
 800e88a:	f7f3 f8dd 	bl	8001a48 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800e88e:	4b27      	ldr	r3, [pc, #156]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e890:	4a27      	ldr	r2, [pc, #156]	; (800e930 <HAL_I2S_MspInit+0x17c>)
 800e892:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800e894:	4b25      	ldr	r3, [pc, #148]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e896:	2200      	movs	r2, #0
 800e898:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e89a:	4b24      	ldr	r3, [pc, #144]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e89c:	2240      	movs	r2, #64	; 0x40
 800e89e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e8a0:	4b22      	ldr	r3, [pc, #136]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e8a6:	4b21      	ldr	r3, [pc, #132]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e8ac:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e8ae:	4b1f      	ldr	r3, [pc, #124]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8b4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e8b6:	4b1d      	ldr	r3, [pc, #116]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e8bc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800e8be:	4b1b      	ldr	r3, [pc, #108]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800e8c4:	4b19      	ldr	r3, [pc, #100]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e8ca:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e8cc:	4b17      	ldr	r3, [pc, #92]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8ce:	2204      	movs	r2, #4
 800e8d0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e8d2:	4b16      	ldr	r3, [pc, #88]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8d4:	2203      	movs	r2, #3
 800e8d6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_INC8;
 800e8d8:	4b14      	ldr	r3, [pc, #80]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e8de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800e8e0:	4b12      	ldr	r3, [pc, #72]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800e8e6:	4811      	ldr	r0, [pc, #68]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8e8:	f7f2 fca0 	bl	800122c <HAL_DMA_Init>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d001      	beq.n	800e8f6 <HAL_I2S_MspInit+0x142>
    {
      Error_Handler();
 800e8f2:	f7ff fdfb 	bl	800e4ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	4a0c      	ldr	r2, [pc, #48]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8fa:	639a      	str	r2, [r3, #56]	; 0x38
 800e8fc:	4a0b      	ldr	r2, [pc, #44]	; (800e92c <HAL_I2S_MspInit+0x178>)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800e902:	2200      	movs	r2, #0
 800e904:	2100      	movs	r1, #0
 800e906:	2024      	movs	r0, #36	; 0x24
 800e908:	f7f2 fc59 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800e90c:	2024      	movs	r0, #36	; 0x24
 800e90e:	f7f2 fc72 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e912:	bf00      	nop
 800e914:	3728      	adds	r7, #40	; 0x28
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	40003800 	.word	0x40003800
 800e920:	40023800 	.word	0x40023800
 800e924:	40020800 	.word	0x40020800
 800e928:	40020400 	.word	0x40020400
 800e92c:	200013e4 	.word	0x200013e4
 800e930:	40026070 	.word	0x40026070

0800e934 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08a      	sub	sp, #40	; 0x28
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e93c:	f107 0314 	add.w	r3, r7, #20
 800e940:	2200      	movs	r2, #0
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	605a      	str	r2, [r3, #4]
 800e946:	609a      	str	r2, [r3, #8]
 800e948:	60da      	str	r2, [r3, #12]
 800e94a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a28      	ldr	r2, [pc, #160]	; (800e9f4 <HAL_SD_MspInit+0xc0>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d14a      	bne.n	800e9ec <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800e956:	2300      	movs	r3, #0
 800e958:	613b      	str	r3, [r7, #16]
 800e95a:	4b27      	ldr	r3, [pc, #156]	; (800e9f8 <HAL_SD_MspInit+0xc4>)
 800e95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e95e:	4a26      	ldr	r2, [pc, #152]	; (800e9f8 <HAL_SD_MspInit+0xc4>)
 800e960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e964:	6453      	str	r3, [r2, #68]	; 0x44
 800e966:	4b24      	ldr	r3, [pc, #144]	; (800e9f8 <HAL_SD_MspInit+0xc4>)
 800e968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e96a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e96e:	613b      	str	r3, [r7, #16]
 800e970:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e972:	2300      	movs	r3, #0
 800e974:	60fb      	str	r3, [r7, #12]
 800e976:	4b20      	ldr	r3, [pc, #128]	; (800e9f8 <HAL_SD_MspInit+0xc4>)
 800e978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97a:	4a1f      	ldr	r2, [pc, #124]	; (800e9f8 <HAL_SD_MspInit+0xc4>)
 800e97c:	f043 0304 	orr.w	r3, r3, #4
 800e980:	6313      	str	r3, [r2, #48]	; 0x30
 800e982:	4b1d      	ldr	r3, [pc, #116]	; (800e9f8 <HAL_SD_MspInit+0xc4>)
 800e984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e986:	f003 0304 	and.w	r3, r3, #4
 800e98a:	60fb      	str	r3, [r7, #12]
 800e98c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e98e:	2300      	movs	r3, #0
 800e990:	60bb      	str	r3, [r7, #8]
 800e992:	4b19      	ldr	r3, [pc, #100]	; (800e9f8 <HAL_SD_MspInit+0xc4>)
 800e994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e996:	4a18      	ldr	r2, [pc, #96]	; (800e9f8 <HAL_SD_MspInit+0xc4>)
 800e998:	f043 0308 	orr.w	r3, r3, #8
 800e99c:	6313      	str	r3, [r2, #48]	; 0x30
 800e99e:	4b16      	ldr	r3, [pc, #88]	; (800e9f8 <HAL_SD_MspInit+0xc4>)
 800e9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a2:	f003 0308 	and.w	r3, r3, #8
 800e9a6:	60bb      	str	r3, [r7, #8]
 800e9a8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800e9aa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800e9ae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9b8:	2303      	movs	r3, #3
 800e9ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e9bc:	230c      	movs	r3, #12
 800e9be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e9c0:	f107 0314 	add.w	r3, r7, #20
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	480d      	ldr	r0, [pc, #52]	; (800e9fc <HAL_SD_MspInit+0xc8>)
 800e9c8:	f7f3 f83e 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e9cc:	2304      	movs	r3, #4
 800e9ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9d0:	2302      	movs	r3, #2
 800e9d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e9dc:	230c      	movs	r3, #12
 800e9de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e9e0:	f107 0314 	add.w	r3, r7, #20
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	4806      	ldr	r0, [pc, #24]	; (800ea00 <HAL_SD_MspInit+0xcc>)
 800e9e8:	f7f3 f82e 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800e9ec:	bf00      	nop
 800e9ee:	3728      	adds	r7, #40	; 0x28
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	40012c00 	.word	0x40012c00
 800e9f8:	40023800 	.word	0x40023800
 800e9fc:	40020800 	.word	0x40020800
 800ea00:	40020c00 	.word	0x40020c00

0800ea04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a0e      	ldr	r2, [pc, #56]	; (800ea4c <HAL_TIM_Base_MspInit+0x48>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d115      	bne.n	800ea42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ea16:	2300      	movs	r3, #0
 800ea18:	60fb      	str	r3, [r7, #12]
 800ea1a:	4b0d      	ldr	r3, [pc, #52]	; (800ea50 <HAL_TIM_Base_MspInit+0x4c>)
 800ea1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea1e:	4a0c      	ldr	r2, [pc, #48]	; (800ea50 <HAL_TIM_Base_MspInit+0x4c>)
 800ea20:	f043 0301 	orr.w	r3, r3, #1
 800ea24:	6453      	str	r3, [r2, #68]	; 0x44
 800ea26:	4b0a      	ldr	r3, [pc, #40]	; (800ea50 <HAL_TIM_Base_MspInit+0x4c>)
 800ea28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea2a:	f003 0301 	and.w	r3, r3, #1
 800ea2e:	60fb      	str	r3, [r7, #12]
 800ea30:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800ea32:	2200      	movs	r2, #0
 800ea34:	2100      	movs	r1, #0
 800ea36:	2019      	movs	r0, #25
 800ea38:	f7f2 fbc1 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ea3c:	2019      	movs	r0, #25
 800ea3e:	f7f2 fbda 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800ea42:	bf00      	nop
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	40010000 	.word	0x40010000
 800ea50:	40023800 	.word	0x40023800

0800ea54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a22      	ldr	r2, [pc, #136]	; (800eaec <HAL_TIM_PWM_MspInit+0x98>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d13d      	bne.n	800eae2 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ea66:	2300      	movs	r3, #0
 800ea68:	60fb      	str	r3, [r7, #12]
 800ea6a:	4b21      	ldr	r3, [pc, #132]	; (800eaf0 <HAL_TIM_PWM_MspInit+0x9c>)
 800ea6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea6e:	4a20      	ldr	r2, [pc, #128]	; (800eaf0 <HAL_TIM_PWM_MspInit+0x9c>)
 800ea70:	f043 0302 	orr.w	r3, r3, #2
 800ea74:	6413      	str	r3, [r2, #64]	; 0x40
 800ea76:	4b1e      	ldr	r3, [pc, #120]	; (800eaf0 <HAL_TIM_PWM_MspInit+0x9c>)
 800ea78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea7a:	f003 0302 	and.w	r3, r3, #2
 800ea7e:	60fb      	str	r3, [r7, #12]
 800ea80:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800ea82:	4b1c      	ldr	r3, [pc, #112]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800ea84:	4a1c      	ldr	r2, [pc, #112]	; (800eaf8 <HAL_TIM_PWM_MspInit+0xa4>)
 800ea86:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800ea88:	4b1a      	ldr	r3, [pc, #104]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800ea8a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800ea8e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ea90:	4b18      	ldr	r3, [pc, #96]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800ea92:	2240      	movs	r2, #64	; 0x40
 800ea94:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ea96:	4b17      	ldr	r3, [pc, #92]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ea9c:	4b15      	ldr	r3, [pc, #84]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800ea9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eaa2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800eaa4:	4b13      	ldr	r3, [pc, #76]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800eaa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eaaa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800eaac:	4b11      	ldr	r3, [pc, #68]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800eaae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eab2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800eab4:	4b0f      	ldr	r3, [pc, #60]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800eab6:	2200      	movs	r2, #0
 800eab8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800eaba:	4b0e      	ldr	r3, [pc, #56]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eac0:	4b0c      	ldr	r3, [pc, #48]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800eac6:	480b      	ldr	r0, [pc, #44]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800eac8:	f7f2 fbb0 	bl	800122c <HAL_DMA_Init>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d001      	beq.n	800ead6 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800ead2:	f7ff fd0b 	bl	800e4ec <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a06      	ldr	r2, [pc, #24]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800eada:	629a      	str	r2, [r3, #40]	; 0x28
 800eadc:	4a05      	ldr	r2, [pc, #20]	; (800eaf4 <HAL_TIM_PWM_MspInit+0xa0>)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800eae2:	bf00      	nop
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	40000400 	.word	0x40000400
 800eaf0:	40023800 	.word	0x40023800
 800eaf4:	20000ec8 	.word	0x20000ec8
 800eaf8:	40026088 	.word	0x40026088

0800eafc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b08a      	sub	sp, #40	; 0x28
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb04:	f107 0314 	add.w	r3, r7, #20
 800eb08:	2200      	movs	r2, #0
 800eb0a:	601a      	str	r2, [r3, #0]
 800eb0c:	605a      	str	r2, [r3, #4]
 800eb0e:	609a      	str	r2, [r3, #8]
 800eb10:	60da      	str	r2, [r3, #12]
 800eb12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a24      	ldr	r2, [pc, #144]	; (800ebac <HAL_TIM_MspPostInit+0xb0>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d11f      	bne.n	800eb5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb1e:	2300      	movs	r3, #0
 800eb20:	613b      	str	r3, [r7, #16]
 800eb22:	4b23      	ldr	r3, [pc, #140]	; (800ebb0 <HAL_TIM_MspPostInit+0xb4>)
 800eb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb26:	4a22      	ldr	r2, [pc, #136]	; (800ebb0 <HAL_TIM_MspPostInit+0xb4>)
 800eb28:	f043 0302 	orr.w	r3, r3, #2
 800eb2c:	6313      	str	r3, [r2, #48]	; 0x30
 800eb2e:	4b20      	ldr	r3, [pc, #128]	; (800ebb0 <HAL_TIM_MspPostInit+0xb4>)
 800eb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb32:	f003 0302 	and.w	r3, r3, #2
 800eb36:	613b      	str	r3, [r7, #16]
 800eb38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PB13     ------> TIM1_CH1N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800eb3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb40:	2302      	movs	r3, #2
 800eb42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb44:	2300      	movs	r3, #0
 800eb46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb50:	f107 0314 	add.w	r3, r7, #20
 800eb54:	4619      	mov	r1, r3
 800eb56:	4817      	ldr	r0, [pc, #92]	; (800ebb4 <HAL_TIM_MspPostInit+0xb8>)
 800eb58:	f7f2 ff76 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800eb5c:	e022      	b.n	800eba4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a15      	ldr	r2, [pc, #84]	; (800ebb8 <HAL_TIM_MspPostInit+0xbc>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d11d      	bne.n	800eba4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb68:	2300      	movs	r3, #0
 800eb6a:	60fb      	str	r3, [r7, #12]
 800eb6c:	4b10      	ldr	r3, [pc, #64]	; (800ebb0 <HAL_TIM_MspPostInit+0xb4>)
 800eb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb70:	4a0f      	ldr	r2, [pc, #60]	; (800ebb0 <HAL_TIM_MspPostInit+0xb4>)
 800eb72:	f043 0301 	orr.w	r3, r3, #1
 800eb76:	6313      	str	r3, [r2, #48]	; 0x30
 800eb78:	4b0d      	ldr	r3, [pc, #52]	; (800ebb0 <HAL_TIM_MspPostInit+0xb4>)
 800eb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb7c:	f003 0301 	and.w	r3, r3, #1
 800eb80:	60fb      	str	r3, [r7, #12]
 800eb82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800eb84:	2380      	movs	r3, #128	; 0x80
 800eb86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb88:	2302      	movs	r3, #2
 800eb8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb90:	2300      	movs	r3, #0
 800eb92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800eb94:	2302      	movs	r3, #2
 800eb96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb98:	f107 0314 	add.w	r3, r7, #20
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	4807      	ldr	r0, [pc, #28]	; (800ebbc <HAL_TIM_MspPostInit+0xc0>)
 800eba0:	f7f2 ff52 	bl	8001a48 <HAL_GPIO_Init>
}
 800eba4:	bf00      	nop
 800eba6:	3728      	adds	r7, #40	; 0x28
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	40010000 	.word	0x40010000
 800ebb0:	40023800 	.word	0x40023800
 800ebb4:	40020400 	.word	0x40020400
 800ebb8:	40000400 	.word	0x40000400
 800ebbc:	40020000 	.word	0x40020000

0800ebc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ebc4:	bf00      	nop
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr

0800ebce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ebce:	b480      	push	{r7}
 800ebd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ebd2:	e7fe      	b.n	800ebd2 <HardFault_Handler+0x4>

0800ebd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ebd8:	e7fe      	b.n	800ebd8 <MemManage_Handler+0x4>

0800ebda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ebda:	b480      	push	{r7}
 800ebdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ebde:	e7fe      	b.n	800ebde <BusFault_Handler+0x4>

0800ebe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ebe4:	e7fe      	b.n	800ebe4 <UsageFault_Handler+0x4>

0800ebe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ebe6:	b480      	push	{r7}
 800ebe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ebea:	bf00      	nop
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ebf8:	bf00      	nop
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr

0800ec02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ec02:	b480      	push	{r7}
 800ec04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ec06:	bf00      	nop
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ec14:	f7f2 f9b6 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ec18:	bf00      	nop
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800ec20:	4802      	ldr	r0, [pc, #8]	; (800ec2c <DMA1_Stream4_IRQHandler+0x10>)
 800ec22:	f7f2 fc9b 	bl	800155c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ec26:	bf00      	nop
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	200013e4 	.word	0x200013e4

0800ec30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_TIM_PWM_Stop_DMA(&htim3,TIM_CHANNEL_2);
 800ec34:	2104      	movs	r1, #4
 800ec36:	4804      	ldr	r0, [pc, #16]	; (800ec48 <DMA1_Stream5_IRQHandler+0x18>)
 800ec38:	f7f9 fe3a 	bl	80088b0 <HAL_TIM_PWM_Stop_DMA>
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800ec3c:	4803      	ldr	r0, [pc, #12]	; (800ec4c <DMA1_Stream5_IRQHandler+0x1c>)
 800ec3e:	f7f2 fc8d 	bl	800155c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800ec42:	bf00      	nop
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	20000cec 	.word	0x20000cec
 800ec4c:	20000ec8 	.word	0x20000ec8

0800ec50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ec54:	4803      	ldr	r0, [pc, #12]	; (800ec64 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800ec56:	f7f9 fed1 	bl	80089fc <HAL_TIM_IRQHandler>
  lightLeds=1;
 800ec5a:	4b03      	ldr	r3, [pc, #12]	; (800ec68 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ec60:	bf00      	nop
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	20000f28 	.word	0x20000f28
 800ec68:	20000230 	.word	0x20000230

0800ec6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800ec70:	4802      	ldr	r0, [pc, #8]	; (800ec7c <I2C1_EV_IRQHandler+0x10>)
 800ec72:	f7f3 fe0d 	bl	8002890 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800ec76:	bf00      	nop
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	20000c94 	.word	0x20000c94

0800ec80 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800ec84:	4802      	ldr	r0, [pc, #8]	; (800ec90 <SPI2_IRQHandler+0x10>)
 800ec86:	f7f6 f803 	bl	8004c90 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800ec8a:	bf00      	nop
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	20001444 	.word	0x20001444

0800ec94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ec98:	4802      	ldr	r0, [pc, #8]	; (800eca4 <OTG_FS_IRQHandler+0x10>)
 800ec9a:	f7f6 fd39 	bl	8005710 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ec9e:	bf00      	nop
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20001764 	.word	0x20001764

0800eca8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ecb0:	4b11      	ldr	r3, [pc, #68]	; (800ecf8 <_sbrk+0x50>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d102      	bne.n	800ecbe <_sbrk+0x16>
		heap_end = &end;
 800ecb8:	4b0f      	ldr	r3, [pc, #60]	; (800ecf8 <_sbrk+0x50>)
 800ecba:	4a10      	ldr	r2, [pc, #64]	; (800ecfc <_sbrk+0x54>)
 800ecbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ecbe:	4b0e      	ldr	r3, [pc, #56]	; (800ecf8 <_sbrk+0x50>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ecc4:	4b0c      	ldr	r3, [pc, #48]	; (800ecf8 <_sbrk+0x50>)
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4413      	add	r3, r2
 800eccc:	466a      	mov	r2, sp
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d907      	bls.n	800ece2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ecd2:	f000 fed9 	bl	800fa88 <__errno>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	230c      	movs	r3, #12
 800ecda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ecdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ece0:	e006      	b.n	800ecf0 <_sbrk+0x48>
	}

	heap_end += incr;
 800ece2:	4b05      	ldr	r3, [pc, #20]	; (800ecf8 <_sbrk+0x50>)
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4413      	add	r3, r2
 800ecea:	4a03      	ldr	r2, [pc, #12]	; (800ecf8 <_sbrk+0x50>)
 800ecec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ecee:	68fb      	ldr	r3, [r7, #12]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3710      	adds	r7, #16
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	20000244 	.word	0x20000244
 800ecfc:	20001d70 	.word	0x20001d70

0800ed00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ed00:	b480      	push	{r7}
 800ed02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ed04:	4b08      	ldr	r3, [pc, #32]	; (800ed28 <SystemInit+0x28>)
 800ed06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed0a:	4a07      	ldr	r2, [pc, #28]	; (800ed28 <SystemInit+0x28>)
 800ed0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ed14:	4b04      	ldr	r3, [pc, #16]	; (800ed28 <SystemInit+0x28>)
 800ed16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ed1a:	609a      	str	r2, [r3, #8]
#endif
}
 800ed1c:	bf00      	nop
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	e000ed00 	.word	0xe000ed00

0800ed2c <tlv_init>:
extern I2C_HandleTypeDef hi2c1;
static int inited=0;
uint8_t i2cData[7];

int tlv_init()
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af02      	add	r7, sp, #8

	uint8_t regs[2]={0x00,0x02}; // no int, lp=0,fast=1; master controlled mode
 800ed32:	2300      	movs	r3, #0
 800ed34:	713b      	strb	r3, [r7, #4]
 800ed36:	2302      	movs	r3, #2
 800ed38:	717b      	strb	r3, [r7, #5]


	for (addr=2; addr<255; addr++)
 800ed3a:	4b1c      	ldr	r3, [pc, #112]	; (800edac <tlv_init+0x80>)
 800ed3c:	2202      	movs	r2, #2
 800ed3e:	801a      	strh	r2, [r3, #0]
 800ed40:	e014      	b.n	800ed6c <tlv_init+0x40>
	{
		if (HAL_I2C_Master_Transmit(&hi2c1, addr, regs, 2, 5) ==HAL_OK)
 800ed42:	4b1a      	ldr	r3, [pc, #104]	; (800edac <tlv_init+0x80>)
 800ed44:	8819      	ldrh	r1, [r3, #0]
 800ed46:	1d3a      	adds	r2, r7, #4
 800ed48:	2305      	movs	r3, #5
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	2302      	movs	r3, #2
 800ed4e:	4818      	ldr	r0, [pc, #96]	; (800edb0 <tlv_init+0x84>)
 800ed50:	f7f3 f94c 	bl	8001fec <HAL_I2C_Master_Transmit>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00d      	beq.n	800ed76 <tlv_init+0x4a>
		{
			break;
		}
		HAL_Delay(1);
 800ed5a:	2001      	movs	r0, #1
 800ed5c:	f7f2 f932 	bl	8000fc4 <HAL_Delay>
	for (addr=2; addr<255; addr++)
 800ed60:	4b12      	ldr	r3, [pc, #72]	; (800edac <tlv_init+0x80>)
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	3301      	adds	r3, #1
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	4b10      	ldr	r3, [pc, #64]	; (800edac <tlv_init+0x80>)
 800ed6a:	801a      	strh	r2, [r3, #0]
 800ed6c:	4b0f      	ldr	r3, [pc, #60]	; (800edac <tlv_init+0x80>)
 800ed6e:	881b      	ldrh	r3, [r3, #0]
 800ed70:	2bfe      	cmp	r3, #254	; 0xfe
 800ed72:	d9e6      	bls.n	800ed42 <tlv_init+0x16>
 800ed74:	e000      	b.n	800ed78 <tlv_init+0x4c>
			break;
 800ed76:	bf00      	nop
	}

	//uint8_t regs[2]={0x00,0x02}; // no int, lp=0,fast=1; master controlled mode
	//HAL_I2C_Master_Transmit(&hi2c1, addr, regs, 2, 5)

	if (HAL_I2C_IsDeviceReady(&hi2c1, addr, 1, 20) ==HAL_OK || addr<255){
 800ed78:	4b0c      	ldr	r3, [pc, #48]	; (800edac <tlv_init+0x80>)
 800ed7a:	8819      	ldrh	r1, [r3, #0]
 800ed7c:	2314      	movs	r3, #20
 800ed7e:	2201      	movs	r2, #1
 800ed80:	480b      	ldr	r0, [pc, #44]	; (800edb0 <tlv_init+0x84>)
 800ed82:	f7f3 fc57 	bl	8002634 <HAL_I2C_IsDeviceReady>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d003      	beq.n	800ed94 <tlv_init+0x68>
 800ed8c:	4b07      	ldr	r3, [pc, #28]	; (800edac <tlv_init+0x80>)
 800ed8e:	881b      	ldrh	r3, [r3, #0]
 800ed90:	2bfe      	cmp	r3, #254	; 0xfe
 800ed92:	d804      	bhi.n	800ed9e <tlv_init+0x72>
		inited=1;
 800ed94:	4b07      	ldr	r3, [pc, #28]	; (800edb4 <tlv_init+0x88>)
 800ed96:	2201      	movs	r2, #1
 800ed98:	601a      	str	r2, [r3, #0]
		return 1;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e001      	b.n	800eda2 <tlv_init+0x76>
	} else {
		return -1;
 800ed9e:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	20000248 	.word	0x20000248
 800edb0:	20000c94 	.word	0x20000c94
 800edb4:	2000024c 	.word	0x2000024c

0800edb8 <getMagVal>:
{
	HAL_I2C_Master_Transmit(&hi2c1, addr, 0, 1, 20);
	return 1;
}
int getMagVal()
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b08a      	sub	sp, #40	; 0x28
 800edbc:	af04      	add	r7, sp, #16
	int16_t by_value;
	int16_t bx_value;
	int magnitude;
	//uint8_t tlvData[8];
	//uint8_t res=	HAL_I2C_Master_Receive(&hi2c1, addr, tlvData, 7, 10);
	for(int y = 0;y<6;y++){
 800edbe:	2300      	movs	r3, #0
 800edc0:	613b      	str	r3, [r7, #16]
 800edc2:	e00f      	b.n	800ede4 <getMagVal+0x2c>
		if(HAL_I2C_IsDeviceReady(&hi2c1, addr, 1, 20) == HAL_BUSY ){
 800edc4:	4b3d      	ldr	r3, [pc, #244]	; (800eebc <getMagVal+0x104>)
 800edc6:	8819      	ldrh	r1, [r3, #0]
 800edc8:	2314      	movs	r3, #20
 800edca:	2201      	movs	r2, #1
 800edcc:	483c      	ldr	r0, [pc, #240]	; (800eec0 <getMagVal+0x108>)
 800edce:	f7f3 fc31 	bl	8002634 <HAL_I2C_IsDeviceReady>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d102      	bne.n	800edde <getMagVal+0x26>
			HAL_Delay(30);
 800edd8:	201e      	movs	r0, #30
 800edda:	f7f2 f8f3 	bl	8000fc4 <HAL_Delay>
	for(int y = 0;y<6;y++){
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	3301      	adds	r3, #1
 800ede2:	613b      	str	r3, [r7, #16]
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	2b05      	cmp	r3, #5
 800ede8:	ddec      	ble.n	800edc4 <getMagVal+0xc>
		}
	}
	if(HAL_I2C_Mem_Read(&hi2c1, addr, 0x01, 7, i2cData,7,10)== HAL_OK){
 800edea:	4b34      	ldr	r3, [pc, #208]	; (800eebc <getMagVal+0x104>)
 800edec:	8819      	ldrh	r1, [r3, #0]
 800edee:	230a      	movs	r3, #10
 800edf0:	9302      	str	r3, [sp, #8]
 800edf2:	2307      	movs	r3, #7
 800edf4:	9301      	str	r3, [sp, #4]
 800edf6:	4b33      	ldr	r3, [pc, #204]	; (800eec4 <getMagVal+0x10c>)
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	2307      	movs	r3, #7
 800edfc:	2201      	movs	r2, #1
 800edfe:	4830      	ldr	r0, [pc, #192]	; (800eec0 <getMagVal+0x108>)
 800ee00:	f7f3 f9f2 	bl	80021e8 <HAL_I2C_Mem_Read>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d152      	bne.n	800eeb0 <getMagVal+0xf8>
			{
				tlv_init();
				HAL_Delay(30);
			}
			*/
		uint8_t bz_high = i2cData[2];
 800ee0a:	4b2e      	ldr	r3, [pc, #184]	; (800eec4 <getMagVal+0x10c>)
 800ee0c:	789b      	ldrb	r3, [r3, #2]
 800ee0e:	73fb      	strb	r3, [r7, #15]
		uint8_t bz_low = i2cData[5];
 800ee10:	4b2c      	ldr	r3, [pc, #176]	; (800eec4 <getMagVal+0x10c>)
 800ee12:	795b      	ldrb	r3, [r3, #5]
 800ee14:	73bb      	strb	r3, [r7, #14]
		bz_value = (bz_high << 8) | ((bz_low & 0x0F)<<4);
 800ee16:	7bfb      	ldrb	r3, [r7, #15]
 800ee18:	021b      	lsls	r3, r3, #8
 800ee1a:	b21a      	sxth	r2, r3
 800ee1c:	7bbb      	ldrb	r3, [r7, #14]
 800ee1e:	011b      	lsls	r3, r3, #4
 800ee20:	b21b      	sxth	r3, r3
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	b21b      	sxth	r3, r3
 800ee26:	4313      	orrs	r3, r2
 800ee28:	81bb      	strh	r3, [r7, #12]
		bz_value>>=4;
 800ee2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ee2e:	111b      	asrs	r3, r3, #4
 800ee30:	81bb      	strh	r3, [r7, #12]

		uint8_t by_high = i2cData[1];
 800ee32:	4b24      	ldr	r3, [pc, #144]	; (800eec4 <getMagVal+0x10c>)
 800ee34:	785b      	ldrb	r3, [r3, #1]
 800ee36:	72fb      	strb	r3, [r7, #11]
		uint8_t by_low = i2cData[4];
 800ee38:	4b22      	ldr	r3, [pc, #136]	; (800eec4 <getMagVal+0x10c>)
 800ee3a:	791b      	ldrb	r3, [r3, #4]
 800ee3c:	72bb      	strb	r3, [r7, #10]
		by_value = (by_high << 8) | ((by_low & 0x0F)<<4);
 800ee3e:	7afb      	ldrb	r3, [r7, #11]
 800ee40:	021b      	lsls	r3, r3, #8
 800ee42:	b21a      	sxth	r2, r3
 800ee44:	7abb      	ldrb	r3, [r7, #10]
 800ee46:	011b      	lsls	r3, r3, #4
 800ee48:	b21b      	sxth	r3, r3
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	b21b      	sxth	r3, r3
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	813b      	strh	r3, [r7, #8]
		by_value>>=4;
 800ee52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ee56:	111b      	asrs	r3, r3, #4
 800ee58:	813b      	strh	r3, [r7, #8]

		uint8_t bx_high = i2cData[0];
 800ee5a:	4b1a      	ldr	r3, [pc, #104]	; (800eec4 <getMagVal+0x10c>)
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	71fb      	strb	r3, [r7, #7]
		uint8_t bx_low = i2cData[4];
 800ee60:	4b18      	ldr	r3, [pc, #96]	; (800eec4 <getMagVal+0x10c>)
 800ee62:	791b      	ldrb	r3, [r3, #4]
 800ee64:	71bb      	strb	r3, [r7, #6]
		bx_value = (bx_high << 8) | bx_low;
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	021b      	lsls	r3, r3, #8
 800ee6a:	b21a      	sxth	r2, r3
 800ee6c:	79bb      	ldrb	r3, [r7, #6]
 800ee6e:	b21b      	sxth	r3, r3
 800ee70:	4313      	orrs	r3, r2
 800ee72:	80bb      	strh	r3, [r7, #4]
		bx_value>>=4;
 800ee74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ee78:	111b      	asrs	r3, r3, #4
 800ee7a:	80bb      	strh	r3, [r7, #4]
		//if (bz_value>4000){bz_value=0;}

 		magnitude=abs(bz_value)+abs(by_value)+abs(bx_value);
 800ee7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ee80:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800ee84:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800ee88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	bfb8      	it	lt
 800ee90:	425b      	neglt	r3, r3
 800ee92:	441a      	add	r2, r3
 800ee94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	bfb8      	it	lt
 800ee9c:	425b      	neglt	r3, r3
 800ee9e:	4413      	add	r3, r2
 800eea0:	617b      	str	r3, [r7, #20]

 		if(magnitude>50){magnitude=50;}
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	2b32      	cmp	r3, #50	; 0x32
 800eea6:	dd01      	ble.n	800eeac <getMagVal+0xf4>
 800eea8:	2332      	movs	r3, #50	; 0x32
 800eeaa:	617b      	str	r3, [r7, #20]
		return(magnitude);
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	e001      	b.n	800eeb4 <getMagVal+0xfc>
	} else { return -1;}
 800eeb0:	f04f 33ff 	mov.w	r3, #4294967295

}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3718      	adds	r7, #24
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	20000248 	.word	0x20000248
 800eec0:	20000c94 	.word	0x20000c94
 800eec4:	2000148c 	.word	0x2000148c

0800eec8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eecc:	2200      	movs	r2, #0
 800eece:	4912      	ldr	r1, [pc, #72]	; (800ef18 <MX_USB_DEVICE_Init+0x50>)
 800eed0:	4812      	ldr	r0, [pc, #72]	; (800ef1c <MX_USB_DEVICE_Init+0x54>)
 800eed2:	f7fd f9e9 	bl	800c2a8 <USBD_Init>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d001      	beq.n	800eee0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eedc:	f7ff fb06 	bl	800e4ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800eee0:	490f      	ldr	r1, [pc, #60]	; (800ef20 <MX_USB_DEVICE_Init+0x58>)
 800eee2:	480e      	ldr	r0, [pc, #56]	; (800ef1c <MX_USB_DEVICE_Init+0x54>)
 800eee4:	f7fd fa16 	bl	800c314 <USBD_RegisterClass>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eeee:	f7ff fafd 	bl	800e4ec <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800eef2:	490c      	ldr	r1, [pc, #48]	; (800ef24 <MX_USB_DEVICE_Init+0x5c>)
 800eef4:	4809      	ldr	r0, [pc, #36]	; (800ef1c <MX_USB_DEVICE_Init+0x54>)
 800eef6:	f7fd f835 	bl	800bf64 <USBD_AUDIO_RegisterInterface>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d001      	beq.n	800ef04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ef00:	f7ff faf4 	bl	800e4ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ef04:	4805      	ldr	r0, [pc, #20]	; (800ef1c <MX_USB_DEVICE_Init+0x54>)
 800ef06:	f7fd fa26 	bl	800c356 <USBD_Start>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ef10:	f7ff faec 	bl	800e4ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ef14:	bf00      	nop
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	20000144 	.word	0x20000144
 800ef1c:	20001494 	.word	0x20001494
 800ef20:	20000008 	.word	0x20000008
 800ef24:	20000128 	.word	0x20000128

0800ef28 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, 8192);
  return (USBD_OK);
 800ef34:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b082      	sub	sp, #8
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  AudioPlay_Stop();
 800ef4a:	f7fe fb31 	bl	800d5b0 <AudioPlay_Stop>
	return (USBD_OK);
 800ef4e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	4613      	mov	r3, r2
 800ef64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	//if (packetReceived>=-80)  {}//packetReceived-=80;
	packetReceived-=size;
 800ef66:	4b25      	ldr	r3, [pc, #148]	; (800effc <AUDIO_AudioCmd_FS+0xa4>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	461a      	mov	r2, r3
 800ef72:	4b22      	ldr	r3, [pc, #136]	; (800effc <AUDIO_AudioCmd_FS+0xa4>)
 800ef74:	601a      	str	r2, [r3, #0]
	if (packetReceived<-(2*7680) && playing)
 800ef76:	4b21      	ldr	r3, [pc, #132]	; (800effc <AUDIO_AudioCmd_FS+0xa4>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f513 5f70 	cmn.w	r3, #15360	; 0x3c00
 800ef7e:	da11      	bge.n	800efa4 <AUDIO_AudioCmd_FS+0x4c>
 800ef80:	4b1f      	ldr	r3, [pc, #124]	; (800f000 <AUDIO_AudioCmd_FS+0xa8>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d00d      	beq.n	800efa4 <AUDIO_AudioCmd_FS+0x4c>
	{	memset(pbuf,0,AUDIO_TOTAL_BUF_SIZE);
 800ef88:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	f000 fdb4 	bl	800fafc <memset>
		packetReceived=0;
 800ef94:	4b19      	ldr	r3, [pc, #100]	; (800effc <AUDIO_AudioCmd_FS+0xa4>)
 800ef96:	2200      	movs	r2, #0
 800ef98:	601a      	str	r2, [r3, #0]
		cmd=AUDIO_CMD_STOP;
 800ef9a:	2304      	movs	r3, #4
 800ef9c:	71fb      	strb	r3, [r7, #7]
		playing=0;
 800ef9e:	4b18      	ldr	r3, [pc, #96]	; (800f000 <AUDIO_AudioCmd_FS+0xa8>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	601a      	str	r2, [r3, #0]
	}

	//if (packetReceived<0) return (USBD_OK);;
	switch(cmd)
 800efa4:	79fb      	ldrb	r3, [r7, #7]
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	d011      	beq.n	800efce <AUDIO_AudioCmd_FS+0x76>
 800efaa:	2b04      	cmp	r3, #4
 800efac:	d01e      	beq.n	800efec <AUDIO_AudioCmd_FS+0x94>
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d11f      	bne.n	800eff2 <AUDIO_AudioCmd_FS+0x9a>
  {
    case AUDIO_CMD_START:
    	packetReceived-=2*size;
 800efb2:	4b12      	ldr	r3, [pc, #72]	; (800effc <AUDIO_AudioCmd_FS+0xa4>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	461a      	mov	r2, r3
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	005b      	lsls	r3, r3, #1
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	461a      	mov	r2, r3
 800efc0:	4b0e      	ldr	r3, [pc, #56]	; (800effc <AUDIO_AudioCmd_FS+0xa4>)
 800efc2:	601a      	str	r2, [r3, #0]
    	//if (packetReceived>=-80)
    	AudioPlay_Play((uint16_t*) pbuf, size);
 800efc4:	68b9      	ldr	r1, [r7, #8]
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f7fe fad0 	bl	800d56c <AudioPlay_Play>
    	//else AudioPlay_Play(nulls, size);
	break;
 800efcc:	e011      	b.n	800eff2 <AUDIO_AudioCmd_FS+0x9a>
    case AUDIO_CMD_PLAY:
    	packetReceived-=size;
 800efce:	4b0b      	ldr	r3, [pc, #44]	; (800effc <AUDIO_AudioCmd_FS+0xa4>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	461a      	mov	r2, r3
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	1ad3      	subs	r3, r2, r3
 800efd8:	461a      	mov	r2, r3
 800efda:	4b08      	ldr	r3, [pc, #32]	; (800effc <AUDIO_AudioCmd_FS+0xa4>)
 800efdc:	601a      	str	r2, [r3, #0]
    	//if (packetReceived>=-80)
    	AudioPlay_ChangeBuffer((uint16_t*) pbuf, size);
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	4619      	mov	r1, r3
 800efe4:	68f8      	ldr	r0, [r7, #12]
 800efe6:	f7fe faf7 	bl	800d5d8 <AudioPlay_ChangeBuffer>
    	//else AudioPlay_ChangeBuffer(nulls, size);
    break;	
 800efea:	e002      	b.n	800eff2 <AUDIO_AudioCmd_FS+0x9a>
    case AUDIO_CMD_STOP:
    	AudioPlay_Stop();
 800efec:	f7fe fae0 	bl	800d5b0 <AudioPlay_Stop>
    	break;
 800eff0:	bf00      	nop

  }
  //UNUSED(pbuf);
  //UNUSED(size);
 // UNUSED(cmd);
	return (USBD_OK);
 800eff2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3710      	adds	r7, #16
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	20000250 	.word	0x20000250
 800f000:	20000254 	.word	0x20000254

0800f004 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	4603      	mov	r3, r0
 800f00c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  //UNUSED(vol);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, vol*64);
  return (USBD_OK);
 800f00e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f010:	4618      	mov	r0, r3
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, 4096);
  return (USBD_OK);
 800f026:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f028:	4618      	mov	r0, r3
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	4613      	mov	r3, r2
 800f040:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  //UNUSED(pbuf);
  //UNUSED(size);
  UNUSED(cmd);
  packetReceived+=size;
 800f042:	4b07      	ldr	r3, [pc, #28]	; (800f060 <AUDIO_PeriodicTC_FS+0x2c>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	461a      	mov	r2, r3
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	4413      	add	r3, r2
 800f04c:	461a      	mov	r2, r3
 800f04e:	4b04      	ldr	r3, [pc, #16]	; (800f060 <AUDIO_PeriodicTC_FS+0x2c>)
 800f050:	601a      	str	r2, [r3, #0]
  //HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) pbuf , size);
  return (USBD_OK);
 800f052:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f054:	4618      	mov	r0, r3
 800f056:	3714      	adds	r7, #20
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	20000250 	.word	0x20000250

0800f064 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800f064:	b480      	push	{r7}
 800f066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800f068:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	af00      	add	r7, sp, #0
	/*if (packetReceived<=0)
			{
				packetReceived=0;
				AudioPlay_Stop();
			} else*/
	USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 800f078:	2102      	movs	r1, #2
 800f07a:	4802      	ldr	r0, [pc, #8]	; (800f084 <TransferComplete_CallBack_FS+0x10>)
 800f07c:	f7fc fda2 	bl	800bbc4 <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 800f080:	bf00      	nop
 800f082:	bd80      	pop	{r7, pc}
 800f084:	20001494 	.word	0x20001494

0800f088 <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	af00      	add	r7, sp, #0
	/*if (packetReceived<=0)
			{
				packetReceived=0;
				AudioPlay_Stop();
			} else*/
	USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 800f08c:	2101      	movs	r1, #1
 800f08e:	4802      	ldr	r0, [pc, #8]	; (800f098 <HalfTransfer_CallBack_FS+0x10>)
 800f090:	f7fc fd98 	bl	800bbc4 <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 800f094:	bf00      	nop
 800f096:	bd80      	pop	{r7, pc}
 800f098:	20001494 	.word	0x20001494

0800f09c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b08a      	sub	sp, #40	; 0x28
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f0a4:	f107 0314 	add.w	r3, r7, #20
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	601a      	str	r2, [r3, #0]
 800f0ac:	605a      	str	r2, [r3, #4]
 800f0ae:	609a      	str	r2, [r3, #8]
 800f0b0:	60da      	str	r2, [r3, #12]
 800f0b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0bc:	d13a      	bne.n	800f134 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0be:	2300      	movs	r3, #0
 800f0c0:	613b      	str	r3, [r7, #16]
 800f0c2:	4b1e      	ldr	r3, [pc, #120]	; (800f13c <HAL_PCD_MspInit+0xa0>)
 800f0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0c6:	4a1d      	ldr	r2, [pc, #116]	; (800f13c <HAL_PCD_MspInit+0xa0>)
 800f0c8:	f043 0301 	orr.w	r3, r3, #1
 800f0cc:	6313      	str	r3, [r2, #48]	; 0x30
 800f0ce:	4b1b      	ldr	r3, [pc, #108]	; (800f13c <HAL_PCD_MspInit+0xa0>)
 800f0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0d2:	f003 0301 	and.w	r3, r3, #1
 800f0d6:	613b      	str	r3, [r7, #16]
 800f0d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f0da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f0de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0e0:	2302      	movs	r3, #2
 800f0e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f0e8:	2303      	movs	r3, #3
 800f0ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f0ec:	230a      	movs	r3, #10
 800f0ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0f0:	f107 0314 	add.w	r3, r7, #20
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	4812      	ldr	r0, [pc, #72]	; (800f140 <HAL_PCD_MspInit+0xa4>)
 800f0f8:	f7f2 fca6 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f0fc:	4b0f      	ldr	r3, [pc, #60]	; (800f13c <HAL_PCD_MspInit+0xa0>)
 800f0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f100:	4a0e      	ldr	r2, [pc, #56]	; (800f13c <HAL_PCD_MspInit+0xa0>)
 800f102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f106:	6353      	str	r3, [r2, #52]	; 0x34
 800f108:	2300      	movs	r3, #0
 800f10a:	60fb      	str	r3, [r7, #12]
 800f10c:	4b0b      	ldr	r3, [pc, #44]	; (800f13c <HAL_PCD_MspInit+0xa0>)
 800f10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f110:	4a0a      	ldr	r2, [pc, #40]	; (800f13c <HAL_PCD_MspInit+0xa0>)
 800f112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f116:	6453      	str	r3, [r2, #68]	; 0x44
 800f118:	4b08      	ldr	r3, [pc, #32]	; (800f13c <HAL_PCD_MspInit+0xa0>)
 800f11a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f11c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f120:	60fb      	str	r3, [r7, #12]
 800f122:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f124:	2200      	movs	r2, #0
 800f126:	2100      	movs	r1, #0
 800f128:	2043      	movs	r0, #67	; 0x43
 800f12a:	f7f2 f848 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f12e:	2043      	movs	r0, #67	; 0x43
 800f130:	f7f2 f861 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f134:	bf00      	nop
 800f136:	3728      	adds	r7, #40	; 0x28
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	40023800 	.word	0x40023800
 800f140:	40020000 	.word	0x40020000

0800f144 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f158:	4619      	mov	r1, r3
 800f15a:	4610      	mov	r0, r2
 800f15c:	f7fd f946 	bl	800c3ec <USBD_LL_SetupStage>
}
 800f160:	bf00      	nop
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f17a:	78fa      	ldrb	r2, [r7, #3]
 800f17c:	6879      	ldr	r1, [r7, #4]
 800f17e:	4613      	mov	r3, r2
 800f180:	00db      	lsls	r3, r3, #3
 800f182:	1a9b      	subs	r3, r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	440b      	add	r3, r1
 800f188:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	78fb      	ldrb	r3, [r7, #3]
 800f190:	4619      	mov	r1, r3
 800f192:	f7fd f97e 	bl	800c492 <USBD_LL_DataOutStage>
}
 800f196:	bf00      	nop
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b082      	sub	sp, #8
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f1b0:	78fa      	ldrb	r2, [r7, #3]
 800f1b2:	6879      	ldr	r1, [r7, #4]
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	00db      	lsls	r3, r3, #3
 800f1b8:	1a9b      	subs	r3, r3, r2
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	440b      	add	r3, r1
 800f1be:	3348      	adds	r3, #72	; 0x48
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	78fb      	ldrb	r3, [r7, #3]
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	f7fd f9c7 	bl	800c558 <USBD_LL_DataInStage>
}
 800f1ca:	bf00      	nop
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fd facb 	bl	800c77c <USBD_LL_SOF>
}
 800f1e6:	bf00      	nop
 800f1e8:	3708      	adds	r7, #8
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b084      	sub	sp, #16
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d102      	bne.n	800f208 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f202:	2300      	movs	r3, #0
 800f204:	73fb      	strb	r3, [r7, #15]
 800f206:	e008      	b.n	800f21a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	d102      	bne.n	800f216 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f210:	2301      	movs	r3, #1
 800f212:	73fb      	strb	r3, [r7, #15]
 800f214:	e001      	b.n	800f21a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f216:	f7ff f969 	bl	800e4ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f220:	7bfa      	ldrb	r2, [r7, #15]
 800f222:	4611      	mov	r1, r2
 800f224:	4618      	mov	r0, r3
 800f226:	f7fd fa6e 	bl	800c706 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f230:	4618      	mov	r0, r3
 800f232:	f7fd fa27 	bl	800c684 <USBD_LL_Reset>
}
 800f236:	bf00      	nop
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
	...

0800f240 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f24e:	4618      	mov	r0, r3
 800f250:	f7fd fa69 	bl	800c726 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	6812      	ldr	r2, [r2, #0]
 800f262:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f266:	f043 0301 	orr.w	r3, r3, #1
 800f26a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a1b      	ldr	r3, [r3, #32]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d005      	beq.n	800f280 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f274:	4b04      	ldr	r3, [pc, #16]	; (800f288 <HAL_PCD_SuspendCallback+0x48>)
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	4a03      	ldr	r2, [pc, #12]	; (800f288 <HAL_PCD_SuspendCallback+0x48>)
 800f27a:	f043 0306 	orr.w	r3, r3, #6
 800f27e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f280:	bf00      	nop
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	e000ed00 	.word	0xe000ed00

0800f28c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fd fa58 	bl	800c750 <USBD_LL_Resume>
}
 800f2a0:	bf00      	nop
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2ba:	78fa      	ldrb	r2, [r7, #3]
 800f2bc:	4611      	mov	r1, r2
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7fd fa83 	bl	800c7ca <USBD_LL_IsoOUTIncomplete>
}
 800f2c4:	bf00      	nop
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2de:	78fa      	ldrb	r2, [r7, #3]
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fd fa64 	bl	800c7b0 <USBD_LL_IsoINIncomplete>
}
 800f2e8:	bf00      	nop
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fd fa70 	bl	800c7e4 <USBD_LL_DevConnected>
}
 800f304:	bf00      	nop
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fd fa6d 	bl	800c7fa <USBD_LL_DevDisconnected>
}
 800f320:	bf00      	nop
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d13c      	bne.n	800f3b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f338:	4a20      	ldr	r2, [pc, #128]	; (800f3bc <USBD_LL_Init+0x94>)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a1e      	ldr	r2, [pc, #120]	; (800f3bc <USBD_LL_Init+0x94>)
 800f344:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f348:	4b1c      	ldr	r3, [pc, #112]	; (800f3bc <USBD_LL_Init+0x94>)
 800f34a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f34e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f350:	4b1a      	ldr	r3, [pc, #104]	; (800f3bc <USBD_LL_Init+0x94>)
 800f352:	2204      	movs	r2, #4
 800f354:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f356:	4b19      	ldr	r3, [pc, #100]	; (800f3bc <USBD_LL_Init+0x94>)
 800f358:	2202      	movs	r2, #2
 800f35a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f35c:	4b17      	ldr	r3, [pc, #92]	; (800f3bc <USBD_LL_Init+0x94>)
 800f35e:	2200      	movs	r2, #0
 800f360:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f362:	4b16      	ldr	r3, [pc, #88]	; (800f3bc <USBD_LL_Init+0x94>)
 800f364:	2202      	movs	r2, #2
 800f366:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800f368:	4b14      	ldr	r3, [pc, #80]	; (800f3bc <USBD_LL_Init+0x94>)
 800f36a:	2201      	movs	r2, #1
 800f36c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f36e:	4b13      	ldr	r3, [pc, #76]	; (800f3bc <USBD_LL_Init+0x94>)
 800f370:	2200      	movs	r2, #0
 800f372:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f374:	4b11      	ldr	r3, [pc, #68]	; (800f3bc <USBD_LL_Init+0x94>)
 800f376:	2200      	movs	r2, #0
 800f378:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f37a:	4b10      	ldr	r3, [pc, #64]	; (800f3bc <USBD_LL_Init+0x94>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f380:	4b0e      	ldr	r3, [pc, #56]	; (800f3bc <USBD_LL_Init+0x94>)
 800f382:	2200      	movs	r2, #0
 800f384:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f386:	480d      	ldr	r0, [pc, #52]	; (800f3bc <USBD_LL_Init+0x94>)
 800f388:	f7f6 f872 	bl	8005470 <HAL_PCD_Init>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d001      	beq.n	800f396 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f392:	f7ff f8ab 	bl	800e4ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f396:	2180      	movs	r1, #128	; 0x80
 800f398:	4808      	ldr	r0, [pc, #32]	; (800f3bc <USBD_LL_Init+0x94>)
 800f39a:	f7f7 f9d0 	bl	800673e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f39e:	2240      	movs	r2, #64	; 0x40
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	4806      	ldr	r0, [pc, #24]	; (800f3bc <USBD_LL_Init+0x94>)
 800f3a4:	f7f7 f984 	bl	80066b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f3a8:	2280      	movs	r2, #128	; 0x80
 800f3aa:	2101      	movs	r1, #1
 800f3ac:	4803      	ldr	r0, [pc, #12]	; (800f3bc <USBD_LL_Init+0x94>)
 800f3ae:	f7f7 f97f 	bl	80066b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	20001764 	.word	0x20001764

0800f3c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7f6 f967 	bl	80056aa <HAL_PCD_Start>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800f3e0:	7bfb      	ldrb	r3, [r7, #15]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f000 f92a 	bl	800f63c <USBD_Get_USB_Status>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f3ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3710      	adds	r7, #16
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b084      	sub	sp, #16
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	4608      	mov	r0, r1
 800f400:	4611      	mov	r1, r2
 800f402:	461a      	mov	r2, r3
 800f404:	4603      	mov	r3, r0
 800f406:	70fb      	strb	r3, [r7, #3]
 800f408:	460b      	mov	r3, r1
 800f40a:	70bb      	strb	r3, [r7, #2]
 800f40c:	4613      	mov	r3, r2
 800f40e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f410:	2300      	movs	r3, #0
 800f412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f41e:	78bb      	ldrb	r3, [r7, #2]
 800f420:	883a      	ldrh	r2, [r7, #0]
 800f422:	78f9      	ldrb	r1, [r7, #3]
 800f424:	f7f6 fd4b 	bl	8005ebe <HAL_PCD_EP_Open>
 800f428:	4603      	mov	r3, r0
 800f42a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f42c:	7bfb      	ldrb	r3, [r7, #15]
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 f904 	bl	800f63c <USBD_Get_USB_Status>
 800f434:	4603      	mov	r3, r0
 800f436:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f438:	7bbb      	ldrb	r3, [r7, #14]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	460b      	mov	r3, r1
 800f44c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f44e:	2300      	movs	r3, #0
 800f450:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f452:	2300      	movs	r3, #0
 800f454:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f45c:	78fa      	ldrb	r2, [r7, #3]
 800f45e:	4611      	mov	r1, r2
 800f460:	4618      	mov	r0, r3
 800f462:	f7f6 fd94 	bl	8005f8e <HAL_PCD_EP_Close>
 800f466:	4603      	mov	r3, r0
 800f468:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 f8e5 	bl	800f63c <USBD_Get_USB_Status>
 800f472:	4603      	mov	r3, r0
 800f474:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800f476:	7bbb      	ldrb	r3, [r7, #14]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f48c:	2300      	movs	r3, #0
 800f48e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f49a:	78fa      	ldrb	r2, [r7, #3]
 800f49c:	4611      	mov	r1, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7f6 fe6c 	bl	800617c <HAL_PCD_EP_SetStall>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4a8:	7bfb      	ldrb	r3, [r7, #15]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f000 f8c6 	bl	800f63c <USBD_Get_USB_Status>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800f4b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b084      	sub	sp, #16
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4d8:	78fa      	ldrb	r2, [r7, #3]
 800f4da:	4611      	mov	r1, r2
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7f6 feb1 	bl	8006244 <HAL_PCD_EP_ClrStall>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800f4e6:	7bfb      	ldrb	r3, [r7, #15]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f000 f8a7 	bl	800f63c <USBD_Get_USB_Status>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800f4f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	460b      	mov	r3, r1
 800f506:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f50e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800f510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f514:	2b00      	cmp	r3, #0
 800f516:	da0b      	bge.n	800f530 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800f518:	78fb      	ldrb	r3, [r7, #3]
 800f51a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f51e:	68f9      	ldr	r1, [r7, #12]
 800f520:	4613      	mov	r3, r2
 800f522:	00db      	lsls	r3, r3, #3
 800f524:	1a9b      	subs	r3, r3, r2
 800f526:	009b      	lsls	r3, r3, #2
 800f528:	440b      	add	r3, r1
 800f52a:	333e      	adds	r3, #62	; 0x3e
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	e00b      	b.n	800f548 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800f530:	78fb      	ldrb	r3, [r7, #3]
 800f532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f536:	68f9      	ldr	r1, [r7, #12]
 800f538:	4613      	mov	r3, r2
 800f53a:	00db      	lsls	r3, r3, #3
 800f53c:	1a9b      	subs	r3, r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	440b      	add	r3, r1
 800f542:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f546:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3714      	adds	r7, #20
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	460b      	mov	r3, r1
 800f55e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f560:	2300      	movs	r3, #0
 800f562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f564:	2300      	movs	r3, #0
 800f566:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f56e:	78fa      	ldrb	r2, [r7, #3]
 800f570:	4611      	mov	r1, r2
 800f572:	4618      	mov	r0, r3
 800f574:	f7f6 fc7e 	bl	8005e74 <HAL_PCD_SetAddress>
 800f578:	4603      	mov	r3, r0
 800f57a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 f85c 	bl	800f63c <USBD_Get_USB_Status>
 800f584:	4603      	mov	r3, r0
 800f586:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800f588:	7bbb      	ldrb	r3, [r7, #14]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b086      	sub	sp, #24
 800f596:	af00      	add	r7, sp, #0
 800f598:	60f8      	str	r0, [r7, #12]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]
 800f59e:	460b      	mov	r3, r1
 800f5a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f5b0:	7af9      	ldrb	r1, [r7, #11]
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	f7f6 fd97 	bl	80060e8 <HAL_PCD_EP_Transmit>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800f5be:	7dfb      	ldrb	r3, [r7, #23]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f000 f83b 	bl	800f63c <USBD_Get_USB_Status>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800f5ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3718      	adds	r7, #24
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	607a      	str	r2, [r7, #4]
 800f5de:	603b      	str	r3, [r7, #0]
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f5f2:	7af9      	ldrb	r1, [r7, #11]
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	f7f6 fd13 	bl	8006022 <HAL_PCD_EP_Receive>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800f600:	7dfb      	ldrb	r3, [r7, #23]
 800f602:	4618      	mov	r0, r3
 800f604:	f000 f81a 	bl	800f63c <USBD_Get_USB_Status>
 800f608:	4603      	mov	r3, r0
 800f60a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800f60c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3718      	adds	r7, #24
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b082      	sub	sp, #8
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
 800f61e:	460b      	mov	r3, r1
 800f620:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f628:	78fa      	ldrb	r2, [r7, #3]
 800f62a:	4611      	mov	r1, r2
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7f6 fd43 	bl	80060b8 <HAL_PCD_EP_GetRxCount>
 800f632:	4603      	mov	r3, r0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3708      	adds	r7, #8
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b085      	sub	sp, #20
 800f640:	af00      	add	r7, sp, #0
 800f642:	4603      	mov	r3, r0
 800f644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f646:	2300      	movs	r3, #0
 800f648:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f64a:	79fb      	ldrb	r3, [r7, #7]
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	d817      	bhi.n	800f680 <USBD_Get_USB_Status+0x44>
 800f650:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <USBD_Get_USB_Status+0x1c>)
 800f652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f656:	bf00      	nop
 800f658:	0800f669 	.word	0x0800f669
 800f65c:	0800f66f 	.word	0x0800f66f
 800f660:	0800f675 	.word	0x0800f675
 800f664:	0800f67b 	.word	0x0800f67b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	73fb      	strb	r3, [r7, #15]
    break;
 800f66c:	e00b      	b.n	800f686 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f66e:	2303      	movs	r3, #3
 800f670:	73fb      	strb	r3, [r7, #15]
    break;
 800f672:	e008      	b.n	800f686 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f674:	2301      	movs	r3, #1
 800f676:	73fb      	strb	r3, [r7, #15]
    break;
 800f678:	e005      	b.n	800f686 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f67a:	2303      	movs	r3, #3
 800f67c:	73fb      	strb	r3, [r7, #15]
    break;
 800f67e:	e002      	b.n	800f686 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f680:	2303      	movs	r3, #3
 800f682:	73fb      	strb	r3, [r7, #15]
    break;
 800f684:	bf00      	nop
  }
  return usb_status;
 800f686:	7bfb      	ldrb	r3, [r7, #15]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3714      	adds	r7, #20
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	6039      	str	r1, [r7, #0]
 800f69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	2212      	movs	r2, #18
 800f6a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f6a6:	4b03      	ldr	r3, [pc, #12]	; (800f6b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	20000160 	.word	0x20000160

0800f6b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	6039      	str	r1, [r7, #0]
 800f6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2204      	movs	r2, #4
 800f6c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6ca:	4b03      	ldr	r3, [pc, #12]	; (800f6d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr
 800f6d8:	20000174 	.word	0x20000174

0800f6dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	6039      	str	r1, [r7, #0]
 800f6e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6e8:	79fb      	ldrb	r3, [r7, #7]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d105      	bne.n	800f6fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6ee:	683a      	ldr	r2, [r7, #0]
 800f6f0:	4907      	ldr	r1, [pc, #28]	; (800f710 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6f2:	4808      	ldr	r0, [pc, #32]	; (800f714 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6f4:	f7fd fdfd 	bl	800d2f2 <USBD_GetString>
 800f6f8:	e004      	b.n	800f704 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	4904      	ldr	r1, [pc, #16]	; (800f710 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6fe:	4805      	ldr	r0, [pc, #20]	; (800f714 <USBD_FS_ProductStrDescriptor+0x38>)
 800f700:	f7fd fdf7 	bl	800d2f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f704:	4b02      	ldr	r3, [pc, #8]	; (800f710 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f706:	4618      	mov	r0, r3
 800f708:	3708      	adds	r7, #8
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	bf00      	nop
 800f710:	20001b6c 	.word	0x20001b6c
 800f714:	08011040 	.word	0x08011040

0800f718 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	4603      	mov	r3, r0
 800f720:	6039      	str	r1, [r7, #0]
 800f722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f724:	683a      	ldr	r2, [r7, #0]
 800f726:	4904      	ldr	r1, [pc, #16]	; (800f738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f728:	4804      	ldr	r0, [pc, #16]	; (800f73c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f72a:	f7fd fde2 	bl	800d2f2 <USBD_GetString>
  return USBD_StrDesc;
 800f72e:	4b02      	ldr	r3, [pc, #8]	; (800f738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f730:	4618      	mov	r0, r3
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	20001b6c 	.word	0x20001b6c
 800f73c:	0801104c 	.word	0x0801104c

0800f740 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	4603      	mov	r3, r0
 800f748:	6039      	str	r1, [r7, #0]
 800f74a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	221a      	movs	r2, #26
 800f750:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f752:	f000 f843 	bl	800f7dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f756:	4b02      	ldr	r3, [pc, #8]	; (800f760 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	20000178 	.word	0x20000178

0800f764 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4603      	mov	r3, r0
 800f76c:	6039      	str	r1, [r7, #0]
 800f76e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d105      	bne.n	800f782 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	4907      	ldr	r1, [pc, #28]	; (800f798 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f77a:	4808      	ldr	r0, [pc, #32]	; (800f79c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f77c:	f7fd fdb9 	bl	800d2f2 <USBD_GetString>
 800f780:	e004      	b.n	800f78c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f782:	683a      	ldr	r2, [r7, #0]
 800f784:	4904      	ldr	r1, [pc, #16]	; (800f798 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f786:	4805      	ldr	r0, [pc, #20]	; (800f79c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f788:	f7fd fdb3 	bl	800d2f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f78c:	4b02      	ldr	r3, [pc, #8]	; (800f798 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	20001b6c 	.word	0x20001b6c
 800f79c:	0801105c 	.word	0x0801105c

0800f7a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	6039      	str	r1, [r7, #0]
 800f7aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7ac:	79fb      	ldrb	r3, [r7, #7]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d105      	bne.n	800f7be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7b2:	683a      	ldr	r2, [r7, #0]
 800f7b4:	4907      	ldr	r1, [pc, #28]	; (800f7d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7b6:	4808      	ldr	r0, [pc, #32]	; (800f7d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7b8:	f7fd fd9b 	bl	800d2f2 <USBD_GetString>
 800f7bc:	e004      	b.n	800f7c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7be:	683a      	ldr	r2, [r7, #0]
 800f7c0:	4904      	ldr	r1, [pc, #16]	; (800f7d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7c2:	4805      	ldr	r0, [pc, #20]	; (800f7d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7c4:	f7fd fd95 	bl	800d2f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7c8:	4b02      	ldr	r3, [pc, #8]	; (800f7d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	20001b6c 	.word	0x20001b6c
 800f7d8:	0801106c 	.word	0x0801106c

0800f7dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7e2:	4b0f      	ldr	r3, [pc, #60]	; (800f820 <Get_SerialNum+0x44>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7e8:	4b0e      	ldr	r3, [pc, #56]	; (800f824 <Get_SerialNum+0x48>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7ee:	4b0e      	ldr	r3, [pc, #56]	; (800f828 <Get_SerialNum+0x4c>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d009      	beq.n	800f816 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f802:	2208      	movs	r2, #8
 800f804:	4909      	ldr	r1, [pc, #36]	; (800f82c <Get_SerialNum+0x50>)
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f000 f814 	bl	800f834 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f80c:	2204      	movs	r2, #4
 800f80e:	4908      	ldr	r1, [pc, #32]	; (800f830 <Get_SerialNum+0x54>)
 800f810:	68b8      	ldr	r0, [r7, #8]
 800f812:	f000 f80f 	bl	800f834 <IntToUnicode>
  }
}
 800f816:	bf00      	nop
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	1fff7a10 	.word	0x1fff7a10
 800f824:	1fff7a14 	.word	0x1fff7a14
 800f828:	1fff7a18 	.word	0x1fff7a18
 800f82c:	2000017a 	.word	0x2000017a
 800f830:	2000018a 	.word	0x2000018a

0800f834 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f834:	b480      	push	{r7}
 800f836:	b087      	sub	sp, #28
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	4613      	mov	r3, r2
 800f840:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f842:	2300      	movs	r3, #0
 800f844:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f846:	2300      	movs	r3, #0
 800f848:	75fb      	strb	r3, [r7, #23]
 800f84a:	e027      	b.n	800f89c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	0f1b      	lsrs	r3, r3, #28
 800f850:	2b09      	cmp	r3, #9
 800f852:	d80b      	bhi.n	800f86c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	0f1b      	lsrs	r3, r3, #28
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	7dfb      	ldrb	r3, [r7, #23]
 800f85c:	005b      	lsls	r3, r3, #1
 800f85e:	4619      	mov	r1, r3
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	440b      	add	r3, r1
 800f864:	3230      	adds	r2, #48	; 0x30
 800f866:	b2d2      	uxtb	r2, r2
 800f868:	701a      	strb	r2, [r3, #0]
 800f86a:	e00a      	b.n	800f882 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	0f1b      	lsrs	r3, r3, #28
 800f870:	b2da      	uxtb	r2, r3
 800f872:	7dfb      	ldrb	r3, [r7, #23]
 800f874:	005b      	lsls	r3, r3, #1
 800f876:	4619      	mov	r1, r3
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	440b      	add	r3, r1
 800f87c:	3237      	adds	r2, #55	; 0x37
 800f87e:	b2d2      	uxtb	r2, r2
 800f880:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	011b      	lsls	r3, r3, #4
 800f886:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f888:	7dfb      	ldrb	r3, [r7, #23]
 800f88a:	005b      	lsls	r3, r3, #1
 800f88c:	3301      	adds	r3, #1
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	4413      	add	r3, r2
 800f892:	2200      	movs	r2, #0
 800f894:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	3301      	adds	r3, #1
 800f89a:	75fb      	strb	r3, [r7, #23]
 800f89c:	7dfa      	ldrb	r2, [r7, #23]
 800f89e:	79fb      	ldrb	r3, [r7, #7]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d3d3      	bcc.n	800f84c <IntToUnicode+0x18>
  }
}
 800f8a4:	bf00      	nop
 800f8a6:	371c      	adds	r7, #28
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <ws2812_init>:
uint8_t rgb_temp[12][3];
uint16_t DMA_BUF_TEMP[24];
//------------------------------------------------------------------

void ws2812_init(void)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 800f8b6:	2350      	movs	r3, #80	; 0x50
 800f8b8:	607b      	str	r3, [r7, #4]
 800f8ba:	e007      	b.n	800f8cc <ws2812_init+0x1c>
	  BUF_DMA[i] = LOW;
 800f8bc:	4a08      	ldr	r2, [pc, #32]	; (800f8e0 <ws2812_init+0x30>)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2119      	movs	r1, #25
 800f8c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	607b      	str	r3, [r7, #4]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f8d2:	dbf3      	blt.n	800f8bc <ws2812_init+0xc>

  }
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr
 800f8e0:	20000258 	.word	0x20000258

0800f8e4 <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 800f8e4:	b490      	push	{r4, r7}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	4608      	mov	r0, r1
 800f8ee:	4611      	mov	r1, r2
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	4623      	mov	r3, r4
 800f8f4:	71fb      	strb	r3, [r7, #7]
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	71bb      	strb	r3, [r7, #6]
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	717b      	strb	r3, [r7, #5]
 800f8fe:	4613      	mov	r3, r2
 800f900:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 800f902:	2300      	movs	r3, #0
 800f904:	81fb      	strh	r3, [r7, #14]
 800f906:	e07a      	b.n	800f9fe <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 800f908:	79fa      	ldrb	r2, [r7, #7]
 800f90a:	89fb      	ldrh	r3, [r7, #14]
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	f1c3 0307 	rsb	r3, r3, #7
 800f912:	fa42 f303 	asr.w	r3, r2, r3
 800f916:	f003 0301 	and.w	r3, r3, #1
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00e      	beq.n	800f93c <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 800f91e:	887a      	ldrh	r2, [r7, #2]
 800f920:	4613      	mov	r3, r2
 800f922:	005b      	lsls	r3, r3, #1
 800f924:	4413      	add	r3, r2
 800f926:	00db      	lsls	r3, r3, #3
 800f928:	3350      	adds	r3, #80	; 0x50
 800f92a:	89fa      	ldrh	r2, [r7, #14]
 800f92c:	b292      	uxth	r2, r2
 800f92e:	4413      	add	r3, r2
 800f930:	3308      	adds	r3, #8
 800f932:	4a37      	ldr	r2, [pc, #220]	; (800fa10 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f934:	2141      	movs	r1, #65	; 0x41
 800f936:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800f93a:	e00d      	b.n	800f958 <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 800f93c:	887a      	ldrh	r2, [r7, #2]
 800f93e:	4613      	mov	r3, r2
 800f940:	005b      	lsls	r3, r3, #1
 800f942:	4413      	add	r3, r2
 800f944:	00db      	lsls	r3, r3, #3
 800f946:	3350      	adds	r3, #80	; 0x50
 800f948:	89fa      	ldrh	r2, [r7, #14]
 800f94a:	b292      	uxth	r2, r2
 800f94c:	4413      	add	r3, r2
 800f94e:	3308      	adds	r3, #8
 800f950:	4a2f      	ldr	r2, [pc, #188]	; (800fa10 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f952:	2119      	movs	r1, #25
 800f954:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 800f958:	79ba      	ldrb	r2, [r7, #6]
 800f95a:	89fb      	ldrh	r3, [r7, #14]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	f1c3 0307 	rsb	r3, r3, #7
 800f962:	fa42 f303 	asr.w	r3, r2, r3
 800f966:	f003 0301 	and.w	r3, r3, #1
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00d      	beq.n	800f98a <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 800f96e:	887a      	ldrh	r2, [r7, #2]
 800f970:	4613      	mov	r3, r2
 800f972:	005b      	lsls	r3, r3, #1
 800f974:	4413      	add	r3, r2
 800f976:	00db      	lsls	r3, r3, #3
 800f978:	3350      	adds	r3, #80	; 0x50
 800f97a:	89fa      	ldrh	r2, [r7, #14]
 800f97c:	b292      	uxth	r2, r2
 800f97e:	4413      	add	r3, r2
 800f980:	4a23      	ldr	r2, [pc, #140]	; (800fa10 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f982:	2141      	movs	r1, #65	; 0x41
 800f984:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800f988:	e00c      	b.n	800f9a4 <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 800f98a:	887a      	ldrh	r2, [r7, #2]
 800f98c:	4613      	mov	r3, r2
 800f98e:	005b      	lsls	r3, r3, #1
 800f990:	4413      	add	r3, r2
 800f992:	00db      	lsls	r3, r3, #3
 800f994:	3350      	adds	r3, #80	; 0x50
 800f996:	89fa      	ldrh	r2, [r7, #14]
 800f998:	b292      	uxth	r2, r2
 800f99a:	4413      	add	r3, r2
 800f99c:	4a1c      	ldr	r2, [pc, #112]	; (800fa10 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f99e:	2119      	movs	r1, #25
 800f9a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 800f9a4:	797a      	ldrb	r2, [r7, #5]
 800f9a6:	89fb      	ldrh	r3, [r7, #14]
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	f1c3 0307 	rsb	r3, r3, #7
 800f9ae:	fa42 f303 	asr.w	r3, r2, r3
 800f9b2:	f003 0301 	and.w	r3, r3, #1
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00e      	beq.n	800f9d8 <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 800f9ba:	887a      	ldrh	r2, [r7, #2]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	005b      	lsls	r3, r3, #1
 800f9c0:	4413      	add	r3, r2
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	3350      	adds	r3, #80	; 0x50
 800f9c6:	89fa      	ldrh	r2, [r7, #14]
 800f9c8:	b292      	uxth	r2, r2
 800f9ca:	4413      	add	r3, r2
 800f9cc:	3310      	adds	r3, #16
 800f9ce:	4a10      	ldr	r2, [pc, #64]	; (800fa10 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f9d0:	2141      	movs	r1, #65	; 0x41
 800f9d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800f9d6:	e00d      	b.n	800f9f4 <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 800f9d8:	887a      	ldrh	r2, [r7, #2]
 800f9da:	4613      	mov	r3, r2
 800f9dc:	005b      	lsls	r3, r3, #1
 800f9de:	4413      	add	r3, r2
 800f9e0:	00db      	lsls	r3, r3, #3
 800f9e2:	3350      	adds	r3, #80	; 0x50
 800f9e4:	89fa      	ldrh	r2, [r7, #14]
 800f9e6:	b292      	uxth	r2, r2
 800f9e8:	4413      	add	r3, r2
 800f9ea:	3310      	adds	r3, #16
 800f9ec:	4a08      	ldr	r2, [pc, #32]	; (800fa10 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800f9ee:	2119      	movs	r1, #25
 800f9f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 800f9f4:	89fb      	ldrh	r3, [r7, #14]
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	81fb      	strh	r3, [r7, #14]
 800f9fe:	89fb      	ldrh	r3, [r7, #14]
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	2b07      	cmp	r3, #7
 800fa04:	d980      	bls.n	800f908 <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 800fa06:	bf00      	nop
 800fa08:	3710      	adds	r7, #16
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bc90      	pop	{r4, r7}
 800fa0e:	4770      	bx	lr
 800fa10:	20000258 	.word	0x20000258

0800fa14 <ws2812_light>:



//------------------------------------------------------------------
void ws2812_light(void)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim3,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA,ARRAY_LEN*2);
 800fa18:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800fa1c:	4a03      	ldr	r2, [pc, #12]	; (800fa2c <ws2812_light+0x18>)
 800fa1e:	2104      	movs	r1, #4
 800fa20:	4803      	ldr	r0, [pc, #12]	; (800fa30 <ws2812_light+0x1c>)
 800fa22:	f7f8 fe3f 	bl	80086a4 <HAL_TIM_PWM_Start_DMA>
}
 800fa26:	bf00      	nop
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	20000258 	.word	0x20000258
 800fa30:	20000cec 	.word	0x20000cec

0800fa34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800fa34:	f8df d034 	ldr.w	sp, [pc, #52]	; 800fa6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800fa38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800fa3a:	e003      	b.n	800fa44 <LoopCopyDataInit>

0800fa3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800fa3c:	4b0c      	ldr	r3, [pc, #48]	; (800fa70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800fa3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800fa40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800fa42:	3104      	adds	r1, #4

0800fa44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800fa44:	480b      	ldr	r0, [pc, #44]	; (800fa74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800fa46:	4b0c      	ldr	r3, [pc, #48]	; (800fa78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800fa48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800fa4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800fa4c:	d3f6      	bcc.n	800fa3c <CopyDataInit>
  ldr  r2, =_sbss
 800fa4e:	4a0b      	ldr	r2, [pc, #44]	; (800fa7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800fa50:	e002      	b.n	800fa58 <LoopFillZerobss>

0800fa52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800fa52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800fa54:	f842 3b04 	str.w	r3, [r2], #4

0800fa58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800fa58:	4b09      	ldr	r3, [pc, #36]	; (800fa80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800fa5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800fa5c:	d3f9      	bcc.n	800fa52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800fa5e:	f7ff f94f 	bl	800ed00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800fa62:	f000 f817 	bl	800fa94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fa66:	f7fe f863 	bl	800db30 <main>
  bx  lr    
 800fa6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800fa6c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800fa70:	080112b0 	.word	0x080112b0
  ldr  r0, =_sdata
 800fa74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800fa78:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800fa7c:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800fa80:	20001d70 	.word	0x20001d70

0800fa84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fa84:	e7fe      	b.n	800fa84 <ADC_IRQHandler>
	...

0800fa88 <__errno>:
 800fa88:	4b01      	ldr	r3, [pc, #4]	; (800fa90 <__errno+0x8>)
 800fa8a:	6818      	ldr	r0, [r3, #0]
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	20000194 	.word	0x20000194

0800fa94 <__libc_init_array>:
 800fa94:	b570      	push	{r4, r5, r6, lr}
 800fa96:	4e0d      	ldr	r6, [pc, #52]	; (800facc <__libc_init_array+0x38>)
 800fa98:	4c0d      	ldr	r4, [pc, #52]	; (800fad0 <__libc_init_array+0x3c>)
 800fa9a:	1ba4      	subs	r4, r4, r6
 800fa9c:	10a4      	asrs	r4, r4, #2
 800fa9e:	2500      	movs	r5, #0
 800faa0:	42a5      	cmp	r5, r4
 800faa2:	d109      	bne.n	800fab8 <__libc_init_array+0x24>
 800faa4:	4e0b      	ldr	r6, [pc, #44]	; (800fad4 <__libc_init_array+0x40>)
 800faa6:	4c0c      	ldr	r4, [pc, #48]	; (800fad8 <__libc_init_array+0x44>)
 800faa8:	f001 fabc 	bl	8011024 <_init>
 800faac:	1ba4      	subs	r4, r4, r6
 800faae:	10a4      	asrs	r4, r4, #2
 800fab0:	2500      	movs	r5, #0
 800fab2:	42a5      	cmp	r5, r4
 800fab4:	d105      	bne.n	800fac2 <__libc_init_array+0x2e>
 800fab6:	bd70      	pop	{r4, r5, r6, pc}
 800fab8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fabc:	4798      	blx	r3
 800fabe:	3501      	adds	r5, #1
 800fac0:	e7ee      	b.n	800faa0 <__libc_init_array+0xc>
 800fac2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fac6:	4798      	blx	r3
 800fac8:	3501      	adds	r5, #1
 800faca:	e7f2      	b.n	800fab2 <__libc_init_array+0x1e>
 800facc:	080112a8 	.word	0x080112a8
 800fad0:	080112a8 	.word	0x080112a8
 800fad4:	080112a8 	.word	0x080112a8
 800fad8:	080112ac 	.word	0x080112ac

0800fadc <malloc>:
 800fadc:	4b02      	ldr	r3, [pc, #8]	; (800fae8 <malloc+0xc>)
 800fade:	4601      	mov	r1, r0
 800fae0:	6818      	ldr	r0, [r3, #0]
 800fae2:	f000 b861 	b.w	800fba8 <_malloc_r>
 800fae6:	bf00      	nop
 800fae8:	20000194 	.word	0x20000194

0800faec <free>:
 800faec:	4b02      	ldr	r3, [pc, #8]	; (800faf8 <free+0xc>)
 800faee:	4601      	mov	r1, r0
 800faf0:	6818      	ldr	r0, [r3, #0]
 800faf2:	f000 b80b 	b.w	800fb0c <_free_r>
 800faf6:	bf00      	nop
 800faf8:	20000194 	.word	0x20000194

0800fafc <memset>:
 800fafc:	4402      	add	r2, r0
 800fafe:	4603      	mov	r3, r0
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d100      	bne.n	800fb06 <memset+0xa>
 800fb04:	4770      	bx	lr
 800fb06:	f803 1b01 	strb.w	r1, [r3], #1
 800fb0a:	e7f9      	b.n	800fb00 <memset+0x4>

0800fb0c <_free_r>:
 800fb0c:	b538      	push	{r3, r4, r5, lr}
 800fb0e:	4605      	mov	r5, r0
 800fb10:	2900      	cmp	r1, #0
 800fb12:	d045      	beq.n	800fba0 <_free_r+0x94>
 800fb14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb18:	1f0c      	subs	r4, r1, #4
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	bfb8      	it	lt
 800fb1e:	18e4      	addlt	r4, r4, r3
 800fb20:	f000 f8ac 	bl	800fc7c <__malloc_lock>
 800fb24:	4a1f      	ldr	r2, [pc, #124]	; (800fba4 <_free_r+0x98>)
 800fb26:	6813      	ldr	r3, [r2, #0]
 800fb28:	4610      	mov	r0, r2
 800fb2a:	b933      	cbnz	r3, 800fb3a <_free_r+0x2e>
 800fb2c:	6063      	str	r3, [r4, #4]
 800fb2e:	6014      	str	r4, [r2, #0]
 800fb30:	4628      	mov	r0, r5
 800fb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb36:	f000 b8a2 	b.w	800fc7e <__malloc_unlock>
 800fb3a:	42a3      	cmp	r3, r4
 800fb3c:	d90c      	bls.n	800fb58 <_free_r+0x4c>
 800fb3e:	6821      	ldr	r1, [r4, #0]
 800fb40:	1862      	adds	r2, r4, r1
 800fb42:	4293      	cmp	r3, r2
 800fb44:	bf04      	itt	eq
 800fb46:	681a      	ldreq	r2, [r3, #0]
 800fb48:	685b      	ldreq	r3, [r3, #4]
 800fb4a:	6063      	str	r3, [r4, #4]
 800fb4c:	bf04      	itt	eq
 800fb4e:	1852      	addeq	r2, r2, r1
 800fb50:	6022      	streq	r2, [r4, #0]
 800fb52:	6004      	str	r4, [r0, #0]
 800fb54:	e7ec      	b.n	800fb30 <_free_r+0x24>
 800fb56:	4613      	mov	r3, r2
 800fb58:	685a      	ldr	r2, [r3, #4]
 800fb5a:	b10a      	cbz	r2, 800fb60 <_free_r+0x54>
 800fb5c:	42a2      	cmp	r2, r4
 800fb5e:	d9fa      	bls.n	800fb56 <_free_r+0x4a>
 800fb60:	6819      	ldr	r1, [r3, #0]
 800fb62:	1858      	adds	r0, r3, r1
 800fb64:	42a0      	cmp	r0, r4
 800fb66:	d10b      	bne.n	800fb80 <_free_r+0x74>
 800fb68:	6820      	ldr	r0, [r4, #0]
 800fb6a:	4401      	add	r1, r0
 800fb6c:	1858      	adds	r0, r3, r1
 800fb6e:	4282      	cmp	r2, r0
 800fb70:	6019      	str	r1, [r3, #0]
 800fb72:	d1dd      	bne.n	800fb30 <_free_r+0x24>
 800fb74:	6810      	ldr	r0, [r2, #0]
 800fb76:	6852      	ldr	r2, [r2, #4]
 800fb78:	605a      	str	r2, [r3, #4]
 800fb7a:	4401      	add	r1, r0
 800fb7c:	6019      	str	r1, [r3, #0]
 800fb7e:	e7d7      	b.n	800fb30 <_free_r+0x24>
 800fb80:	d902      	bls.n	800fb88 <_free_r+0x7c>
 800fb82:	230c      	movs	r3, #12
 800fb84:	602b      	str	r3, [r5, #0]
 800fb86:	e7d3      	b.n	800fb30 <_free_r+0x24>
 800fb88:	6820      	ldr	r0, [r4, #0]
 800fb8a:	1821      	adds	r1, r4, r0
 800fb8c:	428a      	cmp	r2, r1
 800fb8e:	bf04      	itt	eq
 800fb90:	6811      	ldreq	r1, [r2, #0]
 800fb92:	6852      	ldreq	r2, [r2, #4]
 800fb94:	6062      	str	r2, [r4, #4]
 800fb96:	bf04      	itt	eq
 800fb98:	1809      	addeq	r1, r1, r0
 800fb9a:	6021      	streq	r1, [r4, #0]
 800fb9c:	605c      	str	r4, [r3, #4]
 800fb9e:	e7c7      	b.n	800fb30 <_free_r+0x24>
 800fba0:	bd38      	pop	{r3, r4, r5, pc}
 800fba2:	bf00      	nop
 800fba4:	20000818 	.word	0x20000818

0800fba8 <_malloc_r>:
 800fba8:	b570      	push	{r4, r5, r6, lr}
 800fbaa:	1ccd      	adds	r5, r1, #3
 800fbac:	f025 0503 	bic.w	r5, r5, #3
 800fbb0:	3508      	adds	r5, #8
 800fbb2:	2d0c      	cmp	r5, #12
 800fbb4:	bf38      	it	cc
 800fbb6:	250c      	movcc	r5, #12
 800fbb8:	2d00      	cmp	r5, #0
 800fbba:	4606      	mov	r6, r0
 800fbbc:	db01      	blt.n	800fbc2 <_malloc_r+0x1a>
 800fbbe:	42a9      	cmp	r1, r5
 800fbc0:	d903      	bls.n	800fbca <_malloc_r+0x22>
 800fbc2:	230c      	movs	r3, #12
 800fbc4:	6033      	str	r3, [r6, #0]
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	bd70      	pop	{r4, r5, r6, pc}
 800fbca:	f000 f857 	bl	800fc7c <__malloc_lock>
 800fbce:	4a21      	ldr	r2, [pc, #132]	; (800fc54 <_malloc_r+0xac>)
 800fbd0:	6814      	ldr	r4, [r2, #0]
 800fbd2:	4621      	mov	r1, r4
 800fbd4:	b991      	cbnz	r1, 800fbfc <_malloc_r+0x54>
 800fbd6:	4c20      	ldr	r4, [pc, #128]	; (800fc58 <_malloc_r+0xb0>)
 800fbd8:	6823      	ldr	r3, [r4, #0]
 800fbda:	b91b      	cbnz	r3, 800fbe4 <_malloc_r+0x3c>
 800fbdc:	4630      	mov	r0, r6
 800fbde:	f000 f83d 	bl	800fc5c <_sbrk_r>
 800fbe2:	6020      	str	r0, [r4, #0]
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f000 f838 	bl	800fc5c <_sbrk_r>
 800fbec:	1c43      	adds	r3, r0, #1
 800fbee:	d124      	bne.n	800fc3a <_malloc_r+0x92>
 800fbf0:	230c      	movs	r3, #12
 800fbf2:	6033      	str	r3, [r6, #0]
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f000 f842 	bl	800fc7e <__malloc_unlock>
 800fbfa:	e7e4      	b.n	800fbc6 <_malloc_r+0x1e>
 800fbfc:	680b      	ldr	r3, [r1, #0]
 800fbfe:	1b5b      	subs	r3, r3, r5
 800fc00:	d418      	bmi.n	800fc34 <_malloc_r+0x8c>
 800fc02:	2b0b      	cmp	r3, #11
 800fc04:	d90f      	bls.n	800fc26 <_malloc_r+0x7e>
 800fc06:	600b      	str	r3, [r1, #0]
 800fc08:	50cd      	str	r5, [r1, r3]
 800fc0a:	18cc      	adds	r4, r1, r3
 800fc0c:	4630      	mov	r0, r6
 800fc0e:	f000 f836 	bl	800fc7e <__malloc_unlock>
 800fc12:	f104 000b 	add.w	r0, r4, #11
 800fc16:	1d23      	adds	r3, r4, #4
 800fc18:	f020 0007 	bic.w	r0, r0, #7
 800fc1c:	1ac3      	subs	r3, r0, r3
 800fc1e:	d0d3      	beq.n	800fbc8 <_malloc_r+0x20>
 800fc20:	425a      	negs	r2, r3
 800fc22:	50e2      	str	r2, [r4, r3]
 800fc24:	e7d0      	b.n	800fbc8 <_malloc_r+0x20>
 800fc26:	428c      	cmp	r4, r1
 800fc28:	684b      	ldr	r3, [r1, #4]
 800fc2a:	bf16      	itet	ne
 800fc2c:	6063      	strne	r3, [r4, #4]
 800fc2e:	6013      	streq	r3, [r2, #0]
 800fc30:	460c      	movne	r4, r1
 800fc32:	e7eb      	b.n	800fc0c <_malloc_r+0x64>
 800fc34:	460c      	mov	r4, r1
 800fc36:	6849      	ldr	r1, [r1, #4]
 800fc38:	e7cc      	b.n	800fbd4 <_malloc_r+0x2c>
 800fc3a:	1cc4      	adds	r4, r0, #3
 800fc3c:	f024 0403 	bic.w	r4, r4, #3
 800fc40:	42a0      	cmp	r0, r4
 800fc42:	d005      	beq.n	800fc50 <_malloc_r+0xa8>
 800fc44:	1a21      	subs	r1, r4, r0
 800fc46:	4630      	mov	r0, r6
 800fc48:	f000 f808 	bl	800fc5c <_sbrk_r>
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d0cf      	beq.n	800fbf0 <_malloc_r+0x48>
 800fc50:	6025      	str	r5, [r4, #0]
 800fc52:	e7db      	b.n	800fc0c <_malloc_r+0x64>
 800fc54:	20000818 	.word	0x20000818
 800fc58:	2000081c 	.word	0x2000081c

0800fc5c <_sbrk_r>:
 800fc5c:	b538      	push	{r3, r4, r5, lr}
 800fc5e:	4c06      	ldr	r4, [pc, #24]	; (800fc78 <_sbrk_r+0x1c>)
 800fc60:	2300      	movs	r3, #0
 800fc62:	4605      	mov	r5, r0
 800fc64:	4608      	mov	r0, r1
 800fc66:	6023      	str	r3, [r4, #0]
 800fc68:	f7ff f81e 	bl	800eca8 <_sbrk>
 800fc6c:	1c43      	adds	r3, r0, #1
 800fc6e:	d102      	bne.n	800fc76 <_sbrk_r+0x1a>
 800fc70:	6823      	ldr	r3, [r4, #0]
 800fc72:	b103      	cbz	r3, 800fc76 <_sbrk_r+0x1a>
 800fc74:	602b      	str	r3, [r5, #0]
 800fc76:	bd38      	pop	{r3, r4, r5, pc}
 800fc78:	20001d6c 	.word	0x20001d6c

0800fc7c <__malloc_lock>:
 800fc7c:	4770      	bx	lr

0800fc7e <__malloc_unlock>:
 800fc7e:	4770      	bx	lr

0800fc80 <cos>:
 800fc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc82:	ec51 0b10 	vmov	r0, r1, d0
 800fc86:	4a1e      	ldr	r2, [pc, #120]	; (800fd00 <cos+0x80>)
 800fc88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	dc06      	bgt.n	800fc9e <cos+0x1e>
 800fc90:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800fcf8 <cos+0x78>
 800fc94:	f000 fbec 	bl	8010470 <__kernel_cos>
 800fc98:	ec51 0b10 	vmov	r0, r1, d0
 800fc9c:	e007      	b.n	800fcae <cos+0x2e>
 800fc9e:	4a19      	ldr	r2, [pc, #100]	; (800fd04 <cos+0x84>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	dd09      	ble.n	800fcb8 <cos+0x38>
 800fca4:	ee10 2a10 	vmov	r2, s0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	f7f0 fa99 	bl	80001e0 <__aeabi_dsub>
 800fcae:	ec41 0b10 	vmov	d0, r0, r1
 800fcb2:	b005      	add	sp, #20
 800fcb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcb8:	4668      	mov	r0, sp
 800fcba:	f000 f9e5 	bl	8010088 <__ieee754_rem_pio2>
 800fcbe:	f000 0003 	and.w	r0, r0, #3
 800fcc2:	2801      	cmp	r0, #1
 800fcc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcc8:	ed9d 0b00 	vldr	d0, [sp]
 800fccc:	d007      	beq.n	800fcde <cos+0x5e>
 800fcce:	2802      	cmp	r0, #2
 800fcd0:	d00e      	beq.n	800fcf0 <cos+0x70>
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d0de      	beq.n	800fc94 <cos+0x14>
 800fcd6:	2001      	movs	r0, #1
 800fcd8:	f000 ffd2 	bl	8010c80 <__kernel_sin>
 800fcdc:	e7dc      	b.n	800fc98 <cos+0x18>
 800fcde:	f000 ffcf 	bl	8010c80 <__kernel_sin>
 800fce2:	ec53 2b10 	vmov	r2, r3, d0
 800fce6:	ee10 0a10 	vmov	r0, s0
 800fcea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fcee:	e7de      	b.n	800fcae <cos+0x2e>
 800fcf0:	f000 fbbe 	bl	8010470 <__kernel_cos>
 800fcf4:	e7f5      	b.n	800fce2 <cos+0x62>
 800fcf6:	bf00      	nop
	...
 800fd00:	3fe921fb 	.word	0x3fe921fb
 800fd04:	7fefffff 	.word	0x7fefffff

0800fd08 <sin>:
 800fd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd0a:	ec51 0b10 	vmov	r0, r1, d0
 800fd0e:	4a20      	ldr	r2, [pc, #128]	; (800fd90 <sin+0x88>)
 800fd10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd14:	4293      	cmp	r3, r2
 800fd16:	dc07      	bgt.n	800fd28 <sin+0x20>
 800fd18:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800fd88 <sin+0x80>
 800fd1c:	2000      	movs	r0, #0
 800fd1e:	f000 ffaf 	bl	8010c80 <__kernel_sin>
 800fd22:	ec51 0b10 	vmov	r0, r1, d0
 800fd26:	e007      	b.n	800fd38 <sin+0x30>
 800fd28:	4a1a      	ldr	r2, [pc, #104]	; (800fd94 <sin+0x8c>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	dd09      	ble.n	800fd42 <sin+0x3a>
 800fd2e:	ee10 2a10 	vmov	r2, s0
 800fd32:	460b      	mov	r3, r1
 800fd34:	f7f0 fa54 	bl	80001e0 <__aeabi_dsub>
 800fd38:	ec41 0b10 	vmov	d0, r0, r1
 800fd3c:	b005      	add	sp, #20
 800fd3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd42:	4668      	mov	r0, sp
 800fd44:	f000 f9a0 	bl	8010088 <__ieee754_rem_pio2>
 800fd48:	f000 0003 	and.w	r0, r0, #3
 800fd4c:	2801      	cmp	r0, #1
 800fd4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd52:	ed9d 0b00 	vldr	d0, [sp]
 800fd56:	d004      	beq.n	800fd62 <sin+0x5a>
 800fd58:	2802      	cmp	r0, #2
 800fd5a:	d005      	beq.n	800fd68 <sin+0x60>
 800fd5c:	b970      	cbnz	r0, 800fd7c <sin+0x74>
 800fd5e:	2001      	movs	r0, #1
 800fd60:	e7dd      	b.n	800fd1e <sin+0x16>
 800fd62:	f000 fb85 	bl	8010470 <__kernel_cos>
 800fd66:	e7dc      	b.n	800fd22 <sin+0x1a>
 800fd68:	2001      	movs	r0, #1
 800fd6a:	f000 ff89 	bl	8010c80 <__kernel_sin>
 800fd6e:	ec53 2b10 	vmov	r2, r3, d0
 800fd72:	ee10 0a10 	vmov	r0, s0
 800fd76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fd7a:	e7dd      	b.n	800fd38 <sin+0x30>
 800fd7c:	f000 fb78 	bl	8010470 <__kernel_cos>
 800fd80:	e7f5      	b.n	800fd6e <sin+0x66>
 800fd82:	bf00      	nop
 800fd84:	f3af 8000 	nop.w
	...
 800fd90:	3fe921fb 	.word	0x3fe921fb
 800fd94:	7fefffff 	.word	0x7fefffff

0800fd98 <fmod>:
 800fd98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd9c:	ed2d 8b02 	vpush	{d8}
 800fda0:	b08b      	sub	sp, #44	; 0x2c
 800fda2:	ec55 4b10 	vmov	r4, r5, d0
 800fda6:	ec57 6b11 	vmov	r6, r7, d1
 800fdaa:	f000 f859 	bl	800fe60 <__ieee754_fmod>
 800fdae:	4b2a      	ldr	r3, [pc, #168]	; (800fe58 <fmod+0xc0>)
 800fdb0:	eeb0 8a40 	vmov.f32	s16, s0
 800fdb4:	eef0 8a60 	vmov.f32	s17, s1
 800fdb8:	f993 8000 	ldrsb.w	r8, [r3]
 800fdbc:	f1b8 3fff 	cmp.w	r8, #4294967295
 800fdc0:	d030      	beq.n	800fe24 <fmod+0x8c>
 800fdc2:	4632      	mov	r2, r6
 800fdc4:	463b      	mov	r3, r7
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	4639      	mov	r1, r7
 800fdca:	f7f0 fe5b 	bl	8000a84 <__aeabi_dcmpun>
 800fdce:	bb48      	cbnz	r0, 800fe24 <fmod+0x8c>
 800fdd0:	4622      	mov	r2, r4
 800fdd2:	462b      	mov	r3, r5
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	4629      	mov	r1, r5
 800fdd8:	f7f0 fe54 	bl	8000a84 <__aeabi_dcmpun>
 800fddc:	4681      	mov	r9, r0
 800fdde:	bb08      	cbnz	r0, 800fe24 <fmod+0x8c>
 800fde0:	2200      	movs	r2, #0
 800fde2:	2300      	movs	r3, #0
 800fde4:	4630      	mov	r0, r6
 800fde6:	4639      	mov	r1, r7
 800fde8:	f7f0 fe1a 	bl	8000a20 <__aeabi_dcmpeq>
 800fdec:	b1d0      	cbz	r0, 800fe24 <fmod+0x8c>
 800fdee:	2301      	movs	r3, #1
 800fdf0:	9300      	str	r3, [sp, #0]
 800fdf2:	4b1a      	ldr	r3, [pc, #104]	; (800fe5c <fmod+0xc4>)
 800fdf4:	9301      	str	r3, [sp, #4]
 800fdf6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800fdfa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fdfe:	f8cd 9020 	str.w	r9, [sp, #32]
 800fe02:	f1b8 0f00 	cmp.w	r8, #0
 800fe06:	d116      	bne.n	800fe36 <fmod+0x9e>
 800fe08:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800fe0c:	4668      	mov	r0, sp
 800fe0e:	f001 f87f 	bl	8010f10 <matherr>
 800fe12:	b1d8      	cbz	r0, 800fe4c <fmod+0xb4>
 800fe14:	9b08      	ldr	r3, [sp, #32]
 800fe16:	b11b      	cbz	r3, 800fe20 <fmod+0x88>
 800fe18:	f7ff fe36 	bl	800fa88 <__errno>
 800fe1c:	9b08      	ldr	r3, [sp, #32]
 800fe1e:	6003      	str	r3, [r0, #0]
 800fe20:	ed9d 8b06 	vldr	d8, [sp, #24]
 800fe24:	eeb0 0a48 	vmov.f32	s0, s16
 800fe28:	eef0 0a68 	vmov.f32	s1, s17
 800fe2c:	b00b      	add	sp, #44	; 0x2c
 800fe2e:	ecbd 8b02 	vpop	{d8}
 800fe32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe36:	2200      	movs	r2, #0
 800fe38:	2300      	movs	r3, #0
 800fe3a:	4610      	mov	r0, r2
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	f7f0 fcb1 	bl	80007a4 <__aeabi_ddiv>
 800fe42:	f1b8 0f02 	cmp.w	r8, #2
 800fe46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fe4a:	d1df      	bne.n	800fe0c <fmod+0x74>
 800fe4c:	f7ff fe1c 	bl	800fa88 <__errno>
 800fe50:	2321      	movs	r3, #33	; 0x21
 800fe52:	6003      	str	r3, [r0, #0]
 800fe54:	e7de      	b.n	800fe14 <fmod+0x7c>
 800fe56:	bf00      	nop
 800fe58:	200001f8 	.word	0x200001f8
 800fe5c:	080110b0 	.word	0x080110b0

0800fe60 <__ieee754_fmod>:
 800fe60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe64:	ec53 2b11 	vmov	r2, r3, d1
 800fe68:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800fe6c:	ea5e 0402 	orrs.w	r4, lr, r2
 800fe70:	ec51 0b10 	vmov	r0, r1, d0
 800fe74:	461e      	mov	r6, r3
 800fe76:	ee11 5a10 	vmov	r5, s2
 800fe7a:	4694      	mov	ip, r2
 800fe7c:	d00c      	beq.n	800fe98 <__ieee754_fmod+0x38>
 800fe7e:	4c7a      	ldr	r4, [pc, #488]	; (8010068 <__ieee754_fmod+0x208>)
 800fe80:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800fe84:	45a0      	cmp	r8, r4
 800fe86:	4689      	mov	r9, r1
 800fe88:	dc06      	bgt.n	800fe98 <__ieee754_fmod+0x38>
 800fe8a:	4254      	negs	r4, r2
 800fe8c:	4314      	orrs	r4, r2
 800fe8e:	4f77      	ldr	r7, [pc, #476]	; (801006c <__ieee754_fmod+0x20c>)
 800fe90:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800fe94:	42bc      	cmp	r4, r7
 800fe96:	d909      	bls.n	800feac <__ieee754_fmod+0x4c>
 800fe98:	f7f0 fb5a 	bl	8000550 <__aeabi_dmul>
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	460b      	mov	r3, r1
 800fea0:	f7f0 fc80 	bl	80007a4 <__aeabi_ddiv>
 800fea4:	ec41 0b10 	vmov	d0, r0, r1
 800fea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800feac:	45f0      	cmp	r8, lr
 800feae:	ee10 2a10 	vmov	r2, s0
 800feb2:	4607      	mov	r7, r0
 800feb4:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800feb8:	dc0a      	bgt.n	800fed0 <__ieee754_fmod+0x70>
 800feba:	dbf3      	blt.n	800fea4 <__ieee754_fmod+0x44>
 800febc:	42a8      	cmp	r0, r5
 800febe:	d3f1      	bcc.n	800fea4 <__ieee754_fmod+0x44>
 800fec0:	d106      	bne.n	800fed0 <__ieee754_fmod+0x70>
 800fec2:	496b      	ldr	r1, [pc, #428]	; (8010070 <__ieee754_fmod+0x210>)
 800fec4:	0fe4      	lsrs	r4, r4, #31
 800fec6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800feca:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fece:	e7e9      	b.n	800fea4 <__ieee754_fmod+0x44>
 800fed0:	4b68      	ldr	r3, [pc, #416]	; (8010074 <__ieee754_fmod+0x214>)
 800fed2:	4598      	cmp	r8, r3
 800fed4:	dc49      	bgt.n	800ff6a <__ieee754_fmod+0x10a>
 800fed6:	f1b8 0f00 	cmp.w	r8, #0
 800feda:	d13d      	bne.n	800ff58 <__ieee754_fmod+0xf8>
 800fedc:	4866      	ldr	r0, [pc, #408]	; (8010078 <__ieee754_fmod+0x218>)
 800fede:	4611      	mov	r1, r2
 800fee0:	2900      	cmp	r1, #0
 800fee2:	dc36      	bgt.n	800ff52 <__ieee754_fmod+0xf2>
 800fee4:	459e      	cmp	lr, r3
 800fee6:	dc51      	bgt.n	800ff8c <__ieee754_fmod+0x12c>
 800fee8:	f1be 0f00 	cmp.w	lr, #0
 800feec:	d145      	bne.n	800ff7a <__ieee754_fmod+0x11a>
 800feee:	4b62      	ldr	r3, [pc, #392]	; (8010078 <__ieee754_fmod+0x218>)
 800fef0:	4629      	mov	r1, r5
 800fef2:	2900      	cmp	r1, #0
 800fef4:	dc3e      	bgt.n	800ff74 <__ieee754_fmod+0x114>
 800fef6:	4961      	ldr	r1, [pc, #388]	; (801007c <__ieee754_fmod+0x21c>)
 800fef8:	4288      	cmp	r0, r1
 800fefa:	db4c      	blt.n	800ff96 <__ieee754_fmod+0x136>
 800fefc:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800ff00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ff04:	4a5d      	ldr	r2, [pc, #372]	; (801007c <__ieee754_fmod+0x21c>)
 800ff06:	4293      	cmp	r3, r2
 800ff08:	db59      	blt.n	800ffbe <__ieee754_fmod+0x15e>
 800ff0a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ff0e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800ff12:	1ac0      	subs	r0, r0, r3
 800ff14:	1b8a      	subs	r2, r1, r6
 800ff16:	eba7 050c 	sub.w	r5, r7, ip
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	d166      	bne.n	800ffec <__ieee754_fmod+0x18c>
 800ff1e:	4567      	cmp	r7, ip
 800ff20:	bf38      	it	cc
 800ff22:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ff26:	2a00      	cmp	r2, #0
 800ff28:	bfbc      	itt	lt
 800ff2a:	463d      	movlt	r5, r7
 800ff2c:	460a      	movlt	r2, r1
 800ff2e:	ea52 0105 	orrs.w	r1, r2, r5
 800ff32:	d0c6      	beq.n	800fec2 <__ieee754_fmod+0x62>
 800ff34:	494f      	ldr	r1, [pc, #316]	; (8010074 <__ieee754_fmod+0x214>)
 800ff36:	428a      	cmp	r2, r1
 800ff38:	dd6d      	ble.n	8010016 <__ieee754_fmod+0x1b6>
 800ff3a:	4950      	ldr	r1, [pc, #320]	; (801007c <__ieee754_fmod+0x21c>)
 800ff3c:	428b      	cmp	r3, r1
 800ff3e:	db70      	blt.n	8010022 <__ieee754_fmod+0x1c2>
 800ff40:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800ff44:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800ff48:	4314      	orrs	r4, r2
 800ff4a:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800ff4e:	4628      	mov	r0, r5
 800ff50:	e7a8      	b.n	800fea4 <__ieee754_fmod+0x44>
 800ff52:	3801      	subs	r0, #1
 800ff54:	0049      	lsls	r1, r1, #1
 800ff56:	e7c3      	b.n	800fee0 <__ieee754_fmod+0x80>
 800ff58:	4848      	ldr	r0, [pc, #288]	; (801007c <__ieee754_fmod+0x21c>)
 800ff5a:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800ff5e:	0049      	lsls	r1, r1, #1
 800ff60:	2900      	cmp	r1, #0
 800ff62:	f100 30ff 	add.w	r0, r0, #4294967295
 800ff66:	dcfa      	bgt.n	800ff5e <__ieee754_fmod+0xfe>
 800ff68:	e7bc      	b.n	800fee4 <__ieee754_fmod+0x84>
 800ff6a:	ea4f 5028 	mov.w	r0, r8, asr #20
 800ff6e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800ff72:	e7b7      	b.n	800fee4 <__ieee754_fmod+0x84>
 800ff74:	3b01      	subs	r3, #1
 800ff76:	0049      	lsls	r1, r1, #1
 800ff78:	e7bb      	b.n	800fef2 <__ieee754_fmod+0x92>
 800ff7a:	4b40      	ldr	r3, [pc, #256]	; (801007c <__ieee754_fmod+0x21c>)
 800ff7c:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800ff80:	0049      	lsls	r1, r1, #1
 800ff82:	2900      	cmp	r1, #0
 800ff84:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff88:	dcfa      	bgt.n	800ff80 <__ieee754_fmod+0x120>
 800ff8a:	e7b4      	b.n	800fef6 <__ieee754_fmod+0x96>
 800ff8c:	ea4f 532e 	mov.w	r3, lr, asr #20
 800ff90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ff94:	e7af      	b.n	800fef6 <__ieee754_fmod+0x96>
 800ff96:	1a0f      	subs	r7, r1, r0
 800ff98:	2f1f      	cmp	r7, #31
 800ff9a:	dc0a      	bgt.n	800ffb2 <__ieee754_fmod+0x152>
 800ff9c:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800ffa0:	fa08 f807 	lsl.w	r8, r8, r7
 800ffa4:	fa22 f101 	lsr.w	r1, r2, r1
 800ffa8:	ea41 0108 	orr.w	r1, r1, r8
 800ffac:	fa02 f707 	lsl.w	r7, r2, r7
 800ffb0:	e7a8      	b.n	800ff04 <__ieee754_fmod+0xa4>
 800ffb2:	4933      	ldr	r1, [pc, #204]	; (8010080 <__ieee754_fmod+0x220>)
 800ffb4:	1a09      	subs	r1, r1, r0
 800ffb6:	fa02 f101 	lsl.w	r1, r2, r1
 800ffba:	2700      	movs	r7, #0
 800ffbc:	e7a2      	b.n	800ff04 <__ieee754_fmod+0xa4>
 800ffbe:	eba2 0c03 	sub.w	ip, r2, r3
 800ffc2:	f1bc 0f1f 	cmp.w	ip, #31
 800ffc6:	dc0a      	bgt.n	800ffde <__ieee754_fmod+0x17e>
 800ffc8:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800ffcc:	fa0e fe0c 	lsl.w	lr, lr, ip
 800ffd0:	fa25 f606 	lsr.w	r6, r5, r6
 800ffd4:	ea46 060e 	orr.w	r6, r6, lr
 800ffd8:	fa05 fc0c 	lsl.w	ip, r5, ip
 800ffdc:	e799      	b.n	800ff12 <__ieee754_fmod+0xb2>
 800ffde:	4e28      	ldr	r6, [pc, #160]	; (8010080 <__ieee754_fmod+0x220>)
 800ffe0:	1af6      	subs	r6, r6, r3
 800ffe2:	fa05 f606 	lsl.w	r6, r5, r6
 800ffe6:	f04f 0c00 	mov.w	ip, #0
 800ffea:	e792      	b.n	800ff12 <__ieee754_fmod+0xb2>
 800ffec:	4567      	cmp	r7, ip
 800ffee:	bf38      	it	cc
 800fff0:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800fff4:	2a00      	cmp	r2, #0
 800fff6:	da05      	bge.n	8010004 <__ieee754_fmod+0x1a4>
 800fff8:	0ffa      	lsrs	r2, r7, #31
 800fffa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fffe:	007f      	lsls	r7, r7, #1
 8010000:	3801      	subs	r0, #1
 8010002:	e787      	b.n	800ff14 <__ieee754_fmod+0xb4>
 8010004:	ea52 0105 	orrs.w	r1, r2, r5
 8010008:	f43f af5b 	beq.w	800fec2 <__ieee754_fmod+0x62>
 801000c:	0fe9      	lsrs	r1, r5, #31
 801000e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8010012:	006f      	lsls	r7, r5, #1
 8010014:	e7f4      	b.n	8010000 <__ieee754_fmod+0x1a0>
 8010016:	0fe8      	lsrs	r0, r5, #31
 8010018:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801001c:	006d      	lsls	r5, r5, #1
 801001e:	3b01      	subs	r3, #1
 8010020:	e789      	b.n	800ff36 <__ieee754_fmod+0xd6>
 8010022:	1ac9      	subs	r1, r1, r3
 8010024:	2914      	cmp	r1, #20
 8010026:	dc0a      	bgt.n	801003e <__ieee754_fmod+0x1de>
 8010028:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801002c:	fa02 f303 	lsl.w	r3, r2, r3
 8010030:	40cd      	lsrs	r5, r1
 8010032:	432b      	orrs	r3, r5
 8010034:	410a      	asrs	r2, r1
 8010036:	ea42 0104 	orr.w	r1, r2, r4
 801003a:	4618      	mov	r0, r3
 801003c:	e732      	b.n	800fea4 <__ieee754_fmod+0x44>
 801003e:	291f      	cmp	r1, #31
 8010040:	dc07      	bgt.n	8010052 <__ieee754_fmod+0x1f2>
 8010042:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8010046:	40cd      	lsrs	r5, r1
 8010048:	fa02 f303 	lsl.w	r3, r2, r3
 801004c:	432b      	orrs	r3, r5
 801004e:	4622      	mov	r2, r4
 8010050:	e7f1      	b.n	8010036 <__ieee754_fmod+0x1d6>
 8010052:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8010056:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801005a:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801005e:	33e2      	adds	r3, #226	; 0xe2
 8010060:	fa42 f303 	asr.w	r3, r2, r3
 8010064:	e7f3      	b.n	801004e <__ieee754_fmod+0x1ee>
 8010066:	bf00      	nop
 8010068:	7fefffff 	.word	0x7fefffff
 801006c:	7ff00000 	.word	0x7ff00000
 8010070:	080110b8 	.word	0x080110b8
 8010074:	000fffff 	.word	0x000fffff
 8010078:	fffffbed 	.word	0xfffffbed
 801007c:	fffffc02 	.word	0xfffffc02
 8010080:	fffffbe2 	.word	0xfffffbe2
 8010084:	00000000 	.word	0x00000000

08010088 <__ieee754_rem_pio2>:
 8010088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801008c:	ec57 6b10 	vmov	r6, r7, d0
 8010090:	4bc3      	ldr	r3, [pc, #780]	; (80103a0 <__ieee754_rem_pio2+0x318>)
 8010092:	b08d      	sub	sp, #52	; 0x34
 8010094:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010098:	4598      	cmp	r8, r3
 801009a:	4604      	mov	r4, r0
 801009c:	9704      	str	r7, [sp, #16]
 801009e:	dc07      	bgt.n	80100b0 <__ieee754_rem_pio2+0x28>
 80100a0:	2200      	movs	r2, #0
 80100a2:	2300      	movs	r3, #0
 80100a4:	ed84 0b00 	vstr	d0, [r4]
 80100a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80100ac:	2500      	movs	r5, #0
 80100ae:	e027      	b.n	8010100 <__ieee754_rem_pio2+0x78>
 80100b0:	4bbc      	ldr	r3, [pc, #752]	; (80103a4 <__ieee754_rem_pio2+0x31c>)
 80100b2:	4598      	cmp	r8, r3
 80100b4:	dc75      	bgt.n	80101a2 <__ieee754_rem_pio2+0x11a>
 80100b6:	9b04      	ldr	r3, [sp, #16]
 80100b8:	4dbb      	ldr	r5, [pc, #748]	; (80103a8 <__ieee754_rem_pio2+0x320>)
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	ee10 0a10 	vmov	r0, s0
 80100c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8010368 <__ieee754_rem_pio2+0x2e0>)
 80100c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c6:	4639      	mov	r1, r7
 80100c8:	dd36      	ble.n	8010138 <__ieee754_rem_pio2+0xb0>
 80100ca:	f7f0 f889 	bl	80001e0 <__aeabi_dsub>
 80100ce:	45a8      	cmp	r8, r5
 80100d0:	4606      	mov	r6, r0
 80100d2:	460f      	mov	r7, r1
 80100d4:	d018      	beq.n	8010108 <__ieee754_rem_pio2+0x80>
 80100d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8010370 <__ieee754_rem_pio2+0x2e8>)
 80100d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100dc:	f7f0 f880 	bl	80001e0 <__aeabi_dsub>
 80100e0:	4602      	mov	r2, r0
 80100e2:	460b      	mov	r3, r1
 80100e4:	e9c4 2300 	strd	r2, r3, [r4]
 80100e8:	4630      	mov	r0, r6
 80100ea:	4639      	mov	r1, r7
 80100ec:	f7f0 f878 	bl	80001e0 <__aeabi_dsub>
 80100f0:	a39f      	add	r3, pc, #636	; (adr r3, 8010370 <__ieee754_rem_pio2+0x2e8>)
 80100f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f6:	f7f0 f873 	bl	80001e0 <__aeabi_dsub>
 80100fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80100fe:	2501      	movs	r5, #1
 8010100:	4628      	mov	r0, r5
 8010102:	b00d      	add	sp, #52	; 0x34
 8010104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010108:	a39b      	add	r3, pc, #620	; (adr r3, 8010378 <__ieee754_rem_pio2+0x2f0>)
 801010a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010e:	f7f0 f867 	bl	80001e0 <__aeabi_dsub>
 8010112:	a39b      	add	r3, pc, #620	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2f8>)
 8010114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010118:	4606      	mov	r6, r0
 801011a:	460f      	mov	r7, r1
 801011c:	f7f0 f860 	bl	80001e0 <__aeabi_dsub>
 8010120:	4602      	mov	r2, r0
 8010122:	460b      	mov	r3, r1
 8010124:	e9c4 2300 	strd	r2, r3, [r4]
 8010128:	4630      	mov	r0, r6
 801012a:	4639      	mov	r1, r7
 801012c:	f7f0 f858 	bl	80001e0 <__aeabi_dsub>
 8010130:	a393      	add	r3, pc, #588	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2f8>)
 8010132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010136:	e7de      	b.n	80100f6 <__ieee754_rem_pio2+0x6e>
 8010138:	f7f0 f854 	bl	80001e4 <__adddf3>
 801013c:	45a8      	cmp	r8, r5
 801013e:	4606      	mov	r6, r0
 8010140:	460f      	mov	r7, r1
 8010142:	d016      	beq.n	8010172 <__ieee754_rem_pio2+0xea>
 8010144:	a38a      	add	r3, pc, #552	; (adr r3, 8010370 <__ieee754_rem_pio2+0x2e8>)
 8010146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014a:	f7f0 f84b 	bl	80001e4 <__adddf3>
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	e9c4 2300 	strd	r2, r3, [r4]
 8010156:	4630      	mov	r0, r6
 8010158:	4639      	mov	r1, r7
 801015a:	f7f0 f841 	bl	80001e0 <__aeabi_dsub>
 801015e:	a384      	add	r3, pc, #528	; (adr r3, 8010370 <__ieee754_rem_pio2+0x2e8>)
 8010160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010164:	f7f0 f83e 	bl	80001e4 <__adddf3>
 8010168:	f04f 35ff 	mov.w	r5, #4294967295
 801016c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010170:	e7c6      	b.n	8010100 <__ieee754_rem_pio2+0x78>
 8010172:	a381      	add	r3, pc, #516	; (adr r3, 8010378 <__ieee754_rem_pio2+0x2f0>)
 8010174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010178:	f7f0 f834 	bl	80001e4 <__adddf3>
 801017c:	a380      	add	r3, pc, #512	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2f8>)
 801017e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010182:	4606      	mov	r6, r0
 8010184:	460f      	mov	r7, r1
 8010186:	f7f0 f82d 	bl	80001e4 <__adddf3>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	e9c4 2300 	strd	r2, r3, [r4]
 8010192:	4630      	mov	r0, r6
 8010194:	4639      	mov	r1, r7
 8010196:	f7f0 f823 	bl	80001e0 <__aeabi_dsub>
 801019a:	a379      	add	r3, pc, #484	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2f8>)
 801019c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a0:	e7e0      	b.n	8010164 <__ieee754_rem_pio2+0xdc>
 80101a2:	4b82      	ldr	r3, [pc, #520]	; (80103ac <__ieee754_rem_pio2+0x324>)
 80101a4:	4598      	cmp	r8, r3
 80101a6:	f300 80d0 	bgt.w	801034a <__ieee754_rem_pio2+0x2c2>
 80101aa:	f000 fe23 	bl	8010df4 <fabs>
 80101ae:	ec57 6b10 	vmov	r6, r7, d0
 80101b2:	ee10 0a10 	vmov	r0, s0
 80101b6:	a374      	add	r3, pc, #464	; (adr r3, 8010388 <__ieee754_rem_pio2+0x300>)
 80101b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101bc:	4639      	mov	r1, r7
 80101be:	f7f0 f9c7 	bl	8000550 <__aeabi_dmul>
 80101c2:	2200      	movs	r2, #0
 80101c4:	4b7a      	ldr	r3, [pc, #488]	; (80103b0 <__ieee754_rem_pio2+0x328>)
 80101c6:	f7f0 f80d 	bl	80001e4 <__adddf3>
 80101ca:	f7f0 fc71 	bl	8000ab0 <__aeabi_d2iz>
 80101ce:	4605      	mov	r5, r0
 80101d0:	f7f0 f954 	bl	800047c <__aeabi_i2d>
 80101d4:	a364      	add	r3, pc, #400	; (adr r3, 8010368 <__ieee754_rem_pio2+0x2e0>)
 80101d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101de:	f7f0 f9b7 	bl	8000550 <__aeabi_dmul>
 80101e2:	4602      	mov	r2, r0
 80101e4:	460b      	mov	r3, r1
 80101e6:	4630      	mov	r0, r6
 80101e8:	4639      	mov	r1, r7
 80101ea:	f7ef fff9 	bl	80001e0 <__aeabi_dsub>
 80101ee:	a360      	add	r3, pc, #384	; (adr r3, 8010370 <__ieee754_rem_pio2+0x2e8>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	4682      	mov	sl, r0
 80101f6:	468b      	mov	fp, r1
 80101f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101fc:	f7f0 f9a8 	bl	8000550 <__aeabi_dmul>
 8010200:	2d1f      	cmp	r5, #31
 8010202:	4606      	mov	r6, r0
 8010204:	460f      	mov	r7, r1
 8010206:	dc0c      	bgt.n	8010222 <__ieee754_rem_pio2+0x19a>
 8010208:	1e6a      	subs	r2, r5, #1
 801020a:	4b6a      	ldr	r3, [pc, #424]	; (80103b4 <__ieee754_rem_pio2+0x32c>)
 801020c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010210:	4543      	cmp	r3, r8
 8010212:	d006      	beq.n	8010222 <__ieee754_rem_pio2+0x19a>
 8010214:	4632      	mov	r2, r6
 8010216:	463b      	mov	r3, r7
 8010218:	4650      	mov	r0, sl
 801021a:	4659      	mov	r1, fp
 801021c:	f7ef ffe0 	bl	80001e0 <__aeabi_dsub>
 8010220:	e00e      	b.n	8010240 <__ieee754_rem_pio2+0x1b8>
 8010222:	4632      	mov	r2, r6
 8010224:	463b      	mov	r3, r7
 8010226:	4650      	mov	r0, sl
 8010228:	4659      	mov	r1, fp
 801022a:	f7ef ffd9 	bl	80001e0 <__aeabi_dsub>
 801022e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010232:	9305      	str	r3, [sp, #20]
 8010234:	9a05      	ldr	r2, [sp, #20]
 8010236:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	2b10      	cmp	r3, #16
 801023e:	dc02      	bgt.n	8010246 <__ieee754_rem_pio2+0x1be>
 8010240:	e9c4 0100 	strd	r0, r1, [r4]
 8010244:	e039      	b.n	80102ba <__ieee754_rem_pio2+0x232>
 8010246:	a34c      	add	r3, pc, #304	; (adr r3, 8010378 <__ieee754_rem_pio2+0x2f0>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010250:	f7f0 f97e 	bl	8000550 <__aeabi_dmul>
 8010254:	4606      	mov	r6, r0
 8010256:	460f      	mov	r7, r1
 8010258:	4602      	mov	r2, r0
 801025a:	460b      	mov	r3, r1
 801025c:	4650      	mov	r0, sl
 801025e:	4659      	mov	r1, fp
 8010260:	f7ef ffbe 	bl	80001e0 <__aeabi_dsub>
 8010264:	4602      	mov	r2, r0
 8010266:	460b      	mov	r3, r1
 8010268:	4680      	mov	r8, r0
 801026a:	4689      	mov	r9, r1
 801026c:	4650      	mov	r0, sl
 801026e:	4659      	mov	r1, fp
 8010270:	f7ef ffb6 	bl	80001e0 <__aeabi_dsub>
 8010274:	4632      	mov	r2, r6
 8010276:	463b      	mov	r3, r7
 8010278:	f7ef ffb2 	bl	80001e0 <__aeabi_dsub>
 801027c:	a340      	add	r3, pc, #256	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2f8>)
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	4606      	mov	r6, r0
 8010284:	460f      	mov	r7, r1
 8010286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801028a:	f7f0 f961 	bl	8000550 <__aeabi_dmul>
 801028e:	4632      	mov	r2, r6
 8010290:	463b      	mov	r3, r7
 8010292:	f7ef ffa5 	bl	80001e0 <__aeabi_dsub>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	4606      	mov	r6, r0
 801029c:	460f      	mov	r7, r1
 801029e:	4640      	mov	r0, r8
 80102a0:	4649      	mov	r1, r9
 80102a2:	f7ef ff9d 	bl	80001e0 <__aeabi_dsub>
 80102a6:	9a05      	ldr	r2, [sp, #20]
 80102a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80102ac:	1ad3      	subs	r3, r2, r3
 80102ae:	2b31      	cmp	r3, #49	; 0x31
 80102b0:	dc20      	bgt.n	80102f4 <__ieee754_rem_pio2+0x26c>
 80102b2:	e9c4 0100 	strd	r0, r1, [r4]
 80102b6:	46c2      	mov	sl, r8
 80102b8:	46cb      	mov	fp, r9
 80102ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80102be:	4650      	mov	r0, sl
 80102c0:	4642      	mov	r2, r8
 80102c2:	464b      	mov	r3, r9
 80102c4:	4659      	mov	r1, fp
 80102c6:	f7ef ff8b 	bl	80001e0 <__aeabi_dsub>
 80102ca:	463b      	mov	r3, r7
 80102cc:	4632      	mov	r2, r6
 80102ce:	f7ef ff87 	bl	80001e0 <__aeabi_dsub>
 80102d2:	9b04      	ldr	r3, [sp, #16]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80102da:	f6bf af11 	bge.w	8010100 <__ieee754_rem_pio2+0x78>
 80102de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80102e2:	6063      	str	r3, [r4, #4]
 80102e4:	f8c4 8000 	str.w	r8, [r4]
 80102e8:	60a0      	str	r0, [r4, #8]
 80102ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102ee:	60e3      	str	r3, [r4, #12]
 80102f0:	426d      	negs	r5, r5
 80102f2:	e705      	b.n	8010100 <__ieee754_rem_pio2+0x78>
 80102f4:	a326      	add	r3, pc, #152	; (adr r3, 8010390 <__ieee754_rem_pio2+0x308>)
 80102f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102fe:	f7f0 f927 	bl	8000550 <__aeabi_dmul>
 8010302:	4606      	mov	r6, r0
 8010304:	460f      	mov	r7, r1
 8010306:	4602      	mov	r2, r0
 8010308:	460b      	mov	r3, r1
 801030a:	4640      	mov	r0, r8
 801030c:	4649      	mov	r1, r9
 801030e:	f7ef ff67 	bl	80001e0 <__aeabi_dsub>
 8010312:	4602      	mov	r2, r0
 8010314:	460b      	mov	r3, r1
 8010316:	4682      	mov	sl, r0
 8010318:	468b      	mov	fp, r1
 801031a:	4640      	mov	r0, r8
 801031c:	4649      	mov	r1, r9
 801031e:	f7ef ff5f 	bl	80001e0 <__aeabi_dsub>
 8010322:	4632      	mov	r2, r6
 8010324:	463b      	mov	r3, r7
 8010326:	f7ef ff5b 	bl	80001e0 <__aeabi_dsub>
 801032a:	a31b      	add	r3, pc, #108	; (adr r3, 8010398 <__ieee754_rem_pio2+0x310>)
 801032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010330:	4606      	mov	r6, r0
 8010332:	460f      	mov	r7, r1
 8010334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010338:	f7f0 f90a 	bl	8000550 <__aeabi_dmul>
 801033c:	4632      	mov	r2, r6
 801033e:	463b      	mov	r3, r7
 8010340:	f7ef ff4e 	bl	80001e0 <__aeabi_dsub>
 8010344:	4606      	mov	r6, r0
 8010346:	460f      	mov	r7, r1
 8010348:	e764      	b.n	8010214 <__ieee754_rem_pio2+0x18c>
 801034a:	4b1b      	ldr	r3, [pc, #108]	; (80103b8 <__ieee754_rem_pio2+0x330>)
 801034c:	4598      	cmp	r8, r3
 801034e:	dd35      	ble.n	80103bc <__ieee754_rem_pio2+0x334>
 8010350:	ee10 2a10 	vmov	r2, s0
 8010354:	463b      	mov	r3, r7
 8010356:	4630      	mov	r0, r6
 8010358:	4639      	mov	r1, r7
 801035a:	f7ef ff41 	bl	80001e0 <__aeabi_dsub>
 801035e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010362:	e9c4 0100 	strd	r0, r1, [r4]
 8010366:	e6a1      	b.n	80100ac <__ieee754_rem_pio2+0x24>
 8010368:	54400000 	.word	0x54400000
 801036c:	3ff921fb 	.word	0x3ff921fb
 8010370:	1a626331 	.word	0x1a626331
 8010374:	3dd0b461 	.word	0x3dd0b461
 8010378:	1a600000 	.word	0x1a600000
 801037c:	3dd0b461 	.word	0x3dd0b461
 8010380:	2e037073 	.word	0x2e037073
 8010384:	3ba3198a 	.word	0x3ba3198a
 8010388:	6dc9c883 	.word	0x6dc9c883
 801038c:	3fe45f30 	.word	0x3fe45f30
 8010390:	2e000000 	.word	0x2e000000
 8010394:	3ba3198a 	.word	0x3ba3198a
 8010398:	252049c1 	.word	0x252049c1
 801039c:	397b839a 	.word	0x397b839a
 80103a0:	3fe921fb 	.word	0x3fe921fb
 80103a4:	4002d97b 	.word	0x4002d97b
 80103a8:	3ff921fb 	.word	0x3ff921fb
 80103ac:	413921fb 	.word	0x413921fb
 80103b0:	3fe00000 	.word	0x3fe00000
 80103b4:	080110c8 	.word	0x080110c8
 80103b8:	7fefffff 	.word	0x7fefffff
 80103bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80103c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80103c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80103c8:	4630      	mov	r0, r6
 80103ca:	460f      	mov	r7, r1
 80103cc:	f7f0 fb70 	bl	8000ab0 <__aeabi_d2iz>
 80103d0:	f7f0 f854 	bl	800047c <__aeabi_i2d>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4630      	mov	r0, r6
 80103da:	4639      	mov	r1, r7
 80103dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80103e0:	f7ef fefe 	bl	80001e0 <__aeabi_dsub>
 80103e4:	2200      	movs	r2, #0
 80103e6:	4b1f      	ldr	r3, [pc, #124]	; (8010464 <__ieee754_rem_pio2+0x3dc>)
 80103e8:	f7f0 f8b2 	bl	8000550 <__aeabi_dmul>
 80103ec:	460f      	mov	r7, r1
 80103ee:	4606      	mov	r6, r0
 80103f0:	f7f0 fb5e 	bl	8000ab0 <__aeabi_d2iz>
 80103f4:	f7f0 f842 	bl	800047c <__aeabi_i2d>
 80103f8:	4602      	mov	r2, r0
 80103fa:	460b      	mov	r3, r1
 80103fc:	4630      	mov	r0, r6
 80103fe:	4639      	mov	r1, r7
 8010400:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010404:	f7ef feec 	bl	80001e0 <__aeabi_dsub>
 8010408:	2200      	movs	r2, #0
 801040a:	4b16      	ldr	r3, [pc, #88]	; (8010464 <__ieee754_rem_pio2+0x3dc>)
 801040c:	f7f0 f8a0 	bl	8000550 <__aeabi_dmul>
 8010410:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010414:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8010418:	f04f 0803 	mov.w	r8, #3
 801041c:	2600      	movs	r6, #0
 801041e:	2700      	movs	r7, #0
 8010420:	4632      	mov	r2, r6
 8010422:	463b      	mov	r3, r7
 8010424:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010428:	f108 3aff 	add.w	sl, r8, #4294967295
 801042c:	f7f0 faf8 	bl	8000a20 <__aeabi_dcmpeq>
 8010430:	b9b0      	cbnz	r0, 8010460 <__ieee754_rem_pio2+0x3d8>
 8010432:	4b0d      	ldr	r3, [pc, #52]	; (8010468 <__ieee754_rem_pio2+0x3e0>)
 8010434:	9301      	str	r3, [sp, #4]
 8010436:	2302      	movs	r3, #2
 8010438:	9300      	str	r3, [sp, #0]
 801043a:	462a      	mov	r2, r5
 801043c:	4643      	mov	r3, r8
 801043e:	4621      	mov	r1, r4
 8010440:	a806      	add	r0, sp, #24
 8010442:	f000 f8dd 	bl	8010600 <__kernel_rem_pio2>
 8010446:	9b04      	ldr	r3, [sp, #16]
 8010448:	2b00      	cmp	r3, #0
 801044a:	4605      	mov	r5, r0
 801044c:	f6bf ae58 	bge.w	8010100 <__ieee754_rem_pio2+0x78>
 8010450:	6863      	ldr	r3, [r4, #4]
 8010452:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010456:	6063      	str	r3, [r4, #4]
 8010458:	68e3      	ldr	r3, [r4, #12]
 801045a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801045e:	e746      	b.n	80102ee <__ieee754_rem_pio2+0x266>
 8010460:	46d0      	mov	r8, sl
 8010462:	e7dd      	b.n	8010420 <__ieee754_rem_pio2+0x398>
 8010464:	41700000 	.word	0x41700000
 8010468:	08011148 	.word	0x08011148
 801046c:	00000000 	.word	0x00000000

08010470 <__kernel_cos>:
 8010470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010474:	ec59 8b10 	vmov	r8, r9, d0
 8010478:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801047c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8010480:	ed2d 8b02 	vpush	{d8}
 8010484:	eeb0 8a41 	vmov.f32	s16, s2
 8010488:	eef0 8a61 	vmov.f32	s17, s3
 801048c:	da07      	bge.n	801049e <__kernel_cos+0x2e>
 801048e:	ee10 0a10 	vmov	r0, s0
 8010492:	4649      	mov	r1, r9
 8010494:	f7f0 fb0c 	bl	8000ab0 <__aeabi_d2iz>
 8010498:	2800      	cmp	r0, #0
 801049a:	f000 8089 	beq.w	80105b0 <__kernel_cos+0x140>
 801049e:	4642      	mov	r2, r8
 80104a0:	464b      	mov	r3, r9
 80104a2:	4640      	mov	r0, r8
 80104a4:	4649      	mov	r1, r9
 80104a6:	f7f0 f853 	bl	8000550 <__aeabi_dmul>
 80104aa:	2200      	movs	r2, #0
 80104ac:	4b4e      	ldr	r3, [pc, #312]	; (80105e8 <__kernel_cos+0x178>)
 80104ae:	4604      	mov	r4, r0
 80104b0:	460d      	mov	r5, r1
 80104b2:	f7f0 f84d 	bl	8000550 <__aeabi_dmul>
 80104b6:	a340      	add	r3, pc, #256	; (adr r3, 80105b8 <__kernel_cos+0x148>)
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	4682      	mov	sl, r0
 80104be:	468b      	mov	fp, r1
 80104c0:	4620      	mov	r0, r4
 80104c2:	4629      	mov	r1, r5
 80104c4:	f7f0 f844 	bl	8000550 <__aeabi_dmul>
 80104c8:	a33d      	add	r3, pc, #244	; (adr r3, 80105c0 <__kernel_cos+0x150>)
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	f7ef fe89 	bl	80001e4 <__adddf3>
 80104d2:	4622      	mov	r2, r4
 80104d4:	462b      	mov	r3, r5
 80104d6:	f7f0 f83b 	bl	8000550 <__aeabi_dmul>
 80104da:	a33b      	add	r3, pc, #236	; (adr r3, 80105c8 <__kernel_cos+0x158>)
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	f7ef fe7e 	bl	80001e0 <__aeabi_dsub>
 80104e4:	4622      	mov	r2, r4
 80104e6:	462b      	mov	r3, r5
 80104e8:	f7f0 f832 	bl	8000550 <__aeabi_dmul>
 80104ec:	a338      	add	r3, pc, #224	; (adr r3, 80105d0 <__kernel_cos+0x160>)
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	f7ef fe77 	bl	80001e4 <__adddf3>
 80104f6:	4622      	mov	r2, r4
 80104f8:	462b      	mov	r3, r5
 80104fa:	f7f0 f829 	bl	8000550 <__aeabi_dmul>
 80104fe:	a336      	add	r3, pc, #216	; (adr r3, 80105d8 <__kernel_cos+0x168>)
 8010500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010504:	f7ef fe6c 	bl	80001e0 <__aeabi_dsub>
 8010508:	4622      	mov	r2, r4
 801050a:	462b      	mov	r3, r5
 801050c:	f7f0 f820 	bl	8000550 <__aeabi_dmul>
 8010510:	a333      	add	r3, pc, #204	; (adr r3, 80105e0 <__kernel_cos+0x170>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	f7ef fe65 	bl	80001e4 <__adddf3>
 801051a:	4622      	mov	r2, r4
 801051c:	462b      	mov	r3, r5
 801051e:	f7f0 f817 	bl	8000550 <__aeabi_dmul>
 8010522:	4622      	mov	r2, r4
 8010524:	462b      	mov	r3, r5
 8010526:	f7f0 f813 	bl	8000550 <__aeabi_dmul>
 801052a:	ec53 2b18 	vmov	r2, r3, d8
 801052e:	4604      	mov	r4, r0
 8010530:	460d      	mov	r5, r1
 8010532:	4640      	mov	r0, r8
 8010534:	4649      	mov	r1, r9
 8010536:	f7f0 f80b 	bl	8000550 <__aeabi_dmul>
 801053a:	460b      	mov	r3, r1
 801053c:	4602      	mov	r2, r0
 801053e:	4629      	mov	r1, r5
 8010540:	4620      	mov	r0, r4
 8010542:	f7ef fe4d 	bl	80001e0 <__aeabi_dsub>
 8010546:	4b29      	ldr	r3, [pc, #164]	; (80105ec <__kernel_cos+0x17c>)
 8010548:	429e      	cmp	r6, r3
 801054a:	4680      	mov	r8, r0
 801054c:	4689      	mov	r9, r1
 801054e:	dc11      	bgt.n	8010574 <__kernel_cos+0x104>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	4650      	mov	r0, sl
 8010556:	4659      	mov	r1, fp
 8010558:	f7ef fe42 	bl	80001e0 <__aeabi_dsub>
 801055c:	460b      	mov	r3, r1
 801055e:	4924      	ldr	r1, [pc, #144]	; (80105f0 <__kernel_cos+0x180>)
 8010560:	4602      	mov	r2, r0
 8010562:	2000      	movs	r0, #0
 8010564:	f7ef fe3c 	bl	80001e0 <__aeabi_dsub>
 8010568:	ecbd 8b02 	vpop	{d8}
 801056c:	ec41 0b10 	vmov	d0, r0, r1
 8010570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010574:	4b1f      	ldr	r3, [pc, #124]	; (80105f4 <__kernel_cos+0x184>)
 8010576:	491e      	ldr	r1, [pc, #120]	; (80105f0 <__kernel_cos+0x180>)
 8010578:	429e      	cmp	r6, r3
 801057a:	bfcc      	ite	gt
 801057c:	4d1e      	ldrgt	r5, [pc, #120]	; (80105f8 <__kernel_cos+0x188>)
 801057e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8010582:	2400      	movs	r4, #0
 8010584:	4622      	mov	r2, r4
 8010586:	462b      	mov	r3, r5
 8010588:	2000      	movs	r0, #0
 801058a:	f7ef fe29 	bl	80001e0 <__aeabi_dsub>
 801058e:	4622      	mov	r2, r4
 8010590:	4606      	mov	r6, r0
 8010592:	460f      	mov	r7, r1
 8010594:	462b      	mov	r3, r5
 8010596:	4650      	mov	r0, sl
 8010598:	4659      	mov	r1, fp
 801059a:	f7ef fe21 	bl	80001e0 <__aeabi_dsub>
 801059e:	4642      	mov	r2, r8
 80105a0:	464b      	mov	r3, r9
 80105a2:	f7ef fe1d 	bl	80001e0 <__aeabi_dsub>
 80105a6:	4602      	mov	r2, r0
 80105a8:	460b      	mov	r3, r1
 80105aa:	4630      	mov	r0, r6
 80105ac:	4639      	mov	r1, r7
 80105ae:	e7d9      	b.n	8010564 <__kernel_cos+0xf4>
 80105b0:	2000      	movs	r0, #0
 80105b2:	490f      	ldr	r1, [pc, #60]	; (80105f0 <__kernel_cos+0x180>)
 80105b4:	e7d8      	b.n	8010568 <__kernel_cos+0xf8>
 80105b6:	bf00      	nop
 80105b8:	be8838d4 	.word	0xbe8838d4
 80105bc:	bda8fae9 	.word	0xbda8fae9
 80105c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80105c4:	3e21ee9e 	.word	0x3e21ee9e
 80105c8:	809c52ad 	.word	0x809c52ad
 80105cc:	3e927e4f 	.word	0x3e927e4f
 80105d0:	19cb1590 	.word	0x19cb1590
 80105d4:	3efa01a0 	.word	0x3efa01a0
 80105d8:	16c15177 	.word	0x16c15177
 80105dc:	3f56c16c 	.word	0x3f56c16c
 80105e0:	5555554c 	.word	0x5555554c
 80105e4:	3fa55555 	.word	0x3fa55555
 80105e8:	3fe00000 	.word	0x3fe00000
 80105ec:	3fd33332 	.word	0x3fd33332
 80105f0:	3ff00000 	.word	0x3ff00000
 80105f4:	3fe90000 	.word	0x3fe90000
 80105f8:	3fd20000 	.word	0x3fd20000
 80105fc:	00000000 	.word	0x00000000

08010600 <__kernel_rem_pio2>:
 8010600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010604:	ed2d 8b02 	vpush	{d8}
 8010608:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801060c:	1ed4      	subs	r4, r2, #3
 801060e:	9308      	str	r3, [sp, #32]
 8010610:	9101      	str	r1, [sp, #4]
 8010612:	4bc5      	ldr	r3, [pc, #788]	; (8010928 <__kernel_rem_pio2+0x328>)
 8010614:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8010616:	9009      	str	r0, [sp, #36]	; 0x24
 8010618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801061c:	9304      	str	r3, [sp, #16]
 801061e:	9b08      	ldr	r3, [sp, #32]
 8010620:	3b01      	subs	r3, #1
 8010622:	9307      	str	r3, [sp, #28]
 8010624:	2318      	movs	r3, #24
 8010626:	fb94 f4f3 	sdiv	r4, r4, r3
 801062a:	f06f 0317 	mvn.w	r3, #23
 801062e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8010632:	fb04 3303 	mla	r3, r4, r3, r3
 8010636:	eb03 0a02 	add.w	sl, r3, r2
 801063a:	9b04      	ldr	r3, [sp, #16]
 801063c:	9a07      	ldr	r2, [sp, #28]
 801063e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010918 <__kernel_rem_pio2+0x318>
 8010642:	eb03 0802 	add.w	r8, r3, r2
 8010646:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010648:	1aa7      	subs	r7, r4, r2
 801064a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801064e:	ae22      	add	r6, sp, #136	; 0x88
 8010650:	2500      	movs	r5, #0
 8010652:	4545      	cmp	r5, r8
 8010654:	dd13      	ble.n	801067e <__kernel_rem_pio2+0x7e>
 8010656:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8010918 <__kernel_rem_pio2+0x318>
 801065a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801065e:	2600      	movs	r6, #0
 8010660:	9b04      	ldr	r3, [sp, #16]
 8010662:	429e      	cmp	r6, r3
 8010664:	dc32      	bgt.n	80106cc <__kernel_rem_pio2+0xcc>
 8010666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010668:	9302      	str	r3, [sp, #8]
 801066a:	9b08      	ldr	r3, [sp, #32]
 801066c:	199d      	adds	r5, r3, r6
 801066e:	ab22      	add	r3, sp, #136	; 0x88
 8010670:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010674:	9306      	str	r3, [sp, #24]
 8010676:	ec59 8b18 	vmov	r8, r9, d8
 801067a:	2700      	movs	r7, #0
 801067c:	e01f      	b.n	80106be <__kernel_rem_pio2+0xbe>
 801067e:	42ef      	cmn	r7, r5
 8010680:	d407      	bmi.n	8010692 <__kernel_rem_pio2+0x92>
 8010682:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010686:	f7ef fef9 	bl	800047c <__aeabi_i2d>
 801068a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801068e:	3501      	adds	r5, #1
 8010690:	e7df      	b.n	8010652 <__kernel_rem_pio2+0x52>
 8010692:	ec51 0b18 	vmov	r0, r1, d8
 8010696:	e7f8      	b.n	801068a <__kernel_rem_pio2+0x8a>
 8010698:	9906      	ldr	r1, [sp, #24]
 801069a:	9d02      	ldr	r5, [sp, #8]
 801069c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80106a0:	9106      	str	r1, [sp, #24]
 80106a2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80106a6:	9502      	str	r5, [sp, #8]
 80106a8:	f7ef ff52 	bl	8000550 <__aeabi_dmul>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	4640      	mov	r0, r8
 80106b2:	4649      	mov	r1, r9
 80106b4:	f7ef fd96 	bl	80001e4 <__adddf3>
 80106b8:	3701      	adds	r7, #1
 80106ba:	4680      	mov	r8, r0
 80106bc:	4689      	mov	r9, r1
 80106be:	9b07      	ldr	r3, [sp, #28]
 80106c0:	429f      	cmp	r7, r3
 80106c2:	dde9      	ble.n	8010698 <__kernel_rem_pio2+0x98>
 80106c4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80106c8:	3601      	adds	r6, #1
 80106ca:	e7c9      	b.n	8010660 <__kernel_rem_pio2+0x60>
 80106cc:	9b04      	ldr	r3, [sp, #16]
 80106ce:	aa0e      	add	r2, sp, #56	; 0x38
 80106d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106d4:	930c      	str	r3, [sp, #48]	; 0x30
 80106d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80106d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80106dc:	9c04      	ldr	r4, [sp, #16]
 80106de:	930b      	str	r3, [sp, #44]	; 0x2c
 80106e0:	ab9a      	add	r3, sp, #616	; 0x268
 80106e2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80106e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80106ee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80106f2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80106f6:	ab9a      	add	r3, sp, #616	; 0x268
 80106f8:	445b      	add	r3, fp
 80106fa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80106fe:	2500      	movs	r5, #0
 8010700:	1b63      	subs	r3, r4, r5
 8010702:	2b00      	cmp	r3, #0
 8010704:	dc78      	bgt.n	80107f8 <__kernel_rem_pio2+0x1f8>
 8010706:	4650      	mov	r0, sl
 8010708:	ec49 8b10 	vmov	d0, r8, r9
 801070c:	f000 fc04 	bl	8010f18 <scalbn>
 8010710:	ec57 6b10 	vmov	r6, r7, d0
 8010714:	2200      	movs	r2, #0
 8010716:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801071a:	ee10 0a10 	vmov	r0, s0
 801071e:	4639      	mov	r1, r7
 8010720:	f7ef ff16 	bl	8000550 <__aeabi_dmul>
 8010724:	ec41 0b10 	vmov	d0, r0, r1
 8010728:	f000 fb6e 	bl	8010e08 <floor>
 801072c:	2200      	movs	r2, #0
 801072e:	ec51 0b10 	vmov	r0, r1, d0
 8010732:	4b7e      	ldr	r3, [pc, #504]	; (801092c <__kernel_rem_pio2+0x32c>)
 8010734:	f7ef ff0c 	bl	8000550 <__aeabi_dmul>
 8010738:	4602      	mov	r2, r0
 801073a:	460b      	mov	r3, r1
 801073c:	4630      	mov	r0, r6
 801073e:	4639      	mov	r1, r7
 8010740:	f7ef fd4e 	bl	80001e0 <__aeabi_dsub>
 8010744:	460f      	mov	r7, r1
 8010746:	4606      	mov	r6, r0
 8010748:	f7f0 f9b2 	bl	8000ab0 <__aeabi_d2iz>
 801074c:	9006      	str	r0, [sp, #24]
 801074e:	f7ef fe95 	bl	800047c <__aeabi_i2d>
 8010752:	4602      	mov	r2, r0
 8010754:	460b      	mov	r3, r1
 8010756:	4630      	mov	r0, r6
 8010758:	4639      	mov	r1, r7
 801075a:	f7ef fd41 	bl	80001e0 <__aeabi_dsub>
 801075e:	f1ba 0f00 	cmp.w	sl, #0
 8010762:	4606      	mov	r6, r0
 8010764:	460f      	mov	r7, r1
 8010766:	dd6c      	ble.n	8010842 <__kernel_rem_pio2+0x242>
 8010768:	1e62      	subs	r2, r4, #1
 801076a:	ab0e      	add	r3, sp, #56	; 0x38
 801076c:	f1ca 0118 	rsb	r1, sl, #24
 8010770:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010774:	9d06      	ldr	r5, [sp, #24]
 8010776:	fa40 f301 	asr.w	r3, r0, r1
 801077a:	441d      	add	r5, r3
 801077c:	408b      	lsls	r3, r1
 801077e:	1ac0      	subs	r0, r0, r3
 8010780:	ab0e      	add	r3, sp, #56	; 0x38
 8010782:	9506      	str	r5, [sp, #24]
 8010784:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010788:	f1ca 0317 	rsb	r3, sl, #23
 801078c:	fa40 f303 	asr.w	r3, r0, r3
 8010790:	9302      	str	r3, [sp, #8]
 8010792:	9b02      	ldr	r3, [sp, #8]
 8010794:	2b00      	cmp	r3, #0
 8010796:	dd62      	ble.n	801085e <__kernel_rem_pio2+0x25e>
 8010798:	9b06      	ldr	r3, [sp, #24]
 801079a:	2200      	movs	r2, #0
 801079c:	3301      	adds	r3, #1
 801079e:	9306      	str	r3, [sp, #24]
 80107a0:	4615      	mov	r5, r2
 80107a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80107a6:	4294      	cmp	r4, r2
 80107a8:	f300 8095 	bgt.w	80108d6 <__kernel_rem_pio2+0x2d6>
 80107ac:	f1ba 0f00 	cmp.w	sl, #0
 80107b0:	dd07      	ble.n	80107c2 <__kernel_rem_pio2+0x1c2>
 80107b2:	f1ba 0f01 	cmp.w	sl, #1
 80107b6:	f000 80a2 	beq.w	80108fe <__kernel_rem_pio2+0x2fe>
 80107ba:	f1ba 0f02 	cmp.w	sl, #2
 80107be:	f000 80c1 	beq.w	8010944 <__kernel_rem_pio2+0x344>
 80107c2:	9b02      	ldr	r3, [sp, #8]
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	d14a      	bne.n	801085e <__kernel_rem_pio2+0x25e>
 80107c8:	4632      	mov	r2, r6
 80107ca:	463b      	mov	r3, r7
 80107cc:	2000      	movs	r0, #0
 80107ce:	4958      	ldr	r1, [pc, #352]	; (8010930 <__kernel_rem_pio2+0x330>)
 80107d0:	f7ef fd06 	bl	80001e0 <__aeabi_dsub>
 80107d4:	4606      	mov	r6, r0
 80107d6:	460f      	mov	r7, r1
 80107d8:	2d00      	cmp	r5, #0
 80107da:	d040      	beq.n	801085e <__kernel_rem_pio2+0x25e>
 80107dc:	4650      	mov	r0, sl
 80107de:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010920 <__kernel_rem_pio2+0x320>
 80107e2:	f000 fb99 	bl	8010f18 <scalbn>
 80107e6:	4630      	mov	r0, r6
 80107e8:	4639      	mov	r1, r7
 80107ea:	ec53 2b10 	vmov	r2, r3, d0
 80107ee:	f7ef fcf7 	bl	80001e0 <__aeabi_dsub>
 80107f2:	4606      	mov	r6, r0
 80107f4:	460f      	mov	r7, r1
 80107f6:	e032      	b.n	801085e <__kernel_rem_pio2+0x25e>
 80107f8:	2200      	movs	r2, #0
 80107fa:	4b4e      	ldr	r3, [pc, #312]	; (8010934 <__kernel_rem_pio2+0x334>)
 80107fc:	4640      	mov	r0, r8
 80107fe:	4649      	mov	r1, r9
 8010800:	f7ef fea6 	bl	8000550 <__aeabi_dmul>
 8010804:	f7f0 f954 	bl	8000ab0 <__aeabi_d2iz>
 8010808:	f7ef fe38 	bl	800047c <__aeabi_i2d>
 801080c:	2200      	movs	r2, #0
 801080e:	4b4a      	ldr	r3, [pc, #296]	; (8010938 <__kernel_rem_pio2+0x338>)
 8010810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010814:	f7ef fe9c 	bl	8000550 <__aeabi_dmul>
 8010818:	4602      	mov	r2, r0
 801081a:	460b      	mov	r3, r1
 801081c:	4640      	mov	r0, r8
 801081e:	4649      	mov	r1, r9
 8010820:	f7ef fcde 	bl	80001e0 <__aeabi_dsub>
 8010824:	f7f0 f944 	bl	8000ab0 <__aeabi_d2iz>
 8010828:	ab0e      	add	r3, sp, #56	; 0x38
 801082a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801082e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010836:	f7ef fcd5 	bl	80001e4 <__adddf3>
 801083a:	3501      	adds	r5, #1
 801083c:	4680      	mov	r8, r0
 801083e:	4689      	mov	r9, r1
 8010840:	e75e      	b.n	8010700 <__kernel_rem_pio2+0x100>
 8010842:	d105      	bne.n	8010850 <__kernel_rem_pio2+0x250>
 8010844:	1e63      	subs	r3, r4, #1
 8010846:	aa0e      	add	r2, sp, #56	; 0x38
 8010848:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801084c:	15c3      	asrs	r3, r0, #23
 801084e:	e79f      	b.n	8010790 <__kernel_rem_pio2+0x190>
 8010850:	2200      	movs	r2, #0
 8010852:	4b3a      	ldr	r3, [pc, #232]	; (801093c <__kernel_rem_pio2+0x33c>)
 8010854:	f7f0 f902 	bl	8000a5c <__aeabi_dcmpge>
 8010858:	2800      	cmp	r0, #0
 801085a:	d139      	bne.n	80108d0 <__kernel_rem_pio2+0x2d0>
 801085c:	9002      	str	r0, [sp, #8]
 801085e:	2200      	movs	r2, #0
 8010860:	2300      	movs	r3, #0
 8010862:	4630      	mov	r0, r6
 8010864:	4639      	mov	r1, r7
 8010866:	f7f0 f8db 	bl	8000a20 <__aeabi_dcmpeq>
 801086a:	2800      	cmp	r0, #0
 801086c:	f000 80c7 	beq.w	80109fe <__kernel_rem_pio2+0x3fe>
 8010870:	1e65      	subs	r5, r4, #1
 8010872:	462b      	mov	r3, r5
 8010874:	2200      	movs	r2, #0
 8010876:	9904      	ldr	r1, [sp, #16]
 8010878:	428b      	cmp	r3, r1
 801087a:	da6a      	bge.n	8010952 <__kernel_rem_pio2+0x352>
 801087c:	2a00      	cmp	r2, #0
 801087e:	f000 8088 	beq.w	8010992 <__kernel_rem_pio2+0x392>
 8010882:	ab0e      	add	r3, sp, #56	; 0x38
 8010884:	f1aa 0a18 	sub.w	sl, sl, #24
 8010888:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801088c:	2b00      	cmp	r3, #0
 801088e:	f000 80b4 	beq.w	80109fa <__kernel_rem_pio2+0x3fa>
 8010892:	4650      	mov	r0, sl
 8010894:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8010920 <__kernel_rem_pio2+0x320>
 8010898:	f000 fb3e 	bl	8010f18 <scalbn>
 801089c:	00ec      	lsls	r4, r5, #3
 801089e:	ab72      	add	r3, sp, #456	; 0x1c8
 80108a0:	191e      	adds	r6, r3, r4
 80108a2:	ec59 8b10 	vmov	r8, r9, d0
 80108a6:	f106 0a08 	add.w	sl, r6, #8
 80108aa:	462f      	mov	r7, r5
 80108ac:	2f00      	cmp	r7, #0
 80108ae:	f280 80df 	bge.w	8010a70 <__kernel_rem_pio2+0x470>
 80108b2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8010918 <__kernel_rem_pio2+0x318>
 80108b6:	f04f 0a00 	mov.w	sl, #0
 80108ba:	eba5 030a 	sub.w	r3, r5, sl
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f2c0 810a 	blt.w	8010ad8 <__kernel_rem_pio2+0x4d8>
 80108c4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8010940 <__kernel_rem_pio2+0x340>
 80108c8:	ec59 8b18 	vmov	r8, r9, d8
 80108cc:	2700      	movs	r7, #0
 80108ce:	e0f5      	b.n	8010abc <__kernel_rem_pio2+0x4bc>
 80108d0:	2302      	movs	r3, #2
 80108d2:	9302      	str	r3, [sp, #8]
 80108d4:	e760      	b.n	8010798 <__kernel_rem_pio2+0x198>
 80108d6:	ab0e      	add	r3, sp, #56	; 0x38
 80108d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108dc:	b94d      	cbnz	r5, 80108f2 <__kernel_rem_pio2+0x2f2>
 80108de:	b12b      	cbz	r3, 80108ec <__kernel_rem_pio2+0x2ec>
 80108e0:	a80e      	add	r0, sp, #56	; 0x38
 80108e2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80108e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80108ea:	2301      	movs	r3, #1
 80108ec:	3201      	adds	r2, #1
 80108ee:	461d      	mov	r5, r3
 80108f0:	e759      	b.n	80107a6 <__kernel_rem_pio2+0x1a6>
 80108f2:	a80e      	add	r0, sp, #56	; 0x38
 80108f4:	1acb      	subs	r3, r1, r3
 80108f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80108fa:	462b      	mov	r3, r5
 80108fc:	e7f6      	b.n	80108ec <__kernel_rem_pio2+0x2ec>
 80108fe:	1e62      	subs	r2, r4, #1
 8010900:	ab0e      	add	r3, sp, #56	; 0x38
 8010902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010906:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801090a:	a90e      	add	r1, sp, #56	; 0x38
 801090c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010910:	e757      	b.n	80107c2 <__kernel_rem_pio2+0x1c2>
 8010912:	bf00      	nop
 8010914:	f3af 8000 	nop.w
	...
 8010924:	3ff00000 	.word	0x3ff00000
 8010928:	08011290 	.word	0x08011290
 801092c:	40200000 	.word	0x40200000
 8010930:	3ff00000 	.word	0x3ff00000
 8010934:	3e700000 	.word	0x3e700000
 8010938:	41700000 	.word	0x41700000
 801093c:	3fe00000 	.word	0x3fe00000
 8010940:	08011250 	.word	0x08011250
 8010944:	1e62      	subs	r2, r4, #1
 8010946:	ab0e      	add	r3, sp, #56	; 0x38
 8010948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801094c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010950:	e7db      	b.n	801090a <__kernel_rem_pio2+0x30a>
 8010952:	a90e      	add	r1, sp, #56	; 0x38
 8010954:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010958:	3b01      	subs	r3, #1
 801095a:	430a      	orrs	r2, r1
 801095c:	e78b      	b.n	8010876 <__kernel_rem_pio2+0x276>
 801095e:	3301      	adds	r3, #1
 8010960:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010964:	2900      	cmp	r1, #0
 8010966:	d0fa      	beq.n	801095e <__kernel_rem_pio2+0x35e>
 8010968:	9a08      	ldr	r2, [sp, #32]
 801096a:	4422      	add	r2, r4
 801096c:	00d2      	lsls	r2, r2, #3
 801096e:	a922      	add	r1, sp, #136	; 0x88
 8010970:	18e3      	adds	r3, r4, r3
 8010972:	9206      	str	r2, [sp, #24]
 8010974:	440a      	add	r2, r1
 8010976:	9302      	str	r3, [sp, #8]
 8010978:	f10b 0108 	add.w	r1, fp, #8
 801097c:	f102 0308 	add.w	r3, r2, #8
 8010980:	1c66      	adds	r6, r4, #1
 8010982:	910a      	str	r1, [sp, #40]	; 0x28
 8010984:	2500      	movs	r5, #0
 8010986:	930d      	str	r3, [sp, #52]	; 0x34
 8010988:	9b02      	ldr	r3, [sp, #8]
 801098a:	42b3      	cmp	r3, r6
 801098c:	da04      	bge.n	8010998 <__kernel_rem_pio2+0x398>
 801098e:	461c      	mov	r4, r3
 8010990:	e6a6      	b.n	80106e0 <__kernel_rem_pio2+0xe0>
 8010992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010994:	2301      	movs	r3, #1
 8010996:	e7e3      	b.n	8010960 <__kernel_rem_pio2+0x360>
 8010998:	9b06      	ldr	r3, [sp, #24]
 801099a:	18ef      	adds	r7, r5, r3
 801099c:	ab22      	add	r3, sp, #136	; 0x88
 801099e:	441f      	add	r7, r3
 80109a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80109a6:	f7ef fd69 	bl	800047c <__aeabi_i2d>
 80109aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109ac:	461c      	mov	r4, r3
 80109ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109b0:	e9c7 0100 	strd	r0, r1, [r7]
 80109b4:	eb03 0b05 	add.w	fp, r3, r5
 80109b8:	2700      	movs	r7, #0
 80109ba:	f04f 0800 	mov.w	r8, #0
 80109be:	f04f 0900 	mov.w	r9, #0
 80109c2:	9b07      	ldr	r3, [sp, #28]
 80109c4:	429f      	cmp	r7, r3
 80109c6:	dd08      	ble.n	80109da <__kernel_rem_pio2+0x3da>
 80109c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ca:	aa72      	add	r2, sp, #456	; 0x1c8
 80109cc:	18eb      	adds	r3, r5, r3
 80109ce:	4413      	add	r3, r2
 80109d0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80109d4:	3601      	adds	r6, #1
 80109d6:	3508      	adds	r5, #8
 80109d8:	e7d6      	b.n	8010988 <__kernel_rem_pio2+0x388>
 80109da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80109de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80109e2:	f7ef fdb5 	bl	8000550 <__aeabi_dmul>
 80109e6:	4602      	mov	r2, r0
 80109e8:	460b      	mov	r3, r1
 80109ea:	4640      	mov	r0, r8
 80109ec:	4649      	mov	r1, r9
 80109ee:	f7ef fbf9 	bl	80001e4 <__adddf3>
 80109f2:	3701      	adds	r7, #1
 80109f4:	4680      	mov	r8, r0
 80109f6:	4689      	mov	r9, r1
 80109f8:	e7e3      	b.n	80109c2 <__kernel_rem_pio2+0x3c2>
 80109fa:	3d01      	subs	r5, #1
 80109fc:	e741      	b.n	8010882 <__kernel_rem_pio2+0x282>
 80109fe:	f1ca 0000 	rsb	r0, sl, #0
 8010a02:	ec47 6b10 	vmov	d0, r6, r7
 8010a06:	f000 fa87 	bl	8010f18 <scalbn>
 8010a0a:	ec57 6b10 	vmov	r6, r7, d0
 8010a0e:	2200      	movs	r2, #0
 8010a10:	4b99      	ldr	r3, [pc, #612]	; (8010c78 <__kernel_rem_pio2+0x678>)
 8010a12:	ee10 0a10 	vmov	r0, s0
 8010a16:	4639      	mov	r1, r7
 8010a18:	f7f0 f820 	bl	8000a5c <__aeabi_dcmpge>
 8010a1c:	b1f8      	cbz	r0, 8010a5e <__kernel_rem_pio2+0x45e>
 8010a1e:	2200      	movs	r2, #0
 8010a20:	4b96      	ldr	r3, [pc, #600]	; (8010c7c <__kernel_rem_pio2+0x67c>)
 8010a22:	4630      	mov	r0, r6
 8010a24:	4639      	mov	r1, r7
 8010a26:	f7ef fd93 	bl	8000550 <__aeabi_dmul>
 8010a2a:	f7f0 f841 	bl	8000ab0 <__aeabi_d2iz>
 8010a2e:	4680      	mov	r8, r0
 8010a30:	f7ef fd24 	bl	800047c <__aeabi_i2d>
 8010a34:	2200      	movs	r2, #0
 8010a36:	4b90      	ldr	r3, [pc, #576]	; (8010c78 <__kernel_rem_pio2+0x678>)
 8010a38:	f7ef fd8a 	bl	8000550 <__aeabi_dmul>
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	4602      	mov	r2, r0
 8010a40:	4639      	mov	r1, r7
 8010a42:	4630      	mov	r0, r6
 8010a44:	f7ef fbcc 	bl	80001e0 <__aeabi_dsub>
 8010a48:	f7f0 f832 	bl	8000ab0 <__aeabi_d2iz>
 8010a4c:	1c65      	adds	r5, r4, #1
 8010a4e:	ab0e      	add	r3, sp, #56	; 0x38
 8010a50:	f10a 0a18 	add.w	sl, sl, #24
 8010a54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a58:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010a5c:	e719      	b.n	8010892 <__kernel_rem_pio2+0x292>
 8010a5e:	4630      	mov	r0, r6
 8010a60:	4639      	mov	r1, r7
 8010a62:	f7f0 f825 	bl	8000ab0 <__aeabi_d2iz>
 8010a66:	ab0e      	add	r3, sp, #56	; 0x38
 8010a68:	4625      	mov	r5, r4
 8010a6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a6e:	e710      	b.n	8010892 <__kernel_rem_pio2+0x292>
 8010a70:	ab0e      	add	r3, sp, #56	; 0x38
 8010a72:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010a76:	f7ef fd01 	bl	800047c <__aeabi_i2d>
 8010a7a:	4642      	mov	r2, r8
 8010a7c:	464b      	mov	r3, r9
 8010a7e:	f7ef fd67 	bl	8000550 <__aeabi_dmul>
 8010a82:	2200      	movs	r2, #0
 8010a84:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010a88:	4b7c      	ldr	r3, [pc, #496]	; (8010c7c <__kernel_rem_pio2+0x67c>)
 8010a8a:	4640      	mov	r0, r8
 8010a8c:	4649      	mov	r1, r9
 8010a8e:	f7ef fd5f 	bl	8000550 <__aeabi_dmul>
 8010a92:	3f01      	subs	r7, #1
 8010a94:	4680      	mov	r8, r0
 8010a96:	4689      	mov	r9, r1
 8010a98:	e708      	b.n	80108ac <__kernel_rem_pio2+0x2ac>
 8010a9a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8010aa6:	f7ef fd53 	bl	8000550 <__aeabi_dmul>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	460b      	mov	r3, r1
 8010aae:	4640      	mov	r0, r8
 8010ab0:	4649      	mov	r1, r9
 8010ab2:	f7ef fb97 	bl	80001e4 <__adddf3>
 8010ab6:	3701      	adds	r7, #1
 8010ab8:	4680      	mov	r8, r0
 8010aba:	4689      	mov	r9, r1
 8010abc:	9b04      	ldr	r3, [sp, #16]
 8010abe:	429f      	cmp	r7, r3
 8010ac0:	dc01      	bgt.n	8010ac6 <__kernel_rem_pio2+0x4c6>
 8010ac2:	45ba      	cmp	sl, r7
 8010ac4:	dae9      	bge.n	8010a9a <__kernel_rem_pio2+0x49a>
 8010ac6:	ab4a      	add	r3, sp, #296	; 0x128
 8010ac8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010acc:	e9c3 8900 	strd	r8, r9, [r3]
 8010ad0:	f10a 0a01 	add.w	sl, sl, #1
 8010ad4:	3e08      	subs	r6, #8
 8010ad6:	e6f0      	b.n	80108ba <__kernel_rem_pio2+0x2ba>
 8010ad8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010ada:	2b03      	cmp	r3, #3
 8010adc:	d85b      	bhi.n	8010b96 <__kernel_rem_pio2+0x596>
 8010ade:	e8df f003 	tbb	[pc, r3]
 8010ae2:	264a      	.short	0x264a
 8010ae4:	0226      	.short	0x0226
 8010ae6:	ab9a      	add	r3, sp, #616	; 0x268
 8010ae8:	441c      	add	r4, r3
 8010aea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010aee:	46a2      	mov	sl, r4
 8010af0:	46ab      	mov	fp, r5
 8010af2:	f1bb 0f00 	cmp.w	fp, #0
 8010af6:	dc6c      	bgt.n	8010bd2 <__kernel_rem_pio2+0x5d2>
 8010af8:	46a2      	mov	sl, r4
 8010afa:	46ab      	mov	fp, r5
 8010afc:	f1bb 0f01 	cmp.w	fp, #1
 8010b00:	f300 8086 	bgt.w	8010c10 <__kernel_rem_pio2+0x610>
 8010b04:	2000      	movs	r0, #0
 8010b06:	2100      	movs	r1, #0
 8010b08:	2d01      	cmp	r5, #1
 8010b0a:	f300 80a0 	bgt.w	8010c4e <__kernel_rem_pio2+0x64e>
 8010b0e:	9b02      	ldr	r3, [sp, #8]
 8010b10:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010b14:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	f040 809e 	bne.w	8010c5a <__kernel_rem_pio2+0x65a>
 8010b1e:	9b01      	ldr	r3, [sp, #4]
 8010b20:	e9c3 7800 	strd	r7, r8, [r3]
 8010b24:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010b28:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010b2c:	e033      	b.n	8010b96 <__kernel_rem_pio2+0x596>
 8010b2e:	3408      	adds	r4, #8
 8010b30:	ab4a      	add	r3, sp, #296	; 0x128
 8010b32:	441c      	add	r4, r3
 8010b34:	462e      	mov	r6, r5
 8010b36:	2000      	movs	r0, #0
 8010b38:	2100      	movs	r1, #0
 8010b3a:	2e00      	cmp	r6, #0
 8010b3c:	da3a      	bge.n	8010bb4 <__kernel_rem_pio2+0x5b4>
 8010b3e:	9b02      	ldr	r3, [sp, #8]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d03d      	beq.n	8010bc0 <__kernel_rem_pio2+0x5c0>
 8010b44:	4602      	mov	r2, r0
 8010b46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b4a:	9c01      	ldr	r4, [sp, #4]
 8010b4c:	e9c4 2300 	strd	r2, r3, [r4]
 8010b50:	4602      	mov	r2, r0
 8010b52:	460b      	mov	r3, r1
 8010b54:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010b58:	f7ef fb42 	bl	80001e0 <__aeabi_dsub>
 8010b5c:	ae4c      	add	r6, sp, #304	; 0x130
 8010b5e:	2401      	movs	r4, #1
 8010b60:	42a5      	cmp	r5, r4
 8010b62:	da30      	bge.n	8010bc6 <__kernel_rem_pio2+0x5c6>
 8010b64:	9b02      	ldr	r3, [sp, #8]
 8010b66:	b113      	cbz	r3, 8010b6e <__kernel_rem_pio2+0x56e>
 8010b68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	9b01      	ldr	r3, [sp, #4]
 8010b70:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010b74:	e00f      	b.n	8010b96 <__kernel_rem_pio2+0x596>
 8010b76:	ab9a      	add	r3, sp, #616	; 0x268
 8010b78:	441c      	add	r4, r3
 8010b7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010b7e:	2000      	movs	r0, #0
 8010b80:	2100      	movs	r1, #0
 8010b82:	2d00      	cmp	r5, #0
 8010b84:	da10      	bge.n	8010ba8 <__kernel_rem_pio2+0x5a8>
 8010b86:	9b02      	ldr	r3, [sp, #8]
 8010b88:	b113      	cbz	r3, 8010b90 <__kernel_rem_pio2+0x590>
 8010b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b8e:	4619      	mov	r1, r3
 8010b90:	9b01      	ldr	r3, [sp, #4]
 8010b92:	e9c3 0100 	strd	r0, r1, [r3]
 8010b96:	9b06      	ldr	r3, [sp, #24]
 8010b98:	f003 0007 	and.w	r0, r3, #7
 8010b9c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010ba0:	ecbd 8b02 	vpop	{d8}
 8010ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010bac:	f7ef fb1a 	bl	80001e4 <__adddf3>
 8010bb0:	3d01      	subs	r5, #1
 8010bb2:	e7e6      	b.n	8010b82 <__kernel_rem_pio2+0x582>
 8010bb4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010bb8:	f7ef fb14 	bl	80001e4 <__adddf3>
 8010bbc:	3e01      	subs	r6, #1
 8010bbe:	e7bc      	b.n	8010b3a <__kernel_rem_pio2+0x53a>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	e7c1      	b.n	8010b4a <__kernel_rem_pio2+0x54a>
 8010bc6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010bca:	f7ef fb0b 	bl	80001e4 <__adddf3>
 8010bce:	3401      	adds	r4, #1
 8010bd0:	e7c6      	b.n	8010b60 <__kernel_rem_pio2+0x560>
 8010bd2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8010bd6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010bda:	4640      	mov	r0, r8
 8010bdc:	ec53 2b17 	vmov	r2, r3, d7
 8010be0:	4649      	mov	r1, r9
 8010be2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010be6:	f7ef fafd 	bl	80001e4 <__adddf3>
 8010bea:	4602      	mov	r2, r0
 8010bec:	460b      	mov	r3, r1
 8010bee:	4606      	mov	r6, r0
 8010bf0:	460f      	mov	r7, r1
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	4649      	mov	r1, r9
 8010bf6:	f7ef faf3 	bl	80001e0 <__aeabi_dsub>
 8010bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bfe:	f7ef faf1 	bl	80001e4 <__adddf3>
 8010c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010c06:	e9ca 0100 	strd	r0, r1, [sl]
 8010c0a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8010c0e:	e770      	b.n	8010af2 <__kernel_rem_pio2+0x4f2>
 8010c10:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8010c14:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010c18:	4630      	mov	r0, r6
 8010c1a:	ec53 2b17 	vmov	r2, r3, d7
 8010c1e:	4639      	mov	r1, r7
 8010c20:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010c24:	f7ef fade 	bl	80001e4 <__adddf3>
 8010c28:	4602      	mov	r2, r0
 8010c2a:	460b      	mov	r3, r1
 8010c2c:	4680      	mov	r8, r0
 8010c2e:	4689      	mov	r9, r1
 8010c30:	4630      	mov	r0, r6
 8010c32:	4639      	mov	r1, r7
 8010c34:	f7ef fad4 	bl	80001e0 <__aeabi_dsub>
 8010c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c3c:	f7ef fad2 	bl	80001e4 <__adddf3>
 8010c40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010c44:	e9ca 0100 	strd	r0, r1, [sl]
 8010c48:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8010c4c:	e756      	b.n	8010afc <__kernel_rem_pio2+0x4fc>
 8010c4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c52:	f7ef fac7 	bl	80001e4 <__adddf3>
 8010c56:	3d01      	subs	r5, #1
 8010c58:	e756      	b.n	8010b08 <__kernel_rem_pio2+0x508>
 8010c5a:	9b01      	ldr	r3, [sp, #4]
 8010c5c:	9a01      	ldr	r2, [sp, #4]
 8010c5e:	601f      	str	r7, [r3, #0]
 8010c60:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010c64:	605c      	str	r4, [r3, #4]
 8010c66:	609d      	str	r5, [r3, #8]
 8010c68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010c6c:	60d3      	str	r3, [r2, #12]
 8010c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c72:	6110      	str	r0, [r2, #16]
 8010c74:	6153      	str	r3, [r2, #20]
 8010c76:	e78e      	b.n	8010b96 <__kernel_rem_pio2+0x596>
 8010c78:	41700000 	.word	0x41700000
 8010c7c:	3e700000 	.word	0x3e700000

08010c80 <__kernel_sin>:
 8010c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c84:	ec55 4b10 	vmov	r4, r5, d0
 8010c88:	b085      	sub	sp, #20
 8010c8a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010c8e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010c92:	ed8d 1b00 	vstr	d1, [sp]
 8010c96:	9002      	str	r0, [sp, #8]
 8010c98:	da06      	bge.n	8010ca8 <__kernel_sin+0x28>
 8010c9a:	ee10 0a10 	vmov	r0, s0
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	f7ef ff06 	bl	8000ab0 <__aeabi_d2iz>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	d051      	beq.n	8010d4c <__kernel_sin+0xcc>
 8010ca8:	4622      	mov	r2, r4
 8010caa:	462b      	mov	r3, r5
 8010cac:	4620      	mov	r0, r4
 8010cae:	4629      	mov	r1, r5
 8010cb0:	f7ef fc4e 	bl	8000550 <__aeabi_dmul>
 8010cb4:	4682      	mov	sl, r0
 8010cb6:	468b      	mov	fp, r1
 8010cb8:	4602      	mov	r2, r0
 8010cba:	460b      	mov	r3, r1
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f7ef fc46 	bl	8000550 <__aeabi_dmul>
 8010cc4:	a341      	add	r3, pc, #260	; (adr r3, 8010dcc <__kernel_sin+0x14c>)
 8010cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cca:	4680      	mov	r8, r0
 8010ccc:	4689      	mov	r9, r1
 8010cce:	4650      	mov	r0, sl
 8010cd0:	4659      	mov	r1, fp
 8010cd2:	f7ef fc3d 	bl	8000550 <__aeabi_dmul>
 8010cd6:	a33f      	add	r3, pc, #252	; (adr r3, 8010dd4 <__kernel_sin+0x154>)
 8010cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cdc:	f7ef fa80 	bl	80001e0 <__aeabi_dsub>
 8010ce0:	4652      	mov	r2, sl
 8010ce2:	465b      	mov	r3, fp
 8010ce4:	f7ef fc34 	bl	8000550 <__aeabi_dmul>
 8010ce8:	a33c      	add	r3, pc, #240	; (adr r3, 8010ddc <__kernel_sin+0x15c>)
 8010cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cee:	f7ef fa79 	bl	80001e4 <__adddf3>
 8010cf2:	4652      	mov	r2, sl
 8010cf4:	465b      	mov	r3, fp
 8010cf6:	f7ef fc2b 	bl	8000550 <__aeabi_dmul>
 8010cfa:	a33a      	add	r3, pc, #232	; (adr r3, 8010de4 <__kernel_sin+0x164>)
 8010cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d00:	f7ef fa6e 	bl	80001e0 <__aeabi_dsub>
 8010d04:	4652      	mov	r2, sl
 8010d06:	465b      	mov	r3, fp
 8010d08:	f7ef fc22 	bl	8000550 <__aeabi_dmul>
 8010d0c:	a337      	add	r3, pc, #220	; (adr r3, 8010dec <__kernel_sin+0x16c>)
 8010d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d12:	f7ef fa67 	bl	80001e4 <__adddf3>
 8010d16:	9b02      	ldr	r3, [sp, #8]
 8010d18:	4606      	mov	r6, r0
 8010d1a:	460f      	mov	r7, r1
 8010d1c:	b9db      	cbnz	r3, 8010d56 <__kernel_sin+0xd6>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	460b      	mov	r3, r1
 8010d22:	4650      	mov	r0, sl
 8010d24:	4659      	mov	r1, fp
 8010d26:	f7ef fc13 	bl	8000550 <__aeabi_dmul>
 8010d2a:	a325      	add	r3, pc, #148	; (adr r3, 8010dc0 <__kernel_sin+0x140>)
 8010d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d30:	f7ef fa56 	bl	80001e0 <__aeabi_dsub>
 8010d34:	4642      	mov	r2, r8
 8010d36:	464b      	mov	r3, r9
 8010d38:	f7ef fc0a 	bl	8000550 <__aeabi_dmul>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	460b      	mov	r3, r1
 8010d40:	4620      	mov	r0, r4
 8010d42:	4629      	mov	r1, r5
 8010d44:	f7ef fa4e 	bl	80001e4 <__adddf3>
 8010d48:	4604      	mov	r4, r0
 8010d4a:	460d      	mov	r5, r1
 8010d4c:	ec45 4b10 	vmov	d0, r4, r5
 8010d50:	b005      	add	sp, #20
 8010d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d56:	2200      	movs	r2, #0
 8010d58:	4b1b      	ldr	r3, [pc, #108]	; (8010dc8 <__kernel_sin+0x148>)
 8010d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d5e:	f7ef fbf7 	bl	8000550 <__aeabi_dmul>
 8010d62:	4632      	mov	r2, r6
 8010d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d68:	463b      	mov	r3, r7
 8010d6a:	4640      	mov	r0, r8
 8010d6c:	4649      	mov	r1, r9
 8010d6e:	f7ef fbef 	bl	8000550 <__aeabi_dmul>
 8010d72:	4602      	mov	r2, r0
 8010d74:	460b      	mov	r3, r1
 8010d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d7a:	f7ef fa31 	bl	80001e0 <__aeabi_dsub>
 8010d7e:	4652      	mov	r2, sl
 8010d80:	465b      	mov	r3, fp
 8010d82:	f7ef fbe5 	bl	8000550 <__aeabi_dmul>
 8010d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d8a:	f7ef fa29 	bl	80001e0 <__aeabi_dsub>
 8010d8e:	a30c      	add	r3, pc, #48	; (adr r3, 8010dc0 <__kernel_sin+0x140>)
 8010d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d94:	4606      	mov	r6, r0
 8010d96:	460f      	mov	r7, r1
 8010d98:	4640      	mov	r0, r8
 8010d9a:	4649      	mov	r1, r9
 8010d9c:	f7ef fbd8 	bl	8000550 <__aeabi_dmul>
 8010da0:	4602      	mov	r2, r0
 8010da2:	460b      	mov	r3, r1
 8010da4:	4630      	mov	r0, r6
 8010da6:	4639      	mov	r1, r7
 8010da8:	f7ef fa1c 	bl	80001e4 <__adddf3>
 8010dac:	4602      	mov	r2, r0
 8010dae:	460b      	mov	r3, r1
 8010db0:	4620      	mov	r0, r4
 8010db2:	4629      	mov	r1, r5
 8010db4:	f7ef fa14 	bl	80001e0 <__aeabi_dsub>
 8010db8:	e7c6      	b.n	8010d48 <__kernel_sin+0xc8>
 8010dba:	bf00      	nop
 8010dbc:	f3af 8000 	nop.w
 8010dc0:	55555549 	.word	0x55555549
 8010dc4:	3fc55555 	.word	0x3fc55555
 8010dc8:	3fe00000 	.word	0x3fe00000
 8010dcc:	5acfd57c 	.word	0x5acfd57c
 8010dd0:	3de5d93a 	.word	0x3de5d93a
 8010dd4:	8a2b9ceb 	.word	0x8a2b9ceb
 8010dd8:	3e5ae5e6 	.word	0x3e5ae5e6
 8010ddc:	57b1fe7d 	.word	0x57b1fe7d
 8010de0:	3ec71de3 	.word	0x3ec71de3
 8010de4:	19c161d5 	.word	0x19c161d5
 8010de8:	3f2a01a0 	.word	0x3f2a01a0
 8010dec:	1110f8a6 	.word	0x1110f8a6
 8010df0:	3f811111 	.word	0x3f811111

08010df4 <fabs>:
 8010df4:	ec51 0b10 	vmov	r0, r1, d0
 8010df8:	ee10 2a10 	vmov	r2, s0
 8010dfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010e00:	ec43 2b10 	vmov	d0, r2, r3
 8010e04:	4770      	bx	lr
	...

08010e08 <floor>:
 8010e08:	ec51 0b10 	vmov	r0, r1, d0
 8010e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010e14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010e18:	2e13      	cmp	r6, #19
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	ee10 5a10 	vmov	r5, s0
 8010e20:	4680      	mov	r8, r0
 8010e22:	dc34      	bgt.n	8010e8e <floor+0x86>
 8010e24:	2e00      	cmp	r6, #0
 8010e26:	da16      	bge.n	8010e56 <floor+0x4e>
 8010e28:	a335      	add	r3, pc, #212	; (adr r3, 8010f00 <floor+0xf8>)
 8010e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2e:	f7ef f9d9 	bl	80001e4 <__adddf3>
 8010e32:	2200      	movs	r2, #0
 8010e34:	2300      	movs	r3, #0
 8010e36:	f7ef fe1b 	bl	8000a70 <__aeabi_dcmpgt>
 8010e3a:	b148      	cbz	r0, 8010e50 <floor+0x48>
 8010e3c:	2c00      	cmp	r4, #0
 8010e3e:	da59      	bge.n	8010ef4 <floor+0xec>
 8010e40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010e44:	4a30      	ldr	r2, [pc, #192]	; (8010f08 <floor+0x100>)
 8010e46:	432b      	orrs	r3, r5
 8010e48:	2500      	movs	r5, #0
 8010e4a:	42ab      	cmp	r3, r5
 8010e4c:	bf18      	it	ne
 8010e4e:	4614      	movne	r4, r2
 8010e50:	4621      	mov	r1, r4
 8010e52:	4628      	mov	r0, r5
 8010e54:	e025      	b.n	8010ea2 <floor+0x9a>
 8010e56:	4f2d      	ldr	r7, [pc, #180]	; (8010f0c <floor+0x104>)
 8010e58:	4137      	asrs	r7, r6
 8010e5a:	ea01 0307 	and.w	r3, r1, r7
 8010e5e:	4303      	orrs	r3, r0
 8010e60:	d01f      	beq.n	8010ea2 <floor+0x9a>
 8010e62:	a327      	add	r3, pc, #156	; (adr r3, 8010f00 <floor+0xf8>)
 8010e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e68:	f7ef f9bc 	bl	80001e4 <__adddf3>
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	2300      	movs	r3, #0
 8010e70:	f7ef fdfe 	bl	8000a70 <__aeabi_dcmpgt>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	d0eb      	beq.n	8010e50 <floor+0x48>
 8010e78:	2c00      	cmp	r4, #0
 8010e7a:	bfbe      	ittt	lt
 8010e7c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010e80:	fa43 f606 	asrlt.w	r6, r3, r6
 8010e84:	19a4      	addlt	r4, r4, r6
 8010e86:	ea24 0407 	bic.w	r4, r4, r7
 8010e8a:	2500      	movs	r5, #0
 8010e8c:	e7e0      	b.n	8010e50 <floor+0x48>
 8010e8e:	2e33      	cmp	r6, #51	; 0x33
 8010e90:	dd0b      	ble.n	8010eaa <floor+0xa2>
 8010e92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010e96:	d104      	bne.n	8010ea2 <floor+0x9a>
 8010e98:	ee10 2a10 	vmov	r2, s0
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	f7ef f9a1 	bl	80001e4 <__adddf3>
 8010ea2:	ec41 0b10 	vmov	d0, r0, r1
 8010ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eaa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010eae:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb2:	fa23 f707 	lsr.w	r7, r3, r7
 8010eb6:	4207      	tst	r7, r0
 8010eb8:	d0f3      	beq.n	8010ea2 <floor+0x9a>
 8010eba:	a311      	add	r3, pc, #68	; (adr r3, 8010f00 <floor+0xf8>)
 8010ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec0:	f7ef f990 	bl	80001e4 <__adddf3>
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	f7ef fdd2 	bl	8000a70 <__aeabi_dcmpgt>
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	d0bf      	beq.n	8010e50 <floor+0x48>
 8010ed0:	2c00      	cmp	r4, #0
 8010ed2:	da02      	bge.n	8010eda <floor+0xd2>
 8010ed4:	2e14      	cmp	r6, #20
 8010ed6:	d103      	bne.n	8010ee0 <floor+0xd8>
 8010ed8:	3401      	adds	r4, #1
 8010eda:	ea25 0507 	bic.w	r5, r5, r7
 8010ede:	e7b7      	b.n	8010e50 <floor+0x48>
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010ee6:	fa03 f606 	lsl.w	r6, r3, r6
 8010eea:	4435      	add	r5, r6
 8010eec:	4545      	cmp	r5, r8
 8010eee:	bf38      	it	cc
 8010ef0:	18e4      	addcc	r4, r4, r3
 8010ef2:	e7f2      	b.n	8010eda <floor+0xd2>
 8010ef4:	2500      	movs	r5, #0
 8010ef6:	462c      	mov	r4, r5
 8010ef8:	e7aa      	b.n	8010e50 <floor+0x48>
 8010efa:	bf00      	nop
 8010efc:	f3af 8000 	nop.w
 8010f00:	8800759c 	.word	0x8800759c
 8010f04:	7e37e43c 	.word	0x7e37e43c
 8010f08:	bff00000 	.word	0xbff00000
 8010f0c:	000fffff 	.word	0x000fffff

08010f10 <matherr>:
 8010f10:	2000      	movs	r0, #0
 8010f12:	4770      	bx	lr
 8010f14:	0000      	movs	r0, r0
	...

08010f18 <scalbn>:
 8010f18:	b570      	push	{r4, r5, r6, lr}
 8010f1a:	ec55 4b10 	vmov	r4, r5, d0
 8010f1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010f22:	4606      	mov	r6, r0
 8010f24:	462b      	mov	r3, r5
 8010f26:	b9aa      	cbnz	r2, 8010f54 <scalbn+0x3c>
 8010f28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010f2c:	4323      	orrs	r3, r4
 8010f2e:	d03b      	beq.n	8010fa8 <scalbn+0x90>
 8010f30:	4b31      	ldr	r3, [pc, #196]	; (8010ff8 <scalbn+0xe0>)
 8010f32:	4629      	mov	r1, r5
 8010f34:	2200      	movs	r2, #0
 8010f36:	ee10 0a10 	vmov	r0, s0
 8010f3a:	f7ef fb09 	bl	8000550 <__aeabi_dmul>
 8010f3e:	4b2f      	ldr	r3, [pc, #188]	; (8010ffc <scalbn+0xe4>)
 8010f40:	429e      	cmp	r6, r3
 8010f42:	4604      	mov	r4, r0
 8010f44:	460d      	mov	r5, r1
 8010f46:	da12      	bge.n	8010f6e <scalbn+0x56>
 8010f48:	a327      	add	r3, pc, #156	; (adr r3, 8010fe8 <scalbn+0xd0>)
 8010f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4e:	f7ef faff 	bl	8000550 <__aeabi_dmul>
 8010f52:	e009      	b.n	8010f68 <scalbn+0x50>
 8010f54:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010f58:	428a      	cmp	r2, r1
 8010f5a:	d10c      	bne.n	8010f76 <scalbn+0x5e>
 8010f5c:	ee10 2a10 	vmov	r2, s0
 8010f60:	4620      	mov	r0, r4
 8010f62:	4629      	mov	r1, r5
 8010f64:	f7ef f93e 	bl	80001e4 <__adddf3>
 8010f68:	4604      	mov	r4, r0
 8010f6a:	460d      	mov	r5, r1
 8010f6c:	e01c      	b.n	8010fa8 <scalbn+0x90>
 8010f6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010f72:	460b      	mov	r3, r1
 8010f74:	3a36      	subs	r2, #54	; 0x36
 8010f76:	4432      	add	r2, r6
 8010f78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010f7c:	428a      	cmp	r2, r1
 8010f7e:	dd0b      	ble.n	8010f98 <scalbn+0x80>
 8010f80:	ec45 4b11 	vmov	d1, r4, r5
 8010f84:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010ff0 <scalbn+0xd8>
 8010f88:	f000 f83c 	bl	8011004 <copysign>
 8010f8c:	a318      	add	r3, pc, #96	; (adr r3, 8010ff0 <scalbn+0xd8>)
 8010f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f92:	ec51 0b10 	vmov	r0, r1, d0
 8010f96:	e7da      	b.n	8010f4e <scalbn+0x36>
 8010f98:	2a00      	cmp	r2, #0
 8010f9a:	dd08      	ble.n	8010fae <scalbn+0x96>
 8010f9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010fa0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010fa4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010fa8:	ec45 4b10 	vmov	d0, r4, r5
 8010fac:	bd70      	pop	{r4, r5, r6, pc}
 8010fae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010fb2:	da0d      	bge.n	8010fd0 <scalbn+0xb8>
 8010fb4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010fb8:	429e      	cmp	r6, r3
 8010fba:	ec45 4b11 	vmov	d1, r4, r5
 8010fbe:	dce1      	bgt.n	8010f84 <scalbn+0x6c>
 8010fc0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8010fe8 <scalbn+0xd0>
 8010fc4:	f000 f81e 	bl	8011004 <copysign>
 8010fc8:	a307      	add	r3, pc, #28	; (adr r3, 8010fe8 <scalbn+0xd0>)
 8010fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fce:	e7e0      	b.n	8010f92 <scalbn+0x7a>
 8010fd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010fd4:	3236      	adds	r2, #54	; 0x36
 8010fd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010fda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010fde:	4620      	mov	r0, r4
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	4b06      	ldr	r3, [pc, #24]	; (8011000 <scalbn+0xe8>)
 8010fe6:	e7b2      	b.n	8010f4e <scalbn+0x36>
 8010fe8:	c2f8f359 	.word	0xc2f8f359
 8010fec:	01a56e1f 	.word	0x01a56e1f
 8010ff0:	8800759c 	.word	0x8800759c
 8010ff4:	7e37e43c 	.word	0x7e37e43c
 8010ff8:	43500000 	.word	0x43500000
 8010ffc:	ffff3cb0 	.word	0xffff3cb0
 8011000:	3c900000 	.word	0x3c900000

08011004 <copysign>:
 8011004:	ec51 0b10 	vmov	r0, r1, d0
 8011008:	ee11 0a90 	vmov	r0, s3
 801100c:	ee10 2a10 	vmov	r2, s0
 8011010:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011014:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011018:	ea41 0300 	orr.w	r3, r1, r0
 801101c:	ec43 2b10 	vmov	d0, r2, r3
 8011020:	4770      	bx	lr
	...

08011024 <_init>:
 8011024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011026:	bf00      	nop
 8011028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801102a:	bc08      	pop	{r3}
 801102c:	469e      	mov	lr, r3
 801102e:	4770      	bx	lr

08011030 <_fini>:
 8011030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011032:	bf00      	nop
 8011034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011036:	bc08      	pop	{r3}
 8011038:	469e      	mov	lr, r3
 801103a:	4770      	bx	lr
